CREATE OR REPLACE PACKAGE txpks_batch
 /*----------------------------------------------------------------------------------------------------
     ** Module   : COMMODITY SYSTEM
     ** and is copyrighted by FSS.
     **
     **    All rights reserved.  No part of this work may be reproduced, stored in a retrieval system,
     **    adopted or transmitted in any form or by any means, electronic, mechanical, photographic,
     **    graphic, optic recording or otherwise, translated in any language or computer language,
     **    without the prior written permission of Financial Software Solutions. JSC.
     **

     **  MODIFICATION HISTORY
     **  Person      Date           Comments
     **  Fsser      09-JUNE-2009   dbms_output.put_line(''); Created
     ** (c) 2008 by Financial Software Solutions. JSC.
     ----------------------------------------------------------------------------------------------------*/
 IS

  PROCEDURE pr_SimpleTradingFeeCalculate(p_err_code  OUT varchar2);
  PROCEDURE pr_OrderCleanUp(p_err_code  OUT varchar2);
  PROCEDURE pr_OrderFinish(p_err_code  OUT varchar2);
  FUNCTION fn_SettlementOrder(p_txmsg in tx.msg_rectype,p_err_code out varchar2)
RETURN NUMBER;
  PROCEDURE pr_OrderBackUp(p_err_code  OUT varchar2);
  PROCEDURE pr_SimpleCreditInterestAccure(p_err_code  OUT varchar2);
  PROCEDURE pr_SimpleOvdtInterestAccure(p_err_code  OUT varchar2);
  PROCEDURE pr_T2OverdraftInterestAccure(p_err_code  OUT varchar2);
  PROCEDURE pr_T0OverdraftCalculate(p_err_code  OUT varchar2);
  PROCEDURE pr_LNNormalInterestAccrue(p_err_code  OUT varchar2);
  PROCEDURE pr_LNCalMaturityPrincipal(p_err_code  OUT varchar2);
  PROCEDURE pr_LNCleanSchedule(p_err_code  OUT varchar2);
  PROCEDURE pr_LNOpenLoanAccount(p_err_code  OUT varchar2);
  PROCEDURE pr_LNAccrueInterest(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_LNMoveIntToOverdue(p_bchmdl varchar,p_err_code  OUT varchar2);
  FUNCTION fn_AdjustPaymentSchedule(p_txmsg in tx.msg_rectype,p_err_code out varchar2)
RETURN NUMBER;
  PROCEDURE pr_LNMovePrinToOverdue(p_bchmdl varchar,p_err_code  OUT varchar2);
  --PROCEDURE pr_LNAutoDrawndown(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_LNAutoDrawndown_Margin(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_LNDrawndown_UyBan(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_LNAutoDrawndown_T0(p_bchmdl varchar,p_err_code  OUT varchar2);
  FUNCTION fn_DrawndownProcess(p_txmsg in tx.msg_rectype,p_err_code out varchar2)
RETURN NUMBER;
  PROCEDURE pr_LNAutoPayment(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_LNAdvPayment(p_bchmdl varchar,p_err_code  OUT varchar2);

  FUNCTION fn_LoanPaymentScheduleAllocate(p_txmsg in tx.msg_rectype,p_err_code out varchar2)
RETURN NUMBER;
  PROCEDURE pr_ciExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_lnExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_odExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_ODSettlementReceiveMoney(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_ODSettlementReceiveSec(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_ODSettlementtransferMoney(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_ODSettlementtransferMoneyCB(p_err_code  OUT varchar2);
  PROCEDURE pr_ODSettlementtransferSec(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_TransferBuyFee(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_TransferBuyFeeCB(p_err_code  OUT varchar2);
  PROCEDURE pr_TransferSellFee(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_ODSurelyStstransferMoney(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_dfExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);

  PROCEDURE pr_DFDealFeeAccrue(p_err_code  OUT varchar2);
  PROCEDURE pr_DFDealDrawndown(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_DFCleanDeal(p_err_code  OUT varchar2);
  PROCEDURE pr_DFPayment(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_ODDayReleaseAdvanced(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_ODReleaseBlockAdvanced(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_DealReceive(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_DFDealTransferSec(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_SECostPriceCalculate(p_err_code  OUT varchar2);
  PROCEDURE pr_seExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_CIAutoAdvance(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_CIAutoAdvanceAFSM(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_saExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_SABackupData(p_err_code  OUT varchar2);
  PROCEDURE pr_SAChangeWorkingDate(p_err_code  OUT varchar2);
  PROCEDURE pr_SASynOnlineData(p_err_code  OUT varchar2);
  PROCEDURE pr_DFDueAutoPayment(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_ODDealAllocate(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_ODExtentionAccount(p_err_code  OUT varchar2);
  PROCEDURE pr_DFAutoAdvToPayment(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_cfExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_CFPaidSellVAT(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_CFDayTradingFeeCal(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_CIDebtAutoPayment(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_SAGeneralWorking(p_err_code  OUT varchar2);
  PROCEDURE pr_batch(p_apptype varchar2, p_bchmdl varchar,p_err_code  OUT varchar2,p_lastRun OUT VARCHAR2);
  PROCEDURE pr_CICalcFeeDepositSecurities(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_CICalcFeeDeposit(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_CICalcFeeDepositBond(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_CIPayFeeDepositSeBo(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_CalcFeeOnOdtype(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_CalcFeeOnOdtypeCoreBank(p_err_code  OUT varchar2);
  PROCEDURE pr_caExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_CaWatingfortrade(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_tdExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_TDEOTD(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_TDRNA(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_TDAW(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_SAOnlineSynData(p_err_code  OUT varchar2);
  PROCEDURE pr_CIInterestToPrincipal(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_ODFeeCalculate(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_SABeforeBatch(p_err_code  OUT varchar2);
  PROCEDURE pr_SAAfterBatch(p_err_code  OUT varchar2);
  PROCEDURE pr_ICCFCreditInterestAccure(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);

  PROCEDURE pr_LNAdvPaymentAftSendMoney(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_MRAssetMarked(p_err_code  OUT varchar2);
  PROCEDURE pr_CILateSendMoney(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_CILateSendMoneyCB(p_err_code  OUT varchar2);

  PROCEDURE pr_CIT0SendMoney(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_CIT0SendMoneyCB(p_err_code  OUT varchar2);

  PROCEDURE pr_reCALREVENUE(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_reCALFEECOMM(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_reCHANGECFSTS(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_reExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);

  PROCEDURE pr_rmExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_rmBAMTTRF(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_rmBFEETRF(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_rmSAMTTRF(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_rmSFEETRF(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_rmSFDTRF(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_rmRMEXCA3384(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_rmRMEXCA3386(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_rmRMEXCA3350(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_rmRMEXCA3350DF(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_rmRMEX8879(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_rmRMEX8879DF(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_rmRMEXSEDPFEE(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_rmRMEODRPT(p_bchmdl varchar,p_err_code  OUT varchar2);
    PROCEDURE pr_rmMSBAUTOTRANS(p_bchmdl varchar,p_err_code  OUT varchar2);

  PROCEDURE pr_DFAutoMarginLoanDrawnDown(p_bchmdl varchar,p_err_code  OUT varchar2);

  PROCEDURE pr_SAAfterInDayProcess(p_err_code  OUT varchar2);

  PROCEDURE pr_MRAssetMarked_Step01(p_err_code  OUT varchar2);
  PROCEDURE pr_SABEGINBATCH(p_err_code  OUT varchar2);
  PROCEDURE pr_ODSettlementReceiveSec_TP(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
  PROCEDURE pr_DealReceive_TP(p_bchmdl varchar,p_err_code  OUT varchar2);
  PROCEDURE pr_ICCFCreditInterestAccure2(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);

    --T2_HoangND add Insert temp procedure
    PROCEDURE pr_ODSltReceiveMoney_temp(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
    PROCEDURE pr_TransferSellFee_temp(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
    PROCEDURE pr_ODSettlementReceiveSec_temp(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
    PROCEDURE pr_ODDayReleaseAdvanced_temp(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);
    PROCEDURE pr_DealReceive_temp(p_bchmdl varchar,p_err_code  OUT varchar2);
    --PROCEDURE pr_DFBlockRcvAmt_temp(p_bchmdl varchar,p_err_code  OUT varchar2);
    PROCEDURE pr_CFPaidSellVAT_temp(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2);

END;
/
CREATE OR REPLACE PACKAGE BODY txpks_batch IS
  pkgctx plog.log_ctx;
  logrow tlogdebug%ROWTYPE;
-------------------------------------pr_batch--------------------------------------------
  PROCEDURE pr_batch(p_apptype varchar2, p_bchmdl varchar,p_err_code  OUT varchar2,p_lastRun OUT VARCHAR2)
  IS
    l_count NUMBER(10,0);
    l_CurrExecRow  NUMBER(10,0);
    l_RowPerPage NUMBER(10,0);
    l_action varchar2(50);
    l_CurrRow  NUMBER(10,0);
    l_FromRow   varchar2(20);
    l_ToRow   varchar2(20);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_batch');
    p_lastRun:='Y';
    --Lay ra trang se thuc hien tiep
    begin
        SELECT B.ROWPERPAGE,A.BCHSUCPAGE,B.ACTION
        Into l_RowPerPage,l_CurrExecRow, l_action
        FROM SBBATCHSTS A, SBBATCHCTL B
        WHERE A.BCHMDL = B.BCHMDL AND A.BCHSTS = ' ' AND A.BCHMDL=p_bchmdl ORDER BY B.BCHSQN;
    exception
    when others then
        p_err_code := errnums.C_SYSTEM_ERROR;
        return;
    end;
    IF l_RowPerPage>0 THEN
        l_CurrRow:=l_CurrExecRow + l_RowPerPage;
        l_FromRow:=l_CurrExecRow;
        l_ToRow:=l_CurrExecRow + l_RowPerPage-1;

        plog.debug(pkgctx,'Begin Run batch for ' || p_bchmdl || 'from row ' || l_FromRow || ' to row ' || l_ToRow);
    ELSE
        l_FromRow:=0;
        l_ToRow:=9000000000;
        plog.debug(pkgctx,'Begin Run batch for ' || p_bchmdl);
    END IF;

    --kIEM TRA XEM HOST CO O TRANG THAI ACTIVE HAY KHONG
    SELECT count(*) INTO l_count
    FROM SYSVAR
    WHERE GRNAME='SYSTEM'
    AND VARNAME='HOSTATUS'
    AND VARVALUE= systemnums.C_OPERATION_INACTIVE;
    IF l_count = 0 and l_action <> 'BF' THEN
        p_err_code:= errnums.C_HOST_OPERATION_STILL_ACTIVE;
        RETURN;
    END IF;
    if p_apptype='OD' then
        pr_odExecuteRouter (p_bchmdl ,p_err_code,l_FromRow,l_ToRow,p_lastRun);
    elsif p_apptype='CI' then
        pr_ciExecuteRouter (p_bchmdl ,p_err_code,l_FromRow,l_ToRow,p_lastRun);
    elsif p_apptype='SE' then
        pr_seExecuteRouter (p_bchmdl ,p_err_code,l_FromRow,l_ToRow,p_lastRun);
    elsif p_apptype='LN' then
        pr_lnExecuteRouter (p_bchmdl ,p_err_code,l_FromRow,l_ToRow,p_lastRun);
    elsif p_apptype='DF' then
        pr_dfExecuteRouter (p_bchmdl ,p_err_code,l_FromRow,l_ToRow,p_lastRun);
    elsif p_apptype='SA' then
        pr_saExecuteRouter (p_bchmdl ,p_err_code,l_FromRow,l_ToRow,p_lastRun);
    elsif p_apptype='CF' then
        pr_cfExecuteRouter (p_bchmdl ,p_err_code,l_FromRow,l_ToRow,p_lastRun);
    elsif p_apptype='CA' then
        pr_caExecuteRouter (p_bchmdl ,p_err_code,l_FromRow,l_ToRow,p_lastRun);
    elsif p_apptype='TD' then
        pr_tdExecuteRouter (p_bchmdl ,p_err_code,l_FromRow,l_ToRow,p_lastRun);
     elsif p_apptype='RE' then
        pr_reExecuteRouter (p_bchmdl ,p_err_code,l_FromRow,l_ToRow,p_lastRun);
     --TungNT added , for RM
     elsif p_apptype='RM' then
        pr_rmExecuteRouter (p_bchmdl ,p_err_code,l_FromRow,l_ToRow,p_lastRun);
     --End
    end if;

    --TungNT added, them phan gen bang ke
  /*  if p_err_code = 0 then
        cspks_rmproc.pr_createcrbtxreq(p_err_code);
    end if;*/
    --End

    if p_err_code <> 0 then
        return;
    end if;
    if l_RowPerPage<=0 Then
        plog.Debug(pkgctx,'End Run batch for ' || p_bchmdl);
        UPDATE SBBATCHSTS SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1 WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
    else
        If p_lastRun='Y' Then
            plog.Debug(pkgctx,'End Run batch for ' || p_bchmdl || 'from row ' || l_FromRow || ' to last row');
            UPDATE SBBATCHSTS SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=l_CurrRow WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
        Else
            plog.Debug(pkgctx,'End Run batch for ' || p_bchmdl || 'from row ' || l_FromRow || ' to row ' || l_ToRow);
            UPDATE SBBATCHSTS SET BCHSUCPAGE=l_CurrRow WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
        End If;
    end if;
    plog.setendsection(pkgctx, 'pr_batch');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_batch');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_batch;

-------------------------------------pr_tdExecuteRouter--------------------------------------------
  PROCEDURE pr_tdExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_tdExecuteRouter');
    p_lastRun:='Y';
    if p_bchmdl in ('TDEOTD') then
        txpks_batch.pr_TDEOTD(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    Elsif  p_bchmdl in ('TDRNA') then
        txpks_batch.pr_TDRNA(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    Elsif  p_bchmdl in ('TDAW') then
        txpks_batch.pr_TDAW(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    end if;

    plog.setendsection(pkgctx, 'pr_tdExecuteRouter');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_tdExecuteRouter');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_tdExecuteRouter;
  -------------------------------------pr_odExecuteRouter--------------------------------------------
  PROCEDURE pr_odExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
    --T2_HoangND
    l_RCVSECTIME varchar2(2);
    l_RCVCASHTIME varchar2(2);
    l_CLEARDAY varchar2(1);
    l_CHGBCHORDERSTARTDATE date;
    l_FINISHEDCHGBCHORDERSTARTDATE date;
    --End T2_HoangND

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_odExecuteRouter');
    p_lastRun:='Y';

    --T2_HoangND
    select nvl(max(varvalue),'DN') into l_RCVSECTIME from sysvar where grname like 'OD' and varname='RCVSECTIME';
    select nvl(max(varvalue),'DN') into l_RCVCASHTIME from sysvar where grname like 'OD' and varname='RCVCASHTIME';

    select nvl(max(varvalue),'3') into l_CLEARDAY from sysvar where grname like 'OD' and varname='CLEARDAY';
    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'OD' and varname='CHGBCHORDERSTARTDATE';
    select getduedate(l_CHGBCHORDERSTARTDATE,'B','000',l_CLEARDAY) into l_FINISHEDCHGBCHORDERSTARTDATE
    from dual;
    --End T2_HoangND

    if p_bchmdl ='SODICCF' then
        txpks_batch.pr_SimpleTradingFeeCalculate(p_err_code);
    elsif p_bchmdl ='ODCLN' then
        txpks_batch.pr_OrderCleanUp(p_err_code);
    elsif p_bchmdl='ODFSH' then
        txpks_batch.pr_OrderFinish(p_err_code);
    --elsif p_bchmdl='ODRCVM' then
    --    txpks_batch.pr_ODSettlementReceiveMoney(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    --T2_HoangND edit ('ODRCVM', 'ODRCVM_EOD')
    elsif p_bchmdl='ODRCVM_TEMP' then
        if (getcurrdate >= l_CHGBCHORDERSTARTDATE and getcurrdate <= l_FINISHEDCHGBCHORDERSTARTDATE) then
            txpks_batch.pr_ODSltReceiveMoney_temp(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
            if p_err_code <> 0 then
                return;
            end if;
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    elsif p_bchmdl in ('ODRCVM', 'ODRCVM_EOD') then
        if (l_RCVCASHTIME = 'DN' and p_bchmdl = 'ODRCVM') or (l_RCVCASHTIME = 'CN' and p_bchmdl = 'ODRCVM_EOD') then
            txpks_batch.pr_ODSettlementReceiveMoney(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    --T+2 End T2_HoangND edit ('ODRCVM', 'ODRCVM_EOD')

    --elsif p_bchmdl='ODRCVS' then
    --    txpks_batch.pr_ODSettlementReceiveSec(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    --T2_HoangND edit ('ODRCVS','ODRCVS_EOD')
    elsif p_bchmdl='ODRCVS_TEMP' then
        if (getcurrdate >= l_CHGBCHORDERSTARTDATE and getcurrdate <= l_FINISHEDCHGBCHORDERSTARTDATE) then
            txpks_batch.pr_ODSettlementReceiveSec_temp(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
            if p_err_code <> 0 then
                return;
            end if;
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    elsif p_bchmdl in ('ODRCVS','ODRCVS_EOD') then
        if (l_RCVSECTIME = 'DN' and p_bchmdl = 'ODRCVS') or (l_RCVSECTIME = 'CN' and p_bchmdl = 'ODRCVS_EOD') then
            txpks_batch.pr_ODSettlementReceiveSec(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    --End T2_HoangND edit ('ODRCVS','ODRCVS_EOD')

    elsif p_bchmdl='ODRCVS_TP' then
        txpks_batch.pr_ODSettlementReceiveSec_TP(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    elsif p_bchmdl='ODTRFM' then
        txpks_batch.pr_ODSettlementtransferMoney(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    elsif p_bchmdl='ODTRFMS' then
        txpks_batch.pr_ODSurelyStstransferMoney(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    elsif p_bchmdl='ODTRFS' then
        txpks_batch.pr_ODSettlementtransferSec(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);

    --elsif p_bchmdl='ODPAIDSF' then
    --    txpks_batch.pr_TransferSellFee(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    --T2_HoangND edit ('ODPAIDSF','ODPAIDSF_EOD')
    elsif p_bchmdl='ODPAIDSF_TEMP' then
        if (getcurrdate >= l_CHGBCHORDERSTARTDATE and getcurrdate <= l_FINISHEDCHGBCHORDERSTARTDATE) then
            txpks_batch.pr_TransferSellFee_temp(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
            if p_err_code <> 0 then
                return;
            end if;
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    elsif p_bchmdl in ('ODPAIDSF','ODPAIDSF_EOD') then
        if (l_RCVCASHTIME = 'DN' and p_bchmdl = 'ODPAIDSF') or (l_RCVCASHTIME = 'CN' and p_bchmdl = 'ODPAIDSF_EOD') then
            txpks_batch.pr_TransferSellFee(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    --End T2_HoangND edit ('ODPAIDSF','ODPAIDSF_EOD')

    elsif p_bchmdl='ODPAIDBF' then
        txpks_batch.pr_TransferBuyFee(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    elsif p_bchmdl='ODRLSBADV' then
        txpks_batch.pr_ODReleaseBlockAdvanced(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);

    --elsif p_bchmdl='ODRLSADV' then
    --    txpks_batch.pr_ODDayReleaseAdvanced(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    --T2_HoangND edit ('ODRLSADV','ODRLSADV_EOD')
    elsif p_bchmdl='ODRLSADV_TEMP' then
        if (getcurrdate >= l_CHGBCHORDERSTARTDATE and getcurrdate <= l_FINISHEDCHGBCHORDERSTARTDATE) then
            txpks_batch.pr_ODDayReleaseAdvanced_temp(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
            if p_err_code <> 0 then
                return;
            end if;
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    elsif p_bchmdl in ('ODRLSADV','ODRLSADV_EOD') then
        if (l_RCVCASHTIME = 'DN' and p_bchmdl = 'ODRLSADV') or (l_RCVCASHTIME = 'CN' and p_bchmdl = 'ODRLSADV_EOD') then
            txpks_batch.pr_ODDayReleaseAdvanced(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    --End T2_HoangND edit ('ODRLSADV','ODRLSADV_EOD')

    elsif p_bchmdl='ODETSALC' then
        txpks_batch.pr_ODDealAllocate(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    elsif p_bchmdl='ODTYPEFEE' then
        txpks_batch.pr_CalcFeeOnOdtype(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    elsif p_bchmdl='ODFEECAL' then
        txpks_batch.pr_ODFeeCalculate(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    elsif p_bchmdl='ODBAK' then
        txpks_batch.pr_OrderBackUp(p_err_code);
    elsif p_bchmdl='ODEXTCF' then
        txpks_batch.pr_ODExtentionAccount(p_err_code);
---HaiLT bo tinh thue TNCN de tinh o cho khac
--    elsif p_bchmdl ='ODFEEPIT' then
--        txpks_SEPITLOG.pr_CalcPIT(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
---End of HaiLT bo tinh thue TNCN de tinh o cho khac
    end if;
    plog.setendsection(pkgctx, 'pr_odExecuteRouter');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_odExecuteRouter');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_odExecuteRouter;
      -------------------------------------pr_caExecuteRouter--------------------------------------------
  PROCEDURE pr_caExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_odExecuteRouter');
    p_lastRun:='Y';
    if p_bchmdl ='CAWFT' then
                  txpks_batch.pr_CaWatingfortrade(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
               end if;
    plog.setendsection(pkgctx, 'pr_odExecuteRouter');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_odExecuteRouter');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_caExecuteRouter;
  -------------------------------------pr_ciExecuteRouter--------------------------------------------
  PROCEDURE pr_ciExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ciExecuteRouter');
    p_lastRun:='Y';
    if p_bchmdl ='SCRINTACR' then
        txpks_batch.pr_SimpleCreditInterestAccure(p_err_code);
    elsif p_bchmdl ='CICRINTACR' then
        --txpks_batch.pr_ICCFCreditInterestAccure(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
        txpks_batch.pr_ICCFCreditInterestAccure2(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    elsif p_bchmdl ='SODINTACR' then
        txpks_batch.pr_SimpleOvdtInterestAccure(p_err_code);
    elsif p_bchmdl ='SODT2INTACR' then
        txpks_batch.pr_T2OverdraftInterestAccure(p_err_code);
    elsif p_bchmdl in ('CIAUTOADV') then
        txpks_batch.pr_CIAutoAdvance(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    elsif p_bchmdl in ('CIAUTOADVAFSM','CIAUTOADV2') then
        txpks_batch.pr_CIAutoAdvanceAFSM(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    elsif p_bchmdl ='CIDEBTPM' then
        txpks_batch.pr_CIDebtAutoPayment(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    /*elsif p_bchmdl ='CIFEEDEPOSITSE' then
        txpks_batch.pr_CICalcFeeDepositSecurities(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    elsif p_bchmdl ='CIFEEDEPOSITBO' then
        txpks_batch.pr_CICalcFeeDepositBond(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
*/
   elsif p_bchmdl ='CIFEEDEPOSITSE' then
   txpks_batch.pr_CICalcFeeDeposit(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
   elsif (p_bchmdl ='CIFEEDEPOSIT' OR  p_bchmdl ='CIFEEDEPOSITBF' )  then
        txpks_batch.pr_CIPayFeeDepositSeBo(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    elsif p_bchmdl ='CICRINTPRN' then
        txpks_batch.pr_CIInterestToPrincipal(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    elsif p_bchmdl ='CIT0SENDMONEY' then
        txpks_batch.pr_CIT0SendMoney(p_bchmdl ,p_err_code);
    elsif p_bchmdl ='CILATESENDMONEY' then
        txpks_batch.pr_CILateSendMoney(p_bchmdl ,p_err_code);
    end if;
    plog.setendsection(pkgctx, 'pr_ciExecuteRouter');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ciExecuteRouter');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ciExecuteRouter;

    -------------------------------------pr_seExecuteRouter--------------------------------------------
  PROCEDURE pr_seExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_seExecuteRouter');
    p_lastRun:='Y';
    if p_bchmdl ='SECALC' then
        txpks_batch.pr_SECostPriceCalculate(p_err_code);
    end if;
    plog.setendsection(pkgctx, 'pr_seExecuteRouter');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_seExecuteRouter');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_seExecuteRouter;

  -------------------------------------pr_lnExecuteRouter--------------------------------------------
  PROCEDURE pr_lnExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_lnExecuteRouter');
    p_lastRun:='Y';
    if p_bchmdl ='LNINTNMLACR' then
        txpks_batch.pr_LNNormalInterestAccrue(p_err_code);
    elsif p_bchmdl ='LNINTDUE' then
        txpks_batch.pr_LNAccrueInterest(p_bchmdl,p_err_code);
    elsif p_bchmdl ='LNINTNMLOVD' then
        txpks_batch.pr_LNMoveIntToOverdue(p_bchmdl,p_err_code);
    elsif p_bchmdl ='LNPRINDUE' then
        txpks_batch.pr_LNCalMaturityPrincipal(p_err_code);
    elsif p_bchmdl ='LNPRINOVD' then
        txpks_batch.pr_LNMovePrinToOverdue(p_bchmdl,p_err_code);
--    elsif p_bchmdl ='LNDRAWNDOWN' then
--        txpks_batch.pr_LNAutoDrawndown(p_bchmdl,p_err_code);
    elsif p_bchmdl ='LNDRAWNDOWN_MARGIN' then
        txpks_batch.pr_LNAutoDrawndown_MARGIN(p_bchmdl,p_err_code);
    elsif p_bchmdl ='LNDRAWNDOWN_UB' then
        txpks_batch.pr_LNDrawndown_UyBan(p_bchmdl,p_err_code);
        --T2_HoangND add dong bo pr_gen_buf_se_account cho CK ve cuoi ngay
        plog.debug(pkgctx,'Begin gen SE buffer');
        fopks_api.pr_gen_buf_se_account;
        plog.debug(pkgctx,'End gen SE buffer');
        commit;
        --End T2_HoangND add dong bo pr_gen_buf_se_account cho CK ve cuoi ngay
    elsif p_bchmdl ='LNDRAWNDOWN_T0' then
        txpks_batch.pr_LNAutoDrawndown_T0(p_bchmdl,p_err_code);
    elsif p_bchmdl ='LNADVPAY'  then
        txpks_batch.pr_LNAdvPayment(p_bchmdl,p_err_code);
    elsif p_bchmdl ='LNAUTOPAY'  then
        txpks_batch.pr_LNAutoPayment(p_bchmdl,p_err_code);
    elsif p_bchmdl ='LNADVPAYAFTSM'  then
        txpks_batch.pr_LNAdvPaymentAftSendMoney(p_bchmdl,p_err_code);
    elsif p_bchmdl ='CLNSCHD' then
        txpks_batch.pr_LNCleanSchedule(p_err_code);
    elsif p_bchmdl ='CREATELNMAST' then
        txpks_batch.pr_LNOpenLoanAccount(p_err_code);

    end if;
    plog.setendsection(pkgctx, 'pr_lnExecuteRouter');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_lnExecuteRouter');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_lnExecuteRouter;

  -------------------------------------pr_dfExecuteRouter--------------------------------------------
  PROCEDURE pr_dfExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS

    --T2_HoangND
    l_RCVSECTIME varchar2(2);
    l_RCVCASHTIME varchar2(2);
    l_CLEARDAY varchar2(1);
    l_CHGBCHORDERSTARTDATE date;
    l_FINISHEDCHGBCHORDERSTARTDATE date;
    --End T2_HoangND

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_dfExecuteRouter');
    p_lastRun:='Y';

    --T2_HoangND
    select nvl(max(varvalue),'DN') into l_RCVSECTIME from sysvar where grname like 'OD' and varname='RCVSECTIME';
    select nvl(max(varvalue),'DN') into l_RCVCASHTIME from sysvar where grname like 'OD' and varname='RCVCASHTIME';

    select nvl(max(varvalue),'3') into l_CLEARDAY from sysvar where grname like 'OD' and varname='CLEARDAY';
    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'OD' and varname='CHGBCHORDERSTARTDATE';
    select getduedate(l_CHGBCHORDERSTARTDATE,'B','000',l_CLEARDAY) into l_FINISHEDCHGBCHORDERSTARTDATE
    from dual;
    --End T2_HoangND

    if p_bchmdl ='DFFEEACR' then
        txpks_batch.pr_DFDealFeeAccrue(p_err_code);
    elsif p_bchmdl='DFDRAWNDOWN' then
        txpks_batch.pr_DFDealDrawndown(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    elsif p_bchmdl ='DFCLNDEAL' then
        txpks_batch.pr_DFCleanDeal(p_err_code);
    elsif p_bchmdl ='DFPAYMENT' then
        txpks_batch.pr_DFPayment(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    --elsif p_bchmdl ='DFRCVS' then
    --    txpks_batch.pr_DealReceive(p_bchmdl ,p_err_code);
    --T2_HoangND edit ('DFRCVS','DFRCVS_EOD')
    elsif p_bchmdl ='DFRCVS_TEMP' then
        if (getcurrdate >= l_CHGBCHORDERSTARTDATE and getcurrdate <= l_FINISHEDCHGBCHORDERSTARTDATE) then
            txpks_batch.pr_DealReceive_temp(p_bchmdl ,p_err_code);
            if p_err_code <> 0 then
                return;
            end if;
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    elsif p_bchmdl in ('DFRCVS','DFRCVS_EOD') then
        if (l_RCVSECTIME = 'DN' and p_bchmdl = 'DFRCVS') or (l_RCVSECTIME = 'CN' and p_bchmdl = 'DFRCVS_EOD') then
            txpks_batch.pr_DealReceive(p_bchmdl ,p_err_code);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    --End T2_HoangND edit ('DFRCVS','DFRCVS_EOD')

    elsif p_bchmdl ='DFRCVS_TP' then
        txpks_batch.pr_DealReceive_TP(p_bchmdl ,p_err_code);
    elsif p_bchmdl ='DFTRFS' then
        txpks_batch.pr_DFDealTransferSec(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    elsif p_bchmdl ='DFAUTOPAY' then
        txpks_batch.pr_DFDueAutoPayment(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    elsif p_bchmdl ='DFADVPAY' then
        txpks_batch.pr_DFAutoAdvToPayment(p_bchmdl ,p_err_code);
    elsif p_bchmdl ='AUTOMRML' then
        txpks_batch.pr_DFAutoMarginLoanDrawnDown(p_bchmdl ,p_err_code);
    end if;
    plog.setendsection(pkgctx, 'pr_dfExecuteRouter');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_dfExecuteRouter');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_dfExecuteRouter;

  -------------------------------------pr_saExecuteRouter--------------------------------------------
  PROCEDURE pr_saExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_saExecuteRouter');
    p_lastRun:='Y';
    if p_bchmdl ='SABKDT' then
        txpks_batch.pr_SABackupData(p_err_code);
    elsif p_bchmdl ='SABFB' then
        txpks_batch.pr_SABeforeBatch(p_err_code);
    elsif p_bchmdl ='SAAFB' then
        txpks_batch.pr_SAAfterBatch(p_err_code);
    elsif p_bchmdl ='SAAFINDAYPROCESS' then
        txpks_batch.pr_SAAfterInDayProcess(p_err_code);
    elsif p_bchmdl ='SACWD' then
        txpks_batch.pr_SAChangeWorkingDate(p_err_code);
    elsif p_bchmdl ='SAGNWK' then
        txpks_batch.pr_SAGeneralWorking(p_err_code);
    elsif p_bchmdl = 'OLSYN' then
        txpks_batch.pr_SAOnlineSynData(p_err_code);
    elsif p_bchmdl = 'MRASSMARKED' then
        txpks_batch.pr_MRAssetMarked(p_err_code);
    elsif p_bchmdl = 'MRASSMARKEDSTEP01' then
        txpks_batch.pr_MRAssetMarked_Step01(p_err_code);
    elsif p_bchmdl = 'SABEGINBATCH' then
        txpks_batch.pr_SABEGINBATCH(p_err_code);
    end if;
    plog.setendsection(pkgctx, 'pr_saExecuteRouter');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_saExecuteRouter');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_saExecuteRouter;

  -------------------------------------pr_cfExecuteRouter--------------------------------------------
  PROCEDURE pr_cfExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
    --T2_HoangND
    l_RCVSECTIME varchar2(2);
    l_RCVCASHTIME varchar2(2);
    l_CLEARDAY varchar2(1);
    l_CHGBCHORDERSTARTDATE date;
    l_FINISHEDCHGBCHORDERSTARTDATE date;
    --End T2_HoangND

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_cfExecuteRouter');
    p_lastRun:='Y';

    --T2_HoangND
    select nvl(max(varvalue),'DN') into l_RCVSECTIME from sysvar where grname like 'OD' and varname='RCVSECTIME';
    select nvl(max(varvalue),'DN') into l_RCVCASHTIME from sysvar where grname like 'OD' and varname='RCVCASHTIME';

    select nvl(max(varvalue),'3') into l_CLEARDAY from sysvar where grname like 'OD' and varname='CLEARDAY';
    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'OD' and varname='CHGBCHORDERSTARTDATE';
    select getduedate(l_CHGBCHORDERSTARTDATE,'B','000',l_CLEARDAY) into l_FINISHEDCHGBCHORDERSTARTDATE
    from dual;
    --End T2_HoangND

    --if p_bchmdl ='CFSELLVAT' then
    --    txpks_batch.pr_CFPaidSellVAT(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    --T2_HoangND add ('CFSELLVAT','CFSELLVAT_EOD')
    if p_bchmdl ='CFSELLVAT_TEMP' then
        if (getcurrdate >= l_CHGBCHORDERSTARTDATE and getcurrdate <= l_FINISHEDCHGBCHORDERSTARTDATE) then
            txpks_batch.pr_CFPaidSellVAT_temp(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
            if p_err_code <> 0 then
                return;
            end if;
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    elsif p_bchmdl in ('CFSELLVAT','CFSELLVAT_EOD') then
        if (l_RCVCASHTIME = 'DN' and p_bchmdl = 'CFSELLVAT') or (l_RCVCASHTIME = 'CN' and p_bchmdl = 'CFSELLVAT_EOD') then
            txpks_batch.pr_CFPaidSellVAT(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    --End T2_HoangND add ('CFSELLVAT','CFSELLVAT_EOD')

    elsif p_bchmdl ='CFICCF' then
        txpks_batch.pr_CFDayTradingFeeCal(p_bchmdl ,p_err_code,p_FromRow ,p_ToRow , p_lastRun);
    end if;
    plog.setendsection(pkgctx, 'pr_cfExecuteRouter');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_cfExecuteRouter');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_cfExecuteRouter;


--TungNT added , for RM
-------------------------------------pr_reExecuteRouter--------------------------------------------
  PROCEDURE pr_rmExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS

    --T2_HoangND
    l_RCVSECTIME varchar2(2);
    l_RCVCASHTIME varchar2(2);
    l_CLEARDAY varchar2(1);
    l_CHGBCHORDERSTARTDATE date;
    l_FINISHEDCHGBCHORDERSTARTDATE date;
    --End T2_HoangND

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_cfExecuteRouter');
    p_lastRun:='Y';

    --T2_HoangND
    select nvl(max(varvalue),'DN') into l_RCVSECTIME from sysvar where grname like 'OD' and varname='RCVSECTIME';
    select nvl(max(varvalue),'DN') into l_RCVCASHTIME from sysvar where grname like 'OD' and varname='RCVCASHTIME';

    select nvl(max(varvalue),'3') into l_CLEARDAY from sysvar where grname like 'OD' and varname='CLEARDAY';
    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'OD' and varname='CHGBCHORDERSTARTDATE';
    select getduedate(l_CHGBCHORDERSTARTDATE,'B','000',l_CLEARDAY) into l_FINISHEDCHGBCHORDERSTARTDATE
    from dual;
    --End T2_HoangND

    if p_bchmdl ='BAMTTRF' then
        txpks_batch.pr_rmBAMTTRF(p_bchmdl ,p_err_code);
    ELSIF p_bchmdl ='BFEETRF' then
        txpks_batch.pr_rmBFEETRF(p_bchmdl ,p_err_code);
    --ELSIF p_bchmdl ='SAMTTRF' THEN
    --    txpks_batch.pr_rmSAMTTRF(p_bchmdl ,p_err_code);
    --ELSIF p_bchmdl ='SFEETRF' then
    --    txpks_batch.pr_rmSFEETRF(p_bchmdl ,p_err_code);
    --ELSIF p_bchmdl ='SFDTRF' then
    --    txpks_batch.pr_rmSFDTRF(p_bchmdl ,p_err_code);
    --T2_Hoang add
    ELSIF p_bchmdl IN ('SAMTTRF','SAMTTRF_EOD') THEN
        if (l_RCVCASHTIME = 'DN' and p_bchmdl = 'SAMTTRF') or (l_RCVCASHTIME = 'CN' and p_bchmdl = 'SAMTTRF_EOD') then
            txpks_batch.pr_rmSAMTTRF(p_bchmdl ,p_err_code);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    ELSIF p_bchmdl IN ('SFEETRF','SFEETRF_EOD') THEN
        if (l_RCVCASHTIME = 'DN' and p_bchmdl = 'SFEETRF') or (l_RCVCASHTIME = 'CN' and p_bchmdl = 'SFEETRF_EOD') then
            txpks_batch.pr_rmSFEETRF(p_bchmdl ,p_err_code);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    ELSIF p_bchmdl IN ('SFDTRF','SFDTRF_EOD') THEN
        if (l_RCVCASHTIME = 'DN' and p_bchmdl = 'SFDTRF') or (l_RCVCASHTIME = 'CN' and p_bchmdl = 'SFDTRF_EOD') then
            txpks_batch.pr_rmSFDTRF(p_bchmdl ,p_err_code);
        else
            -- Khong thuc hien
            UPDATE SBBATCHSTS
            SET BCHSTS = 'Y', CMPLTIME = SYSDATE,BCHSUCPAGE=-1
            WHERE UPPER(BCHMDL) = p_bchmdl AND BCHDATE=(SELECT MAX(BCHDATE) FROM SBBATCHSTS);
            -- Tra ve thanh cong.
            p_err_code:= 0;
        end if;
    --End T2_Hoang add
    ELSIF p_bchmdl ='RMEXCA3384' then
        txpks_batch.pr_rmRMEXCA3384(p_bchmdl ,p_err_code);
    ELSIF p_bchmdl ='RMEXCA3386' then
        txpks_batch.pr_rmRMEXCA3386(p_bchmdl ,p_err_code);
    ELSIF p_bchmdl ='RMEXCA3350' then
        txpks_batch.pr_rmRMEXCA3350(p_bchmdl ,p_err_code);
    ELSIF p_bchmdl ='RMEXCA3350DF' then
        txpks_batch.pr_rmRMEXCA3350DF(p_bchmdl ,p_err_code);
    ELSIF p_bchmdl ='RMEX8894' then
        txpks_batch.pr_rmRMEX8879(p_bchmdl ,p_err_code);
    ELSIF p_bchmdl ='RMEX8894DF' then
        txpks_batch.pr_rmRMEX8879DF(p_bchmdl ,p_err_code);
    ELSIF p_bchmdl ='RMEXSEDPFEE' then
        txpks_batch.pr_rmRMEXSEDPFEE(p_bchmdl ,p_err_code);
    ELSIF p_bchmdl ='RMEXSEDPFEE1' then
        txpks_batch.pr_rmRMEXSEDPFEE(p_bchmdl ,p_err_code);
    ELSIF p_bchmdl ='RMEODRPT' then
        txpks_batch.pr_rmRMEODRPT(p_bchmdl ,p_err_code);
    ELSIF p_bchmdl ='RMBODRPT' then
        txpks_batch.pr_rmRMEODRPT(p_bchmdl ,p_err_code);
    --chaunh
    ELSIF p_bchmdl ='MSBAUTOTRANS' then
        txpks_batch.pr_rmMSBAUTOTRANS(p_bchmdl ,p_err_code);
    end if;

    --cspks_rmproc.pr_createcrbtxreq(p_err_code);
    if p_err_code = 0 then
        cspks_rmproc.pr_createcrbtxreq(p_err_code);
    end if;

    plog.setendsection(pkgctx, 'pr_rmExecuteRouter');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_rmExecuteRouter');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmExecuteRouter;
--End

---------------------------------pr_CFPaidSellVAT------------------------------------------------
PROCEDURE pr_CFPaidSellVAT(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      l_vatrate number(20,6);
      l_rightrate number(20,6);
      v_delta   number(20,6);
      l_ruletype varchar2(10);
      l_CHGBCHORDERSTARTDATE date;

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CFPaidSellVAT');

    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'OD' and varname='CHGBCHORDERSTARTDATE';

    SELECT COUNT(*) MAXROW into l_MaxRow FROM  AFMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='0066';
     SELECT varvalue
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
     SELECT varvalue
               INTO v_strPREVDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'PREVDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='0066';
    plog.debug(pkgctx, 'Begin loop');
    --Default thu thue la 0.1%
    begin
    l_vatrate:=to_number(cspks_system.fn_get_sysvar('SYSTEM','ADVSELLDUTY'));
    exception when others then
        l_vatrate:=0.1;
    end;

    --- Lay ti le thue TNCN
    SELECT VARVALUE into l_rightrate FROM SYSVAR WHERE VARNAME='ADVVATDUTY' AND GRNAME='SYSTEM';

    v_delta:=0;
    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    for rec in
    (
        SELECT MST.ACCTNO,
        CASE WHEN CI.COREBANK='Y' THEN 1 ELSE 0 END COREBANK,
        MST.ACTYPE,TYP.VAT,
        --CASE WHEN SUM(ST.AMT)>=SUM(ST.QTTY*SB.PARVALUE) THEN SUM(ST.AMT) ELSE 0 END SELLAMT,
        SUM(ST.AMT) SELLAMT,
        SUM(OD.TAXSELLAMT) TAXSELLAMT,
        SUM(ST.ARIGHT) SELLRIGHTAMT,max( v_strDesc  || ' ' || to_char(st.txdate,'DD/MM/RRRR'))   trDesc
        FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM AFMAST A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST,
        AFTYPE TYP,STSCHD ST, SBSECURITIES SB, ODMAST OD,CIMAST CI, CFMAST CF
        WHERE MST.ACTYPE = TYP.ACTYPE AND MST.ACCTNO=ST.ACCTNO
        --AND ST.STATUS ='C'
        AND ST.ORGORDERID= OD.ORDERID
        AND ST.CODEID=SB.CODEID AND MST.ACCTNO=CI.AFACCTNO
        AND ST.DUETYPE='RM' AND ST.CLEARDATE = to_date(v_strCURRDATE,systemnums.c_date_format)
        AND MST.STATUS<>'C' AND TYP.VAT='Y'
        --GianhVG Add Khong thu phi voi tai khoan ben ngoai
        AND CF.CUSTID = MST.CUSTID
        AND CF.CUSTATCOM='Y'
        --End GianhVG
        and od.txdate >= l_CHGBCHORDERSTARTDATE --T2_HoangND add
        GROUP BY mst.ACCTNO , MST.ACTYPE, TYP.VAT,CI.COREBANK
        ORDER BY mst.ACCTNO
    )
    loop
        if rec.TAXSELLAMT>0 or rec.SELLRIGHTAMT>0 then
            --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
            /*begin
            --Lay base rate trong iccftypedef
                select icrate,ruletype into l_vatrate,l_ruletype from iccftypedef
                where actype =rec.actype and modcode ='CF'
                and eventcode=p_bchmdl and deltd <> 'Y';
            --Xac dinh tier
                if l_ruletype ='T' or l_ruletype='C' then
                    select delta into v_delta from iccftier
                    where actype =rec.actype and modcode ='CF'
                    and eventcode=p_bchmdl and deltd <> 'Y'
                    and framt < rec.sellamt and toamt > rec.sellamt;
                else
                    v_delta:=0;
                end if;
                l_vatrate:=l_vatrate+v_delta;
            exception when others then
                l_vatrate:=0.1;
            end;*/
            --Set txnum
            plog.debug(pkgctx, 'Loop for account:' || rec.ACCTNO || ' ngay' || v_strCURRDATE);
            SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
            l_txmsg.brid        := substr(rec.ACCTNO,1,4);

            --Set cac field giao dich
            --03  ACCTNO      C
            l_txmsg.txfields ('03').defname   := 'ACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;
             --07  PERCENT     N
            l_txmsg.txfields ('07').defname   := 'PERCENT';
            l_txmsg.txfields ('07').TYPE      := 'N';
            l_txmsg.txfields ('07').VALUE     := 100;
            --08  ICCFBAL     N
            l_txmsg.txfields ('08').defname   := 'ICCFBAL';
            l_txmsg.txfields ('08').TYPE      := 'N';
            l_txmsg.txfields ('08').VALUE     := round(REC.SELLAMT,0);
            --09  ICCFRATE    N
            l_txmsg.txfields ('09').defname   := 'FEEAMT';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := l_vatrate;
            --10  INTAMT      N
            l_txmsg.txfields ('10').defname   := 'INTAMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := rec.TAXSELLAMT;--round(l_vatrate/100*REC.SELLAMT,0);
            --11  RIGHTRATE    N
            l_txmsg.txfields ('11').defname   := 'FEEAMT';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := l_rightrate;
            --12  INTRIGHTAMT      N
            l_txmsg.txfields ('12').defname   := 'INTAMT';
            l_txmsg.txfields ('12').TYPE      := 'N';
            l_txmsg.txfields ('12').VALUE     := round(REC.SELLRIGHTAMT,0);
            --30    DESC        C
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := rec.trDesc;
            --31    COREBANK        N
            l_txmsg.txfields ('31').defname   := 'COREBANK';
            l_txmsg.txfields ('31').TYPE      := 'N';
            l_txmsg.txfields ('31').VALUE     := rec.COREBANK;
            BEGIN
                IF txpks_#0066.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 0066: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
        end if;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_CFPaidSellVAT');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.error (pkgctx,'got error on release pr_CFPaidSellVAT');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CFPaidSellVAT');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_CFPaidSellVAT;

--T2_HoangND add pr_CFPaidSellVAT_temp
---------------------------------pr_CFPaidSellVAT_temp------------------------------------------------
PROCEDURE pr_CFPaidSellVAT_temp(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      l_vatrate number(20,6);
      l_rightrate number(20,6);
      v_delta   number(20,6);
      l_ruletype varchar2(10);
      l_CHGBCHORDERSTARTDATE date;
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CFPaidSellVAT_temp');

    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'OD' and varname='CHGBCHORDERSTARTDATE';

    SELECT COUNT(*) MAXROW into l_MaxRow FROM  AFMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='0066';
     SELECT varvalue
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
     SELECT varvalue
               INTO v_strPREVDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'PREVDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='0066';
    plog.debug(pkgctx, 'Begin loop');
    --Default thu thue la 0.1%
    begin
    l_vatrate:=to_number(cspks_system.fn_get_sysvar('SYSTEM','ADVSELLDUTY'));
    exception when others then
        l_vatrate:=0.1;
    end;

    --- Lay ti le thue TNCN
    SELECT VARVALUE into l_rightrate FROM SYSVAR WHERE VARNAME='ADVVATDUTY' AND GRNAME='SYSTEM';

    v_delta:=0;
    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    for rec in
    (
        SELECT MST.ACCTNO,
        CASE WHEN CI.COREBANK='Y' THEN 1 ELSE 0 END COREBANK,
        MST.ACTYPE,TYP.VAT,
        --CASE WHEN SUM(ST.AMT)>=SUM(ST.QTTY*SB.PARVALUE) THEN SUM(ST.AMT) ELSE 0 END SELLAMT,
        SUM(ST.AMT) SELLAMT,
        SUM(OD.TAXSELLAMT) TAXSELLAMT,
        SUM(ST.ARIGHT) SELLRIGHTAMT,max( v_strDesc  || ' ' || to_char(st.txdate,'DD/MM/RRRR'))   trDesc
        FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM AFMAST A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST,
        AFTYPE TYP,STSCHD ST, SBSECURITIES SB, ODMAST OD,CIMAST CI, CFMAST CF
        WHERE MST.ACTYPE = TYP.ACTYPE AND MST.ACCTNO=ST.ACCTNO
        --AND ST.STATUS ='C'
        AND ST.ORGORDERID= OD.ORDERID
        AND ST.CODEID=SB.CODEID AND MST.ACCTNO=CI.AFACCTNO
        AND ST.DUETYPE='RM' AND ST.CLEARDATE = to_date(v_strCURRDATE,systemnums.c_date_format)
        AND MST.STATUS<>'C' AND TYP.VAT='Y'
        --GianhVG Add Khong thu phi voi tai khoan ben ngoai
        AND CF.CUSTID = MST.CUSTID
        AND CF.CUSTATCOM='Y'
        --End GianhVG
        and not exists(select 1 from tllog where batchname = p_bchmdl and MST.ACCTNO = tllog.msgacct and deltd <>'Y') --T2_HoangND add
        and od.txdate < l_CHGBCHORDERSTARTDATE --T2_HoangND
        GROUP BY mst.ACCTNO , MST.ACTYPE, TYP.VAT,CI.COREBANK
        ORDER BY mst.ACCTNO
    )
    loop
        if rec.TAXSELLAMT>0 or rec.SELLRIGHTAMT>0 then
            --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
            /*begin
            --Lay base rate trong iccftypedef
                select icrate,ruletype into l_vatrate,l_ruletype from iccftypedef
                where actype =rec.actype and modcode ='CF'
                and eventcode=p_bchmdl and deltd <> 'Y';
            --Xac dinh tier
                if l_ruletype ='T' or l_ruletype='C' then
                    select delta into v_delta from iccftier
                    where actype =rec.actype and modcode ='CF'
                    and eventcode=p_bchmdl and deltd <> 'Y'
                    and framt < rec.sellamt and toamt > rec.sellamt;
                else
                    v_delta:=0;
                end if;
                l_vatrate:=l_vatrate+v_delta;
            exception when others then
                l_vatrate:=0.1;
            end;*/
            --Set txnum
            plog.debug(pkgctx, 'Loop for account:' || rec.ACCTNO || ' ngay' || v_strCURRDATE);
            SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
            l_txmsg.brid        := substr(rec.ACCTNO,1,4);

            --Set cac field giao dich
            --03  ACCTNO      C
            l_txmsg.txfields ('03').defname   := 'ACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;
             --07  PERCENT     N
            l_txmsg.txfields ('07').defname   := 'PERCENT';
            l_txmsg.txfields ('07').TYPE      := 'N';
            l_txmsg.txfields ('07').VALUE     := 100;
            --08  ICCFBAL     N
            l_txmsg.txfields ('08').defname   := 'ICCFBAL';
            l_txmsg.txfields ('08').TYPE      := 'N';
            l_txmsg.txfields ('08').VALUE     := round(REC.SELLAMT,0);
            --09  ICCFRATE    N
            l_txmsg.txfields ('09').defname   := 'FEEAMT';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := l_vatrate;
            --10  INTAMT      N
            l_txmsg.txfields ('10').defname   := 'INTAMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := rec.TAXSELLAMT;--round(l_vatrate/100*REC.SELLAMT,0);
            --11  RIGHTRATE    N
            l_txmsg.txfields ('11').defname   := 'FEEAMT';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := l_rightrate;
            --12  INTRIGHTAMT      N
            l_txmsg.txfields ('12').defname   := 'INTAMT';
            l_txmsg.txfields ('12').TYPE      := 'N';
            l_txmsg.txfields ('12').VALUE     := round(REC.SELLRIGHTAMT,0);
            --30    DESC        C
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := rec.trDesc;
            --31    COREBANK        N
            l_txmsg.txfields ('31').defname   := 'COREBANK';
            l_txmsg.txfields ('31').TYPE      := 'N';
            l_txmsg.txfields ('31').VALUE     := rec.COREBANK;
            BEGIN
                IF txpks_#0066.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 0066: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
        end if;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_CFPaidSellVAT_temp');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.error (pkgctx,'got error on release pr_CFPaidSellVAT_temp');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CFPaidSellVAT_temp');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_CFPaidSellVAT_temp;
--End T2_HoangND add pr_CFPaidSellVAT_temp

---------------------------------pr_CaWatingfortrade------------------------------------------------
  PROCEDURE pr_CaWatingfortrade(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      l_err_param varchar2(300);
      l_MaxRow number(20,0);
      v_COMPANYCD VARCHAR2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CaWatingfortrade');

    v_COMPANYCD:=cspks_system.fn_get_sysvar ('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW into l_MaxRow FROM  semast;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='2262';

    for rec in
    (
select sb.parvalue, SE.Costprice PRICE , CF.CUSTODYCD,CF.CUSTID, af.acctno AFACCTNO,SB.CODEID, cf.fullname,cf.idcode,cf.address,sb.symbol,se.STATUS,AF.ACCTNO||SB.CODEID SEACCTNOCR,AF.ACCTNO||sbwft.CODEID SEACCTNODR
, TRADE , MORTAGE,MARGIN ,NETTING,STANDING,WITHDRAW,DEPOSIT,LOAN,BLOCKED,RECEIVING,TRANSFER,SENDDEPOSIT,SENDPENDING,DTOCLOSE,SDTOCLOSE
from semast se , afmast af , cfmast cf, sbsecurities sb ,sbsecurities sbwft, SECURITIES_INFO SEINFO,camast ca
where se.afacctno = af.acctno and af.custid = cf.custid and sb.codeid = seinfo.codeid
and se.codeid = sbwft.codeid and sbwft.REFCODEID=sb.CODEID
and sbwft.tradeplace='006'
and ca.codeid = sb.codeid and ca.catype ='026' and ca.status in ('A','N')
AND ca.actiondate >= to_date(v_strCURRDATE,systemnums.c_date_format)
AND TRADE + MORTAGE +STANDING+WITHDRAW+DEPOSIT+BLOCKED+SENDDEPOSIT+DTOCLOSE>0

    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --01   N   CODEID
        l_txmsg.txfields ('01').defname   := 'CODEID';
        l_txmsg.txfields ('01').TYPE      := 'N';
        l_txmsg.txfields ('01').VALUE     := rec.CODEID;
        --02   C   AFACCTNO
        l_txmsg.txfields ('02').defname   := 'AFACCTNO';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.AFACCTNO;
        --03   C   SEACCTNODR
        l_txmsg.txfields ('03').defname   := 'SEACCTNODR';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.SEACCTNODR;
        --04   C   CUSTODYCD
        l_txmsg.txfields ('04').defname   := 'CUSTODYCD';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.CUSTODYCD;
        --05   C   SEACCTNOCR
        l_txmsg.txfields ('05').defname   := 'SEACCTNOCR';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.SEACCTNOCR ;
        --09   C   PRICE
        l_txmsg.txfields ('09').defname   := 'PRICE';
        l_txmsg.txfields ('09').TYPE      := 'N';
        l_txmsg.txfields ('09').VALUE     := rec.PRICE;
        --10   N   TRADE
        l_txmsg.txfields ('10').defname   := 'TRADE';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.TRADE;
        --11   N   PARVALUE
        l_txmsg.txfields ('11').defname   := 'PARVALUE';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := rec.PARVALUE;
        --12   N   MORTAGE
        l_txmsg.txfields ('12').defname   := 'MORTAGE';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     :=  rec.MORTAGE;

         --15   N   STANDING
        l_txmsg.txfields ('15').defname   := 'STANDING';
        l_txmsg.txfields ('15').TYPE      := 'N';
        l_txmsg.txfields ('15').VALUE     := rec.STANDING;
        --16   N   WITHDRAW
        l_txmsg.txfields ('16').defname   := 'WITHDRAW';
        l_txmsg.txfields ('16').TYPE      := 'N';
        l_txmsg.txfields ('16').VALUE     := rec.WITHDRAW;

         --17   N   DEPOSIT
        l_txmsg.txfields ('17').defname   := 'DEPOSIT';
        l_txmsg.txfields ('17').TYPE      := 'N';
        l_txmsg.txfields ('17').VALUE     := rec.DEPOSIT;


         --19   N   BLOCKED
        l_txmsg.txfields ('19').defname   := 'BLOCKED';
        l_txmsg.txfields ('19').TYPE      := 'N';
        l_txmsg.txfields ('19').VALUE     := rec.BLOCKED;


         --22   N   SENDDEPOSIT
        l_txmsg.txfields ('22').defname   := 'SENDDEPOSIT';
        l_txmsg.txfields ('22').TYPE      := 'N';
        l_txmsg.txfields ('22').VALUE     := rec.SENDDEPOSIT;


        --25   C   DTOCLOSE
        l_txmsg.txfields ('25').defname   := 'DTOCLOSE';
        l_txmsg.txfields ('25').TYPE      := 'N';
        l_txmsg.txfields ('25').VALUE :=  rec.DTOCLOSE ;

        --44   N   PARVALUE
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE     := utf8nums.c_const_TLTX_TXDESC_2262;

        --90   N   CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.fullname;

        --91   N   ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'N';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

         --53   N   LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.idcode;
        BEGIN
            IF txpks_#2262.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 2262: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_CaWatingfortrade');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.error (pkgctx,'got error on Wating for trade');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CaWatingfortrade');
      RAISE errnums.E_SYSTEM_ERROR;

        END pr_CaWatingfortrade;

---------------------------------pr_CFDayTradingFeeCal------------------------------------------------
PROCEDURE pr_CFDayTradingFeeCal(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      l_icrate number;
      v_delta   number;
      l_ruletype varchar2(10);
      l_iccfbal number;
      l_amount number;

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CFDayTradingFeeCal');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  AFMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='0065';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='0065';
    plog.debug(pkgctx, 'Begin loop');
    --Default thu thue la 0.1%
    l_icrate:=0;
    v_delta:=0;
    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    for rec in
    (
        select od.afacctno,af.actype, sum (execamt) execamt, max(iccf.icrate) icrate, max (ruletype) ruletype
        from odmast od, (SELECT * FROM (SELECT A.*, ROWNUM ID FROM AFMAST A) WHERE ID BETWEEN p_FromRow AND p_ToRow) af, aftype typ, iccftypedef iccf
        where od.deltd <> 'Y' and od.exectype in ('NB','BC','SS','NS','MS')
        and od.execqtty>0 and od.afacctno = af.acctno and af.actype=typ.actype
        and iccf.modcode='CF' and iccf.actype=typ.actype and iccf.eventcode='DTRADEFEE'
        and iccf.deltd <> 'Y'
        AND od.txdate = to_date(v_strCURRDATE,systemnums.c_date_format)
        group by od.afacctno, af.actype
    )
    loop
        l_iccfbal:=rec.execamt;
        l_icrate:=rec.icrate;
        l_ruletype:=rec.ruletype;
        if l_iccfbal>0 then
            if l_ruletype<>'C' then
                --Luat tinh theo fixed hoac tier
                --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                begin
                --Xac dinh tier
                    if l_ruletype ='T' then
                        select delta into v_delta from iccftier
                        where actype =rec.actype and modcode ='CF'
                        and eventcode='DTRADEFEE' and deltd <> 'Y'
                        and framt < l_iccfbal and toamt >= l_iccfbal;
                    else
                        v_delta:=0;
                    end if;
                    l_icrate:=l_icrate+v_delta;
                exception when others then
                    l_icrate:=l_icrate;
                end;
                l_amount:=l_iccfbal;
                --Set txnum
                plog.debug(pkgctx, 'Loop for account:' || rec.AFACCTNO || ' ngay' || to_char(v_strCURRDATE));
                SELECT systemnums.C_BATCH_PREFIXED
                                 || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                          INTO l_txmsg.txnum
                          FROM DUAL;
                l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

                --Set cac field giao dich
                --03  ACCTNO      C
                l_txmsg.txfields ('03').defname   := 'ACCTNO';
                l_txmsg.txfields ('03').TYPE      := 'C';
                l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;
                 --07  PERCENT     N
                l_txmsg.txfields ('07').defname   := 'PERCENT';
                l_txmsg.txfields ('07').TYPE      := 'N';
                l_txmsg.txfields ('07').VALUE     := 100;
                --08  ICCFBAL     N
                l_txmsg.txfields ('08').defname   := 'ICCFBAL';
                l_txmsg.txfields ('08').TYPE      := 'N';
                l_txmsg.txfields ('08').VALUE     := round(l_amount,0);
                --09  ICCFRATE    N
                l_txmsg.txfields ('09').defname   := 'FEEAMT';
                l_txmsg.txfields ('09').TYPE      := 'N';
                l_txmsg.txfields ('09').VALUE     := l_icrate;
                --10  INTAMT      N
                l_txmsg.txfields ('10').defname   := 'INTAMT';
                l_txmsg.txfields ('10').TYPE      := 'N';
                l_txmsg.txfields ('10').VALUE     := round(l_icrate/100*l_amount,0);
                --30    DESC        C
                l_txmsg.txfields ('30').defname   := 'DESC';
                l_txmsg.txfields ('30').TYPE      := 'C';
                l_txmsg.txfields ('30').VALUE     := v_strDesc;
                BEGIN
                    IF txpks_#0065.fn_batchtxprocess (l_txmsg,
                                                     p_err_code,
                                                     l_err_param
                       ) <> systemnums.c_success
                    THEN
                       plog.error (pkgctx,
                                   'got error 0065: ' || p_err_code
                       );
                       ROLLBACK;
                       RETURN;
                    END IF;
                END;
            else
                --Luat tinh theo cluster
                --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                for rec_tier in
                (
                    select delta, framt, toamt
                    from iccftier
                        where actype =rec.actype and modcode ='CF'
                        and eventcode=p_bchmdl and deltd <> 'Y'
                        order by framt
                )
                loop
                    exit when l_iccfbal<rec_tier.framt;
                    if l_iccfbal>rec_tier.framt and l_iccfbal<rec_tier.toamt then
                        l_amount:=l_iccfbal-rec_tier.framt;
                    ELSE
                        l_amount:=rec_tier.toamt-rec_tier.framt;
                    end if;
                    l_icrate:=l_icrate+rec_tier.delta;
                    --Set txnum
                    plog.debug(pkgctx, 'Loop for account:' || rec.AFACCTNO || ' ngay' || to_char(v_strCURRDATE));
                    SELECT systemnums.C_BATCH_PREFIXED
                                     || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                              INTO l_txmsg.txnum
                              FROM DUAL;
                    l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

                    --Set cac field giao dich
                    --03  ACCTNO      C
                    l_txmsg.txfields ('03').defname   := 'ACCTNO';
                    l_txmsg.txfields ('03').TYPE      := 'C';
                    l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;
                     --07  PERCENT     N
                    l_txmsg.txfields ('07').defname   := 'PERCENT';
                    l_txmsg.txfields ('07').TYPE      := 'N';
                    l_txmsg.txfields ('07').VALUE     := 100;
                    --08  ICCFBAL     N
                    l_txmsg.txfields ('08').defname   := 'ICCFBAL';
                    l_txmsg.txfields ('08').TYPE      := 'N';
                    l_txmsg.txfields ('08').VALUE     := round(l_iccfbal,0);
                    --09  ICCFRATE    N
                    l_txmsg.txfields ('09').defname   := 'FEEAMT';
                    l_txmsg.txfields ('09').TYPE      := 'N';
                    l_txmsg.txfields ('09').VALUE     := l_icrate;
                    --10  INTAMT      N
                    l_txmsg.txfields ('10').defname   := 'INTAMT';
                    l_txmsg.txfields ('10').TYPE      := 'N';
                    l_txmsg.txfields ('10').VALUE     := round(l_icrate/100*l_iccfbal,0);
                    --30    DESC        C
                    l_txmsg.txfields ('30').defname   := 'DESC';
                    l_txmsg.txfields ('30').TYPE      := 'C';
                    l_txmsg.txfields ('30').VALUE     := v_strDesc;
                    BEGIN
                        IF txpks_#0065.fn_batchtxprocess (l_txmsg,
                                                         p_err_code,
                                                         l_err_param
                           ) <> systemnums.c_success
                        THEN
                           plog.error (pkgctx,
                                       'got error 0065: ' || p_err_code
                           );
                           ROLLBACK;
                           RETURN;
                        END IF;
                    END;
                end loop;
            end if;

        end if;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_CFDayTradingFeeCal');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.error (pkgctx,'got error on pr_CFDayTradingFeeCal');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CFDayTradingFeeCal');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_CFDayTradingFeeCal;


---------------------------------pr_SimpleTradingFeeCalculate------------------------------------------------
  PROCEDURE pr_SimpleTradingFeeCalculate(p_err_code  OUT varchar2)
  IS
      indate varchar2(20);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_SimpleTradingFeeCalculate');
    select varvalue into indate from sysvar where grname ='SYSTEM' and varname ='CURRDATE';
    UPDATE odmast
      SET feeacr =
               round(feeacr
             +   (execamt - examt)
               / 100
               * NVL
                    ((SELECT iccfrate
                        FROM (SELECT od.orderid,
                                     od.execamt - od.examt iccfamt,
                                     iccf.rate iccfrate
                                FROM odmast od,
                                     (SELECT typedef.actype,
                                               typedef.icrate
                                             + NVL (tier.delta, 0) rate,
                                             NVL (framt, -1) framt,
                                             (CASE
                                                 WHEN NVL (toamt, -1) = -1
                                                    THEN 10000000000000
                                                 ELSE NVL (toamt, -1)
                                              END
                                             ) toamt
                                        FROM (SELECT    modcode
                                                     || actype
                                                     || eventcode iccfcode,
                                                     actype, icrate, deltd,
                                                     ruletype,modcode
                                                FROM iccftypedef) typedef,
                                             (SELECT    modcode
                                                     || actype
                                                     || eventcode iccfcode,
                                                     delta, framt, toamt
                                                FROM iccftier) tier
                                       WHERE typedef.iccfcode = tier.iccfcode(+)
                                         AND typedef.deltd <> 'Y'
                                         AND typedef.ruletype = 'T'
                                         and typedef.modcode ='OD'
                                      UNION
                                      SELECT typedef.actype,
                                             typedef.icrate rate, -1 framt,
                                             10000000000000 toamt
                                        FROM iccftypedef typedef
                                       WHERE typedef.deltd <> 'Y'
                                         AND typedef.ruletype = 'F'
                                         and typedef.modcode ='OD') iccf
                               WHERE od.actype = iccf.actype
                                 AND od.execamt - od.examt > 0
                                 AND od.deltd <> 'Y'
                                 AND od.txdate = to_date(indate,'DD/MM/YYYY')
                                 AND iccf.framt < (od.execamt - od.examt)
                                 AND iccf.toamt >= (od.execamt - od.examt)) ic
                       WHERE ic.orderid = odmast.orderid),
                     0
                    ),0);

--Cap nhat examt
   UPDATE odmast
      SET examt =
               round(examt
             + NVL
                  ((SELECT iccfamt
                      FROM (SELECT od.orderid, od.execamt - od.examt iccfamt,
                                   iccf.rate iccfrate
                              FROM odmast od,
                                   (SELECT typedef.actype,
                                             typedef.icrate
                                           + NVL (tier.delta, 0) rate,
                                           NVL (framt, -1) framt,
                                           (CASE
                                               WHEN NVL (toamt, -1) = -1
                                                  THEN 10000000000000
                                               ELSE NVL (toamt, -1)
                                            END
                                           ) toamt
                                      FROM (SELECT    modcode
                                                   || actype
                                                   || eventcode iccfcode,
                                                   actype, icrate, deltd,
                                                   ruletype,modcode
                                              FROM iccftypedef) typedef,
                                           (SELECT    modcode
                                                   || actype
                                                   || eventcode iccfcode,
                                                   delta, framt, toamt
                                              FROM iccftier) tier
                                     WHERE typedef.iccfcode = tier.iccfcode(+)
                                       AND typedef.deltd <> 'Y'
                                       AND typedef.ruletype = 'T'
                                       and typedef.modcode ='OD'
                                    UNION
                                    SELECT typedef.actype,
                                           typedef.icrate rate, -1 framt,
                                           10000000000000 toamt
                                      FROM iccftypedef typedef
                                     WHERE typedef.deltd <> 'Y'
                                       AND typedef.ruletype = 'F'
                                       and typedef.modcode ='OD') iccf
                             WHERE od.actype = iccf.actype
                               AND od.execamt - od.examt > 0
                               AND od.deltd <> 'Y'
                               AND od.txdate = to_date(indate,'DD/MM/YYYY')
                               AND iccf.framt < (od.execamt - od.examt)
                               AND iccf.toamt >= (od.execamt - od.examt)) ic
                     WHERE ic.orderid = odmast.orderid),
                   0
                  ),0);
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_SimpleTradingFeeCalculate');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_SimpleTradingFeeCalculate');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_SimpleTradingFeeCalculate;
---------------------------------pr_OrderCleanUp------------------------------------------------
/*  PROCEDURE pr_OrderCleanUp(p_err_code  OUT varchar2)
  IS
      indate varchar2(20);
  BEGIN
    plog.setendsection(pkgctx, 'pr_OrderCleanUp');
    select varvalue into indate from sysvar where grname ='SYSTEM' and varname ='CURRDATE';

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_OrderCleanUp');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_OrderCleanUp');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_OrderCleanUp;*/

---------------------------------pr_LNOpenLoanAccount------------------------------------------------
  PROCEDURE pr_LNOpenLoanAccount(p_err_code  OUT varchar2)
  IS
    V_DTCURDATE DATE;
   V_STRACCTNO VARCHAR2(16);
   V_STRBRID VARCHAR2(4);
  BEGIN
    plog.setendsection(pkgctx, 'pr_LNOpenLoanAccount');
    --1.Cap nhat lai thong tin tu loai hinh Loan xuong tai khoan vay.
    --Neu co thay doi thi cac deal giai ngan sap toi se an theo thay doi trong loai hinh
    --Begin MSBS-2589
    /*For i in (select * from lntype)
        Loop
               UPDATE lnmast
               SET LNTYPE = i.LNTYPE,
                   LNCLDR = i.LNCLDR,
                   PRINFRQ = i.PRINFRQ,
                   PRINPERIOD = i.PRINPERIOD,
                   INTFRGCD = i.INTFRQCD,
                   INTDAY = i.INTDAY,
                   INTPERIOD = i.INTPERIOD,
                   NINTCD = i.NINTCD,
                   OINTCD = i.OINTCD,
                   RATE1 = i.RATE1,
                   RATE2 = i.RATE2,
                   RATE3 = i.RATE3,
                   OPRINFRQ = i.OPRINFRQ,
                   OPRINPERIOD = i.OPRINPERIOD,
                   OINTFRQCD = i.OINTFRQCD,
                   OINTDAY = i.OINTDAY,
                   ORATE1 = i.ORATE1,
                   ORATE2 = i.ORATE2,
                   ORATE3 = i.ORATE3,
                   DRATE = i.DRATE,
                   ADVPAY = i.ADVPAY,
                   PREPAID = i.PREPAID,
                   ADVPAYFEE = i.ADVPAYFEE,
                   MINTERM= i.MINTERM,
                   INTPAIDMETHOD= i.INTPAIDMETHOD,
                   CFRATE1=i.CFRATE1,
                   CFRATE2=i.CFRATE2,
                   CFRATE3=i.CFRATE3,
                   INTOVDCD = i.INTOVDCD,
                   BANKPAIDMETHOD=i.bankpaidmethod,
                   ISPAYBANK = i.ISPAYBANK
                WHERE lnmast.actype =i.actype and autoapply IN  ('A','L'); -- cap nhat cac hop dong autoappy in  ('A','N')
                Commit;
        End loop;*/
        MERGE INTO lnmast ln
        USING (SELECT * FROM lntype) lnt
        ON (ln.actype = lnt.actype)
        WHEN MATCHED THEN
          UPDATE SET LNTYPE = lnt.LNTYPE,
                   LNCLDR = lnt.LNCLDR,
                   PRINFRQ = lnt.PRINFRQ,
                   PRINPERIOD = lnt.PRINPERIOD,
                   INTFRGCD = lnt.INTFRQCD,
                   INTDAY = lnt.INTDAY,
                   INTPERIOD = lnt.INTPERIOD,
                   NINTCD = lnt.NINTCD,
                   OINTCD = lnt.OINTCD,
                   RATE1 = lnt.RATE1,
                   RATE2 = lnt.RATE2,
                   RATE3 = lnt.RATE3,
                   OPRINFRQ = lnt.OPRINFRQ,
                   OPRINPERIOD = lnt.OPRINPERIOD,
                   OINTFRQCD = lnt.OINTFRQCD,
                   OINTDAY = lnt.OINTDAY,
                   ORATE1 = lnt.ORATE1,
                   ORATE2 = lnt.ORATE2,
                   ORATE3 = lnt.ORATE3,
                   DRATE = lnt.DRATE,
                   ADVPAY = lnt.ADVPAY,
                   PREPAID = lnt.PREPAID,
                   ADVPAYFEE = lnt.ADVPAYFEE,
                   MINTERM= lnt.MINTERM,
                   INTPAIDMETHOD= lnt.INTPAIDMETHOD,
                   CFRATE1=lnt.CFRATE1,
                   CFRATE2=lnt.CFRATE2,
                   CFRATE3=lnt.CFRATE3,
                   INTOVDCD = lnt.INTOVDCD,
                   BANKPAIDMETHOD=lnt.bankpaidmethod,
                   ISPAYBANK = lnt.ISPAYBANK
            WHERE autoapply IN  ('A','L');
        COMMIT;
        --cap nhat vao lnschd voi cac hop dong autoapply='A'
        /*FOR i2 IN (SELECT * from lnmast WHERE autoapply='A')
          LOOP
            UPDATE lnschd
            SET
                   RATE1 = i2.RATE1,
                   RATE2 = i2.RATE2,
                   RATE3 = i2.RATE3,
                   CFRATE1=i2.CFRATE1,
                   CFRATE2=i2.CFRATE2,
                   CFRATE3=i2.CFRATE3
            WHERE LNSCHD.ACCTNO=I2.ACCTNO;
            COMMIT;
            END LOOP ;*/
        MERGE INTO lnschd lns
        USING (SELECT * from lnmast WHERE autoapply='A') ln
        ON (lns.acctno = ln.acctno)
        WHEN MATCHED THEN
          UPDATE SET RATE1 = ln.RATE1,
                   RATE2 = ln.RATE2,
                   RATE3 = ln.RATE3,
                   CFRATE1=ln.CFRATE1,
                   CFRATE2=ln.CFRATE2,
                   CFRATE3=ln.CFRATE3;
        COMMIT;
        --end MSBS-2589
    --2.Mo moi tai khoan vay neu chua co, cua nhung tai khoan xuat hien khoan vay
    SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO V_DTCURDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    FOR REC IN
        (
       select distinct * from (
            SELECT CI.ACCTNO, LNT.CCYCD, LNT.LNTYPE, LNT.LNCLDR, LNT.PRINFRQ, LNT.PRINPERIOD,
                LNT.INTFRQCD, LNT.INTDAY, LNT.INTPERIOD, LNT.NINTCD, LNT.OINTCD, LNT.RATE1, LNT.RATE2, LNT.RATE3,
                LNT.OPRINFRQ, LNT.OPRINPERIOD, LNT.OINTFRQCD, LNT.OINTDAY, LNT.ORATE1, LNT.ORATE2, LNT.ORATE3,
                LNT.ADVPAY, LNT.ADVPAYFEE, LNT.DRATE, LNT.ACTYPE, LNT.PREPAID,
                LNT.CFRATE1, LNT.CFRATE2, LNT.CFRATE3,LNT.Minterm,LNT.AUTOAPPLY,LNT.INTPAIDMETHOD,
                LNT.RRTYPE, LNT.CIACCTNO, LNT.CUSTBANK, LNT.INTOVDCD,LNT.BANKPAIDMETHOD,lnt.ISPAYBANK
            FROM CIMAST CI, AFMAST AF, AFTYPE AFT, LNTYPE LNT
            WHERE CI.AFACCTNO = AF.ACCTNO AND CI.STATUS = 'A' AND round(ci.trfbuyamt - CI.BALANCE) > 0
                AND AF.ACTYPE = AFT.ACTYPE AND LNT.ACTYPE = AFT.T0LNTYPE --AND AF.STATUS = 'A'
                AND LNT.STATUS <> 'N'
                and not exists (select 1 from lnmast where lnmast.trfacctno = ci.acctno and lnmast.actype = aft.t0lntype and lnmast.STATUS NOT IN ('P','R','C') AND lnmast.FTYPE='AF')
            union all
            SELECT CI.ACCTNO, LNT.CCYCD, LNT.LNTYPE, LNT.LNCLDR, LNT.PRINFRQ, LNT.PRINPERIOD,
                LNT.INTFRQCD, LNT.INTDAY, LNT.INTPERIOD, LNT.NINTCD, LNT.OINTCD, LNT.RATE1, LNT.RATE2, LNT.RATE3,
                LNT.OPRINFRQ, LNT.OPRINPERIOD, LNT.OINTFRQCD, LNT.OINTDAY, LNT.ORATE1, LNT.ORATE2, LNT.ORATE3,
                LNT.ADVPAY, LNT.ADVPAYFEE, LNT.DRATE, LNT.ACTYPE, LNT.PREPAID,
                LNT.CFRATE1, LNT.CFRATE2, LNT.CFRATE3,LNT.Minterm,LNT.AUTOAPPLY,LNT.INTPAIDMETHOD,
                LNT.RRTYPE, LNT.CIACCTNO, LNT.CUSTBANK, LNT.INTOVDCD,LNT.Bankpaidmethod,lnt.ISPAYBANK
            FROM CIMAST CI, AFMAST AF, AFTYPE AFT, LNTYPE LNT
            WHERE CI.AFACCTNO = AF.ACCTNO AND CI.STATUS = 'A' AND round(ci.trfbuyamt - CI.BALANCE) > 0
                AND AF.ACTYPE = AFT.ACTYPE AND LNT.ACTYPE = AFT.LNTYPE --AND AF.STATUS = 'A'
                AND LNT.STATUS <> 'N'
                and not exists (select 1 from lnmast where lnmast.trfacctno = ci.acctno and lnmast.actype = aft.lntype and lnmast.STATUS NOT IN ('P','R','C') AND lnmast.FTYPE='AF')
            union all
            SELECT CI.ACCTNO, LNT.CCYCD, LNT.LNTYPE, LNT.LNCLDR, LNT.PRINFRQ, LNT.PRINPERIOD,
                LNT.INTFRQCD, LNT.INTDAY, LNT.INTPERIOD, LNT.NINTCD, LNT.OINTCD, LNT.RATE1, LNT.RATE2, LNT.RATE3,
                LNT.OPRINFRQ, LNT.OPRINPERIOD, LNT.OINTFRQCD, LNT.OINTDAY, LNT.ORATE1, LNT.ORATE2, LNT.ORATE3,
                LNT.ADVPAY, LNT.ADVPAYFEE, LNT.DRATE, LNT.ACTYPE, LNT.PREPAID,
                LNT.CFRATE1, LNT.CFRATE2, LNT.CFRATE3,LNT.Minterm,LNT.AUTOAPPLY,LNT.INTPAIDMETHOD,
                LNT.RRTYPE, LNT.CIACCTNO, LNT.CUSTBANK, LNT.INTOVDCD,LNT.BANKPAIDMETHOD,lnt.ISPAYBANK
            FROM CIMAST CI, AFMAST AF, AFTYPE AFT, LNTYPE LNT, AFIDTYPE AFID
            WHERE CI.AFACCTNO = AF.ACCTNO AND CI.STATUS = 'A' AND round(ci.trfbuyamt - CI.BALANCE) > 0
                AND AF.ACTYPE = AFT.ACTYPE --AND AF.STATUS = 'A'
                AND LNT.STATUS <> 'N' and AFT.actype = afid.aftype and afid.objname = 'LN.LNTYPE' AND LNT.ACTYPE = AFID.ACTYPE
                and not exists (select 1 from lnmast where lnmast.trfacctno = ci.acctno and lnmast.actype = AFID.ACTYPE and lnmast.STATUS NOT IN ('P','R','C') AND lnmast.FTYPE='AF')
            )
        )
    LOOP
        V_STRBRID:= SUBSTR(REC.ACCTNO,0,4);
        V_STRBRID:= SUBSTR(REC.ACCTNO,0,4);
        SELECT SEQ_LNMAST.NEXTVAL LNACCTNO
            into V_STRACCTNO
        FROM DUAL;
        V_STRACCTNO:=substr('000000' || V_STRACCTNO,length('000000' || V_STRACCTNO)-5,6);
        V_STRACCTNO:=V_STRBRID    || substr(to_char(V_DTCURDATE,systemnums.c_date_format),1,2)
                                  || substr(to_char(V_DTCURDATE,systemnums.c_date_format),4,2)
                                  || substr(to_char(V_DTCURDATE,systemnums.c_date_format),9,2)
                                  || V_STRACCTNO;
            INSERT INTO LNMAST
          ("ACTYPE", "ACCTNO", "CCYCD", "BANKID", "APPLID", "OPNDATE",
           "EXPDATE", "EXTDATE", "CLSDATE", "RLSDATE", "LASTDATE", "ACRDATE",
           "OACRDATE", "STATUS", "PSTATUS", "TRFACCTNO", "PRINAFT", "INTAFT",
           "LNTYPE", "LNCLDR", "PRINFRQ", "PRINPERIOD", "INTFRGCD", "INTDAY",
           "INTPERIOD", "NINTCD", "OINTCD", "RATE1", "RATE2", "RATE3",
           "OPRINFRQ", "OPRINPERIOD", "OINTFRQCD", "OINTDAY", "ORATE1",
           "ORATE2", "ORATE3", "DRATE", "APRLIMIT", "RLSAMT", "PRINPAID",
           "PRINNML", "PRINOVD", "INTNMLACR", "INTOVDACR", "INTNMLPBL",
           "INTNMLOVD", "INTDUE", "INTPAID", "INTPREPAID", "NOTES",
           "LNCLASS", "ADVPAY", "ADVPAYFEE", "ORLSAMT", "OPRINPAID",
           "OPRINNML", "OPRINOVD", "OINTNMLACR", "OINTNMLOVD", "OINTOVDACR",
           "OINTDUE", "OINTPAID", "OINTPREPAID", "FEE", "FEEPAID", "FEEDUE",
           "FEEOVD", "FTYPE", "PREPAID",
           "CFRATE1","CFRATE2","CFRATE3","MINTERM","AUTOAPPLY","INTPAIDMETHOD",
           "FEEINTNMLACR","FEEINTOVDACR","FEEINTNMLOVD","FEEINTDUE","FEEINTPREPAID","FEEINTPAID",
           "INTFLOATAMT","FEEFLOATAMT",RRTYPE, CIACCTNO, CUSTBANK,INTOVDCD,BANKPAIDMETHOD,ISPAYBANK)
        VALUES
          (REC.ACTYPE, V_STRACCTNO, REC.CCYCD, NULL, NULL, V_DTCURDATE,
           V_DTCURDATE, NULL, NULL, V_DTCURDATE, NULL, V_DTCURDATE,
           V_DTCURDATE, 'N', '', REC.ACCTNO, 'Y', 'Y', REC.LNTYPE,
           REC.LNCLDR, REC.PRINFRQ, REC.PRINPERIOD, REC.INTFRQCD, REC.INTDAY,
           REC.INTPERIOD, REC.NINTCD, REC.OINTCD, REC.RATE1, REC.RATE2,
           REC.RATE3, REC.OPRINFRQ, REC.OPRINPERIOD, REC.OINTFRQCD,
           REC.OINTDAY, REC.ORATE1, REC.ORATE2, REC.ORATE3, REC.DRATE, 0, 0,
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 'I', REC.ADVPAY,
           REC.ADVPAYFEE, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'AF',REC.PREPAID,
           REC.CFRATE1,REC.CFRATE2,REC.CFRATE3,REC.MINTERM,REC.AUTOAPPLY,REC.INTPAIDMETHOD,
           0,0,0,0,0,0,0,0, REC.RRTYPE, REC.CIACCTNO, REC.CUSTBANK, REC.INTOVDCD,REC.BANKPAIDMETHOD,rec.ISPAYBANK);

    END LOOP;
 --1.7.1.1 MSBS-2223 import thay đổi lãi suất vay của KH/nhóm KH
    --1.7.2.8: chinh sua lai
    ---
    for rec_I039T in
      (select * from TBLINTCHANGEHIST tb where tb.status='A' and tb.tdate < V_DTCURDATE)
      loop
        Update Lnmast Ln
        Set    (Ln.Rate1, Ln.Rate2, Ln.Rate3, Ln.Cfrate1, Ln.Cfrate2, Ln.Cfrate3, Ln.Autoapply) =
               (Select Lt.Rate1
                      ,Lt.Rate2
                      ,Lt.Rate3
                      ,Lt.Cfrate1
                      ,Lt.Cfrate2
                      ,lt.cfrate3
                      ,lt.autoapply
                From   Lntype Lt
                Where  Lt.Actype = Ln.Actype
                and ln.actype=rec_I039T.Lntype)
          where ln.actype=rec_I039T.Lntype
          and ln.trfacctno=rec_I039T.Afacctno;
     update TBLINTCHANGEHIST
     set status='E', deltd = 'Y'
     where autoid=rec_I039T.Autoid;
     end LOOP;
           ---
    --begin MSBS-2589
    /*for rec_i039 in
      (select ln.acctno, tb.* from TBLINTCHANGEHIST tb, LNMAST ln
       where ln.ACTYPE= tb.lntype and ln.TRFACCTNO = tb.afacctno and  tb.status='A'\* and tb.deltd='N'*\)
      loop
        if rec_i039.fdate <= V_DTCURDATE and rec_i039.tdate >= V_DTCURDATE then
          update lnmast
          set RATE1=rec_i039.rate1a,
              RATE2=rec_i039.rate2a,
              RATE3=rec_i039.rate3a,
              CFRATE1=rec_i039.cfrate1a,
              CFRATE2=rec_i039.cfrate2a,
              CFRATE3=rec_i039.cfrate3a,
              AUTOAPPLY='N'
           where acctno =rec_i039.acctno;
           if rec_i039.alllnschd='Y' then
             update lnschd
               set
                RATE1=rec_i039.rate1a,
                RATE2=rec_i039.rate2a,
                RATE3=rec_i039.rate3a,
                CFRATE1=rec_i039.cfrate1a,
                CFRATE2=rec_i039.cfrate2a,
                CFRATE3=rec_i039.cfrate3a
               where acctno=rec_i039.acctno
               AND PAIDDATE is  null;
           end if;
           update TBLINTCHANGEHIST
           set deltd='Y'
           where autoid=rec_I039.Autoid;
           end if;
          end loop;*/

    MERGE INTO lnmast ln
    USING (select ln.acctno, tb.* from TBLINTCHANGEHIST tb, LNMAST ln
       where ln.ACTYPE= tb.lntype and ln.TRFACCTNO = tb.afacctno AND tb.status='A'
       AND fdate <= V_DTCURDATE AND tdate >= V_DTCURDATE) tb
    ON (ln.acctno = tb.acctno)
    WHEN MATCHED THEN
      UPDATE SET RATE1=tb.rate1a,
              RATE2=tb.rate2a,
              RATE3=tb.rate3a,
              CFRATE1=tb.cfrate1a,
              CFRATE2=tb.cfrate2a,
              CFRATE3=tb.cfrate3a,
              AUTOAPPLY='N';

    MERGE INTO lnschd ln
    USING (select ln.acctno, tb.* from TBLINTCHANGEHIST tb, LNMAST ln
       where ln.ACTYPE= tb.lntype and ln.TRFACCTNO = tb.afacctno AND tb.status='A'
       AND fdate <= V_DTCURDATE AND tdate >= V_DTCURDATE
       AND alllnschd='Y') tb
    ON (ln.acctno = tb.acctno)
    WHEN MATCHED THEN
      UPDATE SET RATE1=tb.rate1a,
                RATE2=tb.rate2a,
                RATE3=tb.rate3a,
                CFRATE1=tb.cfrate1a,
                CFRATE2=tb.cfrate2a,
                CFRATE3=tb.cfrate3a
               WHERE PAIDDATE is  null;

    MERGE INTO TBLINTCHANGEHIST ln
    USING (select ln.acctno, tb.* from TBLINTCHANGEHIST tb, LNMAST ln
       where ln.ACTYPE= tb.lntype and ln.TRFACCTNO = tb.afacctno AND tb.status='A'
       AND fdate <= V_DTCURDATE AND tdate >= V_DTCURDATE) tb
    ON (ln.autoid = tb.autoid)
    WHEN MATCHED THEN
      UPDATE SET deltd='Y';

    --end MSBS-2589
    ---en 1.7.1.1 MSBS-2223  import thay đổi lãi suất vay của KH/nhóm KH
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_LNOpenLoanAccount');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_LNOpenLoanAccount');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_LNOpenLoanAccount;

---------------------------------pr_LNCleanSchedule------------------------------------------------
  PROCEDURE pr_LNCleanSchedule(p_err_code  OUT varchar2)
  IS
    l_const_05 NUMBER(10,4);
  BEGIN
    plog.setendsection(pkgctx, 'pr_LNCleanSchedule');
    l_const_05:= 0.5;

    UPDATE lnschd SET intdue = 0 WHERE abs(intdue) < l_const_05;
    UPDATE lnschd SET intnmlacr = 0 WHERE abs(intnmlacr) < l_const_05;
    UPDATE lnschd SET intovd = 0 WHERE abs(intovd) < l_const_05;
    UPDATE lnschd SET intovdprin = 0 WHERE abs(intovdprin) < l_const_05;

    UPDATE lnmast SET intnmlacr = 0 WHERE abs(intnmlacr) < l_const_05;
    UPDATE lnmast SET intdue = 0 WHERE abs(intdue) < l_const_05;
    UPDATE lnmast SET intovdacr = 0 WHERE abs(intovdacr) < l_const_05;

    UPDATE lnschd SET feeintdue = 0 WHERE abs(feeintdue) < l_const_05;
    UPDATE lnschd SET feeintnmlacr = 0 WHERE abs(feeintnmlacr) < l_const_05;
    UPDATE lnschd SET FEEINTOVDACR = 0 WHERE abs(FEEINTOVDACR) < l_const_05;

    UPDATE lnmast SET feeintnmlacr = 0 WHERE abs(feeintnmlacr) < l_const_05;
    UPDATE lnmast SET feeintdue = 0 WHERE abs(feeintdue) < l_const_05;
    UPDATE lnmast SET feeintovdacr = 0 WHERE abs(feeintovdacr) < l_const_05;

    UPDATE lnmast SET ointnmlacr = 0 WHERE abs(ointnmlacr) < l_const_05;
    UPDATE lnmast SET ointdue = 0 WHERE abs(ointdue) < l_const_05;
    UPDATE lnmast SET ointovdacr = 0 WHERE abs(ointovdacr) < l_const_05;

    INSERT INTO LNSCHDHIST
       SELECT * FROM LNSCHD WHERE ABS(NML) < 1 AND ABS(OVD) < 1 AND ABS(INTNMLACR) < 1
        AND ABS(FEEINTNMLACR) < 1 AND ABS(FEE) <1  AND ABS(FEEINTDUE) < 1 AND ABS(FEEINTOVDACR) < 1
       AND ABS(INTDUE) < 1 AND ABS(INTOVD) < 1 AND ABS(FEEDUE) < 1 AND ABS(FEEOVD) < 1
        AND ABS(INTOVDPRIN) < 1  AND ABS(FEEINTNMLOVD)  < 1;
    DELETE LNSCHD WHERE ABS(NML) < 1 AND ABS(OVD) < 1 AND ABS(INTNMLACR) < 1 AND ABS(FEE) <1
     AND ABS(FEEINTNMLACR) < 1 AND  ABS(FEEINTNMLOVD)  < 1  AND ABS(FEEINTDUE) < 1 AND ABS(FEEINTOVDACR) < 1
       AND ABS(INTDUE) < 1 AND ABS(INTOVD) < 1 AND ABS(FEEDUE) < 1 AND ABS(FEEOVD) < 1 AND ABS(INTOVDPRIN) < 1;
    --BACK UP cac tai khoan loan cho cac deal.
    INSERT INTO LNMASTHIST SELECT * FROM LNMAST WHERE FTYPE ='DF'
    AND NOT EXISTS (SELECT ACCTNO FROM LNSCHD WHERE ACCTNO =LNMAST.ACCTNO)
    AND NOT EXISTS (SELECT ACCTNO FROM DFMAST WHERE LNACCTNO =LNMAST.ACCTNO AND DFQTTY + RCVQTTY + CARCVQTTY + BLOCKQTTY + CACASHQTTY>0);

    DELETE FROM LNMAST WHERE FTYPE ='DF' AND
    NOT EXISTS (SELECT ACCTNO FROM LNSCHD WHERE ACCTNO =LNMAST.ACCTNO)
    AND NOT EXISTS (SELECT ACCTNO FROM DFMAST WHERE LNACCTNO =LNMAST.ACCTNO AND DFQTTY + RCVQTTY + CARCVQTTY + BLOCKQTTY + CACASHQTTY>0);

    --Begin MSBS-2589
    -- intnmlacr
    /*for rec in
    (
        select ln.acctno, ln.trfacctno,
        nvl(max(ln.intnmlacr),0) intnmlacr, nvl(sum(ls.intnmlacr),0) schdintnmlacr
        from lnmast ln, (select * from lnschd where reftype = 'P') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.intnmlacr),0)) - abs(nvl(sum(ls.intnmlacr),0))) BETWEEN 0.0001 and 2
    )
    loop
        update lnmast
        set intnmlacr = rec.schdintnmlacr
        where acctno = rec.acctno and trfacctno = rec.trfacctno;
    end loop;*/

    MERGE INTO lnmast ln
    USING (select ln.acctno, ln.trfacctno,
        nvl(max(ln.intnmlacr),0) intnmlacr, nvl(sum(ls.intnmlacr),0) schdintnmlacr
        from lnmast ln, (select * from lnschd where reftype = 'P') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.intnmlacr),0)) - abs(nvl(sum(ls.intnmlacr),0))) BETWEEN 0.0001 and 2) ls
    ON (ln.acctno = ls.acctno AND ln.trfacctno = ls.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET intnmlacr = ls.schdintnmlacr;

    -- intdue
    /*for rec in
    (
        select ln.acctno, ln.trfacctno, nvl(max(ln.intdue),0) intdue, nvl(sum(ls.intdue),0) schdintdue
        from lnmast ln, (select * from lnschd where reftype = 'P') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.intdue),0)) - abs(nvl(sum(ls.intdue),0))) BETWEEN 0.0001 and 2
    )
    loop
        update lnmast
        set intdue = rec.schdintdue
        where acctno = rec.acctno and trfacctno = rec.trfacctno;
    end loop;*/

    MERGE INTO lnmast ln
    USING (select ln.acctno, ln.trfacctno, nvl(max(ln.intdue),0) intdue, nvl(sum(ls.intdue),0) schdintdue
        from lnmast ln, (select * from lnschd where reftype = 'P') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.intdue),0)) - abs(nvl(sum(ls.intdue),0))) BETWEEN 0.0001 and 2) ls
    ON (ln.acctno = ls.acctno AND ln.trfacctno = ls.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET intdue = ls.schdintdue;

    -- intnmlovd
    /*for rec in
    (
        select ln.acctno, ln.trfacctno, nvl(max(ln.intnmlovd),0) intnmlovd, nvl(sum(ls.intovd),0) schdintnmlovd
        from lnmast ln, (select * from lnschd where reftype = 'P') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.intnmlovd),0)) - abs(nvl(sum(ls.intovd),0))) BETWEEN 0.0001 and 2
    )
    loop
        update lnmast
        set intnmlovd = rec.schdintnmlovd
        where acctno = rec.acctno and trfacctno = rec.trfacctno;
    end loop;*/

    MERGE INTO lnmast ln
    USING (select ln.acctno, ln.trfacctno, nvl(max(ln.intnmlovd),0) intnmlovd, nvl(sum(ls.intovd),0) schdintnmlovd
        from lnmast ln, (select * from lnschd where reftype = 'P') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.intnmlovd),0)) - abs(nvl(sum(ls.intovd),0))) BETWEEN 0.0001 and 2) ls
    ON (ln.acctno = ls.acctno AND ln.trfacctno = ls.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET intnmlovd = ls.schdintnmlovd;

    -- intovdacr
    /*for rec in
    (
        select ln.acctno, ln.trfacctno, nvl(max(ln.intovdacr),0) intovdacr, nvl(sum(ls.intovdprin),0) schdintovdacr
        from lnmast ln, (select * from lnschd where reftype = 'P') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.intovdacr),0)) - abs(nvl(sum(ls.intovdprin),0))) BETWEEN 0.0001 and 2
    )
    loop
        update lnmast
        set intovdacr = rec.schdintovdacr
        where acctno = rec.acctno and trfacctno = rec.trfacctno;
    end loop;*/

    MERGE INTO lnmast ln
    USING (select ln.acctno, ln.trfacctno, nvl(max(ln.intovdacr),0) intovdacr, nvl(sum(ls.intovdprin),0) schdintovdacr
        from lnmast ln, (select * from lnschd where reftype = 'P') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.intovdacr),0)) - abs(nvl(sum(ls.intovdprin),0))) BETWEEN 0.0001 and 2) ls
    ON (ln.acctno = ls.acctno AND ln.trfacctno = ls.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET intovdacr = ls.schdintovdacr;

    -- feeintnmlacr
    /*for rec in
    (
        select ln.acctno, ln.trfacctno, nvl(max(ln.feeintnmlacr),0) feeintnmlacr, nvl(sum(ls.feeintnmlacr),0) schdfeeintnmlacr
        from lnmast ln, (select * from lnschd where reftype = 'P') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.feeintnmlacr),0)) - abs(nvl(sum(ls.feeintnmlacr),0))) BETWEEN 0.0001 and 2
    )
    loop
        update lnmast
        set feeintnmlacr = rec.schdfeeintnmlacr
        where acctno = rec.acctno and trfacctno = rec.trfacctno;
    end loop;*/

    MERGE INTO lnmast ln
    USING (select ln.acctno, ln.trfacctno, nvl(max(ln.feeintnmlacr),0) feeintnmlacr, nvl(sum(ls.feeintnmlacr),0) schdfeeintnmlacr
        from lnmast ln, (select * from lnschd where reftype = 'P') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.feeintnmlacr),0)) - abs(nvl(sum(ls.feeintnmlacr),0))) BETWEEN 0.0001 and 2) ls
    ON (ln.acctno = ls.acctno AND ln.trfacctno = ls.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET feeintnmlacr = ls.schdfeeintnmlacr;

    -- feeintdue
    /*for rec in
    (
        select ln.acctno, ln.trfacctno, nvl(max(ln.feeintdue),0) feeintdue, nvl(sum(ls.feeintdue),0) schdfeeintdue
        from lnmast ln, (select * from lnschd where reftype = 'P') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.feeintdue),0)) - abs(nvl(sum(ls.feeintdue),0))) BETWEEN 0.0001 and 2
    )
    loop
        update lnmast
        set feeintdue = rec.schdfeeintdue
        where acctno = rec.acctno and trfacctno = rec.trfacctno;
    end loop;*/

    MERGE INTO lnmast ln
    USING (select ln.acctno, ln.trfacctno, nvl(max(ln.feeintdue),0) feeintdue, nvl(sum(ls.feeintdue),0) schdfeeintdue
        from lnmast ln, (select * from lnschd where reftype = 'P') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.feeintdue),0)) - abs(nvl(sum(ls.feeintdue),0))) BETWEEN 0.0001 and 2) ls
    ON (ln.acctno = ls.acctno AND ln.trfacctno = ls.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET feeintdue = ls.schdfeeintdue;

    -- feeintnmlovd
    /*for rec in
    (
        select ln.acctno, ln.trfacctno, nvl(max(ln.feeintnmlovd),0) feeintnmlovd, nvl(sum(ls.feeintnmlovd),0) schdfeeintnmlovd
        from lnmast ln, (select * from lnschd where reftype = 'P') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.feeintnmlovd),0)) - abs(nvl(sum(ls.feeintnmlovd),0))) BETWEEN 0.0001 and 2
    )
    loop
        update lnmast
        set feeintnmlovd = rec.schdfeeintnmlovd
        where acctno = rec.acctno and trfacctno = rec.trfacctno;
    end loop;*/

    MERGE INTO lnmast ln
    USING (select ln.acctno, ln.trfacctno, nvl(max(ln.feeintnmlovd),0) feeintnmlovd, nvl(sum(ls.feeintnmlovd),0) schdfeeintnmlovd
        from lnmast ln, (select * from lnschd where reftype = 'P') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.feeintnmlovd),0)) - abs(nvl(sum(ls.feeintnmlovd),0))) BETWEEN 0.0001 and 2) ls
    ON (ln.acctno = ls.acctno AND ln.trfacctno = ls.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET feeintnmlovd = ls.schdfeeintnmlovd;

    -- feeintovdacr
    /*for rec in
    (
        select ln.acctno, ln.trfacctno, nvl(max(ln.feeintovdacr),0) feeintovdacr, nvl(sum(ls.feeintovdacr),0) schdfeeintovdacr
        from lnmast ln, (select * from lnschd where reftype = 'P') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.feeintovdacr),0)) - abs(nvl(sum(ls.feeintovdacr),0))) BETWEEN 0.0001 and 2
    )
    loop
        update lnmast
        set feeintovdacr = rec.schdfeeintovdacr
        where acctno = rec.acctno and trfacctno = rec.trfacctno;
    end loop;*/

    MERGE INTO lnmast ln
    USING (select ln.acctno, ln.trfacctno, nvl(max(ln.feeintovdacr),0) feeintovdacr, nvl(sum(ls.feeintovdacr),0) schdfeeintovdacr
        from lnmast ln, (select * from lnschd where reftype = 'P') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.feeintovdacr),0)) - abs(nvl(sum(ls.feeintovdacr),0))) BETWEEN 0.0001 and 2) ls
    ON (ln.acctno = ls.acctno AND ln.trfacctno = ls.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET feeintovdacr = ls.schdfeeintovdacr;

    -- T0
    -- ointnmlacr
    /*for rec in
    (
        select ln.acctno, ln.trfacctno, nvl(max(ln.ointnmlacr),0) intnmlacr, nvl(sum(ls.intnmlacr),0) schdintnmlacr
        from lnmast ln, (select * from lnschd where reftype = 'GP') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.ointnmlacr),0)) - abs(nvl(sum(ls.intnmlacr),0))) BETWEEN 0.0001 and 2
    )
    loop
        update lnmast
        set ointnmlacr = rec.schdintnmlacr
        where acctno = rec.acctno and trfacctno = rec.trfacctno;
    end loop;*/

    MERGE INTO lnmast ln
    USING (select ln.acctno, ln.trfacctno, nvl(max(ln.ointnmlacr),0) intnmlacr, nvl(sum(ls.intnmlacr),0) schdintnmlacr
        from lnmast ln, (select * from lnschd where reftype = 'GP') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.ointnmlacr),0)) - abs(nvl(sum(ls.intnmlacr),0))) BETWEEN 0.0001 and 2) ls
    ON (ln.acctno = ls.acctno AND ln.trfacctno = ls.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET ointnmlacr = ls.schdintnmlacr;

    -- ointdue
    /*for rec in
    (
        select ln.acctno, ln.trfacctno, nvl(max(ln.ointdue),0) intdue, nvl(sum(ls.intdue),0) schdintdue
        from lnmast ln, (select * from lnschd where reftype = 'GP') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.ointdue),0)) - abs(nvl(sum(ls.intdue),0))) BETWEEN 0.0001 and 2
    )
    loop
        update lnmast
        set ointdue = rec.schdintdue
        where acctno = rec.acctno and trfacctno = rec.trfacctno;
    end loop;*/

    MERGE INTO lnmast ln
    USING (select ln.acctno, ln.trfacctno, nvl(max(ln.ointdue),0) intdue, nvl(sum(ls.intdue),0) schdintdue
        from lnmast ln, (select * from lnschd where reftype = 'GP') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.ointdue),0)) - abs(nvl(sum(ls.intdue),0))) BETWEEN 0.0001 and 2) ls
    ON (ln.acctno = ls.acctno AND ln.trfacctno = ls.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET ointdue = ls.schdintdue;

    -- ointnmlovd
    /*for rec in
    (
        select ln.acctno, ln.trfacctno, nvl(max(ln.ointnmlovd),0) intnmlovd, nvl(sum(ls.intovd),0) schdintnmlovd
        from lnmast ln, (select * from lnschd where reftype = 'GP') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.ointnmlovd),0)) - abs(nvl(sum(ls.intovd),0))) BETWEEN 0.0001 and 2
    )
    loop
        update lnmast
        set ointnmlovd = rec.schdintnmlovd
        where acctno = rec.acctno and trfacctno = rec.trfacctno;
    end loop;*/

    MERGE INTO lnmast ln
    USING (select ln.acctno, ln.trfacctno, nvl(max(ln.ointnmlovd),0) intnmlovd, nvl(sum(ls.intovd),0) schdintnmlovd
        from lnmast ln, (select * from lnschd where reftype = 'GP') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.ointnmlovd),0)) - abs(nvl(sum(ls.intovd),0))) BETWEEN 0.0001 and 2) ls
    ON (ln.acctno = ls.acctno AND ln.trfacctno = ls.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET ointnmlovd = ls.schdintnmlovd;

    -- ointovdacr
    /*for rec in
    (
        select ln.acctno, ln.trfacctno, nvl(max(ln.ointovdacr),0) intovdacr, nvl(sum(ls.intovdprin),0) schdintovdacr
        from lnmast ln, (select * from lnschd where reftype = 'GP') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.ointovdacr),0)) - abs(nvl(sum(ls.intovdprin),0))) BETWEEN 0.0001 and 2
    )
    loop
        update lnmast
        set ointovdacr = rec.schdintovdacr
        where acctno = rec.acctno and trfacctno = rec.trfacctno;
    end loop;*/

    MERGE INTO lnmast ln
    USING (select ln.acctno, ln.trfacctno, nvl(max(ln.ointovdacr),0) intovdacr, nvl(sum(ls.intovdprin),0) schdintovdacr
        from lnmast ln, (select * from lnschd where reftype = 'GP') ls
        where ln.acctno = ls.acctno(+) and ln.ftype = 'AF'
        group by ln.acctno , ln.trfacctno
        having abs(abs(nvl(max(ln.ointovdacr),0)) - abs(nvl(sum(ls.intovdprin),0))) BETWEEN 0.0001 and 2) ls
    ON (ln.acctno = ls.acctno AND ln.trfacctno = ls.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET ointovdacr = ls.schdintovdacr;
   --end MSBS-2589
-- begin binhvt MSBS-302
for v_ref in (
      select ci.afacctno,ci.odamt ,odamtlnmast, odamtlnschd from
            (select trfacctno,
                     nvl(sum(ln.prinnml + ln.prinovd + ln.intdue + ln.intnmlacr +
                             ln.intnmlovd + ln.intovdacr + ln.feeintdue +
                             ln.feeintnmlacr + ln.feeintnmlovd + ln.feeintovdacr
                             +ln.oprinnml+ln.oprinovd+ln.ointdue+ln.ointnmlacr+ln.ointnmlovd+ln.ointovdacr
                             ),
                         0) odamtlnmast
                from lnmast ln
               group by trfacctno ) LN,

             (select ln.trfacctno,
                     nvl(sum(lns.nml + lns.ovd + lns.intdue + lns.intovd +
                             lns.feedue + lns.feeovd + lns.intovdprin +
                             lns.intnmlacr + lns.feeintnmlacr + lns.feeintovdacr +
                             lns.feeintnmlovd + lns.feeintdue + lns.nmlfeeint +
                             lns.ovdfeeint + lns.feeintnml + lns.feeintovd),
                         0) odamtlnschd
                from lnschd lns, lnmast ln
                where lns.acctno=ln.acctno and lns.reftype in ('P','GP')
               group by ln.trfacctno)  LNS,
               cimast ci
       WHERE ci.afacctno=ln.trfacctno(+) and ci.afacctno=lns.trfacctno(+) and ci.odamt > 0
             --and nvl(lns.odamtlnschd,0)=0  and  nvl(ln.odamtlnmast,0)=0
    )
LOOP
    IF v_ref.odamtlnmast + v_ref.odamtlnschd = 0 THEN
        update cimast ci set ci.Odamt = 0 where ci.afacctno = v_ref.afacctno;
    ELSE
        IF v_ref.odamt - floor(v_ref.odamt) < 0.5 THEN
            update cimast ci set ci.Odamt = floor(v_ref.odamt) where ci.afacctno = v_ref.afacctno;
        END IF;
    END IF;

end loop;
 -- end binhvt
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_LNCleanSchedule');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_LNCleanSchedule');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_LNCleanSchedule;
---------------------------------pr_LNAutoPayment------------------------------------------------
  PROCEDURE pr_LNAutoPayment(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg               tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_T0PRINDUE number(20,0);
    l_T0PRINNML number(20,0);
    l_T0PRINOVD number(20,0);
    l_AvlAmt    number(20,0);
    l_FEEOVD number(20,0);
    l_T0INTNMLOVD number(20,0);
    l_INTNMLOVD number(20,0);
    l_T0INTOVDACR number(20,0);
    l_INTOVDACR number(20,0);
    l_FEEDUE number(20,0);
    l_T0INTDUE number(20,0);
    l_INTDUE number(20,0);
    l_FEENML number(20,0);
    l_T0INTNMLACR number(20,0);
    l_INTNMLACR number(20,0);
    l_PRINOVD number(20,0);
    l_PRINDUE number(20,0);
    l_PRINNML number(20,0);
    l_FEEINTNMLOVD number(20,0);
    l_FEEINTNMLACR number(20,0);
    l_FEEINTOVDACR number(20,0);
    l_FEEINTDUE number(20,0);
    l_ADVPAYFEE number(20,0);

    l_maxdebtcf number(20,0);
    l_intnmlacrbank number(20,0);

    l_default_date date;
    l_v_currdate date;

    v_indate varchar2(10);
    v_stryear varchar2(4);
    v_dblointnmlacr number(20,4);
    v_dblointovdacr number(20,4);
    v_intdays number(20);
    v_dblamt number(20,4);
    v_dbldrate number(10);
    v_count NUMBER;
    v_strSQL   VARCHAR2(1000);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_LNAutoPayment');



    select to_number(varvalue) into l_maxdebtcf from sysvar where varname = 'MAXDEBTCF';
    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD='5567';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='5567';


    l_default_date:= to_date('01/01/1999',systemnums.c_date_format);
    l_v_currdate:= to_date(l_CURRDATE,systemnums.c_date_format);

    plog.debug(pkgctx, 'Begin loop');
    for rec in
    (
            SELECT ci.acctno trfacctno,
                round(BALANCE + nvl(avladvance,0),0) AVLBAL,
                round(balance,0) balance,
                round(nvl(avladvance,0),0) TCV
            FROM CIMAST ci,
                (select --sum(advamt) avladvance,afacctno
                        sum(depoamt) avladvance, afacctno
                    from v_getAccountAvlAdvance group by afacctno) adv
            WHERE ci.acctno = adv.afacctno(+)
            and round(BALANCE + nvl(avladvance,0),0) > 0
            and exists (select 1 from lnmast where ftype = 'AF' and trfacctno = ci.acctno
                            and prinnml + prinovd + intnmlacr + intdue + intovdacr + intnmlovd + feeintnmlacr + feeintdue + feeintovdacr + feeintnmlovd
                                                    + oprinnml + oprinovd + ointnmlacr + ointdue + ointovdacr + ointnmlovd > 0)
            order by ci.acctno
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for' || rec.trfacctno);
        if cspks_lnproc.fn_Gen_Prepaid_Payment(rec.trfacctno, rec.AVLBAL, 'N', p_err_code) <> systemnums.c_success then
            plog.setendsection (pkgctx, 'pr_LNAutoPayment');
            return;
        end if;
        l_Desc:= 'CL.' || l_OrgDesc;

        for rec2 in
        (
            select ln.trfacctno, ln.acctno, ls.autoid lnschdid, lp.autoid,
                max(case when ln.ftype = 'AF' then 1 else 0 end) FINANCETYPE,
                max(ln.ADVPAYFEE) ADVPAYFEE, sum(lp.amt - lp.paidamt) AvlAmt,

                sum(case when reftype = 'GP' then ls.intovd else 0 end) T0INTNMLOVD,
                sum(case when reftype = 'GP' then ls.intovdprin else 0 end) T0INTOVDACR,
                sum(case when reftype = 'GP' then ls.ovd else 0 end) T0PRINOVD,
                sum(case when reftype = 'GP' then ls.intdue else 0 end) T0INTDUE,
                sum(case when reftype = 'GP' and overduedate = l_CURRDATE then ls.nml else 0 end) T0PRINDUE,
                sum(case when reftype = 'GP' then ls.intnmlacr else 0 end) T0INTNMLACR,
                sum(case when reftype = 'GP' then ls.nml else 0 end) T0PRINNML,

                sum(case when reftype = 'P' then ls.feeovd else 0 end) FEEOVD,
                sum(case when reftype = 'P' then ls.intovd else 0 end) INTNMLOVD,
                sum(case when reftype = 'P' then ls.feeintnmlovd else 0 end) FEEINTNMLOVD,
                sum(case when reftype = 'P' then ls.intovdprin else 0 end) INTOVDACR,
                sum(case when reftype = 'P' then ls.feeintovdacr else 0 end) FEEINTOVDACR,
                sum(case when reftype = 'P' then ls.ovd else 0 end) PRINOVD,
                sum(case when reftype = 'P' then ls.feedue else 0 end) FEEDUE,
                sum(case when reftype = 'P' then ls.intdue else 0 end) INTDUE,
                sum(case when reftype = 'P' then ls.feeintdue else 0 end) FEEINTDUE,
                sum(case when reftype = 'P' and overduedate = l_CURRDATE then ls.nml else 0 end) PRINDUE,
                sum(case when reftype = 'P' then ls.fee else 0 end) FEENML,
                sum(case when reftype = 'P' then ls.intnmlacr else 0 end) INTNMLACR,
                sum(case when reftype = 'P' then ls.feeintnmlacr else 0 end) FEEINTNMLACR,
                sum(case when reftype = 'P' then ls.nml else 0 end) PRINNML,
                sum(case when reftype = 'P' then ls.INTNMLACRBANK else 0 end) INTNMLACRBANK


            from lnmast ln, lnpaidalloc lp, lnschd ls
            where ln.acctno = lp.lnacctno and lp.lnschdid = ls.autoid
            and ln.trfacctno = rec.trfacctno and instr(ls.reftype,'P') > 0
            and lp.amt > lp.paidamt and lp.status = 'P'
            group by ln.trfacctno, ln.acctno, ls.autoid, lp.autoid
            order by lp.autoid
        )
        loop -- rec2
            l_AvlAmt:= rec2.AvlAmt;
            --So tien phai tra cho tung khoan
            -- Bao lanh
            --01.T0INTNMLOVD
            l_T0INTNMLOVD := 0;
            If l_AvlAmt > 0 Then
                l_T0INTNMLOVD := round(least(l_AvlAmt, rec2.T0INTNMLOVD),0);
                l_AvlAmt := l_AvlAmt - l_T0INTNMLOVD;
            End If;
            --02.T0INTOVDACR
            l_T0INTOVDACR := 0;
            If l_AvlAmt > 0 Then
                l_T0INTOVDACR := round(least(l_AvlAmt, rec2.T0INTOVDACR),0);
                l_AvlAmt := l_AvlAmt - l_T0INTOVDACR;
            End If;
            --03.T0PRINOVD
            l_T0PRINOVD := 0;
            If l_AvlAmt > 0 Then
                l_T0PRINOVD := round(least(l_AvlAmt, rec2.T0PRINOVD),0);
                l_AvlAmt := l_AvlAmt - l_T0PRINOVD;
            end if;
            --04.T0INTDUE
            l_T0INTDUE := 0;
            If l_AvlAmt > 0 Then
                 l_T0INTDUE := round(least(l_AvlAmt, rec2.T0INTDUE),0);
                 l_AvlAmt := l_AvlAmt - l_T0INTDUE;
            End If;
            --05.T0PRINDUE
            l_T0PRINDUE := 0;
            If l_AvlAmt > 0 Then
                l_T0PRINDUE := round(least(l_AvlAmt, rec2.T0PRINDUE),0);
                l_AvlAmt := l_AvlAmt - l_T0PRINDUE;
            End If;
            --06.T0INTNMLACR
            l_T0INTNMLACR := 0;
            If l_AvlAmt > 0 Then
                l_T0INTNMLACR := round(least(l_AvlAmt, rec2.T0INTNMLACR),0);
                l_AvlAmt := l_AvlAmt - l_T0INTNMLACR;
            End If;
            --07.T0PRINNML
            l_T0PRINNML := 0;
            If l_AvlAmt > 0 Then
                l_T0PRINNML := round(least(l_AvlAmt, rec2.T0PRINNML),0);
                l_AvlAmt := l_AvlAmt - l_T0PRINNML;
            End If;

            -- CL
            -- Phi
            --08.FEEINTNMLOVD
            l_FEEINTNMLOVD := 0;
            If l_AvlAmt > 0 Then
                l_FEEINTNMLOVD := round(least(l_AvlAmt, rec2.FEEINTNMLOVD),0);
                l_AvlAmt := l_AvlAmt - l_FEEINTNMLOVD;
            End If;
            --09.FEEINTDUE
            l_FEEINTDUE := 0;
            If l_AvlAmt > 0 Then
                 l_FEEINTDUE := round(least(l_AvlAmt, rec2.FEEINTDUE),0);
                 l_AvlAmt := l_AvlAmt - l_FEEINTDUE;
            End If;
            --10.FEEINTNMLACR
            l_FEEINTNMLACR := 0;
            If l_AvlAmt > 0 Then
                l_FEEINTNMLACR := round(least(l_AvlAmt, rec2.FEEINTNMLACR),0);
                l_AvlAmt := l_AvlAmt - l_FEEINTNMLACR;
            End If;

            -- Lai

            --11.INTNMLOVD
            l_INTNMLOVD := 0;
            If l_AvlAmt > 0 Then
                l_INTNMLOVD := round(least(l_AvlAmt, rec2.INTNMLOVD),0);
                l_AvlAmt := l_AvlAmt - l_INTNMLOVD;
            End If;
            --12.INTOVDACR
            l_INTOVDACR := 0;
            If l_AvlAmt > 0 Then
                 l_INTOVDACR := round(least(l_AvlAmt, rec2.INTOVDACR),0);
                 l_AvlAmt := l_AvlAmt - l_INTOVDACR;
            End If;
            --13.INTDUE
            l_INTDUE := 0;
            If l_AvlAmt > 0 Then
                 l_INTDUE := round(least(l_AvlAmt, rec2.INTDUE),0);
                 l_AvlAmt := l_AvlAmt - l_INTDUE;
            End If;
            --14.INTNMLACR
            l_INTNMLACR := 0;
            If l_AvlAmt > 0 Then
                l_INTNMLACR := round(least(l_AvlAmt, rec2.INTNMLACR),0);
                l_AvlAmt := l_AvlAmt - l_INTNMLACR;
            End If;

            --15.FEEOVD
            l_FEEOVD := 0;
            If l_AvlAmt > 0 Then
                l_FEEOVD := round(least(l_AvlAmt, rec2.FEEOVD),0);
                l_AvlAmt := l_AvlAmt - l_FEEOVD;
            End If;
            --16.FEEDUE
            l_FEEDUE := 0;
            If l_AvlAmt > 0 Then
                l_FEEDUE := round(least(l_AvlAmt, rec2.FEEDUE),0);
                l_AvlAmt := l_AvlAmt - l_FEEDUE;
            End If;
            --17.FEENML
            l_FEENML := 0;
            If l_AvlAmt > 0 Then
                l_FEENML := round(least(l_AvlAmt, rec2.FEENML),0);
                l_AvlAmt := l_AvlAmt - l_FEENML;
            End If;

            -- Goc
            --18.PRINOVD
            l_PRINOVD := 0;
            If l_AvlAmt > 0 Then
                l_PRINOVD := round(least(l_AvlAmt, rec2.PRINOVD),0);
                l_AvlAmt := l_AvlAmt - l_PRINOVD;
            End If;
            --19.PRINDUE
            l_PRINDUE := 0;
            If l_AvlAmt > 0 Then
               l_PRINDUE := round(least(l_AvlAmt, rec2.PRINDUE),0);
               l_AvlAmt := l_AvlAmt - l_PRINDUE;
            End If;
            --20.PRINNML
            l_PRINNML := 0;
            if rec2.PRINNML > 0 then
                If l_AvlAmt > 0 Then
                     l_PRINNML := round(least(rec2.PRINNML, l_AvlAmt * 1 / (1+REC2.ADVPAYFEE/100)),0);
                     l_AvlAmt := l_AvlAmt - l_PRINNML;
                End If;
            end if;
            --21.ADVPAYFEE
            l_ADVPAYFEE := 0;
            if l_PRINNML > 0 then
                If l_AvlAmt > 0 Then
                     l_ADVPAYFEE := round(rec2.FINANCETYPE * round(least(l_AvlAmt, l_PRINNML * REC2.ADVPAYFEE / 100 ),0),0);
                     l_AvlAmt := l_AvlAmt - l_ADVPAYFEE;
                End If;
            end if;

            -- Lai & Phi
            --22.FEEINTOVDACR
            l_FEEINTOVDACR := 0;
            If l_AvlAmt > 0 Then
                 l_FEEINTOVDACR := round(least(l_AvlAmt, rec2.FEEINTOVDACR),0);
                 l_AvlAmt := l_AvlAmt - l_FEEINTOVDACR;
            End If;

            --cat tien bank
            --86 .INTNMLACRBANK
            l_txmsg.txfields ('86').defname   := 'INTNMLACRBANK';
            l_txmsg.txfields ('86').TYPE      := 'N';
            l_txmsg.txfields ('86').VALUE     := REC2.INTNMLACRBANK;

            --set txnum
            SELECT systemnums.C_BATCH_PREFIXED
                                 || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                          INTO l_txmsg.txnum
                          FROM DUAL;
            l_txmsg.brid        := substr(rec.trfacctno,1,4);


            --Set cac field giao dich
            --01   C   AUTOID
            l_txmsg.txfields ('01').defname   := 'AUTOID';
            l_txmsg.txfields ('01').TYPE      := 'C';
            l_txmsg.txfields ('01').VALUE     := rec2.lnschdid;

            --03   C   ACCTNO
            l_txmsg.txfields ('03').defname   := 'ACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec2.acctno;

            --05   C   CIACCTNO
            l_txmsg.txfields ('05').defname   := 'CIACCTNO';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.TRFACCTNO;

            --09   N   T0ODAMT
            l_txmsg.txfields ('09').defname   := 'T0ODAMT';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := 0;

             --45   N   PRINAMT
            l_txmsg.txfields ('45').defname   := 'PRINAMT';
            l_txmsg.txfields ('45').TYPE      := 'N';
            l_txmsg.txfields ('45').VALUE     := l_T0PRINOVD + l_T0PRINNML + l_T0PRINDUE + l_PRINOVD + l_PRINDUE + l_PRINNML;
            --46   N   INTAMT
            l_txmsg.txfields ('46').defname   := 'INTAMT';
            l_txmsg.txfields ('46').TYPE      := 'N';
            l_txmsg.txfields ('46').VALUE     := l_ADVPAYFEE + l_FEEOVD + l_T0INTNMLOVD + l_INTNMLOVD + l_FEEINTNMLOVD+ l_FEEDUE + l_T0INTDUE + l_INTDUE + l_FEEINTDUE+ l_T0INTOVDACR + l_INTOVDACR + l_FEEINTOVDACR+ l_FEENML + l_T0INTNMLACR + l_INTNMLACR+l_FEEINTNMLACR ;

            --47   N   ADVFEE
            l_txmsg.txfields ('47').defname   := 'ADVFEE';
            l_txmsg.txfields ('47').TYPE      := 'N';
            l_txmsg.txfields ('47').VALUE     := round(rec2.ADVPAYFEE,0) * rec2.FINANCETYPE;

            --60   N   PT0PRINOVD
            l_txmsg.txfields ('60').defname   := 'PT0PRINOVD';
            l_txmsg.txfields ('60').TYPE      := 'N';
            l_txmsg.txfields ('60').VALUE     := l_T0PRINOVD;
            --61   N   PT0PRINDUE
            l_txmsg.txfields ('61').defname   := 'PT0PRINDUE';
            l_txmsg.txfields ('61').TYPE      := 'N';
            l_txmsg.txfields ('61').VALUE     := l_T0PRINDUE;
            --62   N   PT0PRINNML
            l_txmsg.txfields ('62').defname   := 'PT0PRINNML';
            l_txmsg.txfields ('62').TYPE      := 'N';
            l_txmsg.txfields ('62').VALUE     := l_T0PRINNML;
            --63   N   PPRINOVD
            l_txmsg.txfields ('63').defname   := 'PPRINOVD';
            l_txmsg.txfields ('63').TYPE      := 'N';
            l_txmsg.txfields ('63').VALUE     := l_PRINOVD;
            --64   N   PPRINDUE
            l_txmsg.txfields ('64').defname   := 'PPRINDUE';
            l_txmsg.txfields ('64').TYPE      := 'N';
            l_txmsg.txfields ('64').VALUE     := l_PRINDUE;
            --65   N   PPRINNML
            l_txmsg.txfields ('65').defname   := 'PT0PRINOVD';
            l_txmsg.txfields ('65').TYPE      := 'N';
            l_txmsg.txfields ('65').VALUE     := l_PRINNML;
            --70   N   PFEEOVD
            l_txmsg.txfields ('70').defname   := 'PFEEOVD';
            l_txmsg.txfields ('70').TYPE      := 'N';
            l_txmsg.txfields ('70').VALUE     := l_FEEOVD;
            --71   N   PT0INTNMLOVD
            l_txmsg.txfields ('71').defname   := 'PT0INTNMLOVD';
            l_txmsg.txfields ('71').TYPE      := 'N';
            l_txmsg.txfields ('71').VALUE     := l_T0INTNMLOVD;
            --72   N   PINTNMLOVD
            l_txmsg.txfields ('72').defname   := 'PINTNMLOVD';
            l_txmsg.txfields ('72').TYPE      := 'N';
            l_txmsg.txfields ('72').VALUE     := l_INTNMLOVD;
            --52   N   PFEEINTNMLOVD
            l_txmsg.txfields ('52').defname   := 'PFEEINTNMLOVD';
            l_txmsg.txfields ('52').TYPE      := 'N';
            l_txmsg.txfields ('52').VALUE     := l_FEEINTNMLOVD;
            --73   N   PT0INTOVDACR
            l_txmsg.txfields ('73').defname   := 'PT0INTOVDACR';
            l_txmsg.txfields ('73').TYPE      := 'N';
            l_txmsg.txfields ('73').VALUE     := l_T0INTOVDACR;
            --74   N   PINTOVDACR
            l_txmsg.txfields ('74').defname   := 'PINTOVDACR';
            l_txmsg.txfields ('74').TYPE      := 'N';
            l_txmsg.txfields ('74').VALUE     := l_INTOVDACR;
            --54   N   PFEEINTOVDACR
            l_txmsg.txfields ('54').defname   := 'PFEEINTOVDACR';
            l_txmsg.txfields ('54').TYPE      := 'N';
            l_txmsg.txfields ('54').VALUE     := l_FEEINTOVDACR;
            --75   N   PFEEDUE
            l_txmsg.txfields ('75').defname   := 'PFEEDUE';
            l_txmsg.txfields ('75').TYPE      := 'N';
            l_txmsg.txfields ('75').VALUE     := l_FEEDUE;
            --76   N   PT0INTDUE
            l_txmsg.txfields ('76').defname   := 'PT0INTDUE';
            l_txmsg.txfields ('76').TYPE      := 'N';
            l_txmsg.txfields ('76').VALUE     := l_T0INTDUE;
            --77   N   PINTDUE
            l_txmsg.txfields ('77').defname   := 'PINTDUE';
            l_txmsg.txfields ('77').TYPE      := 'N';
            l_txmsg.txfields ('77').VALUE     := l_INTDUE;
            --57   N   PFEEINTDUE
            l_txmsg.txfields ('57').defname   := 'PFEEINTDUE';
            l_txmsg.txfields ('57').TYPE      := 'N';
            l_txmsg.txfields ('57').VALUE     := l_FEEINTDUE;
            --78   N   PFEE
            l_txmsg.txfields ('78').defname   := 'PFEE';
            l_txmsg.txfields ('78').TYPE      := 'N';
            l_txmsg.txfields ('78').VALUE     := l_FEENML;
            --79   N   PT0INTNMLACR
            l_txmsg.txfields ('79').defname   := 'PT0INTNMLACR';
            l_txmsg.txfields ('79').TYPE      := 'N';
            l_txmsg.txfields ('79').VALUE     := l_T0INTNMLACR;
            --80   N   PINTNMLACR
            l_txmsg.txfields ('80').defname   := 'PINTNMLACR';
            l_txmsg.txfields ('80').TYPE      := 'N';
            l_txmsg.txfields ('80').VALUE     := l_INTNMLACR;
            --50   N   PFEEINTNMLACR
            l_txmsg.txfields ('50').defname   := 'PFEEINTNMLACR';
            l_txmsg.txfields ('50').TYPE      := 'N';
            l_txmsg.txfields ('50').VALUE     := l_FEEINTNMLACR;
            --81   N   ADVPAYAMT
            l_txmsg.txfields ('81').defname   := 'ADVPAYAMT';
            l_txmsg.txfields ('81').TYPE      := 'N';
            l_txmsg.txfields ('81').VALUE     := l_PRINNML;
            --82   N   FEEAMT
            l_txmsg.txfields ('82').defname   := 'FEEAMT';
            l_txmsg.txfields ('82').TYPE      := 'N';
            l_txmsg.txfields ('82').VALUE     := Round(l_ADVPAYFEE, 0);  --Round(l_PRINNML * REC2.ADVPAYFEE / 100, 0);
            --83   N   PAYAMT
            l_txmsg.txfields ('83').defname   := 'PAYAMT';
            l_txmsg.txfields ('83').TYPE      := 'N';
            l_txmsg.txfields ('83').VALUE     := l_ADVPAYFEE + l_T0PRINOVD + l_T0PRINNML + l_T0PRINDUE + l_PRINOVD + l_PRINDUE + l_PRINNML + l_FEEOVD + l_T0INTNMLOVD + l_INTNMLOVD + l_FEEINTNMLOVD+ l_FEEDUE + l_T0INTDUE + l_INTDUE + l_FEEINTDUE + l_T0INTOVDACR + l_INTOVDACR + l_FEEINTOVDACR + l_FEENML + l_T0INTNMLACR + l_INTNMLACR + l_FEEINTNMLACR;
            plog.debug(pkgctx, 'Balance check:' || l_txmsg.txfields ('83').VALUE);
            --20    N   FINANCETYPE
            l_txmsg.txfields ('20').defname   := 'FINANCETYPE';
            l_txmsg.txfields ('20').TYPE      := 'N';
            l_txmsg.txfields ('20').VALUE     := REC2.FINANCETYPE;

            --86   N   INTNMLACRBANK
            l_txmsg.txfields ('86').defname   := 'INTNMLACRBANK';
            l_txmsg.txfields ('86').TYPE      := 'N';
            l_txmsg.txfields ('86').VALUE     := l_INTNMLACRBANK ;

            --30   C   DESC
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE :=l_DESC;



            BEGIN
                IF txpks_#5567.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 5567: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;

            update lnpaidalloc
            set status = 'C'
            where status = 'P'
            and autoid = rec2.autoid;

        end loop; -- rec2
 end loop; -- rec

    --begin CHAUNH: log du lieu phuc vu tinh hold BL
    --log hist
    insert into ln_gp_loghist (select * from ln_gp_log);

    v_strSQL := ' truncate table LN_GP_LOG ' ; --MSBS-2589
    execute immediate v_strSQL;

     for rec in
    (
            SELECT ci.acctno trfacctno,
                round(BALANCE + nvl(avladvance,0),0) AVLBAL,
                round(balance,0) balance,
                round(nvl(avladvance,0),0) TCV
            FROM CIMAST ci,
                (select --sum(advamt) avladvance,afacctno
                        sum(depoamt) avladvance, afacctno
                    from v_getAccountAvlAdvance group by afacctno) adv
            WHERE ci.acctno = adv.afacctno(+)
            and round(BALANCE + nvl(avladvance,0),0) > 0
            and exists (select 1 from lnmast where ftype = 'AF' and trfacctno = ci.acctno
                            and prinnml + prinovd + intnmlacr + intdue + intovdacr + intnmlovd + feeintnmlacr + feeintdue + feeintovdacr + feeintnmlovd
                                                    + oprinnml + oprinovd + ointnmlacr + ointdue + ointovdacr + ointnmlovd > 0)
            order by ci.acctno
    )
    loop -- rec
            -----------------------begin CHAUNH
            FOR REC_LN IN
            (
                select ln.trfacctno,
                    sum(case when ln.prepaid = 'Y' or ln.lntype = 'S' then nvl(nml,0) + nvl(ls.intnmlacr,0) else 0 end ) + MAX(nvl(ln.intnmlpbl,0)) totalamt
                from lnmast ln, lnschd ls, lntype lnt
                where ln.acctno = ls.acctno
                    and ln.ftype = 'AF' and lnt.actype = ln.actype
                    and ls.reftype ='GP' --chi lay no bao lanh
                    and ln.status NOT IN ('R','C','P')  and ln.trfacctno = rec.trfacctno
                    and nvl(ls.mintermdate, l_default_date) > l_v_currdate
                group by ln.trfacctno
            )
            LOOP
                insert into ln_gp_log (acctno, log_date, gpamt, remaingpamt, totalamt)
                values (rec_ln.trfacctno,
                        l_v_currdate,
                        least(rec_ln.totalamt,greatest(rec.balance,0)),
                        --Min[max(N? BL- max(TM,0),0); N? BL; Max(TCV + min (TM,0),0))]
                        least(greatest(rec_ln.totalamt - greatest(rec.balance,0),0), rec_ln.totalamt,
                                greatest(rec.TCV + least(rec.balance,0),0)
                             ),
                        rec_ln.totalamt
                        )
                ;
            end loop;
    end loop;

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_LNAutoPayment');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_LNAutoPayment');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_LNAutoPayment;



---------------------------------pr_LNAdvPayment------------------------------------------------
  PROCEDURE pr_LNAdvPayment(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg               tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_T0PRINDUE number(20,0);
    l_T0PRINNML number(20,0);
    l_T0PRINOVD number(20,0);
    l_AvlAmt    number(20,0);
    l_FEEOVD number(20,0);
    l_T0INTNMLOVD number(20,0);
    l_INTNMLOVD number(20,0);
    l_T0INTOVDACR number(20,0);
    l_INTOVDACR number(20,0);
    l_FEEDUE number(20,0);
    l_T0INTDUE number(20,0);
    l_INTDUE number(20,0);
    l_FEENML number(20,0);
    l_T0INTNMLACR number(20,0);
    l_INTNMLACR number(20,0);
    l_PRINOVD number(20,0);
    l_PRINDUE number(20,0);
    l_PRINNML number(20,0);
    l_FEEINTNMLOVD number(20,0);
    l_FEEINTNMLACR number(20,0);
    l_FEEINTOVDACR number(20,0);
    l_FEEINTDUE number(20,0);
    l_ADVPAYFEE number(20,0);
    l_SplitRate number(20,8);
    l_maxdebtcf number(20,0);
    l_intnmlacrbank number(20,0);

    l_gpamt number(20,0);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_LNAdvPayment');
    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD='5567';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='5567';

    select to_number(varvalue) into l_maxdebtcf from sysvar where varname = 'MAXDEBTCF';

    plog.debug(pkgctx, 'Begin loop');

    l_gpamt:= 0;
    for rec in
    (
            SELECT ci.acctno trfacctno,
                round(BALANCE + nvl(avladvance,0),0) AVLBAL,
                 nvl(avladvance,0) TCV,  BALANCE--1.5.7.0|iss1922
            FROM CIMAST ci,
                (select --sum(advamt) avladvance,afacctno
                        sum(depoamt) avladvance, afacctno
                    from v_getAccountAvlAdvance group by afacctno) adv
            WHERE ci.acctno = adv.afacctno(+)
            and round(BALANCE + nvl(avladvance,0),0) > 0
            and exists (select 1 from lnmast where ftype = 'AF' and trfacctno = ci.acctno
                            and prinnml + prinovd + intnmlacr + intdue + intovdacr + intnmlovd + feeintnmlacr + feeintdue + feeintovdacr + feeintnmlovd
                                                    + oprinnml + oprinovd + ointnmlacr + ointdue + ointovdacr + ointnmlovd > 0)
            order by ci.acctno
    )
    loop -- rec

        --chaunh: So tien tra no trong han duoc tra = min( no TH , TM+TCV-(1)-(2))
        l_gpamt:=0;
        for gp in
        (
        select gpamt + remaingpamt   gpamt from ln_gp_log where log_date = to_date(l_CURRDATE,systemnums.c_date_format) and acctno = rec.trfacctno
        )
        loop
            l_gpamt:= gp.gpamt;
        end loop;
        --l_gpamt:= 0;
        --end chaunh

        plog.debug(pkgctx, 'Loop for' || rec.trfacctno);
        if cspks_lnproc.fn_Gen_Prepaid_Payment(rec.trfacctno, greatest(rec.AVLBAL - l_gpamt,0), 'R', p_err_code,'ALL',greatest(rec.BALANCE - l_gpamt,0),greatest(rec.TCV -  greatest(l_gpamt-rec.BALANCE,0),0) ) <> systemnums.c_success then--1.5.7.0|iss1922
            plog.setendsection (pkgctx, 'pr_LNAdvPayment');
            return;
        end if;
        l_Desc:= 'CL.' || l_OrgDesc;

        for rec2 in
        (
            select ln.trfacctno, ln.acctno, ls.autoid lnschdid, lp.autoid,
                max(case when ln.ftype = 'AF' then 1 else 0 end) FINANCETYPE,
                max(ln.ADVPAYFEE) ADVPAYFEE, sum(lp.amt - lp.paidamt) AvlAmt,

                sum(case when reftype = 'GP' then ls.intovd else 0 end) T0INTNMLOVD,
                sum(case when reftype = 'GP' then ls.intovdprin else 0 end) T0INTOVDACR,
                sum(case when reftype = 'GP' then ls.ovd else 0 end) T0PRINOVD,
                sum(case when reftype = 'GP' then ls.intdue else 0 end) T0INTDUE,
                sum(case when reftype = 'GP' and overduedate = l_CURRDATE then ls.nml else 0 end) T0PRINDUE,
                sum(case when reftype = 'GP' then ls.intnmlacr else 0 end) T0INTNMLACR,
                sum(case when reftype = 'GP' then ls.nml else 0 end) T0PRINNML,

                sum(case when reftype = 'P' then ls.feeovd else 0 end) FEEOVD,
                sum(case when reftype = 'P' then ls.intovd else 0 end) INTNMLOVD,
                sum(case when reftype = 'P' then ls.feeintnmlovd else 0 end) FEEINTNMLOVD,
                sum(case when reftype = 'P' then ls.intovdprin else 0 end) INTOVDACR,
                sum(case when reftype = 'P' then ls.feeintovdacr else 0 end) FEEINTOVDACR,
                sum(case when reftype = 'P' then ls.ovd else 0 end) PRINOVD,
                sum(case when reftype = 'P' then ls.feedue else 0 end) FEEDUE,
                sum(case when reftype = 'P' then ls.intdue else 0 end) INTDUE,
                sum(case when reftype = 'P' then ls.feeintdue else 0 end) FEEINTDUE,
                sum(case when reftype = 'P' and overduedate = l_CURRDATE then ls.nml else 0 end) PRINDUE,
                sum(case when reftype = 'P' then ls.fee else 0 end) FEENML,
                sum(case when reftype = 'P' then ls.intnmlacr else 0 end) INTNMLACR,
                sum(case when reftype = 'P' then ls.feeintnmlacr else 0 end) FEEINTNMLACR,
                sum(case when reftype = 'P' then ls.nml else 0 end) PRINNML,
                sum(case when reftype = 'P' then ls.INTNMLACRBANK else 0 end) INTNMLACRBANK

            from lnmast ln, lnpaidalloc lp, lnschd ls
            where ln.acctno = lp.lnacctno and lp.lnschdid = ls.autoid
            and ln.trfacctno = rec.trfacctno and instr(ls.reftype,'P') > 0
            and lp.amt > lp.paidamt and lp.status = 'P'
            group by ln.trfacctno, ln.acctno, ls.autoid, lp.autoid
            order by lp.autoid
        )
        loop -- rec2
            l_AvlAmt:= rec2.AvlAmt;
            --So tien phai tra cho tung khoan
            -- Bao lanh
            --01.T0INTNMLOVD
            l_T0INTNMLOVD := 0;
            If l_AvlAmt > 0 Then
                l_T0INTNMLOVD := round(least(l_AvlAmt, rec2.T0INTNMLOVD),0);
                l_AvlAmt := l_AvlAmt - l_T0INTNMLOVD;
            End If;
            --02.T0INTOVDACR
            l_T0INTOVDACR := 0;
            If l_AvlAmt > 0 Then
                l_T0INTOVDACR := round(least(l_AvlAmt, rec2.T0INTOVDACR),0);
                l_AvlAmt := l_AvlAmt - l_T0INTOVDACR;
            End If;
            --03.T0PRINOVD
            l_T0PRINOVD := 0;
            If l_AvlAmt > 0 Then
                l_T0PRINOVD := round(least(l_AvlAmt, rec2.T0PRINOVD),0);
                l_AvlAmt := l_AvlAmt - l_T0PRINOVD;
            end if;
            --04.T0INTDUE
            l_T0INTDUE := 0;
            If l_AvlAmt > 0 Then
                 l_T0INTDUE := round(least(l_AvlAmt, rec2.T0INTDUE),0);
                 l_AvlAmt := l_AvlAmt - l_T0INTDUE;
            End If;
            --05.T0PRINDUE
            l_T0PRINDUE := 0;
            If l_AvlAmt > 0 Then
                l_T0PRINDUE := round(least(l_AvlAmt, rec2.T0PRINDUE),0);
                l_AvlAmt := l_AvlAmt - l_T0PRINDUE;
            End If;
            --06.T0INTNMLACR
            l_T0INTNMLACR := 0;
            If l_AvlAmt > 0 Then
                l_T0INTNMLACR := round(least(l_AvlAmt, rec2.T0INTNMLACR),0);
                l_AvlAmt := l_AvlAmt - l_T0INTNMLACR;
            End If;
            --07.T0PRINNML
            l_T0PRINNML := 0;
            If l_AvlAmt > 0 Then
                l_T0PRINNML := round(least(l_AvlAmt, rec2.T0PRINNML),0);
                l_AvlAmt := l_AvlAmt - l_T0PRINNML;
            End If;

            -- CL
            -- Phi
            --08.FEEINTNMLOVD
            l_FEEINTNMLOVD := 0;
            If l_AvlAmt > 0 Then
                l_FEEINTNMLOVD := round(least(l_AvlAmt, rec2.FEEINTNMLOVD),0);
                l_AvlAmt := l_AvlAmt - l_FEEINTNMLOVD;
            End If;
            --09.FEEINTDUE
            l_FEEINTDUE := 0;
            If l_AvlAmt > 0 Then
                 l_FEEINTDUE := round(least(l_AvlAmt, rec2.FEEINTDUE),0);
                 l_AvlAmt := l_AvlAmt - l_FEEINTDUE;
            End If;
            --10.FEEINTNMLACR
            l_FEEINTNMLACR := 0;
            If l_AvlAmt > 0 Then
                l_FEEINTNMLACR := round(least(l_AvlAmt, rec2.FEEINTNMLACR),0);
                l_AvlAmt := l_AvlAmt - l_FEEINTNMLACR;
            End If;

            -- Lai

            --11.INTNMLOVD
            l_INTNMLOVD := 0;
            If l_AvlAmt > 0 Then
                l_INTNMLOVD := round(least(l_AvlAmt, rec2.INTNMLOVD),0);
                l_AvlAmt := l_AvlAmt - l_INTNMLOVD;
            End If;
            --12.INTOVDACR
            l_INTOVDACR := 0;
            If l_AvlAmt > 0 Then
                 l_INTOVDACR := round(least(l_AvlAmt, rec2.INTOVDACR),0);
                 l_AvlAmt := l_AvlAmt - l_INTOVDACR;
            End If;
            --13.INTDUE
            l_INTDUE := 0;
            If l_AvlAmt > 0 Then
                 l_INTDUE := round(least(l_AvlAmt, rec2.INTDUE),0);
                 l_AvlAmt := l_AvlAmt - l_INTDUE;
            End If;
            --14.INTNMLACR
            l_INTNMLACR := 0;
            If l_AvlAmt > 0 Then
                l_INTNMLACR := round(least(l_AvlAmt, rec2.INTNMLACR),0);
                l_AvlAmt := l_AvlAmt - l_INTNMLACR;
            End If;

            --15.FEEOVD
            l_FEEOVD := 0;
            If l_AvlAmt > 0 Then
                l_FEEOVD := round(least(l_AvlAmt, rec2.FEEOVD),0);
                l_AvlAmt := l_AvlAmt - l_FEEOVD;
            End If;
            --16.FEEDUE
            l_FEEDUE := 0;
            If l_AvlAmt > 0 Then
                l_FEEDUE := round(least(l_AvlAmt, rec2.FEEDUE),0);
                l_AvlAmt := l_AvlAmt - l_FEEDUE;
            End If;
            --17.FEENML
            l_FEENML := 0;
            If l_AvlAmt > 0 Then
                l_FEENML := round(least(l_AvlAmt, rec2.FEENML),0);
                l_AvlAmt := l_AvlAmt - l_FEENML;
            End If;

            -- Goc
            --18.PRINOVD
            l_PRINOVD := 0;
            If l_AvlAmt > 0 Then
                l_PRINOVD := round(least(l_AvlAmt, rec2.PRINOVD),0);
                l_AvlAmt := l_AvlAmt - l_PRINOVD;
            End If;
            --19.PRINDUE
            l_PRINDUE := 0;
            If l_AvlAmt > 0 Then
               l_PRINDUE := round(least(l_AvlAmt, rec2.PRINDUE),0);
               l_AvlAmt := l_AvlAmt - l_PRINDUE;
            End If;
            --20.PRINNML
            l_PRINNML := 0;
            if rec2.PRINNML > 0 then
                If l_AvlAmt > 0 Then
                     l_PRINNML := round(least(rec2.PRINNML, l_AvlAmt * 1 / (1+REC2.ADVPAYFEE/100)),0);
                     l_AvlAmt := l_AvlAmt - l_PRINNML;
                End If;
            end if;
            --21.ADVPAYFEE
            l_ADVPAYFEE := 0;
            if l_PRINNML > 0 then
                If l_AvlAmt > 0 Then
                     l_ADVPAYFEE := round(rec2.FINANCETYPE * round(least(l_AvlAmt, l_PRINNML * REC2.ADVPAYFEE / 100 ),0),0);
                     l_AvlAmt := l_AvlAmt - l_ADVPAYFEE;
                End If;
            end if;

            -- Lai & Phi
            --22.FEEINTOVDACR
            l_FEEINTOVDACR := 0;
            If l_AvlAmt > 0 Then
                 l_FEEINTOVDACR := round(least(l_AvlAmt, rec2.FEEINTOVDACR),0);
                 l_AvlAmt := l_AvlAmt - l_FEEINTOVDACR;
            End If;

            --set txnum
            SELECT systemnums.C_BATCH_PREFIXED
                                 || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                          INTO l_txmsg.txnum
                          FROM DUAL;
            l_txmsg.brid        := substr(rec.trfacctno,1,4);


            --Set cac field giao dich
            --01   C   AUTOID
            l_txmsg.txfields ('01').defname   := 'AUTOID';
            l_txmsg.txfields ('01').TYPE      := 'C';
            l_txmsg.txfields ('01').VALUE     := rec2.lnschdid;

            --03   C   ACCTNO
            l_txmsg.txfields ('03').defname   := 'ACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec2.acctno;

            --05   C   CIACCTNO
            l_txmsg.txfields ('05').defname   := 'CIACCTNO';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.TRFACCTNO;

            --09   N   T0ODAMT
            l_txmsg.txfields ('09').defname   := 'T0ODAMT';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := 0;

             --45   N   PRINAMT
            l_txmsg.txfields ('45').defname   := 'PRINAMT';
            l_txmsg.txfields ('45').TYPE      := 'N';
            l_txmsg.txfields ('45').VALUE     := l_T0PRINOVD + l_T0PRINNML + l_T0PRINDUE + l_PRINOVD + l_PRINDUE + l_PRINNML;
            --46   N   INTAMT
            l_txmsg.txfields ('46').defname   := 'INTAMT';
            l_txmsg.txfields ('46').TYPE      := 'N';
            l_txmsg.txfields ('46').VALUE     := l_ADVPAYFEE + l_FEEOVD + l_T0INTNMLOVD + l_INTNMLOVD + l_FEEINTNMLOVD+ l_FEEDUE + l_T0INTDUE + l_INTDUE + l_FEEINTDUE+ l_T0INTOVDACR + l_INTOVDACR + l_FEEINTOVDACR+ l_FEENML + l_T0INTNMLACR + l_INTNMLACR+l_FEEINTNMLACR ;

            --47   N   ADVFEE
            l_txmsg.txfields ('47').defname   := 'ADVFEE';
            l_txmsg.txfields ('47').TYPE      := 'N';
            l_txmsg.txfields ('47').VALUE     := round(rec2.ADVPAYFEE,0) * rec2.FINANCETYPE;

            --60   N   PT0PRINOVD
            l_txmsg.txfields ('60').defname   := 'PT0PRINOVD';
            l_txmsg.txfields ('60').TYPE      := 'N';
            l_txmsg.txfields ('60').VALUE     := l_T0PRINOVD;
            --61   N   PT0PRINDUE
            l_txmsg.txfields ('61').defname   := 'PT0PRINDUE';
            l_txmsg.txfields ('61').TYPE      := 'N';
            l_txmsg.txfields ('61').VALUE     := l_T0PRINDUE;
            --62   N   PT0PRINNML
            l_txmsg.txfields ('62').defname   := 'PT0PRINNML';
            l_txmsg.txfields ('62').TYPE      := 'N';
            l_txmsg.txfields ('62').VALUE     := l_T0PRINNML;
            --63   N   PPRINOVD
            l_txmsg.txfields ('63').defname   := 'PPRINOVD';
            l_txmsg.txfields ('63').TYPE      := 'N';
            l_txmsg.txfields ('63').VALUE     := l_PRINOVD;
            --64   N   PPRINDUE
            l_txmsg.txfields ('64').defname   := 'PPRINDUE';
            l_txmsg.txfields ('64').TYPE      := 'N';
            l_txmsg.txfields ('64').VALUE     := l_PRINDUE;
            --65   N   PPRINNML
            l_txmsg.txfields ('65').defname   := 'PT0PRINOVD';
            l_txmsg.txfields ('65').TYPE      := 'N';
            l_txmsg.txfields ('65').VALUE     := l_PRINNML;
            --70   N   PFEEOVD
            l_txmsg.txfields ('70').defname   := 'PFEEOVD';
            l_txmsg.txfields ('70').TYPE      := 'N';
            l_txmsg.txfields ('70').VALUE     := l_FEEOVD;
            --71   N   PT0INTNMLOVD
            l_txmsg.txfields ('71').defname   := 'PT0INTNMLOVD';
            l_txmsg.txfields ('71').TYPE      := 'N';
            l_txmsg.txfields ('71').VALUE     := l_T0INTNMLOVD;
            --72   N   PINTNMLOVD
            l_txmsg.txfields ('72').defname   := 'PINTNMLOVD';
            l_txmsg.txfields ('72').TYPE      := 'N';
            l_txmsg.txfields ('72').VALUE     := l_INTNMLOVD;
            --52   N   PFEEINTNMLOVD
            l_txmsg.txfields ('52').defname   := 'PFEEINTNMLOVD';
            l_txmsg.txfields ('52').TYPE      := 'N';
            l_txmsg.txfields ('52').VALUE     := l_FEEINTNMLOVD;
            --73   N   PT0INTOVDACR
            l_txmsg.txfields ('73').defname   := 'PT0INTOVDACR';
            l_txmsg.txfields ('73').TYPE      := 'N';
            l_txmsg.txfields ('73').VALUE     := l_T0INTOVDACR;
            --74   N   PINTOVDACR
            l_txmsg.txfields ('74').defname   := 'PINTOVDACR';
            l_txmsg.txfields ('74').TYPE      := 'N';
            l_txmsg.txfields ('74').VALUE     := l_INTOVDACR;
            --54   N   PFEEINTOVDACR
            l_txmsg.txfields ('54').defname   := 'PFEEINTOVDACR';
            l_txmsg.txfields ('54').TYPE      := 'N';
            l_txmsg.txfields ('54').VALUE     := l_FEEINTOVDACR;
            --75   N   PFEEDUE
            l_txmsg.txfields ('75').defname   := 'PFEEDUE';
            l_txmsg.txfields ('75').TYPE      := 'N';
            l_txmsg.txfields ('75').VALUE     := l_FEEDUE;
            --76   N   PT0INTDUE
            l_txmsg.txfields ('76').defname   := 'PT0INTDUE';
            l_txmsg.txfields ('76').TYPE      := 'N';
            l_txmsg.txfields ('76').VALUE     := l_T0INTDUE;
            --77   N   PINTDUE
            l_txmsg.txfields ('77').defname   := 'PINTDUE';
            l_txmsg.txfields ('77').TYPE      := 'N';
            l_txmsg.txfields ('77').VALUE     := l_INTDUE;
            --57   N   PFEEINTDUE
            l_txmsg.txfields ('57').defname   := 'PFEEINTDUE';
            l_txmsg.txfields ('57').TYPE      := 'N';
            l_txmsg.txfields ('57').VALUE     := l_FEEINTDUE;
            --78   N   PFEE
            l_txmsg.txfields ('78').defname   := 'PFEE';
            l_txmsg.txfields ('78').TYPE      := 'N';
            l_txmsg.txfields ('78').VALUE     := l_FEENML;
            --79   N   PT0INTNMLACR
            l_txmsg.txfields ('79').defname   := 'PT0INTNMLACR';
            l_txmsg.txfields ('79').TYPE      := 'N';
            l_txmsg.txfields ('79').VALUE     := l_T0INTNMLACR;
            --80   N   PINTNMLACR
            l_txmsg.txfields ('80').defname   := 'PINTNMLACR';
            l_txmsg.txfields ('80').TYPE      := 'N';
            l_txmsg.txfields ('80').VALUE     := l_INTNMLACR;
            --50   N   PFEEINTNMLACR
            l_txmsg.txfields ('50').defname   := 'PFEEINTNMLACR';
            l_txmsg.txfields ('50').TYPE      := 'N';
            l_txmsg.txfields ('50').VALUE     := l_FEEINTNMLACR;
            --81   N   ADVPAYAMT
            l_txmsg.txfields ('81').defname   := 'ADVPAYAMT';
            l_txmsg.txfields ('81').TYPE      := 'N';
            l_txmsg.txfields ('81').VALUE     := l_PRINNML;
            --82   N   FEEAMT
            l_txmsg.txfields ('82').defname   := 'FEEAMT';
            l_txmsg.txfields ('82').TYPE      := 'N';
            l_txmsg.txfields ('82').VALUE     := Round(l_ADVPAYFEE, 0); --Round(l_PRINNML * REC2.ADVPAYFEE / 100, 0);
            --83   N   PAYAMT
            l_txmsg.txfields ('83').defname   := 'PAYAMT';
            l_txmsg.txfields ('83').TYPE      := 'N';
            l_txmsg.txfields ('83').VALUE     := l_T0PRINOVD + l_T0PRINNML + l_T0PRINDUE + l_PRINOVD + l_PRINDUE + l_PRINNML + l_ADVPAYFEE + l_FEEOVD + l_T0INTNMLOVD + l_INTNMLOVD + l_FEEINTNMLOVD+ l_FEEDUE + l_T0INTDUE + l_INTDUE + l_FEEINTDUE + l_T0INTOVDACR + l_INTOVDACR + l_FEEINTOVDACR + l_FEENML + l_T0INTNMLACR + l_INTNMLACR + l_FEEINTNMLACR;
            plog.debug(pkgctx, 'Balance check:' || l_txmsg.txfields ('83').VALUE);
            --20    N   FINANCETYPE
            l_txmsg.txfields ('20').defname   := 'FINANCETYPE';
            l_txmsg.txfields ('20').TYPE      := 'N';
            l_txmsg.txfields ('20').VALUE     := REC2.FINANCETYPE;

                     --cat tien bank
            --86 .INTNMLACRBANK
            l_txmsg.txfields ('86').defname   := 'INTNMLACRBANK';
            l_txmsg.txfields ('86').TYPE      := 'N';
            l_txmsg.txfields ('86').VALUE     := REC2.INTNMLACRBANK;

            --30   C   DESC
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE :=l_DESC;

            BEGIN
                IF txpks_#5567.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 5567: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;

            update lnpaidalloc
            set status = 'C'
            where status = 'P'
            and autoid = rec2.autoid;
        end loop; -- rec2

    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_LNAdvPayment');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_LNAdvPayment');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_LNAdvPayment;






---------------------------------pr_LNDrawndown_UyBan------------------------------------------------

  PROCEDURE pr_LNDrawndown_UyBan(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg               tx.msg_rectype;
      v_CURRDATE date;
      l_LOGDATE varchar2(10);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_dblMRODAMT  number(20,0);
      l_err_param varchar2(300);
      l_CUSTODYCD_PREFIX varchar2(3);
      l_LNACCTNO varchar2(30);
      l_remain_MRamount number(20,4);
      l_exec_MRamount number(20,4);
      l_rrtype varchar2(1);
      l_custbank varchar2(30);
      l_ciacctno varchar2(30);
      l_avlamt number(24,4);
      l_mrcrlimitmax number(24,4);
      l_afavlamt number(24,4);
      l_afusedamt number(24,4);
      l_chksysctrl varchar2(1);
      l_mriratio number(10,4);
      l_maxdebt number(20,0);
      l_count number;
      l_T0ODAMT number(20,0);
      l_MarginType varchar2(1);
      l_MR_Master_Amount number(20,4);


      l_CURRDATE date;
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_T0PRINDUE number(20,0);
    l_T0PRINNML number(20,0);
    l_T0PRINOVD number(20,0);
    l_FEEOVD number(20,0);
    l_T0INTNMLOVD number(20,0);
    l_INTNMLOVD number(20,0);
    l_T0INTOVDACR number(20,0);
    l_INTOVDACR number(20,0);
    l_FEEDUE number(20,0);
    l_T0INTDUE number(20,0);
    l_INTDUE number(20,0);
    l_FEENML number(20,0);
    l_T0INTNMLACR number(20,0);
    l_INTNMLACR number(20,0);
    l_PRINOVD number(20,0);
    l_PRINDUE number(20,0);
    l_PRINNML number(20,0);
    l_FEEINTNMLOVD number(20,0);
    l_FEEINTNMLACR number(20,0);
    l_FEEINTOVDACR number(20,0);
    l_FEEINTDUE number(20,0);
    l_ADVPAYFEE number(20,0);

    l_mramt number(20,0);
    l_t0amt number(20,0);
    l_cfmnemonic varchar2(30);
    l_pprinamt number;
    l_pintamt number;
    l_pfeeintamt number;
    l_pfeeintovdacr number;
    V_DTCURDATE DATE;
    V_STRBRID VARCHAR(20);
    V_STRACCTNO VARCHAR(20);
    l_avlpayment number;

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_LNDrawndown_UyBan');

    SELECT TO_DATE (varvalue, systemnums.c_date_format) INTO v_CURRDATE
    FROM sysvar WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    select varvalue into l_CUSTODYCD_PREFIX from sysvar where grname ='SYSTEM' and varname ='COMPANYCD';
    pr_eventslog(l_LOGDATE || ' >> pr_LNDrawndown_UyBan', 0, '> Begin Loop!');
    plog.debug(pkgctx, 'Begin loop');
    for rec in
    (
	    select v.afacctno,ci.acctno ciacctno,aft.lntype,CI.T0ODAMT, aft.t0lntype, 1 FINANCETYPE, CF.MARGINALLOW, v.marginrate , af.mrirate,
            af.mriratio, v.marginratio, v.ta_ub,v.marginamt,
            case when v.marginratio = -10000000 then v.marginamt else
            round(GREATEST((af.mriratio - v.marginratio) * v.ta_ub/100,0),0) end balance
        from v_getsecmarginratio v, afmast af, aftype aft, cimast ci, cfmast cf
        where v.afacctno = af.acctno and af.actype = aft.actype
        and af.acctno = ci.afacctno and af.custid = cf.custid
       and v.marginrate >= af.MRMRATE
       AND EXISTS (SELECT 1 FROM AFIDTYPE AFI, LNTYPE LNT  WHERE AFI.OBJNAME = 'LN.LNTYPE' AND LNT.CHKSYSCTRL = 'Y' AND aftype = AF.ACTYPE) --MSBS-2589
        and (case when v.marginratio = 9999900 then 0 else v.marginratio end ) < af.MRMRATIO
       and case when (v.marginratio = 9999900 or v.marginratio = -10000000) then v.marginamt  --1.5.8.4: MSBS-1991
			else round(GREATEST((af.mriratio - v.marginratio) * v.ta_ub/100,0),0) end > 0
       order by case when af.poolchk ='Y' then 0 else 1 end
    )
    loop -- rec




        /*
        -- Giai ngan Margin:
        */
        v_dblMRODAMT:= greatest(rec.BALANCE,0);
        -- Xac dinh tong so no co the tra
        if cspks_lnproc.fn_Get_Prepaid_Payment(rec.afacctno, l_avlpayment, 'L', p_err_code,'Y') <> systemnums.c_success then
                        plog.setendsection (pkgctx, 'pr_LNAutoPayment');
                        return;
        end if;
        l_avlpayment:=greatest(l_avlpayment,0);
        -- So tien giai ngan lay min vo so no co the tra
        v_dblMRODAMT:= least(v_dblMRODAMT,l_avlpayment);
        PLOG.error('Dao no UB rec.afacctno = '||rec.afacctno);
        PLOG.error('Dao no UB rec.balance = '||rec.balance);
        PLOG.error('Dao no UB l_avlpayment = '||l_avlpayment);
        PLOG.error('Dao no UB v_dblMRODAMT = '||v_dblMRODAMT);


        pr_eventslog(l_LOGDATE || ' >> pr_LNDrawndown_UyBan', 0, '    >> Drawndown Amount v_dblMRODAMT:' || v_dblMRODAMT);

        insert into afse_info_log
        (symbol, codeid, tradeqtty, rcvqtty, sellmatchqtty,
               buyqtty, avlsysroom, remainsysroom, usedsysroom,
               avl74room, remain74room, used74room, ratecl, pricecl,
               callpricecl, rate74, price74, callprice74, seamt,
               se74amt, afacctno, custodycd, txdate)
        SELECT symbol, codeid, tradeqtty, rcvqtty, sellmatchqtty,
               buyqtty, avlsysroom, remainsysroom, usedsysroom,
               avl74room, remain74room, used74room, ratecl, pricecl,
               callpricecl, rate74, price74, callprice74, seamt,
               se74amt, afacctno, custodycd, v_CURRDATE --MSBS-2589
        FROM vw_afse_info_log
        where afacctno = rec.ciacctno;
        insert into afln_info_log
        (custodycd, acctno, lntype, banklimit, dfamt,
               dfprinamt, dfintamt, mramt, mrprinamt, mrintamt,
               mr74amt, mr74prinamt, mr74intamt, t0amt, mrcrlimitmax,
               mrcrlimitremain, txdate)
        SELECT custodycd, acctno, lntype, banklimit, dfamt,
               dfprinamt, dfintamt, mramt, mrprinamt, mrintamt,
               mr74amt, mr74prinamt, mr74intamt, t0amt, mrcrlimitmax,
               mrcrlimitremain, v_CURRDATE --MSBS-2589
          FROM vw_afln_info_log
        where acctno = rec.ciacctno;

        -- Margin Drawndown
        l_LNACCTNO:='';
        If round(v_dblMRODAMT,0) > 0 Then
            l_remain_MRamount:= round(v_dblMRODAMT,0);
            l_exec_MRamount:= 0;

            pr_eventslog(l_LOGDATE || ' >> pr_LNDrawndown_UyBan', 0, '        >>> Into rec_ln Loop');
            for rec_ln in
            (
                select * from (
                    select lnt.*, nvl(cf.mnemonic,cf.shortname) cfmnemonic,af.custid cfcustid, odrnum, 'Y' IsSubResource
                        from afmast af, aftype aft, afidtype afid, lntype lnt, cfmast cf
                        where aft.actype = afid.aftype
                            and afid.actype = lnt.actype
                            and af.actype = aft.actype
                            and lnt.custbank = cf.custid(+)
                            and af.acctno = rec.ciacctno
                            and objname = 'LN.LNTYPE' and lnt.status <> 'N' AND lnt.lnpurpose <> 'D'
                    union all
                    select lnt.*, nvl(cf.mnemonic,cf.shortname) cfmnemonic,af.custid cfcustid, 999 odrnum, 'N' IsSubResource
                        from afmast af, aftype aft, lntype lnt, cfmast cf
                        where af.actype = aft.actype
                            and lnt.custbank = cf.custid(+)
                            and af.acctno = rec.ciacctno
                            and aft.lntype = lnt.actype and lnt.status <> 'N' AND lnt.lnpurpose <> 'D'
                            )
                    where rrtype <> 'C'
                order by case when IsSubResource = 'Y' then 0 else 1 end, odrnum
            )
            loop -- rec_ln

                  SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='5566';
                 SELECT TO_DATE (varvalue, systemnums.c_date_format), varvalue
                           INTO v_CURRDATE, l_LOGDATE
                           FROM sysvar
                           WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
                l_txmsg.msgtype:='T';
                l_txmsg.local:='N';
                l_txmsg.tlid        := systemnums.c_system_userid;
                plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
                SELECT SYS_CONTEXT ('USERENV', 'HOST'),
                         SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
                  INTO l_txmsg.wsname, l_txmsg.ipaddress
                FROM DUAL;
                l_txmsg.off_line    := 'N';
                l_txmsg.deltd       := txnums.c_deltd_txnormal;
                l_txmsg.txstatus    := txstatusnums.c_txcompleted;
                l_txmsg.msgsts      := '0';
                l_txmsg.ovrsts      := '0';
                l_txmsg.batchname   := p_bchmdl;
                l_txmsg.txdate:=v_CURRDATE;
                l_txmsg.busdate:=v_CURRDATE;
                l_txmsg.tltxcd:='5566';



                SELECT COUNT(*) INTO l_count from lnmast ln where ln.actype = rec_ln.actype and ln.trfacctno = rec.ciacctno
                        and ln.STATUS NOT IN ('P','R','C') AND ln.FTYPE='AF';

                PLOG.DEBUG(pkgctx,'begin INSERT INTO LNMAST_ l_count: ' || l_count || ' rec_ln.actype: ' || rec_ln.actype || '  rec.ciacctno |' ||  rec.ciacctno );

                if l_count =0 then
                    --2.Mo moi tai khoan vay neu chua co, cua nhung tai khoan xuat hien khoan vay
                   SELECT TO_DATE (varvalue, systemnums.c_date_format)
                              INTO V_DTCURDATE
                              FROM sysvar
                              WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

                   FOR REC1 IN
                       (
                      select distinct * from (
                           SELECT CI.ACCTNO, LNT.CCYCD, LNT.LNTYPE, LNT.LNCLDR, LNT.PRINFRQ, LNT.PRINPERIOD,
                               LNT.INTFRQCD, LNT.INTDAY, LNT.INTPERIOD, LNT.NINTCD, LNT.OINTCD, LNT.RATE1, LNT.RATE2, LNT.RATE3,
                               LNT.OPRINFRQ, LNT.OPRINPERIOD, LNT.OINTFRQCD, LNT.OINTDAY, LNT.ORATE1, LNT.ORATE2, LNT.ORATE3,
                               LNT.ADVPAY, LNT.ADVPAYFEE, LNT.DRATE, LNT.ACTYPE, LNT.PREPAID,
                               LNT.CFRATE1, LNT.CFRATE2, LNT.CFRATE3,LNT.Minterm,LNT.AUTOAPPLY,LNT.INTPAIDMETHOD,
                               LNT.RRTYPE, LNT.CIACCTNO, LNT.CUSTBANK, LNT.INTOVDCD,LNT.BANKPAIDMETHOD,lnt.ISPAYBANK
                           FROM CIMAST CI, AFMAST AF, AFTYPE AFT, LNTYPE LNT
                           WHERE CI.AFACCTNO = AF.ACCTNO AND CI.STATUS = 'A'
                               AND AF.ACTYPE = AFT.ACTYPE AND LNT.ACTYPE = AFT.T0LNTYPE
                               AND LNT.STATUS <> 'N'
                               and not exists (select 1 from lnmast where lnmast.trfacctno = ci.acctno and lnmast.actype = aft.t0lntype and lnmast.STATUS NOT IN ('P','R','C') AND lnmast.FTYPE='AF')
                               and lnt.actype = rec_ln.actype and CI.ACCTNO  = rec.ciacctno
                           union all
                           SELECT CI.ACCTNO, LNT.CCYCD, LNT.LNTYPE, LNT.LNCLDR, LNT.PRINFRQ, LNT.PRINPERIOD,
                               LNT.INTFRQCD, LNT.INTDAY, LNT.INTPERIOD, LNT.NINTCD, LNT.OINTCD, LNT.RATE1, LNT.RATE2, LNT.RATE3,
                               LNT.OPRINFRQ, LNT.OPRINPERIOD, LNT.OINTFRQCD, LNT.OINTDAY, LNT.ORATE1, LNT.ORATE2, LNT.ORATE3,
                               LNT.ADVPAY, LNT.ADVPAYFEE, LNT.DRATE, LNT.ACTYPE, LNT.PREPAID,
                               LNT.CFRATE1, LNT.CFRATE2, LNT.CFRATE3,LNT.Minterm,LNT.AUTOAPPLY,LNT.INTPAIDMETHOD,
                               LNT.RRTYPE, LNT.CIACCTNO, LNT.CUSTBANK, LNT.INTOVDCD,LNT.Bankpaidmethod,lnt.ISPAYBANK
                           FROM CIMAST CI, AFMAST AF, AFTYPE AFT, LNTYPE LNT
                           WHERE CI.AFACCTNO = AF.ACCTNO AND CI.STATUS = 'A'
                               AND AF.ACTYPE = AFT.ACTYPE AND LNT.ACTYPE = AFT.LNTYPE --AND AF.STATUS = 'A'
                               AND LNT.STATUS <> 'N'
                               and not exists (select 1 from lnmast where lnmast.trfacctno = ci.acctno and lnmast.actype = aft.lntype and lnmast.STATUS NOT IN ('P','R','C') AND lnmast.FTYPE='AF')
                               and lnt.actype = rec_ln.actype and CI.ACCTNO  = rec.ciacctno

                           union all
                           SELECT CI.ACCTNO, LNT.CCYCD, LNT.LNTYPE, LNT.LNCLDR, LNT.PRINFRQ, LNT.PRINPERIOD,
                               LNT.INTFRQCD, LNT.INTDAY, LNT.INTPERIOD, LNT.NINTCD, LNT.OINTCD, LNT.RATE1, LNT.RATE2, LNT.RATE3,
                               LNT.OPRINFRQ, LNT.OPRINPERIOD, LNT.OINTFRQCD, LNT.OINTDAY, LNT.ORATE1, LNT.ORATE2, LNT.ORATE3,
                               LNT.ADVPAY, LNT.ADVPAYFEE, LNT.DRATE, LNT.ACTYPE, LNT.PREPAID,
                               LNT.CFRATE1, LNT.CFRATE2, LNT.CFRATE3,LNT.Minterm,LNT.AUTOAPPLY,LNT.INTPAIDMETHOD,
                               LNT.RRTYPE, LNT.CIACCTNO, LNT.CUSTBANK, LNT.INTOVDCD,LNT.BANKPAIDMETHOD,lnt.ISPAYBANK
                           FROM CIMAST CI, AFMAST AF, AFTYPE AFT, LNTYPE LNT, AFIDTYPE AFID
                           WHERE CI.AFACCTNO = AF.ACCTNO AND CI.STATUS = 'A'
                               AND AF.ACTYPE = AFT.ACTYPE --AND AF.STATUS = 'A'
                               AND LNT.STATUS <> 'N' and AFT.actype = afid.aftype and afid.objname = 'LN.LNTYPE' AND LNT.ACTYPE = AFID.ACTYPE
                               and not exists (select 1 from lnmast where lnmast.trfacctno = ci.acctno and lnmast.actype = AFID.ACTYPE and lnmast.STATUS NOT IN ('P','R','C') AND lnmast.FTYPE='AF')
                               and lnt.actype = rec_ln.actype and CI.ACCTNO  = rec.ciacctno
                           )
                       )
                   LOOP
                       V_STRBRID:= SUBSTR(REC1.ACCTNO,0,4);
                       V_STRBRID:= SUBSTR(REC1.ACCTNO,0,4);
                       SELECT SEQ_LNMAST.NEXTVAL LNACCTNO
                           into V_STRACCTNO
                       FROM DUAL;
                       V_STRACCTNO:=substr('000000' || V_STRACCTNO,length('000000' || V_STRACCTNO)-5,6);
                       V_STRACCTNO:=V_STRBRID    || substr(to_char(V_DTCURDATE,systemnums.c_date_format),1,2)
                                                 || substr(to_char(V_DTCURDATE,systemnums.c_date_format),4,2)
                                                 || substr(to_char(V_DTCURDATE,systemnums.c_date_format),9,2)
                                                 || V_STRACCTNO;
                        PLOG.DEBUG(pkgctx,'begin INSERT INTO LNMAST: ' || V_STRACCTNO);
                           INSERT INTO LNMAST
                         ("ACTYPE", "ACCTNO", "CCYCD", "BANKID", "APPLID", "OPNDATE",
                          "EXPDATE", "EXTDATE", "CLSDATE", "RLSDATE", "LASTDATE", "ACRDATE",
                          "OACRDATE", "STATUS", "PSTATUS", "TRFACCTNO", "PRINAFT", "INTAFT",
                          "LNTYPE", "LNCLDR", "PRINFRQ", "PRINPERIOD", "INTFRGCD", "INTDAY",
                          "INTPERIOD", "NINTCD", "OINTCD", "RATE1", "RATE2", "RATE3",
                          "OPRINFRQ", "OPRINPERIOD", "OINTFRQCD", "OINTDAY", "ORATE1",
                          "ORATE2", "ORATE3", "DRATE", "APRLIMIT", "RLSAMT", "PRINPAID",
                          "PRINNML", "PRINOVD", "INTNMLACR", "INTOVDACR", "INTNMLPBL",
                          "INTNMLOVD", "INTDUE", "INTPAID", "INTPREPAID", "NOTES",
                          "LNCLASS", "ADVPAY", "ADVPAYFEE", "ORLSAMT", "OPRINPAID",
                          "OPRINNML", "OPRINOVD", "OINTNMLACR", "OINTNMLOVD", "OINTOVDACR",
                          "OINTDUE", "OINTPAID", "OINTPREPAID", "FEE", "FEEPAID", "FEEDUE",
                          "FEEOVD", "FTYPE", "PREPAID",
                          "CFRATE1","CFRATE2","CFRATE3","MINTERM","AUTOAPPLY","INTPAIDMETHOD",
                          "FEEINTNMLACR","FEEINTOVDACR","FEEINTNMLOVD","FEEINTDUE","FEEINTPREPAID","FEEINTPAID",
                          "INTFLOATAMT","FEEFLOATAMT",RRTYPE, CIACCTNO, CUSTBANK,INTOVDCD,BANKPAIDMETHOD,ISPAYBANK)
                       VALUES
                         (REC1.ACTYPE, V_STRACCTNO, REC1.CCYCD, NULL, NULL, V_DTCURDATE,
                          V_DTCURDATE, NULL, NULL, V_DTCURDATE, NULL, V_DTCURDATE,
                          V_DTCURDATE, 'N', '', REC1.ACCTNO, 'Y', 'Y', REC1.LNTYPE,
                          REC1.LNCLDR, REC1.PRINFRQ, REC1.PRINPERIOD, REC1.INTFRQCD, REC1.INTDAY,
                          REC1.INTPERIOD, REC1.NINTCD, REC1.OINTCD, REC1.RATE1, REC1.RATE2,
                          REC1.RATE3, REC1.OPRINFRQ, REC1.OPRINPERIOD, REC1.OINTFRQCD,
                          REC1.OINTDAY, REC1.ORATE1, REC1.ORATE2, REC1.ORATE3, REC1.DRATE, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 'I', REC1.ADVPAY,
                          REC1.ADVPAYFEE, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'AF',REC1.PREPAID,
                          REC1.CFRATE1,REC1.CFRATE2,REC1.CFRATE3,REC1.MINTERM,REC1.AUTOAPPLY,REC1.INTPAIDMETHOD,
                          0,0,0,0,0,0,0,0, REC1.RRTYPE, REC1.CIACCTNO, REC1.CUSTBANK, REC1.INTOVDCD,REC1.BANKPAIDMETHOD,REC1.ISPAYBANK);
                        PLOG.DEBUG(pkgctx,'INSERT INTO LNMAST: ' || V_STRACCTNO);
                   END LOOP;
                end if;



                select ln.acctno, ln.rrtype, ln.custbank, ln.ciacctno into l_LNACCTNO, l_rrtype, l_custbank,  l_ciacctno
                from lnmast ln where ln.actype = rec_ln.actype and ln.trfacctno = rec.ciacctno and ln.STATUS NOT IN ('P','R','C') AND ln.FTYPE='AF';

                pr_eventslog(l_LOGDATE || ' >> pr_LNDrawndown_UyBan', 0, '            >>>> Inside Loop rec_ln.actype:'||rec_ln.actype
                            || '. >> rec_ln.IsSubResource:'||rec_ln.IsSubResource
                            || '. >> l_rrtype:'||l_rrtype);


               --- if rec_ln.IsSubResource = 'Y' then
                    -- Neu la nguon PHU, xet nguon cho vay tuong ung.
                    l_exec_MRamount:=l_remain_MRamount;

                    if l_rrtype = 'B' then -- Neu nguon cho vay la nguon Ngan Hang: Xet min gioi han cua Toan He Thong va cua tung Khach Hang
                        begin
                            l_avlamt:= cspks_cfproc.fn_getavlcflimit(l_custbank, rec_ln.cfcustid, 'DFMR');
                        exception when others then
                            l_avlamt:= 0;
                        end;

                        pr_eventslog(l_LOGDATE || ' >> pr_LNDrawndown_UyBan', 0, '                >>>>> Bank Limit:'
                            || '. >> l_custbank:'||rec_ln.IsSubResource
                            || '. >> rec_ln.cfcustid:'||rec_ln.cfcustid
                            || '. >> l_avlamt:'||l_avlamt);

                        select nvl(greatest(af.mrcrlimitmax - ci.dfodamt - greatest(nvl(usedprin,0),0),0),0)
                            into l_mrcrlimitmax
                        from afmast af, cimast ci,
                        (select trfacctno, sum(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd) usedprin
                                from lnmast ln
                                where ftype = 'AF' and trfacctno = rec.ciacctno
                                group by ln.trfacctno) lcf
                        where af.acctno = rec.ciacctno and af.acctno = ci.acctno
                            and af.acctno = lcf.trfacctno(+);

                        pr_eventslog(l_LOGDATE || ' >> pr_LNDrawndown_UyBan', 0, '                >>>>> Acc Limit:' || l_mrcrlimitmax);

                        l_exec_MRamount:= least(l_avlamt, l_exec_MRamount, l_mrcrlimitmax);

                        pr_eventslog(l_LOGDATE || ' >> pr_LNDrawndown_UyBan', 0, '                >>>>> Temp Avl 01:' || l_exec_MRamount);

                    elsif l_rrtype = 'O' then -- Neu nguon cho vay la nguon CI: Tam thoi khong check han muc
                        l_exec_MRamount:= l_exec_MRamount;

                        select nvl(greatest( mrcrlimitmax - ci.dfodamt - greatest(nvl(usedprin,0),0),0),0)
                            into l_mrcrlimitmax
                        from afmast af, cimast ci,
                        (select trfacctno, sum(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd) usedprin
                                from lnmast ln
                                where ftype = 'AF'
                                group by ln.trfacctno) lcf
                        where af.acctno = rec.ciacctno and af.acctno = ci.acctno
                        and af.acctno = lcf.trfacctno(+);

                        l_exec_MRamount:= least(l_exec_MRamount, l_mrcrlimitmax);
                        pr_eventslog(l_LOGDATE || ' >> pr_LNDrawndown_UyBan', 0, '                >>>>> Temp Avl 01:' || l_exec_MRamount);

                    /*elsif l_rrtype = 'C' then -- Neu nguon cho vay la nguon Cong Ty: Kiem tra tren han muc vay cua khach hang MRCRLIMITMAX

                        select nvl(greatest(mrcrlimitmax - ci.dfodamt - greatest(nvl(usedprin,0),0),0),0)
                                into l_mrcrlimitmax
                            from afmast af, cimast ci,
                            (select trfacctno, sum(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd) usedprin
                                    from lnmast ln
                                    where ftype = 'AF'
                                    group by ln.trfacctno) lcf
                            where af.acctno = rec.ciacctno and af.acctno = ci.acctno
                            and af.acctno = lcf.trfacctno(+);
                        pr_eventslog(l_LOGDATE || ' >> pr_LNDrawndown_UyBan', 0, '                >>>>> Acc Limit:' || l_mrcrlimitmax);

                        l_exec_MRamount:=least(l_mrcrlimitmax,l_exec_MRamount);
                        pr_eventslog(l_LOGDATE || ' >> pr_LNDrawndown_UyBan', 0, '                >>>>> Temp Avl 01:' || l_exec_MRamount);

                        -- Neu tuan thu. lay min voi maxdebt
                        pr_eventslog(l_LOGDATE || ' >> pr_LNDrawndown_UyBan', 0, '                >>>>> rec_ln.chksysctrl:'||rec_ln.chksysctrl);
                        if rec_ln.chksysctrl = 'Y' then
                           select nvl(greatest(least(mrcrlimitmax,to_number(cspks_system.fn_get_sysvar('MARGIN','MAXDEBTCF'))) - ci.dfodamt - greatest(nvl(usedprin,0),0),0),0)
                                into l_mrcrlimitmax
                            from afmast af, cimast ci,
                            (select trfacctno, sum(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd) usedprin
                                    from lnmast ln, lntype lnt
                                    where ln.actype = lnt.actype and ln.rrtype = 'C' and lnt.chksysctrl = 'Y'
                                    group by ln.trfacctno) lcf
                            where af.acctno = rec.ciacctno and af.acctno = ci.acctno
                            and af.acctno = lcf.trfacctno(+);
                            l_exec_MRamount:=least(l_mrcrlimitmax,l_exec_MRamount);
                            pr_eventslog(l_LOGDATE || ' >> pr_LNDrawndown_UyBan', 0, '                    >>>>> Temp Avl 01:' || l_exec_MRamount);

                            -- Neu khach hang ko duoc phep Margin. --> Han muc = 0.
                            if rec.MARGINALLOW <> 'Y' then
                                l_exec_MRamount:= 0;
                            end if;
                            select greatest(nvl(sum(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd),0),0) into l_maxdebt
                            from lnmast ln, lntype lnt where ln.actype = lnt.actype and ftype = 'AF' and lnt.rrtype = 'C' and chksysctrl = 'Y';

                            select greatest(to_number(varvalue) - l_maxdebt,0) into l_mrcrlimitmax from sysvar where varname = 'MAXDEBT';

                            select greatest(least(l_mrcrlimitmax, prlimit - prinused),0) into l_mrcrlimitmax from prmaster where prcode = '9999' and prtyp = 'P';

                            l_exec_MRamount:= least(l_mrcrlimitmax, l_exec_MRamount);
                            pr_eventslog(l_LOGDATE || ' >> pr_LNDrawndown_UyBan', 0, '                    >>>>> Temp Avl 02' || l_exec_MRamount);
                        end if;

                        l_exec_MRamount:= least(l_mrcrlimitmax, l_exec_MRamount);
                        pr_eventslog(l_LOGDATE || ' >> pr_LNDrawndown_UyBan', 0, '                >>>>> Temp Avl 03'||l_exec_MRamount);*/
                    end if;

                    select 100 - mriratio into l_mriratio from afmast where acctno = rec.ciacctno;
                    -- Lay min voi Room: Neu Tuan Thu --> check tren min (ROOM MARGIN, ROOM SYSTEM); Neu Khong Tuan Thu --> check tren ROOM SYSTEM.
                    -- Xet nguon tren ro vay toi da.
                    pr_eventslog(l_LOGDATE || ' >> pr_LNDrawndown_UyBan', 0, '                >>>>> Cal Availble Value');

                l_exec_MRamount:= greatest(round(l_exec_MRamount,0),0);
                pr_eventslog(l_LOGDATE || ' >> pr_LNDrawndown_UyBan', 0, '                >>>>> Exec Value: '||l_exec_MRamount);

                if l_exec_MRamount > 0 then
                    SELECT systemnums.C_BATCH_PREFIXED
                                     || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                              INTO l_txmsg.txnum
                              FROM DUAL;
                    l_txmsg.brid        := substr(rec.CIACCTNO,1,4);

                    select 'Giai ngan '||decode(rec_ln.rrtype,'C',UTF8NUMS.c_const_COMPANY_NAME,'B',nvl(rec_ln.cfmnemonic,''),'')||'/CL/'|| to_char(v_CURRDATE,'DD.MM.RRRR') ||'/' || to_char(l_exec_MRamount) || ' VND'
                        into v_strDESC
                        from dual;
                    --Set cac field giao dich
                    --03   C   ACCTNO
                    l_txmsg.txfields ('03').defname   := 'ACCTNO';
                    l_txmsg.txfields ('03').TYPE      := 'C';
                    l_txmsg.txfields ('03').VALUE     := l_LNACCTNO;

                    --05   C   ACCTNO
                    l_txmsg.txfields ('05').defname   := 'ACCTNO';
                    l_txmsg.txfields ('05').TYPE      := 'C';
                    l_txmsg.txfields ('05').VALUE     := rec.CIACCTNO;

                    --10   N   MRODAMT
                    l_txmsg.txfields ('10').defname   := 'MRODAMT';
                    l_txmsg.txfields ('10').TYPE      := 'N';
                    l_txmsg.txfields ('10').VALUE     := l_exec_MRamount;
                    --11   N   T0ODAMT
                    l_txmsg.txfields ('11').defname   := 'T0ODAMT';
                    l_txmsg.txfields ('11').TYPE      := 'N';
                    l_txmsg.txfields ('11').VALUE     := 0;
                    --20    N   FINANCETYPE
                    l_txmsg.txfields ('20').defname   := 'FINANCETYPE';
                    l_txmsg.txfields ('20').TYPE      := 'N';
                    l_txmsg.txfields ('20').VALUE     := REC.FINANCETYPE;
                    --30   C   DESC
                    l_txmsg.txfields ('30').defname   := 'DESC';
                    l_txmsg.txfields ('30').TYPE      := 'C';
                    l_txmsg.txfields ('30').VALUE :=v_strDESC;

                    --35   C   REFOPNAUTOID
                    l_txmsg.txfields ('35').defname   := 'REFOPNAUTOID';
                    l_txmsg.txfields ('35').TYPE      := 'C';
                    l_txmsg.txfields ('35').VALUE     := '0';

                    --90   N   ISCIDRAWNDOWN
                    l_txmsg.txfields ('90').defname   := 'ISCIDRAWNDOWN';
                    l_txmsg.txfields ('90').TYPE      := 'N';
                    l_txmsg.txfields ('90').VALUE     := case when l_rrtype = 'O' then 1 else 0 end;
                    --91   N   CIACCTNO
                    l_txmsg.txfields ('91').defname   := 'CIACCTNO';
                    l_txmsg.txfields ('91').TYPE      := 'N';
                    l_txmsg.txfields ('91').VALUE     := case when l_rrtype = 'O' then l_ciacctno else '' end;

                    BEGIN
                        IF txpks_#5566.fn_batchtxprocess (l_txmsg,
                                                         p_err_code,
                                                         l_err_param
                           ) <> systemnums.c_success
                        THEN
                           plog.error (pkgctx,
                                       'got error 5566: ' || p_err_code
                           );
                           ROLLBACK;
                           RETURN;
                        END IF;
                    END;


                    ------------------------------------------------
                    -- Tra no 5567
                    ------------------------------------------------
                    plog.debug(pkgctx, 'Loop for' || rec.afacctno);
                    --- Chi tra no cho nhung thang Uy Ban
                    if cspks_lnproc.fn_Gen_Prepaid_Payment(rec.afacctno, l_exec_MRamount, 'L', p_err_code,'Y') <> systemnums.c_success then
                        plog.setendsection (pkgctx, 'pr_LNAutoPayment');
                        return;
                    end if;
                    l_Desc:= 'CL.' || l_OrgDesc;

                    for rec2 in
                    (
                        select ln.trfacctno, ln.acctno, ls.autoid lnschdid, lp.autoid,
                            max(case when ln.ftype = 'AF' then 1 else 0 end) FINANCETYPE,
                            max(ln.ADVPAYFEE) ADVPAYFEE, sum(lp.amt - lp.paidamt) AvlAmt,

                            sum(case when reftype = 'GP' then ls.intovd else 0 end) T0INTNMLOVD,
                            sum(case when reftype = 'GP' then ls.intovdprin else 0 end) T0INTOVDACR,
                            sum(case when reftype = 'GP' then ls.ovd else 0 end) T0PRINOVD,
                            sum(case when reftype = 'GP' then ls.intdue else 0 end) T0INTDUE,
                            sum(case when reftype = 'GP' and overduedate = v_CURRDATE then ls.nml else 0 end) T0PRINDUE,
                            sum(case when reftype = 'GP' then ls.intnmlacr else 0 end) T0INTNMLACR,
                            sum(case when reftype = 'GP' then ls.nml else 0 end) T0PRINNML,

                            sum(case when reftype = 'P' then ls.feeovd else 0 end) FEEOVD,
                            sum(case when reftype = 'P' then ls.intovd else 0 end) INTNMLOVD,
                            sum(case when reftype = 'P' then ls.feeintnmlovd else 0 end) FEEINTNMLOVD,
                            sum(case when reftype = 'P' then ls.intovdprin else 0 end) INTOVDACR,
                            sum(case when reftype = 'P' then ls.feeintovdacr else 0 end) FEEINTOVDACR,
                            sum(case when reftype = 'P' then ls.ovd else 0 end) PRINOVD,
                            sum(case when reftype = 'P' then ls.feedue else 0 end) FEEDUE,
                            sum(case when reftype = 'P' then ls.intdue else 0 end) INTDUE,
                            sum(case when reftype = 'P' then ls.feeintdue else 0 end) FEEINTDUE,
                            sum(case when reftype = 'P' and overduedate = l_CURRDATE then ls.nml else 0 end) PRINDUE,
                            sum(case when reftype = 'P' then ls.fee else 0 end) FEENML,
                            sum(case when reftype = 'P' then ls.intnmlacr else 0 end) INTNMLACR,
                            sum(case when reftype = 'P' then ls.feeintnmlacr else 0 end) FEEINTNMLACR,
                            sum(case when reftype = 'P' then ls.nml else 0 end) PRINNML,
                            sum(case when reftype = 'P' then ls.INTNMLACRBANK else 0 end) INTNMLACRBANK


                        from lnmast ln, lnpaidalloc lp, lnschd ls
                        where ln.acctno = lp.lnacctno and lp.lnschdid = ls.autoid
                        and ln.trfacctno = rec.afacctno and instr(ls.reftype,'P') > 0
                        and lp.amt > lp.paidamt and lp.status = 'P'
                        group by ln.trfacctno, ln.acctno, ls.autoid, lp.autoid
                        order by lp.autoid
                    )
                    loop -- rec2
                        l_AvlAmt:= rec2.AvlAmt;
                        --So tien phai tra cho tung khoan
                        -- Bao lanh
                        --01.T0INTNMLOVD
                        l_T0INTNMLOVD := 0;
                        If l_AvlAmt > 0 Then
                            l_T0INTNMLOVD := round(least(l_AvlAmt, rec2.T0INTNMLOVD),0);
                            l_AvlAmt := l_AvlAmt - l_T0INTNMLOVD;
                        End If;
                        --02.T0INTOVDACR
                        l_T0INTOVDACR := 0;
                        If l_AvlAmt > 0 Then
                            l_T0INTOVDACR := round(least(l_AvlAmt, rec2.T0INTOVDACR),0);
                            l_AvlAmt := l_AvlAmt - l_T0INTOVDACR;
                        End If;
                        --03.T0PRINOVD
                        l_T0PRINOVD := 0;
                        If l_AvlAmt > 0 Then
                            l_T0PRINOVD := round(least(l_AvlAmt, rec2.T0PRINOVD),0);
                            l_AvlAmt := l_AvlAmt - l_T0PRINOVD;
                        end if;
                        --04.T0INTDUE
                        l_T0INTDUE := 0;
                        If l_AvlAmt > 0 Then
                             l_T0INTDUE := round(least(l_AvlAmt, rec2.T0INTDUE),0);
                             l_AvlAmt := l_AvlAmt - l_T0INTDUE;
                        End If;
                        --05.T0PRINDUE
                        l_T0PRINDUE := 0;
                        If l_AvlAmt > 0 Then
                            l_T0PRINDUE := round(least(l_AvlAmt, rec2.T0PRINDUE),0);
                            l_AvlAmt := l_AvlAmt - l_T0PRINDUE;
                        End If;
                        --06.T0INTNMLACR
                        l_T0INTNMLACR := 0;
                        If l_AvlAmt > 0 Then
                            l_T0INTNMLACR := round(least(l_AvlAmt, rec2.T0INTNMLACR),0);
                            l_AvlAmt := l_AvlAmt - l_T0INTNMLACR;
                        End If;
                        --07.T0PRINNML
                        l_T0PRINNML := 0;
                        If l_AvlAmt > 0 Then
                            l_T0PRINNML := round(least(l_AvlAmt, rec2.T0PRINNML),0);
                            l_AvlAmt := l_AvlAmt - l_T0PRINNML;
                        End If;

                        -- CL
                        -- Phi
                        --08.FEEINTNMLOVD
                        l_FEEINTNMLOVD := 0;
                        If l_AvlAmt > 0 Then
                            l_FEEINTNMLOVD := round(least(l_AvlAmt, rec2.FEEINTNMLOVD),0);
                            l_AvlAmt := l_AvlAmt - l_FEEINTNMLOVD;
                        End If;
                        --09.FEEINTDUE
                        l_FEEINTDUE := 0;
                        If l_AvlAmt > 0 Then
                             l_FEEINTDUE := round(least(l_AvlAmt, rec2.FEEINTDUE),0);
                             l_AvlAmt := l_AvlAmt - l_FEEINTDUE;
                        End If;
                        --10.FEEINTNMLACR
                        l_FEEINTNMLACR := 0;
                        If l_AvlAmt > 0 Then
                            l_FEEINTNMLACR := round(least(l_AvlAmt, rec2.FEEINTNMLACR),0);
                            l_AvlAmt := l_AvlAmt - l_FEEINTNMLACR;
                        End If;

                        -- Lai

                        --11.INTNMLOVD
                        l_INTNMLOVD := 0;
                        If l_AvlAmt > 0 Then
                            l_INTNMLOVD := round(least(l_AvlAmt, rec2.INTNMLOVD),0);
                            l_AvlAmt := l_AvlAmt - l_INTNMLOVD;
                        End If;
                        --12.INTOVDACR
                        l_INTOVDACR := 0;
                        If l_AvlAmt > 0 Then
                             l_INTOVDACR := round(least(l_AvlAmt, rec2.INTOVDACR),0);
                             l_AvlAmt := l_AvlAmt - l_INTOVDACR;
                        End If;
                        --13.INTDUE
                        l_INTDUE := 0;
                        If l_AvlAmt > 0 Then
                             l_INTDUE := round(least(l_AvlAmt, rec2.INTDUE),0);
                             l_AvlAmt := l_AvlAmt - l_INTDUE;
                        End If;
                        --14.INTNMLACR
                        l_INTNMLACR := 0;
                        If l_AvlAmt > 0 Then
                            l_INTNMLACR := round(least(l_AvlAmt, rec2.INTNMLACR),0);
                            l_AvlAmt := l_AvlAmt - l_INTNMLACR;
                        End If;

                        --15.FEEOVD
                        l_FEEOVD := 0;
                        If l_AvlAmt > 0 Then
                            l_FEEOVD := round(least(l_AvlAmt, rec2.FEEOVD),0);
                            l_AvlAmt := l_AvlAmt - l_FEEOVD;
                        End If;
                        --16.FEEDUE
                        l_FEEDUE := 0;
                        If l_AvlAmt > 0 Then
                            l_FEEDUE := round(least(l_AvlAmt, rec2.FEEDUE),0);
                            l_AvlAmt := l_AvlAmt - l_FEEDUE;
                        End If;
                        --17.FEENML
                        l_FEENML := 0;
                        If l_AvlAmt > 0 Then
                            l_FEENML := round(least(l_AvlAmt, rec2.FEENML),0);
                            l_AvlAmt := l_AvlAmt - l_FEENML;
                        End If;

                        -- Goc
                        --18.PRINOVD
                        l_PRINOVD := 0;
                        If l_AvlAmt > 0 Then
                            l_PRINOVD := round(least(l_AvlAmt, rec2.PRINOVD),0);
                            l_AvlAmt := l_AvlAmt - l_PRINOVD;
                        End If;
                        --19.PRINDUE
                        l_PRINDUE := 0;
                        If l_AvlAmt > 0 Then
                           l_PRINDUE := round(least(l_AvlAmt, rec2.PRINDUE),0);
                           l_AvlAmt := l_AvlAmt - l_PRINDUE;
                        End If;
                        --20.PRINNML
                        l_PRINNML := 0;
                        if rec2.PRINNML > 0 then
                            If l_AvlAmt > 0 Then
                                 l_PRINNML := round(least(rec2.PRINNML, l_AvlAmt * 1 / (1+REC2.ADVPAYFEE/100)),0);
                                 l_AvlAmt := l_AvlAmt - l_PRINNML;
                            End If;
                        end if;
                        --21.ADVPAYFEE
                        l_ADVPAYFEE := 0;
                        if l_PRINNML > 0 then
                            If l_AvlAmt > 0 Then
                                 l_ADVPAYFEE := round(rec2.FINANCETYPE * round(least(l_AvlAmt, l_PRINNML * REC2.ADVPAYFEE / 100 ),0),0);
                                 l_AvlAmt := l_AvlAmt - l_ADVPAYFEE;
                            End If;
                        end if;

                        -- Lai & Phi
                        --22.FEEINTOVDACR
                        l_FEEINTOVDACR := 0;
                        If l_AvlAmt > 0 Then
                             l_FEEINTOVDACR := round(least(l_AvlAmt, rec2.FEEINTOVDACR),0);
                             l_AvlAmt := l_AvlAmt - l_FEEINTOVDACR;
                        End If;

                        --cat tien bank
                        --86 .INTNMLACRBANK
                        l_txmsg.txfields ('86').defname   := 'INTNMLACRBANK';
                        l_txmsg.txfields ('86').TYPE      := 'N';
                        l_txmsg.txfields ('86').VALUE     := REC2.INTNMLACRBANK;

                        --set txnum
                        SELECT systemnums.C_BATCH_PREFIXED
                                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                                      INTO l_txmsg.txnum
                                      FROM DUAL;
                        l_txmsg.brid        := substr(rec.afacctno,1,4);



                        SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='5567';

                            l_txmsg.msgtype:='T';
                            l_txmsg.local:='N';
                            l_txmsg.tlid        := systemnums.c_system_userid;
                            l_txmsg.off_line    := 'N';
                            l_txmsg.deltd       := txnums.c_deltd_txnormal;
                            l_txmsg.txstatus    := txstatusnums.c_txcompleted;
                            l_txmsg.msgsts      := '0';
                            l_txmsg.ovrsts      := '0';
                            l_txmsg.batchname   := p_bchmdl;
                            l_txmsg.txdate:=v_CURRDATE;
                            l_txmsg.busdate:=v_CURRDATE;
                            l_txmsg.tltxcd:='5567';



                        --Set cac field giao dich
                        --01   C   AUTOID
                        l_txmsg.txfields ('01').defname   := 'AUTOID';
                        l_txmsg.txfields ('01').TYPE      := 'C';
                        l_txmsg.txfields ('01').VALUE     := rec2.lnschdid;

                        --03   C   ACCTNO
                        l_txmsg.txfields ('03').defname   := 'ACCTNO';
                        l_txmsg.txfields ('03').TYPE      := 'C';
                        l_txmsg.txfields ('03').VALUE     := rec2.acctno;

                        --05   C   CIACCTNO
                        l_txmsg.txfields ('05').defname   := 'CIACCTNO';
                        l_txmsg.txfields ('05').TYPE      := 'C';
                        l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;

                        --09   N   T0ODAMT
                        l_txmsg.txfields ('09').defname   := 'T0ODAMT';
                        l_txmsg.txfields ('09').TYPE      := 'N';
                        l_txmsg.txfields ('09').VALUE     := 0;

                         --45   N   PRINAMT
                        l_txmsg.txfields ('45').defname   := 'PRINAMT';
                        l_txmsg.txfields ('45').TYPE      := 'N';
                        l_txmsg.txfields ('45').VALUE     := l_T0PRINOVD + l_T0PRINNML + l_T0PRINDUE + l_PRINOVD + l_PRINDUE + l_PRINNML;
                        --46   N   INTAMT
                        l_txmsg.txfields ('46').defname   := 'INTAMT';
                        l_txmsg.txfields ('46').TYPE      := 'N';
                        l_txmsg.txfields ('46').VALUE     := l_ADVPAYFEE + l_FEEOVD + l_T0INTNMLOVD + l_INTNMLOVD + l_FEEINTNMLOVD+ l_FEEDUE + l_T0INTDUE + l_INTDUE + l_FEEINTDUE+ l_T0INTOVDACR + l_INTOVDACR + l_FEEINTOVDACR+ l_FEENML + l_T0INTNMLACR + l_INTNMLACR+l_FEEINTNMLACR ;

                        --47   N   ADVFEE
                        l_txmsg.txfields ('47').defname   := 'ADVFEE';
                        l_txmsg.txfields ('47').TYPE      := 'N';
                        l_txmsg.txfields ('47').VALUE     := round(rec2.ADVPAYFEE,0) * rec2.FINANCETYPE;

                        --60   N   PT0PRINOVD
                        l_txmsg.txfields ('60').defname   := 'PT0PRINOVD';
                        l_txmsg.txfields ('60').TYPE      := 'N';
                        l_txmsg.txfields ('60').VALUE     := l_T0PRINOVD;
                        --61   N   PT0PRINDUE
                        l_txmsg.txfields ('61').defname   := 'PT0PRINDUE';
                        l_txmsg.txfields ('61').TYPE      := 'N';
                        l_txmsg.txfields ('61').VALUE     := l_T0PRINDUE;
                        --62   N   PT0PRINNML
                        l_txmsg.txfields ('62').defname   := 'PT0PRINNML';
                        l_txmsg.txfields ('62').TYPE      := 'N';
                        l_txmsg.txfields ('62').VALUE     := l_T0PRINNML;
                        --63   N   PPRINOVD
                        l_txmsg.txfields ('63').defname   := 'PPRINOVD';
                        l_txmsg.txfields ('63').TYPE      := 'N';
                        l_txmsg.txfields ('63').VALUE     := l_PRINOVD;
                        --64   N   PPRINDUE
                        l_txmsg.txfields ('64').defname   := 'PPRINDUE';
                        l_txmsg.txfields ('64').TYPE      := 'N';
                        l_txmsg.txfields ('64').VALUE     := l_PRINDUE;
                        --65   N   PPRINNML
                        l_txmsg.txfields ('65').defname   := 'PT0PRINOVD';
                        l_txmsg.txfields ('65').TYPE      := 'N';
                        l_txmsg.txfields ('65').VALUE     := l_PRINNML;
                        --70   N   PFEEOVD
                        l_txmsg.txfields ('70').defname   := 'PFEEOVD';
                        l_txmsg.txfields ('70').TYPE      := 'N';
                        l_txmsg.txfields ('70').VALUE     := l_FEEOVD;
                        --71   N   PT0INTNMLOVD
                        l_txmsg.txfields ('71').defname   := 'PT0INTNMLOVD';
                        l_txmsg.txfields ('71').TYPE      := 'N';
                        l_txmsg.txfields ('71').VALUE     := l_T0INTNMLOVD;
                        --72   N   PINTNMLOVD
                        l_txmsg.txfields ('72').defname   := 'PINTNMLOVD';
                        l_txmsg.txfields ('72').TYPE      := 'N';
                        l_txmsg.txfields ('72').VALUE     := l_INTNMLOVD;
                        --52   N   PFEEINTNMLOVD
                        l_txmsg.txfields ('52').defname   := 'PFEEINTNMLOVD';
                        l_txmsg.txfields ('52').TYPE      := 'N';
                        l_txmsg.txfields ('52').VALUE     := l_FEEINTNMLOVD;
                        --73   N   PT0INTOVDACR
                        l_txmsg.txfields ('73').defname   := 'PT0INTOVDACR';
                        l_txmsg.txfields ('73').TYPE      := 'N';
                        l_txmsg.txfields ('73').VALUE     := l_T0INTOVDACR;
                        --74   N   PINTOVDACR
                        l_txmsg.txfields ('74').defname   := 'PINTOVDACR';
                        l_txmsg.txfields ('74').TYPE      := 'N';
                        l_txmsg.txfields ('74').VALUE     := l_INTOVDACR;
                        --54   N   PFEEINTOVDACR
                        l_txmsg.txfields ('54').defname   := 'PFEEINTOVDACR';
                        l_txmsg.txfields ('54').TYPE      := 'N';
                        l_txmsg.txfields ('54').VALUE     := l_FEEINTOVDACR;
                        --75   N   PFEEDUE
                        l_txmsg.txfields ('75').defname   := 'PFEEDUE';
                        l_txmsg.txfields ('75').TYPE      := 'N';
                        l_txmsg.txfields ('75').VALUE     := l_FEEDUE;
                        --76   N   PT0INTDUE
                        l_txmsg.txfields ('76').defname   := 'PT0INTDUE';
                        l_txmsg.txfields ('76').TYPE      := 'N';
                        l_txmsg.txfields ('76').VALUE     := l_T0INTDUE;
                        --77   N   PINTDUE
                        l_txmsg.txfields ('77').defname   := 'PINTDUE';
                        l_txmsg.txfields ('77').TYPE      := 'N';
                        l_txmsg.txfields ('77').VALUE     := l_INTDUE;
                        --57   N   PFEEINTDUE
                        l_txmsg.txfields ('57').defname   := 'PFEEINTDUE';
                        l_txmsg.txfields ('57').TYPE      := 'N';
                        l_txmsg.txfields ('57').VALUE     := l_FEEINTDUE;
                        --78   N   PFEE
                        l_txmsg.txfields ('78').defname   := 'PFEE';
                        l_txmsg.txfields ('78').TYPE      := 'N';
                        l_txmsg.txfields ('78').VALUE     := l_FEENML;
                        --79   N   PT0INTNMLACR
                        l_txmsg.txfields ('79').defname   := 'PT0INTNMLACR';
                        l_txmsg.txfields ('79').TYPE      := 'N';
                        l_txmsg.txfields ('79').VALUE     := l_T0INTNMLACR;
                        --80   N   PINTNMLACR
                        l_txmsg.txfields ('80').defname   := 'PINTNMLACR';
                        l_txmsg.txfields ('80').TYPE      := 'N';
                        l_txmsg.txfields ('80').VALUE     := l_INTNMLACR;
                        --50   N   PFEEINTNMLACR
                        l_txmsg.txfields ('50').defname   := 'PFEEINTNMLACR';
                        l_txmsg.txfields ('50').TYPE      := 'N';
                        l_txmsg.txfields ('50').VALUE     := l_FEEINTNMLACR;
                        --81   N   ADVPAYAMT
                        l_txmsg.txfields ('81').defname   := 'ADVPAYAMT';
                        l_txmsg.txfields ('81').TYPE      := 'N';
                        l_txmsg.txfields ('81').VALUE     := l_PRINNML;
                        --82   N   FEEAMT
                        l_txmsg.txfields ('82').defname   := 'FEEAMT';
                        l_txmsg.txfields ('82').TYPE      := 'N';
                        l_txmsg.txfields ('82').VALUE     := Round(l_ADVPAYFEE, 0);  --Round(l_PRINNML * REC2.ADVPAYFEE / 100, 0);
                        --83   N   PAYAMT
                        l_txmsg.txfields ('83').defname   := 'PAYAMT';
                        l_txmsg.txfields ('83').TYPE      := 'N';
                        l_txmsg.txfields ('83').VALUE     := l_ADVPAYFEE + l_T0PRINOVD + l_T0PRINNML + l_T0PRINDUE + l_PRINOVD + l_PRINDUE + l_PRINNML + l_FEEOVD + l_T0INTNMLOVD + l_INTNMLOVD + l_FEEINTNMLOVD+ l_FEEDUE + l_T0INTDUE + l_INTDUE + l_FEEINTDUE + l_T0INTOVDACR + l_INTOVDACR + l_FEEINTOVDACR + l_FEENML + l_T0INTNMLACR + l_INTNMLACR + l_FEEINTNMLACR;
                        --plog.debug(pkgctx, 'Balance check:' || l_txmsg.txfields ('83').VALUE);
                        --20    N   FINANCETYPE
                        l_txmsg.txfields ('20').defname   := 'FINANCETYPE';
                        l_txmsg.txfields ('20').TYPE      := 'N';
                        l_txmsg.txfields ('20').VALUE     := REC2.FINANCETYPE;

                        --86   N   INTNMLACRBANK
                        l_txmsg.txfields ('86').defname   := 'INTNMLACRBANK';
                        l_txmsg.txfields ('86').TYPE      := 'N';
                        l_txmsg.txfields ('86').VALUE     := REC2.INTNMLACRBANK ;

                        --30   C   DESC
                        l_txmsg.txfields ('30').defname   := 'DESC';
                        l_txmsg.txfields ('30').TYPE      := 'C';
                        l_txmsg.txfields ('30').VALUE :=v_strDesc;


                        BEGIN
                            IF txpks_#5567.fn_batchtxprocess (l_txmsg,
                                                             p_err_code,
                                                             l_err_param
                               ) <> systemnums.c_success
                            THEN
                               plog.error (pkgctx,
                                           'got error 5567: ' || p_err_code
                               );
                               ROLLBACK;
                               RETURN;
                            END IF;
                        END;

                        update lnpaidalloc
                        set status = 'C'
                        where status = 'P'
                        and autoid = rec2.autoid;

                    end loop; -- rec2
                    l_remain_MRamount:=l_remain_MRamount-l_exec_MRamount;
                end if;
                exit when l_remain_MRamount <=0;
            end loop; -- rec_ln

        end if;




    end loop;

    -- Xuat log Report Giai Ngan.
    if not fn_gen_cl_drawndown_report('CL') then
        p_err_code:=1;
        return;
    end if;


    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_LNDrawndown_UyBan');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, 'rows:' || dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_LNDrawndown_UyBan');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_LNDrawndown_UyBan;







----- HaiLT tach pr_LNAutoDrawndown thanh 2 proc: Phat vay bao lanh va Phat vay Margin

---------------------------------pr_LNAutoDrawndown_Margin------------------------------------------------
  PROCEDURE pr_LNAutoDrawndown_Margin(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg               tx.msg_rectype;
      v_CURRDATE date;
      l_LOGDATE varchar2(10);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_dblMRODAMT  number(20,0);
      l_err_param varchar2(300);
      l_CUSTODYCD_PREFIX varchar2(3);
      l_LNACCTNO varchar2(30);
      l_remain_MRamount number(20,4);
      l_exec_MRamount number(20,4);
      l_rrtype varchar2(1);
      l_custbank varchar2(30);
      l_ciacctno varchar2(30);
      l_avlamt number(24,4);
      l_mrcrlimitmax number(24,4);
      l_afavlamt number(24,4);
      l_afusedamt number(24,4);
      l_chksysctrl varchar2(1);
      l_mriratio number(10,4);
      l_maxdebt number(20,0);
      l_count number;
      l_T0ODAMT number(20,0);
      l_MarginType varchar2(1);
      l_MR_Master_Amount number(20,4);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_LNAutoDrawndown_Margin');

    --chaunh insert log gia tri co the giai ngan
   /* begin
        cspks_logproc.pr_Drawndown_Margin('XXX');
    end;*/
    --end chaunh

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='5566';
     SELECT TO_DATE (varvalue, systemnums.c_date_format), varvalue
               INTO v_CURRDATE, l_LOGDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=v_CURRDATE;
    l_txmsg.busdate:=v_CURRDATE;
    l_txmsg.tltxcd:='5566';

    select varvalue into l_CUSTODYCD_PREFIX from sysvar where grname ='SYSTEM' and varname ='COMPANYCD';
    pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '> Begin Loop!');
    plog.debug(pkgctx, 'Begin loop');
    for rec in
    (
/*        SELECT CI.ACCTNO CIACCTNO, CI.BALANCE, CI.T0ODAMT, aft.lntype, aft.t0lntype, 1 FINANCETYPE, CF.MARGINALLOW
               FROM CIMAST CI, CFMAST CF, AFMAST AF, AFTYPE AFT, mrtype mrt
               WHERE cf.custid = af.custid and af.actype = aft.actype and af.acctno = ci.afacctno and CI.STATUS='A' and aft.mrtype = mrt.actype
               and cf.custatcom='Y' and ci.balance < 0 and mrt.mrtype in ('S','T')
               ORDER BY case when af.trfbuyrate * af.trfbuyext = 0 then 0 else 1 end, ci.acctno*/

        --- HaiLT sua theo y/c MR006 (Phase 2) cho cac tai khoan tuan thu dc giai ngan truoc
        SELECT A.*,  nvl(LN.chksysctrl,'N')  chksysctrl FROM (
            SELECT CI.ACCTNO CIACCTNO, CI.BALANCE  BALANCE, CI.T0ODAMT, aft.lntype, aft.t0lntype, 1 FINANCETYPE, CF.MARGINALLOW
                ,nvl(nl.gpamt,0) gpamt, nvl(nl.remaingpamt,0) remaingpamt,af.poolchk
            FROM CIMAST CI, CFMAST CF, AFMAST AF, AFTYPE AFT, mrtype mrt,
                (select * from ln_gp_log where log_date = v_CURRDATE)nl
            WHERE cf.custid = af.custid and af.actype = aft.actype and af.acctno = ci.afacctno and CI.STATUS='A' and aft.mrtype = mrt.actype
            and cf.custatcom='Y' and ci.balance - nvl(nl.gpamt,0) < 0 and mrt.mrtype in ('S','T') and ci.acctno = nl.acctno(+)
            ORDER BY case when af.trfbuyrate * af.trfbuyext = 0 then 0 else 1 end, ci.acctno
        )A left join LNTYPE LN on NVL(A.lntype,0) = LN.ACTYPE and ln.lnpurpose <> 'R'
        ORDER BY (case when poolchk ='Y' then 0 else 1 end), nvl(LN.chksysctrl,'N') DESC


    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for CIACCTNO:' || rec.CIACCTNO);
        plog.error( 'LN autodrodown Loop for CIACCTNO:' || rec.CIACCTNO);
        pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '    >> Loop for CIACCTNO:' || rec.CIACCTNO);
        /*
        Release Room On SubAccount
        */
        pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '    >> Begin Remark fn_markedafpralloc');
        if fn_markedafpralloc(rec.CIACCTNO,
                        null,
                        'A',
                        'T',
                        null,
                        'N',
                        'N',
                        v_CURRDATE,
                        'GN',
                        p_err_code) <> systemnums.C_SUCCESS then

            plog.debug (pkgctx, 'got error fn_markedafpralloc inside pr_LNAutoDrawndown_Margin: ' || p_err_code );
            ROLLBACK;
            RETURN;
        end if;
        pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '    >> End Remark fn_markedafpralloc');

        /*
        -- Giai ngan Margin:
        */
        --chaunh:
        v_dblMRODAMT:= greatest(-rec.BALANCE + rec.gpamt,0);
        pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '    >> Drawndown Amount v_dblMRODAMT:' || v_dblMRODAMT);

        insert into afse_info_log
        (symbol, codeid, tradeqtty, rcvqtty, sellmatchqtty,
               buyqtty, avlsysroom, remainsysroom, usedsysroom,
               avl74room, remain74room, used74room, ratecl, pricecl,
               callpricecl, rate74, price74, callprice74, seamt,
               se74amt, afacctno, custodycd, txdate)
        SELECT symbol, codeid, tradeqtty, rcvqtty, sellmatchqtty,
               buyqtty, avlsysroom, remainsysroom, usedsysroom,
               avl74room, remain74room, used74room, ratecl, pricecl,
               callpricecl, rate74, price74, callprice74, seamt,
               se74amt, afacctno, custodycd, v_CURRDATE
        FROM vw_afse_info_log
        where afacctno = rec.ciacctno;
        insert into afln_info_log
        (custodycd, acctno, lntype, banklimit, dfamt,
               dfprinamt, dfintamt, mramt, mrprinamt, mrintamt,
               mr74amt, mr74prinamt, mr74intamt, t0amt, mrcrlimitmax,
               mrcrlimitremain, txdate)
        SELECT custodycd, acctno, lntype, banklimit, dfamt,
               dfprinamt, dfintamt, mramt, mrprinamt, mrintamt,
               mr74amt, mr74prinamt, mr74intamt, t0amt, mrcrlimitmax,
               mrcrlimitremain, v_CURRDATE
          FROM vw_afln_info_log
        where acctno = rec.ciacctno;

        -- Margin Drawndown
        l_LNACCTNO:='';
        If round(v_dblMRODAMT,0) > 0 Then
            l_remain_MRamount:= round(v_dblMRODAMT,0);
            l_exec_MRamount:= 0;
            -- Tong gia tri giai ngan theo nguon chinh. >> xac dinh so tien giai ngan toi da theo nguon chinh.
            pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '    >> Cal Master Resource Limit');
            for rec_mast in
            (
                    select lnt.*, AFT.ACTYPE AFTYPE
                        from afmast af, aftype aft, lntype lnt
                        where af.actype = aft.actype
                            and af.acctno = rec.ciacctno
                            and aft.lntype = lnt.actype and lnt.status <> 'N'
            )
            loop
                select 100 - mriratio into l_mriratio from afmast where acctno = rec.ciacctno;

                begin
                    select greatest(least(af.mrcrlimitmax - mst.dfodamt,nvl(afavlamt,0)) - greatest(decode(rec_mast.chksysctrl,'Y',nvl(ln.margin74amt,0),nvl(ln.marginamt,0)),0)
                                - nvl(sts.trfsecuredamt,0),0)
                        into l_MR_Master_Amount
                    from cimast mst, afmast af,
                        (select  se.afacctno, nvl(sum(case when rec_mast.chksysctrl = 'Y' then
                                        (case when se.roomchk ='Y' then  (least(se.trade + nvl(sts.receiving,0) - nvl(used.prinused_af,0),
                                                        greatest(nvl(room.roomlimit,0) - nvl(prinused,0),0))
                                                + nvl(used.prinused_af,0) )
                                              else se.trade + nvl(sts.receiving,0)
                                         end)
                                                 * nvl(rsk.MRRATE,0)/100 * nvl(rsk.MRPRICE,0)
                                        else
                                        (case when se.roomchk ='Y' then (least(se.trade + nvl(sts.receiving,0) - nvl(used.sys_prinused_af,0),
                                                    greatest(nvl(room.syroomlimit,0) - nvl(room.syroomused,0) - nvl(used.sys_prinused,0),0))
                                            + nvl(used.sys_prinused_af,0))
                                         else
                                            se.trade + nvl(sts.receiving,0)
                                         end)
                                             * nvl(rsk.MRRATE,0)/100 * nvl(rsk.MRPRICE,0)
                                        end)
                                ,0) afavlamt
                        from semast se,
                            (select s1.acctno, sum(s1.qtty-s1.aqtty) receiving
                                from
                                    (select * from stschd where duetype = 'RS' and deltd <> 'Y') s1,
                                    (select * from stschd where duetype = 'SM' and deltd <> 'Y') s2
                                where s1.orgorderid = s2.orgorderid
                                    and s2.trfbuyrate * s2.trfbuyext * (s2.amt-s2.trfexeamt) = 0
                                    and s1.status <> 'C'
                                group by s1.acctno) sts,
/*                            (SELECT SB.CODEID,LNB.ACTYPE,
                                  LEAST(SEC.MRRATIOLOAN,RATE.MRRATIOLOAN, decode(rec_mast.chksysctrl,'Y',l_mriratio,100))*(case when ismarginallow = 'N' and rec_mast.chksysctrl = 'Y' then 0 else 1 end) MRRATE,
                                  LEAST(SEC.MRPRICELOAN,RSK.MRPRICELOAN, decode(rec_mast.chksysctrl,'Y',SB.MARGINREFPRICE,SB.MARGINPRICE)) MRPRICE
                                FROM (select * from lnsebasket
                                          where effdate = (select max(effdate)
                                                          from LNSEBASKET
                                                          where effdate <= (select to_date(varvalue,'DD/MM/RRRR') from sysvar where varname = 'CURRDATE')
                                                                and actype = rec_mast.actype
                                                          group by actype)
                                          and actype = rec_mast.actype) LNB,
                                    SECBASKET SEC, SECURITIES_INFO SB,
                                    SECURITIES_RISK RSK, SECURITIES_RATE RATE
                                WHERE RSK.CODEID=RATE.CODEID AND RATE.FROMPRICE<=SB.FLOORPRICE AND RATE.TOPRICE>SB.FLOORPRICE
                                      AND LNB.BASKETID=SEC.BASKETID AND TRIM(SEC.SYMBOL)=TRIM(SB.SYMBOL)
                                      AND SB.CODEID=RSK.CODEID) rsk,*/
                               (SELECT SB.CODEID,rec_mast.actype ACTYPE,
                                  LEAST(SEC.MRRATIOLOAN, decode(rec_mast.chksysctrl,'Y',l_mriratio,100))*(case when RSK.ismarginallow = 'N' and rec_mast.chksysctrl = 'Y' then 0 else 1 end) MRRATE,
                                  LEAST(SEC.MRPRICELOAN,RSK.MRPRICELOAN, decode(rec_mast.chksysctrl,'Y',SB.MARGINREFPRICE,SB.MARGINPRICE)) MRPRICE
                                FROM AFSERISK SEC, SECURITIES_INFO SB,
                                    SECURITIES_RISK RSK
                                WHERE SB.CODEID=SEC.CODEID AND SEC.CODEID = RSK.CODEID
                                    AND SEC.ACTYPE =  rec_mast.AFTYPE ) rsk, --ACTYPE CUA AFTYPE

                            vw_marginroomsystem room,
                            (select codeid, sum(case when restype = 'M' then prinused else 0 end) prinused,
                                sum(case when restype = 'S' then prinused else 0 end) sys_prinused,
                                sum(case when restype = 'M' and afacctno = rec.ciacctno then prinused else 0 end) prinused_af,
                                sum(case when restype = 'S' and afacctno = rec.ciacctno then prinused else 0 end) sys_prinused_af
                            from vw_afpralloc_all group by codeid) used
                        where se.acctno = sts.acctno(+)
                        and se.codeid = rsk.codeid(+)
                        and se.codeid = room.codeid(+)
                        and se.codeid = used.codeid(+)
                        and se.afacctno = rec.ciacctno
                        group by se.afacctno
                    ) se,
                    (select sts.afacctno, sum(amt+feeacr-feeamt-trft0amt) trfsecuredamt
                         from odmast od, stschd sts
                         where od.orderid = sts.orgorderid and sts.duetype = 'SM' and sts.deltd <> 'Y'
                         and trfbuyrate * trfbuyext * (amt-trfexeamt) > 0
                         and od.afacctno = rec.ciacctno
                         and trfbuydt > v_CURRDATE
                         group by sts.afacctno) sts,
                    (select trfacctno,
                                sum(decode(lnt.chksysctrl,'Y',1,0)*(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd)) margin74amt,
                                sum((prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd)) marginamt
                        from lnmast ln, lntype lnt
                        where trfacctno = rec.ciacctno
                        and ln.ftype = 'AF' --and ln.actype = rec_mast.actype
                        and ln.actype = lnt.actype
                        group by trfacctno) ln
                    where mst.acctno = se.afacctno(+)
                    and mst.acctno = sts.afacctno(+)
                    and mst.acctno = ln.trfacctno(+)
                    and mst.acctno = af.acctno
                    and mst.acctno = rec.ciacctno;
                exception when others then
                    l_MR_Master_Amount:=0;
                end;
            end loop;
            pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '     >> Master Resource Limit:'||to_number(l_MR_Master_Amount));
            l_remain_MRamount:=greatest(least(l_remain_MRamount,to_number(l_MR_Master_Amount)),0);

            pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '        >>> Into rec_ln Loop');
            for rec_ln in
            (
                select * from (
                    select lnt.*, nvl(cf.mnemonic,cf.shortname) cfmnemonic,af.custid cfcustid, odrnum, 'Y' IsSubResource
                        from afmast af, aftype aft, afidtype afid, lntype lnt, cfmast cf
                        where aft.actype = afid.aftype
                            and afid.actype = lnt.actype
                            and af.actype = aft.actype
                            and lnt.custbank = cf.custid(+)
                            and af.acctno = rec.ciacctno
                            and objname = 'LN.LNTYPE' and lnt.status <> 'N'  AND lnt.lnpurpose = 'D'
                    union all
                    select lnt.*, nvl(cf.mnemonic,cf.shortname) cfmnemonic,af.custid cfcustid, 999 odrnum, 'N' IsSubResource
                        from afmast af, aftype aft, lntype lnt, cfmast cf
                        where af.actype = aft.actype
                            and lnt.custbank = cf.custid(+)
                            and af.acctno = rec.ciacctno
                            and aft.lntype = lnt.actype and lnt.status <> 'N' AND lnt.lnpurpose = 'D'
                            )
                order by case when IsSubResource = 'Y' then 0 else 1 end, odrnum
            )
            loop -- rec_ln

                select ln.acctno, ln.rrtype, ln.custbank, ln.ciacctno into l_LNACCTNO, l_rrtype, l_custbank,  l_ciacctno
                from lnmast ln where ln.actype = rec_ln.actype and ln.trfacctno = rec.ciacctno and ln.STATUS NOT IN ('P','R','C') AND ln.FTYPE='AF';

                pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '            >>>> Inside Loop rec_ln.actype:'||rec_ln.actype
                            || '. >> rec_ln.IsSubResource:'||rec_ln.IsSubResource
                            || '. >> l_rrtype:'||l_rrtype);


                if rec_ln.IsSubResource = 'Y' then
                    -- Neu la nguon PHU, xet nguon cho vay tuong ung.
                    l_exec_MRamount:=l_remain_MRamount;

                    if l_rrtype = 'B' then -- Neu nguon cho vay la nguon Ngan Hang: Xet min gioi han cua Toan He Thong va cua tung Khach Hang
                        begin
                            l_avlamt:= cspks_cfproc.fn_getavlcflimit(l_custbank, rec_ln.cfcustid, 'DFMR');
                        exception when others then
                            l_avlamt:= 0;
                        end;

                        pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Bank Limit:'
                            || '. >> l_custbank:'||rec_ln.IsSubResource
                            || '. >> rec_ln.cfcustid:'||rec_ln.cfcustid
                            || '. >> l_avlamt:'||l_avlamt);

                        select nvl(greatest(af.mrcrlimitmax - ci.dfodamt - greatest(nvl(usedprin,0),0),0),0)
                            into l_mrcrlimitmax
                        from afmast af, cimast ci,
                        (select trfacctno, sum(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd) usedprin
                                from lnmast ln
                                where ftype = 'AF' and trfacctno = rec.ciacctno
                                group by ln.trfacctno) lcf
                        where af.acctno = rec.ciacctno and af.acctno = ci.acctno
                            and af.acctno = lcf.trfacctno(+);

                        pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Acc Limit:' || l_mrcrlimitmax);

                        l_exec_MRamount:= least(l_avlamt, l_exec_MRamount, l_mrcrlimitmax);

                        pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Temp Avl 01:' || l_exec_MRamount);

                    elsif l_rrtype = 'O' then -- Neu nguon cho vay la nguon CI: Tam thoi khong check han muc
                        l_exec_MRamount:= l_exec_MRamount;

                        select nvl(greatest( mrcrlimitmax - ci.dfodamt - greatest(nvl(usedprin,0),0),0),0)
                            into l_mrcrlimitmax
                        from afmast af, cimast ci,
                        (select trfacctno, sum(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd) usedprin
                                from lnmast ln
                                where ftype = 'AF'
                                group by ln.trfacctno) lcf
                        where af.acctno = rec.ciacctno and af.acctno = ci.acctno
                        and af.acctno = lcf.trfacctno(+);

                        l_exec_MRamount:= least(l_exec_MRamount, l_mrcrlimitmax);
                        pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Temp Avl 01:' || l_exec_MRamount);

                    elsif l_rrtype = 'C' then -- Neu nguon cho vay la nguon Cong Ty: Kiem tra tren han muc vay cua khach hang MRCRLIMITMAX

                        select nvl(greatest(mrcrlimitmax - ci.dfodamt - greatest(nvl(usedprin,0),0),0),0)
                                into l_mrcrlimitmax
                            from afmast af, cimast ci,
                            (select trfacctno, sum(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd) usedprin
                                    from lnmast ln
                                    where ftype = 'AF'
                                    group by ln.trfacctno) lcf
                            where af.acctno = rec.ciacctno and af.acctno = ci.acctno
                            and af.acctno = lcf.trfacctno(+);
                        pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Acc Limit:' || l_mrcrlimitmax);

                        l_exec_MRamount:=least(l_mrcrlimitmax,l_exec_MRamount);
                        pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Temp Avl 01:' || l_exec_MRamount);

                        -- Neu tuan thu. lay min voi maxdebt
                        pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> rec_ln.chksysctrl:'||rec_ln.chksysctrl);
                        if rec_ln.chksysctrl = 'Y' then
                           select nvl(greatest(least(mrcrlimitmax,to_number(cspks_system.fn_get_sysvar('MARGIN','MAXDEBTCF'))) - ci.dfodamt - greatest(nvl(usedprin,0),0),0),0)
                                into l_mrcrlimitmax
                            from afmast af, cimast ci,
                            (select trfacctno, sum(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd) usedprin
                                    from lnmast ln, lntype lnt
                                    where ln.actype = lnt.actype and ln.rrtype = 'C' and lnt.chksysctrl = 'Y'
                                    group by ln.trfacctno) lcf
                            where af.acctno = rec.ciacctno and af.acctno = ci.acctno
                            and af.acctno = lcf.trfacctno(+);
                            l_exec_MRamount:=least(l_mrcrlimitmax,l_exec_MRamount);
                            pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                    >>>>> Temp Avl 01:' || l_exec_MRamount);

                            -- Neu khach hang ko duoc phep Margin. --> Han muc = 0.
                            if rec.MARGINALLOW <> 'Y' then
                                l_exec_MRamount:= 0;
                            end if;
                            select greatest(nvl(sum(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd),0),0) into l_maxdebt
                            from lnmast ln, lntype lnt where ln.actype = lnt.actype and ftype = 'AF' and lnt.rrtype = 'C' and chksysctrl = 'Y';

                            select greatest(to_number(varvalue) - l_maxdebt,0) into l_mrcrlimitmax from sysvar where varname = 'MAXDEBT';

                            select greatest(least(l_mrcrlimitmax, prlimit - prinused),0) into l_mrcrlimitmax from prmaster where prcode = '9999' and prtyp = 'P';

                            l_exec_MRamount:= least(l_mrcrlimitmax, l_exec_MRamount);
                            pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                    >>>>> Temp Avl 02' || l_exec_MRamount);
                        end if;

                        l_exec_MRamount:= least(l_mrcrlimitmax, l_exec_MRamount);
                        pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Temp Avl 03'||l_exec_MRamount);
                    end if;

                    select 100 - mriratio into l_mriratio from afmast where acctno = rec.ciacctno;
                    -- Lay min voi Room: Neu Tuan Thu --> check tren min (ROOM MARGIN, ROOM SYSTEM); Neu Khong Tuan Thu --> check tren ROOM SYSTEM.
                    -- Xet nguon tren ro vay toi da.
                    pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Cal Availble Value');
                    begin
                        select greatest(least(af.mrcrlimitmax - mst.dfodamt,nvl(afavlamt,0)) - greatest(decode(rec_ln.chksysctrl,'Y',nvl(ln.margin74amt,0),nvl(ln.marginamt,0)),0)
                                    - nvl(sts.trfsecuredamt,0),0)
                            into l_afavlamt
                        from cimast mst, afmast af,
                            (select  se.afacctno, nvl(sum(case when rec_ln.chksysctrl = 'Y' then
                                            (case when se.roomchk ='Y' then (least(se.trade + nvl(sts.receiving,0) - nvl(used.prinused_af,0),
                                                            greatest(nvl(room.roomlimit,0) - nvl(prinused,0),0))
                                                    + nvl(used.prinused_af,0))
                                                  else se.trade + nvl(sts.receiving,0)
                                             end)
                                                 * nvl(rsk.MRRATE,0)/100 * nvl(rsk.MRPRICE,0)
                                            else
                                            (case when se.roomchk ='Y' then (least(se.trade + nvl(sts.receiving,0) - nvl(used.sys_prinused_af,0),
                                                        greatest(nvl(room.syroomlimit,0) - nvl(room.syroomused,0) - nvl(used.sys_prinused,0),0))
                                                + nvl(used.sys_prinused_af,0))
                                                else
                                                se.trade + nvl(sts.receiving,0)
                                            end)
                                                 * nvl(rsk.MRRATE,0)/100 * nvl(rsk.MRPRICE,0)
                                            end)
                                    ,0) afavlamt
                            from semast se,
                                (select s1.acctno, sum(s1.qtty-s1.aqtty) receiving
                                    from
                                        (select * from stschd where duetype = 'RS' and deltd <> 'Y') s1,
                                        (select * from stschd where duetype = 'SM' and deltd <> 'Y') s2
                                    where s1.orgorderid = s2.orgorderid
                                        and s2.trfbuyrate * s2.trfbuyext * (s2.amt-s2.trfexeamt) = 0
                                        and s1.status <> 'C'
                                    group by s1.acctno) sts,
                                (SELECT SB.CODEID,LNB.ACTYPE,
                                      LEAST(SEC.MRRATIOLOAN,RATE.MRRATIOLOAN, decode(rec_ln.chksysctrl,'Y',l_mriratio,100))*(case when ismarginallow = 'N' and rec_ln.chksysctrl = 'Y' then 0 else 1 end) MRRATE,
                                      LEAST(SEC.MRPRICELOAN,RSK.MRPRICELOAN, decode(rec_ln.chksysctrl,'Y',SB.MARGINREFPRICE,SB.MARGINPRICE)) MRPRICE
                                    FROM (select * from lnsebasket
                                              where effdate = (select max(effdate)
                                                              from LNSEBASKET
                                                              where effdate <= (select to_date(varvalue,'DD/MM/RRRR') from sysvar where varname = 'CURRDATE')
                                                                    and actype = rec_ln.actype
                                                              group by actype)
                                              and actype = rec_ln.actype) LNB,
                                        SECBASKET SEC, SECURITIES_INFO SB,
                                        SECURITIES_RISK RSK, SECURITIES_RATE RATE
                                    WHERE RSK.CODEID=RATE.CODEID AND RATE.FROMPRICE<=SB.FLOORPRICE AND RATE.TOPRICE>SB.FLOORPRICE
                                          AND LNB.BASKETID=SEC.BASKETID AND TRIM(SEC.SYMBOL)=TRIM(SB.SYMBOL)
                                          AND SB.CODEID=RSK.CODEID) rsk,
                                vw_marginroomsystem room,
                                (select codeid, sum(case when restype = 'M' then prinused else 0 end) prinused,
                                    sum(case when restype = 'S' then prinused else 0 end) sys_prinused,
                                    sum(case when restype = 'M' and afacctno = rec.ciacctno then prinused else 0 end) prinused_af,
                                    sum(case when restype = 'S' and afacctno = rec.ciacctno then prinused else 0 end) sys_prinused_af
                                from vw_afpralloc_all group by codeid) used
                            where se.acctno = sts.acctno(+)
                            and se.codeid = rsk.codeid(+)
                            and se.codeid = room.codeid(+)
                            and se.codeid = used.codeid(+)
                            and se.afacctno = rec.ciacctno
                            group by se.afacctno
                        ) se,
                        (select sts.afacctno, sum(amt+feeacr-feeamt-trft0amt) trfsecuredamt
                             from odmast od, stschd sts
                             where od.orderid = sts.orgorderid and sts.duetype = 'SM' and sts.deltd <> 'Y'
                             and trfbuyrate * trfbuyext * (amt-trfexeamt) > 0
                             and od.afacctno = rec.ciacctno
                             and trfbuydt > v_CURRDATE
                             group by sts.afacctno) sts,
                        (select trfacctno,
                                    sum(decode(lnt.chksysctrl,'Y',1,0)*(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd)) margin74amt,
                                    sum(decode( ln.actype ,  rec_ln.actype,1,0) * (prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd) ) marginamt
                            from lnmast ln, lntype lnt
                            where trfacctno = rec.ciacctno
                            and ln.ftype = 'AF' --and ln.actype = rec_ln.actype
                            and ln.actype = lnt.actype
                            group by trfacctno) ln
                        where mst.acctno = se.afacctno(+)
                        and mst.acctno = sts.afacctno(+)
                        and mst.acctno = ln.trfacctno(+)
                        and mst.acctno = af.acctno
                        and mst.acctno = rec.ciacctno;
                    exception when others then
                        l_afavlamt:=0;
                    end;
                    pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Availble Value: '||l_afavlamt);


                    -- Lay min voi Room: Neu Tuan Thu --> check tren min (ROOM MARGIN, ROOM SYSTEM); Neu Khong Tuan Thu --> check tren ROOM SYSTEM.

                    l_exec_MRamount:= least(greatest(l_afavlamt,0), l_exec_MRamount);
                    pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Availble Value: '||l_exec_MRamount);

                else
                    -- Neu la nguon CHINH, nhan toan bo mon no.
                    l_exec_MRamount:=l_remain_MRamount;

                    select nvl(greatest(af.mrcrlimitmax - ci.dfodamt - greatest(nvl(usedprin,0),0),0),0)
                            into l_mrcrlimitmax
                        from afmast af, cimast ci,
                        (select trfacctno, sum(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd) usedprin
                                from lnmast ln
                                where ftype = 'AF'
                                group by ln.trfacctno) lcf
                        where af.acctno = rec.ciacctno and af.acctno = ci.acctno
                        and af.acctno = lcf.trfacctno(+);

                    l_exec_MRamount:=least(l_mrcrlimitmax,l_exec_MRamount);
                    pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Acc Limit:' || l_mrcrlimitmax
                            || ' . >> Temp Value:' || l_exec_MRamount);

                    -- Neu tuan thu. lay min voi maxdebt
                    pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> rec_ln.chksysctrl:' || rec_ln.chksysctrl );
                    if rec_ln.chksysctrl = 'Y' then
                       select nvl(greatest(least(mrcrlimitmax,to_number(cspks_system.fn_get_sysvar('MARGIN','MAXDEBTCF'))) - ci.dfodamt - greatest(nvl(usedprin,0),0),0),0)
                            into l_mrcrlimitmax
                        from afmast af, cimast ci,
                        (select trfacctno, sum(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd) usedprin
                                from lnmast ln, lntype lnt
                                where ln.actype = lnt.actype and ln.rrtype = 'C' and lnt.chksysctrl = 'Y'
                                group by ln.trfacctno) lcf
                        where af.acctno = rec.ciacctno and af.acctno = ci.acctno
                        and af.acctno = lcf.trfacctno(+);
                        l_exec_MRamount:=least(l_mrcrlimitmax,l_exec_MRamount);
                        pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Acc Limit:' || l_mrcrlimitmax
                                    || ' . >> Temp Value:' || l_exec_MRamount);

                        -- Neu khach hang ko duoc phep Margin. --> Han muc = 0.
                        if rec.MARGINALLOW <> 'Y' then
                            l_exec_MRamount:= 0;
                        end if;
                        select greatest(nvl(sum(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd),0),0) into l_maxdebt
                        from lnmast ln, lntype lnt where ln.actype = lnt.actype and ftype = 'AF' and lnt.rrtype = 'C' and chksysctrl = 'Y';

                        select greatest(to_number(varvalue) - l_maxdebt,0) into l_mrcrlimitmax from sysvar where varname = 'MAXDEBT';

                        select greatest(least(l_mrcrlimitmax, prlimit - prinused),0) into l_mrcrlimitmax from prmaster where prcode = '9999' and prtyp = 'P';

                        l_exec_MRamount:= least(l_mrcrlimitmax, l_exec_MRamount);
                        pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Acc Limit:' || l_mrcrlimitmax
                                    || ' . >> Temp Value:' || l_exec_MRamount);
                    end if;

                    select 100 - mriratio into l_mriratio from afmast where acctno = rec.ciacctno;
                    pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Cal Availble Value');
                    -- Lay min voi Room: Neu Tuan Thu --> check tren min (ROOM MARGIN, ROOM SYSTEM); Neu Khong Tuan Thu --> check tren ROOM SYSTEM.
                    -- Xet nguon tren ro vay toi da.
                    begin
                        select greatest(least(af.mrcrlimitmax - mst.dfodamt,nvl(afavlamt,0)) - greatest(decode(rec_ln.chksysctrl,'Y',nvl(ln.margin74amt,0),nvl(ln.marginamt,0)),0)
                                    - nvl(sts.trfsecuredamt,0),0)
                            into l_afavlamt
                        from cimast mst, afmast af,
                            (select  se.afacctno, nvl(sum(case when rec_ln.chksysctrl = 'Y' then
                                            (case when se.roomchk ='Y' then (least(se.trade + nvl(sts.receiving,0) - nvl(used.prinused_af,0),
                                                        greatest(nvl(room.roomlimit,0) - nvl(prinused,0),0))
                                                + nvl(used.prinused_af,0))
                                                else
                                                se.trade + nvl(sts.receiving,0)
                                            end)
                                                 * nvl(rsk.MRRATE,0)/100 * nvl(rsk.MRPRICE,0)
                                            else
                                                (case when se.roomchk ='Y' then (least(se.trade + nvl(sts.receiving,0) - nvl(used.sys_prinused_af,0),
                                                            greatest(nvl(room.syroomlimit,0) - nvl(room.syroomused,0) - nvl(used.sys_prinused,0),0))
                                                    + nvl(used.sys_prinused_af,0))
                                                    else
                                                    se.trade + nvl(sts.receiving,0)
                                                end)
                                                 * nvl(rsk.MRRATE,0)/100 * nvl(rsk.MRPRICE,0)
                                            end)
                                    ,0) afavlamt
                            from semast se,
                                (select s1.acctno, sum(s1.qtty-s1.aqtty) receiving
                                    from
                                        (select * from stschd where duetype = 'RS' and deltd <> 'Y') s1,
                                        (select * from stschd where duetype = 'SM' and deltd <> 'Y') s2
                                    where s1.orgorderid = s2.orgorderid
                                        and s2.trfbuyrate * s2.trfbuyext * (s2.amt-s2.trfexeamt) = 0
                                        and s1.status <> 'C'
                                    group by s1.acctno) sts,
                                (SELECT SB.CODEID,LNB.ACTYPE,
                                      LEAST(SEC.MRRATIOLOAN,RATE.MRRATIOLOAN, decode(rec_ln.chksysctrl,'Y',l_mriratio,100))*(case when ismarginallow = 'N' and rec_ln.chksysctrl = 'Y' then 0 else 1 end) MRRATE,
                                      LEAST(SEC.MRPRICELOAN,RSK.MRPRICELOAN, decode(rec_ln.chksysctrl,'Y',SB.MARGINREFPRICE,SB.MARGINPRICE)) MRPRICE
                                    FROM (select * from lnsebasket
                                              where effdate = (select max(effdate)
                                                              from LNSEBASKET
                                                              where effdate <= (select to_date(varvalue,'DD/MM/RRRR') from sysvar where varname = 'CURRDATE')
                                                                    and actype = rec_ln.actype
                                                              group by actype)
                                              and actype = rec_ln.actype) LNB,
                                        SECBASKET SEC, SECURITIES_INFO SB,
                                        SECURITIES_RISK RSK, SECURITIES_RATE RATE
                                    WHERE RSK.CODEID=RATE.CODEID AND RATE.FROMPRICE<=SB.FLOORPRICE AND RATE.TOPRICE>SB.FLOORPRICE
                                          AND LNB.BASKETID=SEC.BASKETID AND TRIM(SEC.SYMBOL)=TRIM(SB.SYMBOL)
                                          AND SB.CODEID=RSK.CODEID) rsk,
                                vw_marginroomsystem room,
                                (select codeid, sum(case when restype = 'M' then prinused else 0 end) prinused,
                                    sum(case when restype = 'S' then prinused else 0 end) sys_prinused,
                                    sum(case when restype = 'M' and afacctno = rec.ciacctno then prinused else 0 end) prinused_af,
                                    sum(case when restype = 'S' and afacctno = rec.ciacctno then prinused else 0 end) sys_prinused_af
                                from vw_afpralloc_all group by codeid) used
                            where se.acctno = sts.acctno(+)
                            and se.codeid = rsk.codeid(+)
                            and se.codeid = room.codeid(+)
                            and se.codeid = used.codeid(+)
                            and se.afacctno = rec.ciacctno
                            group by se.afacctno
                        ) se,
                        (select sts.afacctno, sum(amt+feeacr-feeamt-trft0amt) trfsecuredamt
                             from odmast od, stschd sts
                             where od.orderid = sts.orgorderid and sts.duetype = 'SM' and sts.deltd <> 'Y'
                             and trfbuyrate * trfbuyext * (amt-trfexeamt) > 0
                             and od.afacctno = rec.ciacctno
                             and trfbuydt > v_CURRDATE
                             group by sts.afacctno) sts,
                        (select trfacctno,
                                    sum(decode(lnt.chksysctrl,'Y',1,0)*(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd)) margin74amt,
                                    sum(decode( ln.actype ,  rec_ln.actype,1,0) * (prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd) ) marginamt
                            from lnmast ln, lntype lnt
                            where trfacctno = rec.ciacctno
                            and ln.ftype = 'AF'-- and ln.actype = rec_ln.actype
                            and ln.actype = lnt.actype
                            group by trfacctno) ln
                        where mst.acctno = se.afacctno(+)
                        and mst.acctno = sts.afacctno(+)
                        and mst.acctno = ln.trfacctno(+)
                        and mst.acctno = af.acctno
                        and mst.acctno = rec.ciacctno;
                    exception when others then
                        l_afavlamt:=0;
                    end;
                    pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Availble Value: '||l_afavlamt);

                    -- Lay min voi Room: Neu Tuan Thu --> check tren min (ROOM MARGIN, ROOM SYSTEM); Neu Khong Tuan Thu --> check tren ROOM SYSTEM.

                    l_exec_MRamount:= least(greatest(l_afavlamt,0), l_exec_MRamount, l_mrcrlimitmax);
                    pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Availble Value: '||l_exec_MRamount);
                end if;

                l_exec_MRamount:= greatest(round(l_exec_MRamount,0),0);
                pr_eventslog(l_LOGDATE || ' >> pr_LNAutoDrawndown_Margin', 0, '                >>>>> Exec Value: '||l_exec_MRamount);

                if l_exec_MRamount > 0 then
                    SELECT systemnums.C_BATCH_PREFIXED
                                     || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                              INTO l_txmsg.txnum
                              FROM DUAL;
                    l_txmsg.brid        := substr(rec.CIACCTNO,1,4);

                    select 'Giai ngan '||decode(rec_ln.rrtype,'C',UTF8NUMS.c_const_COMPANY_NAME,'B',nvl(rec_ln.cfmnemonic,''),'')||'/CL/'|| to_char(v_CURRDATE,'DD.MM.RRRR') ||'/' || to_char(l_exec_MRamount) || ' VND'
                        into v_strDESC
                        from dual;
                    --Set cac field giao dich
                    --03   C   ACCTNO
                    l_txmsg.txfields ('03').defname   := 'ACCTNO';
                    l_txmsg.txfields ('03').TYPE      := 'C';
                    l_txmsg.txfields ('03').VALUE     := l_LNACCTNO;

                    --05   C   ACCTNO
                    l_txmsg.txfields ('05').defname   := 'ACCTNO';
                    l_txmsg.txfields ('05').TYPE      := 'C';
                    l_txmsg.txfields ('05').VALUE     := rec.CIACCTNO;

                    --10   N   MRODAMT
                    l_txmsg.txfields ('10').defname   := 'MRODAMT';
                    l_txmsg.txfields ('10').TYPE      := 'N';
                    l_txmsg.txfields ('10').VALUE     := l_exec_MRamount;
                    --11   N   T0ODAMT
                    l_txmsg.txfields ('11').defname   := 'T0ODAMT';
                    l_txmsg.txfields ('11').TYPE      := 'N';
                    l_txmsg.txfields ('11').VALUE     := 0;
                    --20    N   FINANCETYPE
                    l_txmsg.txfields ('20').defname   := 'FINANCETYPE';
                    l_txmsg.txfields ('20').TYPE      := 'N';
                    l_txmsg.txfields ('20').VALUE     := REC.FINANCETYPE;
                    --30   C   DESC
                    l_txmsg.txfields ('30').defname   := 'DESC';
                    l_txmsg.txfields ('30').TYPE      := 'C';
                    l_txmsg.txfields ('30').VALUE :=v_strDESC;

                    --35   C   REFOPNAUTOID
                    l_txmsg.txfields ('35').defname   := 'REFOPNAUTOID';
                    l_txmsg.txfields ('35').TYPE      := 'C';
                    l_txmsg.txfields ('35').VALUE     := '0';

                    --90   N   ISCIDRAWNDOWN
                    l_txmsg.txfields ('90').defname   := 'ISCIDRAWNDOWN';
                    l_txmsg.txfields ('90').TYPE      := 'N';
                    l_txmsg.txfields ('90').VALUE     := case when l_rrtype = 'O' then 1 else 0 end;
                    --91   N   CIACCTNO
                    l_txmsg.txfields ('91').defname   := 'CIACCTNO';
                    l_txmsg.txfields ('91').TYPE      := 'N';
                    l_txmsg.txfields ('91').VALUE     := case when l_rrtype = 'O' then l_ciacctno else '' end;

                    BEGIN
                        IF txpks_#5566.fn_batchtxprocess (l_txmsg,
                                                         p_err_code,
                                                         l_err_param
                           ) <> systemnums.c_success
                        THEN
                           plog.error (pkgctx,
                                       'got error 5566: ' || p_err_code
                           );
                           ROLLBACK;
                           RETURN;
                        END IF;
                    END;
                    l_remain_MRamount:=l_remain_MRamount-l_exec_MRamount;
                end if;
                exit when l_remain_MRamount <=0;
            end loop; -- rec_ln

        end if;

    end loop;

    -- Xuat log Report Giai Ngan.
    if not fn_gen_cl_drawndown_report('CL') then
        p_err_code:=1;
        return;
    end if;

    --chaunh log tiep vao mr_4000
    /*
    for mr in
    (
    select mr.afacctno
        --, ci.balance
        , nvl(tran.buyamt_inday,0) securamt_inday
        , nvl(avl.avladvance,0) +  nvl(tran.UTTB,0)  avladvance
        , nvl(tl.msgamt,0) stgn_inday
        , nvl(tran.UTTB,0) UTTB
        , nvl(tran.phi_UTTB,0) phi_UTTB
        , mr.totaldrawndownamt
        , least(GREATEST(mr.balance,0),nvl(ln.denhan_quahan,0),GREATEST(nvl(ln.denhan_quahan,0) - greatest(mr.balance,0),0) ) denhan_quahan
        , greatest(nvl(ln.tronghan_Y,0) - nvl(ln.denhan_quahan,0),0  ) tronghan_Y
        , greatest(least(nvl(tran.UTTB,0)
                        - least(nvl(tran.buyamt_inday,0) - nvl(tl.msgamt,0),least(mr.totaldrawndownamt, nvl(avl.avladvance,0) +  nvl(tran.UTTB,0)))
                        - least(GREATEST(mr.balance,0),nvl(ln.denhan_quahan,0),GREATEST(nvl(ln.denhan_quahan,0) - greatest(mr.balance,0),0) )
                        - greatest(nvl(ln.tronghan_Y,0) -GREATEST(mr.balance - least(GREATEST(mr.balance,0),nvl(ln.denhan_quahan,0),GREATEST(nvl(ln.denhan_quahan,0) - greatest(mr.balance,0),0) )),0  )
                , nvl(ln.tronghan_N,0)
                    ),0)  tronghan_N
    from   log_mr4000 mr,
      ( select afacctno, nvl(sum(depoamt),0) AVLADVANCE
       from v_getaccountavladvance
       group by afacctno ) avl
       ,
       (select msgacct, sum(msgamt) msgamt from tllog tl where tl.tltxcd = '5566' and deltd <> 'Y' group by msgacct
       ) tl
        ,
        (select acctno, sum(case when txcd = '0033' and tltxcd = '1153' then namt else 0 end) UTTB
                    , sum(case when txcd = '0011' and tltxcd = '1153' then namt else 0 end) phi_UTTB
                    , sum(case when txcd = '0011' and tltxcd in ('8855','8865') then namt else 0 end) buyamt_inday
            from citran where txcd in ('0033','0011') and tltxcd in ('1153','8855','8865') and deltd <> 'Y'  group by acctno
        ) tran,
        (select ln.trfacctno,
            sum(case when ls.overduedate <= getcurrdate then log.PAID + log.INTPAID + log.FEEPAID + log.FEEINTPAID else 0 end)  denhan_quahan,
            sum(case when ls.overduedate > getcurrdate and ln.advpay = 'Y' then log.PAID + log.INTPAID + log.FEEPAID + log.FEEINTPAID else 0 end) tronghan_Y,
            sum(case when ls.overduedate > getcurrdate and ln.advpay = 'N' then log.PAID + log.INTPAID + log.FEEPAID + log.FEEINTPAID else 0 end) tronghan_N
        from lnschdlog log, lnschd ls, lnmast ln where log.autoid = ls.autoid and ln.acctno = ls.acctno
        group by ln.trfacctno
        ) ln

        where  mr.afacctno = avl.afacctno (+) and mr.afacctno = tl.msgacct(+) and mr.afacctno = tran.acctno (+)
         and mr.txdate = v_CURRDATE and mr.afacctno = ln.trfacctno(+) --and mr.afacctno  = '0001002090'
    )
    loop
        update log_mr4000
        set --BALANCE = mr.balance  --tien mat
        --,
         BAMT = mr.securamt_inday --tien mua
        , RECEIVING = mr.avladvance -- tien ban
        ,TOTALDRAWNDOWNAMT = mr.totaldrawndownamt --so tien co the giai ngan MR trong ngay
        ,MRODAMT = mr.stgn_inday --so tien da giai ngan trong ngay
        ,advamt = mr.UTTB -- so tien da uttb trong ngay
        ,retadvamt = least(mr.securamt_inday - mr.stgn_inday,least(mr.totaldrawndownamt, mr.avladvance)) --so tien hoan ung
        ,FEEADVAMT = mr.phi_UTTB --phi uttb trong ngay
        ,feeretadvamt = mr.phi_UTTB * least(mr.securamt_inday - mr.stgn_inday,least(mr.totaldrawndownamt, mr.avladvance)) / decode(mr.UTTB,0,9999999999999999,mr.UTTB) -- so phi phai hoan ung
        ,noquahan = mr.denhan_quahan
        ,daonotronghan = mr.tronghan_Y
        ,notronghan = mr.tronghan_N
        where afacctno = mr.afacctno and txdate = v_CURRDATE
        ;
    end loop;
    --tinh phi dao no
    cspks_logproc.pr_calculate_feeadvamt;

    --end chaunh*/


    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_LNAutoDrawndown_Margin');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, 'rows:' || dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_LNAutoDrawndown_Margin');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_LNAutoDrawndown_Margin;




  PROCEDURE pr_LNAutoDrawndown_T0(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg               tx.msg_rectype;
      v_CURRDATE date;
      l_LOGDATE varchar2(10);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_dblMRODAMT  number(20,0);
      l_err_param varchar2(300);
      l_CUSTODYCD_PREFIX varchar2(3);
      l_LNACCTNO varchar2(30);
      l_remain_MRamount number(20,4);
      l_exec_MRamount number(20,4);
      l_rrtype varchar2(1);
      l_custbank varchar2(30);
      l_ciacctno varchar2(30);
      l_avlamt number(24,4);
      l_mrcrlimitmax number(24,4);
      l_afavlamt number(24,4);
      l_afusedamt number(24,4);
      l_chksysctrl varchar2(1);
      l_mriratio number(10,4);
      l_maxdebt number(20,0);
      l_count number;
      l_T0ODAMT number(20,0);
      l_MarginType varchar2(1);
      l_MR_Master_Amount number(20,4);
      v_strSQL           VARCHAR2(1000);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_LNAutoDrawndown_T0');
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='5566';
     SELECT TO_DATE (varvalue, systemnums.c_date_format), varvalue
               INTO v_CURRDATE, l_LOGDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=v_CURRDATE;
    l_txmsg.busdate:=v_CURRDATE;
    l_txmsg.tltxcd:='5566';

    select varvalue into l_CUSTODYCD_PREFIX from sysvar where grname ='SYSTEM' and varname ='COMPANYCD';
      /*
    -- Giai ngan T0: (T2+T0)
    */
    txpks_batch.pr_T0OverdraftCalculate(p_err_code);
    if p_err_code <> systemnums.c_Success then
        RETURN;
    end if;
    plog.debug(pkgctx, 'Begin loop T0');
    for rec in
    (
        SELECT CI.ACCTNO CIACCTNO, CI.BALANCE, CI.T0ODAMT, aft.lntype, aft.t0lntype, 1 FINANCETYPE
               FROM CIMAST CI, CFMAST CF, AFMAST AF, AFTYPE AFT
               WHERE cf.custid = af.custid and af.actype = aft.actype and af.acctno = ci.afacctno and CI.STATUS='A'
               and cf.custatcom='Y' and CI.T0ODAMT  > 0
               ORDER BY ci.acctno
    )
    loop -- rec

        select t0odamt  into l_T0ODAMT from cimast where acctno = rec.ciacctno;
        --1. T0 Drawndown
        l_LNACCTNO:='';
        If round(l_T0ODAMT,0) > 0 Then
            select ln.acctno, ln.rrtype, ln.custbank, ln.ciacctno into l_LNACCTNO, l_rrtype, l_custbank,  l_ciacctno
            from lnmast ln where ln.actype = rec.t0lntype and ln.trfacctno = rec.ciacctno and ln.STATUS NOT IN ('P','R','C') AND ln.FTYPE='AF';

            SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
            l_txmsg.brid        := substr(rec.CIACCTNO,1,4);

            v_strDESC:= 'Giai ngan ' || UTF8NUMS.c_const_COMPANY_NAME || '/CL/'||to_char(v_CURRDATE,'DD.MM.RRRR')||'/' || to_char(l_T0ODAMT) || ' VND';

            --Set cac field giao dich
            --03   C   ACCTNO
            l_txmsg.txfields ('03').defname   := 'ACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := l_LNACCTNO;

            --05   C   ACCTNO
            l_txmsg.txfields ('05').defname   := 'ACCTNO';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.CIACCTNO;

            --10   N   MRODAMT
            l_txmsg.txfields ('10').defname   := 'MRODAMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := 0;
            --11   N   T0ODAMT
            l_txmsg.txfields ('11').defname   := 'T0ODAMT';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := round(l_T0ODAMT,0);
            --20    N   FINANCETYPE
            l_txmsg.txfields ('20').defname   := 'FINANCETYPE';
            l_txmsg.txfields ('20').TYPE      := 'N';
            l_txmsg.txfields ('20').VALUE     := REC.FINANCETYPE;
            --30   C   DESC
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := v_strDESC;

            --35   C   REFOPNAUTOID
            l_txmsg.txfields ('35').defname   := 'REFOPNAUTOID';
            l_txmsg.txfields ('35').TYPE      := 'C';
            l_txmsg.txfields ('35').VALUE     := '0';

            --90   N   ISCIDRAWNDOWN
            l_txmsg.txfields ('90').defname   := 'ISCIDRAWNDOWN';
            l_txmsg.txfields ('90').TYPE      := 'N';
            l_txmsg.txfields ('90').VALUE     := case when l_rrtype = 'O' then 1 else 0 end;
            --91   N   CIACCTNO
            l_txmsg.txfields ('91').defname   := 'CIACCTNO';
            l_txmsg.txfields ('91').TYPE      := 'N';
            l_txmsg.txfields ('91').VALUE     := case when l_rrtype = 'O' then l_ciacctno else '' end;

            BEGIN
                IF txpks_#5566.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 5566: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
        end if;

    end loop; -- rec



 -- update cimast set odamt
    --Reset CIMAST.ODAMT = 0;
--Begin MSBS-2589
    UPDATE CIMAST SET ODAMT = 0 WHERE odamt <> 0;
    /*for rec_af in
    (
        select trfacctno, sum(PRINNML + PRINOVD + INTNMLACR + INTOVDACR + INTNMLOVD + INTDUE + INTPREPAID + INTNMLPBL +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTNMLACR + FEEINTOVDACR + FEEINTNMLOVD + FEEINTDUE + FEEINTPREPAID) ODAMT
               from lnmast
               where ftype = 'AF'
               group by trfacctno
               order by trfacctno
    )
    loop -- rec_af
        UPDATE CIMAST SET ODAMT = rec_af.ODAMT
        WHERE ACCTNO = rec_af.TRFACCTNO;
    end loop;*/ -- rec_af

    MERGE INTO cimast ci
    USING (select trfacctno, sum(PRINNML + PRINOVD + INTNMLACR + INTOVDACR + INTNMLOVD + INTDUE + INTPREPAID + INTNMLPBL +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTNMLACR + FEEINTOVDACR + FEEINTNMLOVD + FEEINTDUE + FEEINTPREPAID) ODAMT
               from lnmast
               where ftype = 'AF'
               group by trfacctno
               order by trfacctno) ln
    ON (ln.trfacctno = ci.acctno)
    WHEN MATCHED THEN
      UPDATE SET odamt = ln.odamt;

    UPDATE CIMAST SET DUEAMT = 0 WHERE dueamt <> 0;
    /*FOR REC IN
    (
        select m.trfacctno, sum(nml + INTDUE + FEEINTDUE) nml
        from
        (SELECT ACCTNO, SUM(NML) NML
            FROM LNSCHD
            WHERE OVERDUEDATE = TO_DATE(cspks_system.fn_get_sysvar('SYSTEM','CURRDATE'),'DD/MM/YYYY') AND nml + INTDUE + FEEINTDUE > 0 AND REFTYPE IN ('P') group by acctno) S,
            LNMAST M
        where S.ACCTNO = M.ACCTNO AND M.STATUS NOT IN ('P','R','C') and M.FTYPE<>'DF'
        GROUP BY M.TRFACCTNO
        order by trfacctno
    )
    LOOP
        UPDATE CIMAST SET DUEAMT = round(DUEAMT + REC.NML,0) WHERE ACCTNO = REC.TRFACCTNO;
    END LOOP;*/

    MERGE INTO cimast ci
    USING (select m.trfacctno, sum(nml + INTDUE + FEEINTDUE) nml
        from
        (SELECT ACCTNO, SUM(NML) NML
            FROM LNSCHD
            WHERE OVERDUEDATE = TO_DATE(cspks_system.fn_get_sysvar('SYSTEM','CURRDATE'),'DD/MM/YYYY') AND nml + INTDUE + FEEINTDUE > 0 AND REFTYPE IN ('P') group by acctno) S,
            LNMAST M
        where S.ACCTNO = M.ACCTNO AND M.STATUS NOT IN ('P','R','C') and M.FTYPE<>'DF'
        GROUP BY M.TRFACCTNO
        order by trfacctno) ln
    ON (ln.trfacctno = ci.acctno)
    WHEN MATCHED THEN
      UPDATE SET DUEAMT = round(DUEAMT + ln.NML,0);

    -- update cimast set ovamt
    --Reset CIMAST.OVAMT = 0;
    UPDATE CIMAST SET OVAMT = 0 WHERE ovamt <> 0;
    /*for rec_af in
    (
        select trfacctno, sum(PRINOVD + INTOVDACR + INTNMLOVD + INTPREPAID + INTNMLPBL +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTOVDACR + FEEINTNMLOVD + FEEINTPREPAID) OVAMT
        from lnmast
        where ftype = 'AF'
        group by trfacctno
        order by trfacctno
    )
    loop -- rec_af
        UPDATE CIMAST SET OVAMT = rec_af.OVAMT
        WHERE ACCTNO = rec_af.TRFACCTNO;
    end loop;*/ -- rec_af

    MERGE INTO cimast ci
    USING (select trfacctno, sum(PRINOVD + INTOVDACR + INTNMLOVD + INTPREPAID + INTNMLPBL +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTOVDACR + FEEINTNMLOVD + FEEINTPREPAID) OVAMT
        from lnmast
        where ftype = 'AF'
        group by trfacctno
        order by trfacctno) ln
    ON (ln.trfacctno = ci.acctno)
    WHEN MATCHED THEN
      UPDATE SET OVAMT = ln.OVAMT;

    -- Xuat log Report Giai Ngan.
    if not fn_gen_cl_drawndown_report('T0') then
        p_err_code:=1;
        return;
    end if;

     for rec in
    (
        select rpt.*,sec.marginratio secmarginratio
        from rlsrptlog_eod rpt, v_getsecmarginratio sec
        where rlsdate = v_CURRDATE
        and rpt.afacctno = sec.afacctno
    )
    loop
        update rlsrptlog_eod
        set marginratio = rec.secmarginratio
        where afacctno = rec.afacctno
            and rlsdate = v_CURRDATE;
    end loop;

        -- Cap nhat gia tinh tai san sau giai ngan.
    update securities_info
         set dfrefprice         = fn_get_refprice_nextdate(codeid, AVGPRICE, 2),
             margincallprice    = fn_get_refprice_nextdate(codeid, AVGPRICE, 2),
             marginrefcallprice = fn_get_refprice_nextdate(codeid, AVGPRICE, 2);


    -- HaiLT backup
    INSERT INTO ODMAPEXTHIST SELECT * FROM ODMAPEXT ;
    v_strSQL := ' truncate table ODMAPEXT ' ; --MSBS-2589
    execute immediate v_strSQL;

    --GianhVG Log Report MR3008
    cspks_logproc.pr_log_mr3008('AF-MID');

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_LNAutoDrawndown_T0');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, 'rows:' || dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_LNAutoDrawndown_T0');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_LNAutoDrawndown_T0;




----- END ofHaiLT tach pr_LNAutoDrawndown thanh 2 proc: Phat vay bao lanh va Phat vay Margin


---------------------------------pr_LNMovePrinToOverdue------------------------------------------------
  PROCEDURE pr_LNMovePrinToOverdue(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      l_err_param varchar2(300);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_LNMovePrinToOverdue');
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='5564';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='5564';
    plog.debug(pkgctx, 'Begin loop');
     for rec in
    (
        SELECT ROWNUM INDEXROW, LNMAST.ACCTNO, LNMAST.TRFACCTNO,
                SCHD.AUTOID, SCHD.DUESTS, SCHD.NML, SCHD.REFTYPE,
                (CASE WHEN LNMAST.FTYPE='AF' THEN 1 ELSE 0 END ) FINANCETYPE,
                (CASE WHEN SCHD.OVERDUEDATE>SCHD.RLSDATE THEN 1 ELSE 0 END) ISFROMINDUE
               FROM LNMAST, LNSCHD SCHD
               WHERE LNMAST.ACCTNO = SCHD.ACCTNO AND LNMAST.STATUS NOT IN ('P','R','C') AND SCHD.NML>0
               AND SCHD.OVERDUEDATE <= TO_DATE(v_strCURRDATE, systemnums.c_date_format) AND SCHD.REFTYPE IN ('P','GP') ORDER BY ACCTNO
    )
    LOOP
        --Set txnum
        plog.debug(pkgctx, 'Loop for' || rec.ACCTNO);
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.ACCTNO,1,4);


        --Set cac field giao dich
        --03   ACCTNO       C
        l_txmsg.txfields ('03').defname   := 'ACCTNO';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;

        --02   CIACCTNO       C
        l_txmsg.txfields ('02').defname   := 'CIACCTNO';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.TRFACCTNO;

        --05   AUTOID   N
        l_txmsg.txfields ('05').defname   := 'AUTOID';
        l_txmsg.txfields ('05').TYPE      := 'N';
        l_txmsg.txfields ('05').VALUE     := rec.AUTOID;

        --06   C   DUESTS
        l_txmsg.txfields ('06').defname   := 'DUESTS';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := 'O';

        --07   C   OLDDUESTS
        l_txmsg.txfields ('07').defname   := 'OLDDUESTS';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DUESTS;

        --10   N   NML
        l_txmsg.txfields ('10').defname   := 'NML';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := round((case when rec.REFTYPE='P' then rec.NML else 0 end),0);
        --11   N   ONML
        l_txmsg.txfields ('11').defname   := 'ONML';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := round((case when rec.REFTYPE='GP' then rec.NML else 0 end),0);
        --20    N   FINANCETYPE
        l_txmsg.txfields ('20').defname   := 'FINANCETYPE';
        l_txmsg.txfields ('20').TYPE      := 'N';
        l_txmsg.txfields ('20').VALUE     := REC.FINANCETYPE;
        --21    N   ISFROMINDUE
        l_txmsg.txfields ('21').defname   := 'ISFROMINDUE';
        l_txmsg.txfields ('21').TYPE      := 'N';
        l_txmsg.txfields ('21').VALUE     := REC.ISFROMINDUE;
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE :=v_strDESC;
 plog.error(pkgctx, 'rec.acctno'||rec.acctno);

        BEGIN
            IF txpks_#5564.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 5564: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_LNMovePrinToOverdue');
       EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_LNMovePrinToOverdue');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_LNMovePrinToOverdue;
---------------------------------pr_LNMoveIntToOverdue------------------------------------------------
  PROCEDURE pr_LNMoveIntToOverdue(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      l_err_param varchar2(300);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_LNMoveIntToOverdue');
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='5565';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='5565';
    plog.debug(pkgctx, 'Begin loop');
    for rec in
    (
        SELECT LNMAST.ACCTNO, LNMAST.TRFACCTNO, SCHD.AUTOID, SCHD.REFTYPE,
                SCHD.DUESTS, SCHD.NML, SCHD.OVD,SCHD.NMLFEEint,
                (CASE WHEN LNMAST.FTYPE ='AF' THEN 1 ELSE 0 END ) FINANCETYPE
              FROM LNMAST, LNSCHD SCHD
              WHERE LNMAST.ACCTNO = SCHD.ACCTNO AND LNMAST.STATUS NOT IN ('P','R','C') AND SCHD.NML>0
              AND SCHD.OVERDUEDATE <= TO_DATE(v_strCURRDATE, systemnums.c_date_format) AND SCHD.REFTYPE IN ('I','GI','F') ORDER BY ACCTNO
    )
    loop
        If rec.REFTYPE = 'I' Then
            INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID,Feeintdue,Feeintovd)
                   SELECT AUTOID, NULL, TO_DATE(v_strCURRDATE, systemnums.c_date_format), 0, 0, 0, 0, 0, -(INTDUE), INTDUE, 0, 0, 0, 0, 0,-(feeintdue),feeintdue FROM LNSCHD
                   WHERE ACCTNO=rec.ACCTNO AND INTOVDDUEDATE<=TO_DATE(v_strCURRDATE, systemnums.c_date_format)
                   AND (INTDUE>0 OR FEEINTDUE>0) AND REFTYPE='P';
            UPDATE LNSCHD SET INTOVD=round(INTOVD+INTDUE,0), INTDUE=0,
                              FEEINTNMLOVD= round(FEEINTNMLOVD+FEEINTDUE,0), FEEINTDUE=0
                   WHERE ACCTNO=rec.ACCTNO AND INTOVDDUEDATE<=TO_DATE(v_strCURRDATE, systemnums.c_date_format)
                   AND (INTDUE>0 OR FEEINTDUE>0) AND REFTYPE='P';
        elsif rec.REFTYPE = 'GI' Then
            INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID)
                   SELECT AUTOID, NULL, TO_DATE(v_strCURRDATE, systemnums.c_date_format), 0, 0, 0, 0, 0, -INTDUE, INTDUE, 0, 0, 0, 0, 0 FROM LNSCHD
                   WHERE ACCTNO=rec.ACCTNO AND INTOVDDUEDATE<=TO_DATE(v_strCURRDATE, systemnums.c_date_format)
                   AND INTDUE>0 AND REFTYPE='GP';
            UPDATE LNSCHD SET INTOVD=round(INTOVD+INTDUE,0), INTDUE=0
                   WHERE ACCTNO=rec.ACCTNO AND INTOVDDUEDATE<=TO_DATE(v_strCURRDATE, systemnums.c_date_format)
                   AND INTDUE>0 AND REFTYPE='GP';
        elsif rec.REFTYPE = 'F' Then
            INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID)
                   SELECT AUTOID, NULL, TO_DATE(v_strCURRDATE, systemnums.c_date_format), 0, 0, 0, 0, 0, 0, 0, 0, -FEEDUE, FEEDUE, 0, 0 FROM LNSCHD
                   WHERE ACCTNO=rec.ACCTNO AND INTOVDDUEDATE<=TO_DATE(v_strCURRDATE, systemnums.c_date_format)
                   AND INTDUE>0 AND REFTYPE='P';
            UPDATE LNSCHD SET FEEOVD=round(FEEOVD+FEEDUE,0), FEEDUE=0
                   WHERE ACCTNO=rec.ACCTNO AND INTOVDDUEDATE<=TO_DATE(v_strCURRDATE, systemnums.c_date_format)
                   AND FEEDUE>0 AND REFTYPE='P';
        end if;

        --Set txnum
        plog.debug(pkgctx, 'Loop for' || rec.ACCTNO);
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.ACCTNO,1,4);


        --Set cac field giao dich
        --03   ACCTNO       C
        l_txmsg.txfields ('03').defname   := 'ACCTNO';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;

        --04   CIACCTNO       C
        l_txmsg.txfields ('04').defname   := 'CIACCTNO';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.TRFACCTNO;

        --05   AUTOID   N
        l_txmsg.txfields ('05').defname   := 'AUTOID';
        l_txmsg.txfields ('05').TYPE      := 'N';
        l_txmsg.txfields ('05').VALUE     := rec.AUTOID;

        --06   C   DUESTS
        l_txmsg.txfields ('06').defname   := 'DUESTS';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := 'O';

        --07   C   OLDDUESTS
        l_txmsg.txfields ('07').defname   := 'OLDDUESTS';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DUESTS;

        --10   N   NML
        l_txmsg.txfields ('10').defname   := 'NML';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := round((case when rec.REFTYPE='I' then rec.NML else 0 end),0);
            --09   N   FEENML
        l_txmsg.txfields ('09').defname   := 'FEENML';
        l_txmsg.txfields ('09').TYPE      := 'N';
        l_txmsg.txfields ('09').VALUE     := round((case when rec.REFTYPE='I' then rec.NMLFEEINT else 0 end),0);
        --11   N   FEE
        l_txmsg.txfields ('11').defname   := 'FEE';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := round((case when rec.REFTYPE='F' then rec.NML else 0 end),0);
        --12   N   ONML
        l_txmsg.txfields ('12').defname   := 'ONML';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := round((case when rec.REFTYPE='GI' then rec.NML else 0 end),0);
        --20    N   FINANCETYPE
        l_txmsg.txfields ('20').defname   := 'FINANCETYPE';
        l_txmsg.txfields ('20').TYPE      := 'N';
        l_txmsg.txfields ('20').VALUE     := REC.FINANCETYPE;
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE :=v_strDESC;

        BEGIN
            IF txpks_#5565.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 5565: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;

    /*--Reset CIMAST.OVAMT = 0;
    UPDATE CIMAST SET OVAMT = 0;
    for rec_af in
    (
        select trfacctno, sum(PRINOVD + INTOVDACR + INTNMLOVD + INTPREPAID +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTOVDACR + FEEINTNMLOVD + FEEINTPREPAID) OVAMT
        from lnmast
        where ftype = 'AF'
        group by trfacctno
        order by trfacctno
    )
    loop -- rec_af
        UPDATE CIMAST SET OVAMT = rec_af.OVAMT
        WHERE ACCTNO = rec_af.TRFACCTNO;
    end loop; -- rec_af*/

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_LNMoveIntToOverdue');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_LNMoveIntToOverdue');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_LNMoveIntToOverdue;

---------------------------------pr_LNCalMaturityPrincipal------------------------------------------------
  PROCEDURE pr_LNCalMaturityPrincipal(p_err_code  OUT varchar2)
  IS
    V_INDATE varchar2(20);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_LNCalMaturityPrincipal');
    V_INDATE:= cspks_system.fn_get_sysvar('SYSTEM','NEXTDATE');

--Begin MSBS-2589
    UPDATE CIMAST SET DUEAMT = 0 WHERE dueamt <> 0;
    /*FOR REC IN
    (
        select m.trfacctno, sum(nml + FEEINTDUE) nml
        from
        (SELECT ACCTNO, SUM(NML) NML
            FROM LNSCHD
            WHERE OVERDUEDATE = TO_DATE(V_INDATE,'DD/MM/YYYY') AND NML > 0 AND REFTYPE IN ('P') group by acctno) S,
            LNMAST M
        where S.ACCTNO = M.ACCTNO AND M.STATUS NOT IN ('P','R','C') and M.FTYPE<>'DF'
        GROUP BY M.TRFACCTNO
        order by trfacctno
    )
    LOOP
        UPDATE CIMAST SET DUEAMT = round(DUEAMT + REC.NML,0) WHERE ACCTNO = REC.TRFACCTNO;
    END LOOP;*/

    MERGE INTO cimast ci
    USING (select m.trfacctno, sum(nml + FEEINTDUE) nml
        from
        (SELECT ACCTNO, SUM(NML) NML
            FROM LNSCHD
            WHERE OVERDUEDATE = TO_DATE(V_INDATE,'DD/MM/YYYY') AND NML > 0 AND REFTYPE IN ('P') group by acctno) S,
            LNMAST M
        where S.ACCTNO = M.ACCTNO AND M.STATUS NOT IN ('P','R','C') and M.FTYPE<>'DF'
        GROUP BY M.TRFACCTNO
        order by trfacctno) ln
    ON (ci.acctno = ln.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET DUEAMT = round(DUEAMT + ln.NML,0);
--End MSBS-2589
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_LNCalMaturityPrincipal');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_LNCalMaturityPrincipal');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_LNCalMaturityPrincipal;

---------------------------------pr_LNAccrueInterest------------------------------------------------
  PROCEDURE pr_LNAccrueInterest(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS
    l_txmsg               tx.msg_rectype;
    v_strNEXTDATE VARCHAR2(100);
    v_strCURRDATE VARCHAR2(100);
    v_strDesc varchar2(1000);
    v_strENDesc varchar2(1000);
    v_intDueNo number(20,0);
    v_intNextDay number(20,0);
    v_intCurDay number(20,0);
    v_intINTDAY number(20,0);
    v_intOINTDAY number(20,0);
    v_intDaysInMonth number(20,0);
    v_dblMRINTAMT number(20,4);
    v_dblMRFEEAMT number(20,4);
    v_dblMRFEEINTAMT NUMBER(20,4);
    v_dblT0ODAMT number(20,4);
    v_blnDUE boolean;
    l_err_param varchar2(300);
    V_INDATE varchar2(100);
    v_LNSCHD_AUTOID NUMBER(20);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_LNAccrueInterest');
    SELECT TXDESC,EN_TXDESC into v_strDesc,v_strENDesc FROM  TLTX WHERE TLTXCD='5562';
    v_strNEXTDATE:= cspks_system.fn_get_sysvar('SYSTEM','NEXTDATE');
    v_strCURRDATE:= cspks_system.fn_get_sysvar('SYSTEM','CURRDATE');

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid:' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='5562';

    for rec in
        (
            SELECT MST.* FROM (SELECT ROWNUM INDEXROW, LNMAST.ACCTNO, LNMAST.TRFACCTNO,
                        LNMAST.INTFRGCD, LNMAST.INTPERIOD, LNMAST.INTDAY, LNMAST.INTNMLACR,LNMAST.FEEINTNMLACR,
                        LNMAST.OINTNMLACR, LNMAST.FEE, LNMAST.OINTDAY, LNMAST.OINTFRQCD,
                        (CASE WHEN LNMAST.FTYPE='AF' THEN 1 ELSE 0 END) FINANCETYPE
                    FROM LNMAST WHERE LNMAST.STATUS NOT IN ('P', 'R', 'C')
                    AND round(LNMAST.INTNMLACR+LNMAST.OINTNMLACR+LNMAST.FEE,0) > 0
                    ORDER BY ACCTNO) MST
        )
    loop
        plog.debug(pkgctx, 'Loop for :' || rec.ACCTNO);
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        v_dblMRINTAMT := 0;
        v_dblMRFEEAMT := 0;
        v_dblT0ODAMT := 0;
        v_intDueNo:=0;
        v_dblMRFEEINTAMT:=0;
        v_intINTDAY:=rec.INTDAY;
        --Chuyen lai den han voi vay margin
        SELECT NVL(MAX(DUENO),0) DUENO into v_intDueNo FROM LNSCHD WHERE ACCTNO = rec.ACCTNO AND REFTYPE = 'I';
        plog.debug(pkgctx, 'INTFRGCD:' || rec.INTFRGCD);
        If rec.INTFRGCD = 'L' And (rec.INTNMLACR > 0 OR rec.feeintnmlacr >0 Or rec.FEE > 0) Then
            for recSCHD IN
                (
                    SELECT AUTOID, INTNMLACR, FEE,FEEINTNMLACR,
                           RATE1,RATE2,RATE3,CFRATE1,CFRATE2,CFRATE3,MINTERMDATE
                    FROM LNSCHD
                    WHERE ACCTNO = REC.ACCTNO AND REFTYPE = 'P'
                    AND (INTNMLACR > 0 OR FEE > 0 OR FEEINTNMLACR>0) AND DUE = 'N'
                    AND OVERDUEDATE=TO_DATE(v_strNEXTDATE,systemnums.c_date_format)
                )
            LOOP
                plog.debug(pkgctx, 'loop 2 for:' || recSCHD.AUTOID);
                v_dblMRINTAMT := round(v_dblMRINTAMT + recSCHD.INTNMLACR,0);
                v_dblMRFEEINTAMT := round(v_dblMRFEEINTAMT + recSCHD.FEEINTNMLACR,0);
                v_dblMRFEEAMT := round(v_dblMRFEEAMT + recSCHD.FEE,0);
                UPDATE LNSCHD SET INTNMLACR = 0,FEEINTNMLACR=0, FEE = 0, DUE='Y',
                    INTDUE = round(INTDUE + recSCHD.INTNMLACR,0),
                    FEEINTDUE = round(FEEINTDUE + recSCHD.FEEINTNMLACR,0),
                    FEEDUE = round(FEEDUE + recSCHD.FEE,0),
                    INTOVDDUEDATE = TO_DATE(v_strNEXTDATE,systemnums.c_date_format)
                    WHERE AUTOID = recSCHD.AUTOID;
                If recSCHD.INTNMLACR > 0 Then
                    INSERT INTO LNSCHD(AUTOID, ACCTNO, DUENO, RLSDATE, DUEDATE, OVERDUEDATE,
                                ACRDATE, OVDACRDATE, REFTYPE, NML, OVD, PAID, DUESTS, PDUESTS, INTNMLACR, DUE,
                                Rate1,RATE2,RATE3,CFRATE1,CFRATE2,CFRATE3,NMLFEEINT,REFAUTOID,MINTERMDATE)
                           VALUES (SEQ_LNSCHD.NEXTVAL, rec.ACCTNO ,v_intDueNo,NULL,TO_DATE(v_strNEXTDATE,systemnums.c_date_format),
                                  TO_DATE(v_strNEXTDATE,systemnums.c_date_format),NULL,NULL,'I',ROUND(recSCHD.INTNMLACR,0),
                                  0,0,'N',NULL,0,'N',
                                  RECSCHD.RATE1,RECSCHD.RATE2,RECSCHD.RATE3,RECSCHD.CFRATE1,RECSCHD.CFRATE2,RECSCHD.CFRATE3,ROUND(recSCHD.FEEINTNMLACR,0), recSCHD.AUTOID,recSCHD.MINTERMDATE);
                end if;
               /* If recSCHD.FEEINTNMLACR > 0 Then
                    INSERT INTO LNSCHD(AUTOID, ACCTNO, DUENO, RLSDATE, DUEDATE, OVERDUEDATE,
                                ACRDATE, OVDACRDATE, REFTYPE, NML, OVD, PAID, DUESTS, PDUESTS, FEEINTNMLACR, DUE,
                                Rate1,RATE2,RATE3,CFRATE1,CFRATE2,CFRATE3)
                           VALUES (SEQ_LNSCHD.NEXTVAL, rec.ACCTNO ,v_intDueNo,NULL,TO_DATE(v_strNEXTDATE,systemnums.c_date_format),TO_DATE(v_strNEXTDATE,systemnums.c_date_format),
                                  NULL,NULL,'I',ROUND(recSCHD.FEEINTNMLACR,0),0,0,'N',NULL,0,'N',
                                  RECSCHD.RATE1,RECSCHD.RATE2,RECSCHD.RATE3,RECSCHD.CFRATE1,RECSCHD.CFRATE2,RECSCHD.CFRATE3);
              end if; */
                If recSCHD.FEE > 0 Then
                    INSERT INTO LNSCHD(AUTOID, ACCTNO, DUENO, RLSDATE, DUEDATE, OVERDUEDATE,
                            ACRDATE, OVDACRDATE, PAIDDATE, REFTYPE, NML,
                            OVD, PAID, DUESTS, PDUESTS, INTNMLACR, DUE,
                             Rate1,RATE2,RATE3,CFRATE1,CFRATE2,CFRATE3,REFAUTOID,MINTERMDATE)
                           VALUES (SEQ_LNSCHD.NEXTVAL, rec.ACCTNO,v_intDueNo,NULL,
                                  TO_DATE(v_strNEXTDATE,systemnums.c_date_format),TO_DATE(v_strNEXTDATE,systemnums.c_date_format),
                                  NULL,NULL,NULL,'F',ROUND(recSCHD.FEE,0),0,0,'N',NULL,0,'N',
                                  RECSCHD.RATE1,RECSCHD.RATE2,RECSCHD.RATE3,RECSCHD.CFRATE1,RECSCHD.CFRATE2,RECSCHD.CFRATE3, recSCHD.AUTOID,recSCHD.MINTERMDATE);
                end if;
                If recSCHD.INTNMLACR > 0 Or recSCHD.FEE > 0 OR recschd.FEEINTNMLACR >0  Then
                    INSERT INTO LNSCHDLOG
                      (AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR,
                       FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD,
                       INTPAID, FEEPAID,FEEINTNMLACR,FEEINTDUE)
                    VALUES
                      (recSCHD.AUTOID, l_txmsg.txnum,
                       TO_DATE(v_strCURRDATE, systemnums.c_date_format), 0,
                       0, 0, - (ROUND(recSCHD.INTNMLACR, 0)),
                       - (ROUND(recSCHD.FEE, 0)),
                       ROUND(recSCHD.INTNMLACR, 0), 0, 0,
                       ROUND(recSCHD.FEE, 0), 0, 0, 0,
                      - (ROUND(recSCHD.FEEINTNMLACR, 0)) ,ROUND(recSCHD.FEEINTNMLACR, 0));
                end if;
            END LOOP;
        ElsIf rec.INTFRGCD = 'M' And (rec.INTNMLACR > 0 Or rec.FEE > 0 OR REC.FEEINTNMLACR >0) Then
            v_intNextDay := substr(v_strNEXTDATE,1,2);
            v_intCurDay :=  substr(v_strCURRDATE,1,2);
            If v_intNextDay = v_intINTDAY Then
                v_blnDUE := True;
            ElsIf v_intNextDay > v_intINTDAY And v_intCurDay < v_intINTDAY Then
                If v_intCurDay < v_intINTDAY Then  --Ngay tra la ngay nghi
                    v_blnDUE := True;
                End If;
            ElsIf v_intNextDay < v_intINTDAY Then
                v_intDaysInMonth:=to_char(last_day(to_date(v_strCURRDATE,systemnums.c_date_format)),'DD');
                If v_intINTDAY > v_intDaysInMonth And v_intNextDay = v_intDaysInMonth Then  --Ngay tra la ngay cuoi thang
                    v_blnDUE := True;
                Else
                    If to_char(to_date(v_strCURRDATE,systemnums.c_date_format),'MM')<>to_char(to_date(v_strNEXTDATE,systemnums.c_date_format),'MM')  And v_intCurDay < v_intINTDAY Then --Ngay tra la ngay cuoi thang, nhung roi vao ngay nghi
                        v_blnDUE := True;
                    End If;
                End If;
            End If;
            If v_blnDUE Then
                v_intDueNo := v_intDueNo + 1;
                for recSCHD in
                    (
                        SELECT AUTOID, INTNMLACR, FEE,
                               FEEINTNMLACR,RATE1,RATE2,RATE3,CFRATE1,CFRATE2,CFRATE3,MINTERMDATE
                        FROM LNSCHD
                        WHERE ACCTNO = rec.ACCTNO AND REFTYPE = 'P' AND (INTNMLACR > 0 OR FEE > 0 OR FEEINTNMLACR >0) AND DUE = 'N'
                    )
                loop
                    v_dblMRINTAMT := round(v_dblMRINTAMT + recSCHD.INTNMLACR,0);
                    v_dblMRFEEINTAMT := round(v_dblMRFEEINTAMT + recSCHD.FEEINTNMLACR,0);
                    v_dblMRFEEAMT := round(v_dblMRFEEAMT + recSCHD.FEE,0);
                    If recSCHD.INTNMLACR > 0 Or recSCHD.FEE > 0 OR  recSCHD.FEEINTNMLACR > 0  THEN
                        UPDATE LNSCHD SET INTNMLACR = 0, FEE = 0, DUE='Y',FEEINTNMLACR=0,
                            INTDUE = round(INTDUE + recSCHD.INTNMLACR,0),
                            FEEINTDUE = round(FEEINTDUE + recSCHD.FEEINTNMLACR,0),
                            FEEDUE = round(FEEDUE + recSCHD.FEE,0),
                            INTOVDDUEDATE = TO_DATE(v_strNEXTDATE,systemnums.c_date_format)
                            WHERE AUTOID = recSCHD.AUTOID;

                        INSERT INTO LNSCHDLOG
                          (AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR,
                           FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD,
                           INTPAID, FEEPAID,FEEINTNMLACR,FEEINTDUE)
                        VALUES
                          (recSCHD.AUTOID, l_txmsg.txnum,
                           to_date(v_strCURRDATE, systemnums.c_date_format),
                           0, 0, 0, - (ROUND(recSCHD.INTNMLACR, 0)),
                           - (ROUND(recSCHD.FEE, 0)),
                           ROUND(recSCHD.INTNMLACR, 0), 0, 0,
                           ROUND(recSCHD.FEE, 0), 0, 0, 0,
                            - (ROUND(recSCHD.FEEINTNMLACR, 0)),ROUND(recSCHD.FEEINTNMLACR, 0));
                    End If;
                    -- PhuongHT move vao trong vong loop
                     If v_dblMRINTAMT > 0 THEN
                     v_LNSCHD_AUTOID:=SEQ_LNSCHD.NEXTVAL;
                      INSERT INTO LNSCHD
                        (AUTOID, ACCTNO, DUENO, RLSDATE, DUEDATE, OVERDUEDATE,
                         ACRDATE, OVDACRDATE, PAIDDATE, REFTYPE, NML, OVD, PAID,
                         DUESTS, PDUESTS, INTNMLACR, DUE,
                         RATE1,RATE2,RATE3,CFRATE1,CFRATE2,cfrate3,NMLFEEint,REFAUTOID,MINTERMDATE)
                      VALUES
                        (v_LNSCHD_AUTOID, rec.ACCTNO, v_intDueNo + 1, NULL,
                         to_date(v_strNEXTDATE, systemnums.c_date_format),
                         to_date(v_strNEXTDATE, systemnums.c_date_format), NULL,
                         NULL, NULL, 'I', v_dblMRINTAMT, 0, 0, 'N', NULL, 0, 'N',
                         recSCHD.RATE1,recSCHD.RATE2,recSCHD.RATE3,recSCHD.CFRATE1,recSCHD.CFRATE2,recschd.cfrate3,v_dblMRFEEINTAMT, recSCHD.autoid,recSCHD.MINTERMDATE);

                      INSERT INTO LNSCHDLOG
                        (AUTOID, TXNUM, TXDATE, NML,NMLFEEINT)
                      VALUES
                        (v_LNSCHD_AUTOID,l_txmsg.txnum,
                         TO_DATE(v_strCURRDATE, systemnums.c_date_format),
                         v_dblMRINTAMT,v_dblMRFEEINTAMT
                         );
                END IF;
                  /* If v_dblMRFEEINTAMT > 0 Then
                    INSERT INTO LNSCHD
                      (AUTOID, ACCTNO, DUENO, RLSDATE, DUEDATE, OVERDUEDATE,
                       ACRDATE, OVDACRDATE, PAIDDATE, REFTYPE, NML, OVD,
                       PAID, DUESTS, PDUESTS, INTNMLACR, DUE,
                       RATE1,RATE2,RATE3,CFRATE1,CFRATE2,CFRATE3)
                    VALUES
                      (SEQ_LNSCHD.NEXTVAL, rec.ACCTNO, v_intDueNo + 1, NULL,
                       to_date(v_strNEXTDATE, systemnums.c_date_format),
                       to_date(v_strNEXTDATE, systemnums.c_date_format),
                       NULL, NULL, NULL, 'I', v_dblMRFEEINTAMT, 0, 0, 'N',
                       NULL, 0, 'N',
                     RECSCHD.RATE1,RECSCHD.RATE2,RECSCHD.RATE3,RECSCHD.CFRATE1,RECSCHD.CFRATE2,RECSCHD.CFRATE3);
                End If;  */
                If v_dblMRFEEAMT > 0 THEN
                   v_LNSCHD_AUTOID:=SEQ_LNSCHD.NEXTVAL;
                    INSERT INTO LNSCHD
                      (AUTOID, ACCTNO, DUENO, RLSDATE, DUEDATE, OVERDUEDATE,
                       ACRDATE, OVDACRDATE, PAIDDATE, REFTYPE, NML, OVD,
                       PAID, DUESTS, PDUESTS, INTNMLACR, DUE,
                       RATE1,RATE2,RATE3,CFRATE1,CFRATE2,CFRATE3,REFAUTOID,MINTERMDATE)
                    VALUES
                      (v_LNSCHD_AUTOID, rec.ACCTNO, v_intDueNo + 1, NULL,
                       to_date(v_strNEXTDATE, systemnums.c_date_format),
                       to_date(v_strNEXTDATE, systemnums.c_date_format),
                       NULL, NULL, NULL, 'F', v_dblMRFEEAMT, 0, 0, 'N', NULL,
                       0, 'N',
                       RECSCHD.RATE1,RECSCHD.RATE2,RECSCHD.RATE3,RECSCHD.CFRATE1,RECSCHD.CFRATE2,RECSCHD.CFRATE3, recSCHD.autoid,recSCHD.MINTERMDATE);

                   INSERT INTO LNSCHDLOG
                        (AUTOID, TXNUM, TXDATE, NML)
                      VALUES
                        (v_LNSCHD_AUTOID,  l_txmsg.txnum,
                         TO_DATE(v_strCURRDATE, systemnums.c_date_format),
                         v_dblMRFEEAMT
                         );
              End If;
                --- end of PhuongHT move vao trong vong loop
                end loop;


            end if;
        end if;
        --Chuyen lai den han voi vay T0
        v_intDueNo := 0;
        SELECT NVL(MAX(DUENO),0) DUENO into v_intDueNo FROM LNSCHD WHERE ACCTNO = rec.ACCTNO AND REFTYPE = 'GI';
        If rec.OINTFRQCD = 'L' And rec.OINTNMLACR > 0 Then
            for recSCHD in
            (
                SELECT AUTOID, INTNMLACR,MINTERMDATE
                FROM LNSCHD
                WHERE ACCTNO = rec.ACCTNO AND REFTYPE = 'GP' AND (INTNMLACR > 0)
                AND DUE = 'N' AND OVERDUEDATE=to_date(v_strNEXTDATE,systemnums.c_date_format)
            )
            loop
                v_dblT0ODAMT:=v_dblT0ODAMT + recSCHD.INTNMLACR;
                UPDATE LNSCHD SET INTNMLACR = 0, DUE='Y',
                                INTDUE=round(INTDUE+recSCHD.INTNMLACR,0),
                                INTOVDDUEDATE = to_date(v_strNEXTDATE,systemnums.c_date_format)
                 WHERE AUTOID = recSCHD.AUTOID;
                v_LNSCHD_AUTOID:=SEQ_LNSCHD.NEXTVAL;
                INSERT INTO LNSCHD
                  (AUTOID, ACCTNO, DUENO, RLSDATE, DUEDATE, OVERDUEDATE,
                   ACRDATE, OVDACRDATE, PAIDDATE, REFTYPE, NML, OVD, PAID,
                   DUESTS, PDUESTS, INTNMLACR, DUE,REFAUTOID,MINTERMDATE)
                VALUES
                  (v_LNSCHD_AUTOID, rec.ACCTNO, v_intDueNo, NULL,
                   to_date(v_strNEXTDATE, systemnums.c_date_format),
                   to_date(v_strNEXTDATE, systemnums.c_date_format), NULL,
                   NULL, NULL, 'GI', ROUND(recSCHD.INTNMLACR, 0), 0, 0, 'N',
                   NULL, 0, 'N', recSCHD.autoid,recSCHD.MINTERMDATE);
                -- insert vao log cho dong GI
               INSERT INTO LNSCHDLOG
                    (AUTOID, TXNUM, TXDATE, NML)
                  VALUES
                    (v_LNSCHD_AUTOID, l_txmsg.txnum ,
                     TO_DATE(v_strCURRDATE, systemnums.c_date_format),
                     ROUND(recSCHD.INTNMLACR, 0)
                     );


             If recSCHD.INTNMLACR > 0 Then
                INSERT INTO LNSCHDLOG
                  (AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE,
                   INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID,
                   FEEPAID)
                VALUES
                  (recSCHD.AUTOID,  l_txmsg.txnum,
                   to_date(v_strCURRDATE, systemnums.c_date_format), 0, 0, 0,
                   - (ROUND(recSCHD.INTNMLACR, 0)), 0,
                   ROUND(recSCHD.INTNMLACR, 0), 0, 0, 0, 0, 0, 0);
                END IF;
            end loop;
        ElsIf rec.OINTFRQCD = 'M' And rec.OINTNMLACR > 0 Then
            v_intNextDay := substr(v_strNEXTDATE,1,2);
            v_intCurDay :=  substr(v_strCURRDATE,1,2);
            If v_intNextDay = v_intOINTDAY Then
                v_blnDUE := True;
            ElsIf v_intNextDay > v_intOINTDAY And v_intCurDay < v_intOINTDAY Then
                If v_intCurDay < v_intOINTDAY Then  --Ngay tra la ngay nghi
                    v_blnDUE := True;
                End If;
            ElsIf v_intNextDay < v_intOINTDAY Then
                v_intDaysInMonth:=to_char(last_day(to_date(v_strCURRDATE,systemnums.c_date_format)),'DD');
                If v_intOINTDAY > v_intDaysInMonth And v_intNextDay = v_intDaysInMonth Then  --Ngay tra la ngay cuoi thang
                    v_blnDUE := True;
                Else
                    If to_char(to_date(v_strCURRDATE,systemnums.c_date_format),'MM')<>to_char(to_date(v_strNEXTDATE,systemnums.c_date_format),'MM')  And v_intCurDay < v_intINTDAY Then --Ngay tra la ngay cuoi thang, nhung roi vao ngay nghi
                        v_blnDUE := True;
                    End If;
                End If;
            End If;
            If v_blnDUE Then
                v_intDueNo := v_intDueNo + 1;
                for recSCHD in
                    (
                        SELECT AUTOID, INTNMLACR,MINTERMDATE FROM LNSCHD
                                WHERE ACCTNO = rec.ACCTNO AND REFTYPE = 'GP' AND INTNMLACR > 0 AND DUE = 'N'
                    )
                loop
                    v_dblT0ODAMT := round(v_dblT0ODAMT + recSCHD.INTNMLACR,0);
                    UPDATE LNSCHD SET INTNMLACR = 0, DUE='Y',
                                    INTDUE = round(INTDUE + recSCHD.INTNMLACR,0),
                                    INTOVDDUEDATE = to_date(v_strNEXTDATE,systemnums.c_date_format)
                    WHERE AUTOID = recSCHD.AUTOID;
                    If recSCHD.INTNMLACR > 0 Then
                        INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID)
                               VALUES (recSCHD.AUTOID, l_txmsg.txnum, to_date(v_strCURRDATE,systemnums.c_date_format), 0, 0, 0,-(ROUND(recSCHD.INTNMLACR,0)), 0, ROUND(recSCHD.INTNMLACR,0), 0, 0, 0, 0, 0, 0);
                    end if;
                    If v_dblT0ODAMT > 0 THEN
                      v_LNSCHD_AUTOID:=SEQ_LNSCHD.NEXTVAL;
                        INSERT INTO LNSCHD(AUTOID, ACCTNO, DUENO, RLSDATE, DUEDATE, OVERDUEDATE, ACRDATE, OVDACRDATE, PAIDDATE, REFTYPE, NML, OVD, PAID, DUESTS, PDUESTS, INTNMLACR, DUE,REFAUTOID,MINTERMDATE)
                                VALUES (v_LNSCHD_AUTOID, rec.ACCTNO,v_intDueNo + 1 ,NULL,to_date(v_strNEXTDATE,systemnums.c_date_format),to_date(v_strNEXTDATE,systemnums.c_date_format),NULL,NULL,NULL,'GI',v_dblT0ODAMT,0,0,'N',NULL,0,'N',recSCHD.autoid,recSCHD.MINTERMDATE);
                       -- insert vao log cho dong GI
                  INSERT INTO LNSCHDLOG
                    (AUTOID, TXNUM, TXDATE, NML)
                  VALUES
                    (v_LNSCHD_AUTOID, l_txmsg.txnum,
                     TO_DATE(v_strCURRDATE, systemnums.c_date_format),
                     v_dblT0ODAMT
                     );
                    end if;

                end loop;
            end if;
        end if;
        If v_dblMRINTAMT + v_dblMRFEEAMT + v_dblT0ODAMT +v_dblMRFEEINTAMT > 0 Then

            l_txmsg.brid        := substr(rec.ACCTNO,1,4);
            --Set cac field giao dich
            --03   ACCTNO       C
            l_txmsg.txfields ('03').defname   := 'ACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;
            plog.debug(pkgctx, 'ACCTNO :' || rec.ACCTNO);
            --05   ORGORDERID   C
            l_txmsg.txfields ('05').defname   := 'CIACCTNO';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.TRFACCTNO;
            plog.debug(pkgctx, 'CIACCTNO: ' || rec.TRFACCTNO);

             --09   PAIDAMT      N
            l_txmsg.txfields ('09').defname   := 'MRFEEINTAMT';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := round(v_dblMRFEEINTAMT,0);

            --10   PAIDAMT      N
            l_txmsg.txfields ('10').defname   := 'MRINTAMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := round(v_dblMRINTAMT,0);


            --11   PAIDFEEAMT   N
            l_txmsg.txfields ('11').defname   := 'MRFEEAMT';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := round(v_dblMRFEEAMT,0);
            --12   N   FEEAMT
            l_txmsg.txfields ('12').defname   := 'T0AMT';
            l_txmsg.txfields ('12').TYPE      := 'N';
            l_txmsg.txfields ('12').VALUE     := round(v_dblT0ODAMT,0);
            --20    N   FINANCETYPE
            l_txmsg.txfields ('20').defname   := 'FINANCETYPE';
            l_txmsg.txfields ('20').TYPE      := 'N';
            l_txmsg.txfields ('20').VALUE     := REC.FINANCETYPE;
            --30   C   DESC
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE := v_strDesc;

            BEGIN
                IF txpks_#5562.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error /*5562*/: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
        end if;
    end loop;


    -- update cimast set odamt
    --Reset CIMAST.ODAMT = 0;
--Begin MSBS-2589
    UPDATE CIMAST SET ODAMT = 0 WHERE odamt <> 0;
    /*for rec_af in
    (
        select trfacctno, sum(PRINNML + PRINOVD + INTNMLACR + INTOVDACR + INTNMLOVD + INTDUE + INTPREPAID + INTNMLPBL +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTNMLACR + FEEINTOVDACR + FEEINTNMLOVD + FEEINTDUE + FEEINTPREPAID) ODAMT
               from lnmast
               where ftype = 'AF'
               group by trfacctno
               order by trfacctno
    )
    loop -- rec_af
        UPDATE CIMAST SET ODAMT = rec_af.ODAMT
        WHERE ACCTNO = rec_af.TRFACCTNO;
    end loop;*/ -- rec_af

    MERGE INTO cimast ci
    USING (select trfacctno, sum(PRINNML + PRINOVD + INTNMLACR + INTOVDACR + INTNMLOVD + INTDUE + INTPREPAID + INTNMLPBL +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTNMLACR + FEEINTOVDACR + FEEINTNMLOVD + FEEINTDUE + FEEINTPREPAID) ODAMT
               from lnmast
               where ftype = 'AF'
               group by trfacctno
               order by trfacctno) ln
    ON (ci.acctno = ln.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET ODAMT = ln.ODAMT;

    -- update cimast set dueamt
    V_INDATE:= cspks_system.fn_get_sysvar('SYSTEM','NEXTDATE');

    UPDATE CIMAST SET DUEAMT = 0 WHERE dueamt <>0;
    /*FOR REC IN
    (
        select m.trfacctno, sum(nml + INTDUE + FEEINTDUE) nml
        from
        (SELECT ACCTNO, SUM(NML) NML
            FROM LNSCHD
            WHERE OVERDUEDATE = TO_DATE(V_INDATE,'DD/MM/YYYY') AND nml + INTDUE + FEEINTDUE > 0 AND REFTYPE IN ('P') group by acctno) S,
            LNMAST M
        where S.ACCTNO = M.ACCTNO AND M.STATUS NOT IN ('P','R','C') and M.FTYPE<>'DF'
        GROUP BY M.TRFACCTNO
        order by trfacctno
    )
    LOOP
        UPDATE CIMAST SET DUEAMT = round(DUEAMT + REC.NML,0) WHERE ACCTNO = REC.TRFACCTNO;
    END LOOP;*/

    MERGE INTO cimast ci
    USING (select m.trfacctno, sum(nml + INTDUE + FEEINTDUE) nml
        from
        (SELECT ACCTNO, SUM(NML) NML
            FROM LNSCHD
            WHERE OVERDUEDATE = TO_DATE(V_INDATE,'DD/MM/YYYY') AND nml + INTDUE + FEEINTDUE > 0 AND REFTYPE IN ('P') group by acctno) S,
            LNMAST M
        where S.ACCTNO = M.ACCTNO AND M.STATUS NOT IN ('P','R','C') and M.FTYPE<>'DF'
        GROUP BY M.TRFACCTNO
        order by trfacctno) ln
    ON (ci.acctno = ln.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET DUEAMT = round(DUEAMT + ln.NML,0);

    -- update cimast set ovamt
    --Reset CIMAST.OVAMT = 0;
    UPDATE CIMAST SET OVAMT = 0 WHERE ovamt <> 0;
    /*for rec_af in
    (
        select trfacctno, sum(PRINOVD + INTOVDACR + INTNMLOVD + INTPREPAID + INTNMLPBL +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTOVDACR + FEEINTNMLOVD + FEEINTPREPAID) OVAMT
        from lnmast
        where ftype = 'AF'
        group by trfacctno
        order by trfacctno
    )
    loop -- rec_af
        UPDATE CIMAST SET OVAMT = rec_af.OVAMT
        WHERE ACCTNO = rec_af.TRFACCTNO;
    end loop;*/ -- rec_af

    MERGE INTO cimast ci
    USING (select trfacctno, sum(PRINOVD + INTOVDACR + INTNMLOVD + INTPREPAID + INTNMLPBL +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTOVDACR + FEEINTNMLOVD + FEEINTPREPAID) OVAMT
        from lnmast
        where ftype = 'AF'
        group by trfacctno
        order by trfacctno) ln
    ON (ci.acctno = ln.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET OVAMT = ln.OVAMT;
--End MSBS-2589

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_LNAccrueInterest');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_LNAccrueInterest');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_LNAccrueInterest;
---------------------------------pr_LNNormalInterestAccrue------------------------------------------------
  PROCEDURE pr_LNNormalInterestAccrue(p_err_code  OUT varchar2)
  IS
    v_indate varchar2(10);
    v_stryear varchar2(4);
    v_dblintnmlacr number(20,4);
    v_dblintovdacr number(20,4);
    v_dblfeeintnmlacr number(20,4);
    v_dblfeeintovdacr number(20,4);
    v_dblointnmlacr number(20,4);
    v_dblointovdacr number(20,4);
    v_intdays number(20);
    v_dblamt number(20,4);
    v_dblamt_t number(20,4);
    v_dblamtbank number(20,4);
    v_dbldrate number(10);
    v_dblfeeamt number(20,4);
    l_fee_intovd number(20,4);
    l_fee_feeintovdacr number(20,4);
    l_fee_ovd number(20,4);
    v_strCURRDATE VARCHAR2(100);
    v_dblintnmlacrbank number(20,4);
    l_ispaybank  VARCHAR2(100);
    --1.5.7.3|MSBS-1932 -> Khai Bao Bien
    l_isMAS10   VARCHAR2(10);
    l_bfDueDays   NUMBER;
    l_dueDays     NUMBER;
    l_overDueDay  NUMBER;
    l_bfDueAmt    NUMBER;
    l_dueAmt      NUMBER;
    l_overDueAmt  NUMBER;
    l_bfDueFeeAmt    NUMBER;
    l_dueFeeAmt      NUMBER;
    l_overDueFeeAmt  NUMBER;
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_LNNormalInterestAccrue');
    v_indate:=cspks_system.fn_get_sysvar ('SYSTEM', 'NEXTDATE');
    v_strCURRDATE:= cspks_system.fn_get_sysvar('SYSTEM','CURRDATE');
    --MSBS-2236 1.7.1.3
    SP_GEN_LNSCHD_EXT;
    --Reset lnmast.intnmlpbl = 0 de tinh lai du tru cho BL
    UPDATE lnmast SET intnmlpbl = 0 WHERE intnmlpbl <> 0; --MSBS-2589

    FOR REC IN
        (SELECT ACCTNO, DRATE, TRFACCTNO,
            RATE1, RATE2, RATE3,
            ORATE1, ORATE2, ORATE3,
            CFRATE1,CFRATE2,CFRATE3,
            (PRINNML+PRINOVD+INTNMLACR+INTOVDACR+INTNMLOVD+INTDUE-INTPREPAID+
            OPRINNML+OPRINOVD+OINTNMLACR+OINTOVDACR+OINTNMLOVD+OINTDUE-OINTPREPAID
            +FEE+FEEDUE+FEEOVD+
            FEEINTNMLACR+FEEINTOVDACR+FEEINTNMLOVD+FEEINTDUE-FEEINTPREPAID) ODAMT,
            PRINNML, PRINOVD, OPRINNML, OPRINOVD, FTYPE,
            INTNMLACR,INTOVDACR,INTNMLOVD,INTDUE,INTPREPAID,
            FEEINTNMLACR,FEEINTOVDACR,FEEINTNMLOVD,FEEINTDUE,FEEINTPREPAID,
            OINTNMLACR,OINTOVDACR,OINTNMLOVD,
            OINTDUE,OINTPREPAID,FEE,FEEDUE,FEEOVD, INTOVDCD ,ISPAYBANK
        FROM LNMAST
        WHERE STATUS NOT IN ('P','R','C') AND PRINNML+OPRINNML+PRINOVD+OPRINOVD > 0
        ORDER BY ACCTNO
        )
    LOOP
        v_dblINTNMLACR:= 0;
        v_dblINTOVDACR:= 0;
        v_dblFEEINTNMLACR:= 0;
        v_dblFEEINTOVDACR:= 0;
        v_dblOINTNMLACR:= 0;
        v_dblOINTOVDACR:= 0;
        V_DBLINTNMLACRBANK:= 0;
        V_DBLAMTBANK:= 0;
        v_dblamt_t :=0;
        Case
            When REC.DRATE= 'D1' then v_dblDRATE:= 30;
            When REC.DRATE= 'D2' then v_dblDRATE:= TO_NUMBER(TO_CHAR(LAST_DAY(TO_DATE(V_INDATE,'dd/mm/rrrr')),'dd'));
            When REC.DRATE= 'Y1' then v_dblDRATE:= 360;
            When REC.DRATE= 'Y2' then
                v_strYEAR:= SUBSTR(V_INDATE,7);
                v_dblDRATE:= TO_DATE(CONCAT('31/12/',v_strYEAR),'dd/mm/rrrr') - TO_DATE(CONCAT('01/01/',v_strYEAR),'dd/mm/rrrr') + 1;
        End case;
        --1.5.7.3|MSBS-1932 --> Check Tieu Khoan Xu Dung MAS10 Lich Thuong
        l_isMAS10 := fn_checkMAS10Regist (rec.trfacctno, 'Y');

        -- Lai tren goc trong han
        -- Lai vay margin
        IF REC.PRINNML > 0 THEN
            FOR REC1 IN
                (SELECT AUTOID, NML, ACRDATE, REFTYPE,
                        RATE1,CFRATE1,RATE2,ISPAYBANK
                 FROM LNSCHD
                 WHERE ACCTNO=  REC.ACCTNO AND NML > 0
                 AND DUEDATE >= TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='P'
                 AND NOT EXISTS (select 1 from LNSCHDext l where acctno=REC.ACCTNO AND DUEDATE >= TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='P' AND l.autoid = autoid)) --MSBS-2589
            LOOP
                v_intDAYS:= TO_DATE(V_INDATE,'dd/mm/yyyy') - REC1.ACRDATE;
                v_dblAMT:= ROUND(REC1.NML * REC1.RATE1 / 100 * v_intDAYS / v_dblDRATE,4);
                v_dblINTNMLACR:= v_dblINTNMLACR + v_dblAMT;
                V_DBLAMTBANK:=0;
                --NAMNT
                --v_dblamtbank:= DECODE( REC.ISPAYBANK,'Y', ROUND(REC1.NML * (REC1.RATE2-REC1.RATE1) / 100 * v_intDAYS / v_dblDRATE,4),0);
                IF REC1.ISPAYBANK = 'Y' THEN
                V_DBLAMTBANK:= ROUND(REC1.NML * GREATEST((REC1.RATE2-REC1.RATE1),0) / 100 * v_intDAYS / v_dblDRATE,4);
                END IF;
                V_DBLINTNMLACRBANK:=V_DBLINTNMLACRBANK +V_DBLAMTBANK;
                --END NAMNT--
                --
                v_dblfeeAMT:= ROUND(REC1.NML * REC1.CFRATE1 / 100 * v_intDAYS / v_dblDRATE,4);
                v_dblFEEINTNMLACR:= v_dblFEEINTNMLACR + v_dblfeeAMT;
                --
                IF (v_dblAMT > 0 OR v_dblFeeAMT >0 OR V_DBLAMTBANK>0) then
                    INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT,Cfirrate,Feeintamt,BRATE,INTNMLACRBANK,LNSCHDID)
                    VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'I', REC1.ACRDATE, TO_DATE(V_INDATE,'dd/mm/yyyy'), 'S', REC1.RATE1, REC1.NML, v_dblAMT,rec1.cfrate1,v_dblfeeAMT, GREATEST(REC1.RATE2- REC1.RATE1,0),V_DBLAMTBANK, REC1.AUTOID);

                    INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID,FEEINTNMLACR,intnmlacrbank)
                    VALUES(REC1.AUTOID, NULL, TO_DATE(v_strCURRDATE,'dd/mm/yyyy'), 0, 0, 0, v_dblAMT, 0, 0, 0, 0, 0, 0, 0 ,0,v_dblFEEAMT,V_DBLAMTBANK);

                End If;

                UPDATE LNSCHD SET ACRDATE = TO_DATE(V_INDATE,'dd/mm/yyyy'), INTNMLACR = INTNMLACR + v_dblAMT, FEEINTNMLACR = FEEINTNMLACR + v_dblFEEAMT,INTNMLACRBANK=INTNMLACRBANK+V_DBLAMTBANK,DUE='N' WHERE AUTOID = REC1.AUTOID;
            END LOOP;
            --lai bac thang MSBS-2236
            FOR REC1_BT IN
                (SELECT AUTOID, NML, ACRDATE, REFTYPE,
                        RATE1,CFRATE1,RATE2,ISPAYBANK
                 FROM LNSCHDEXT
                 WHERE ACCTNO=  REC.ACCTNO AND NML > 0
                 AND DUEDATE >= TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='P')
            LOOP
                v_intDAYS:= TO_DATE(V_INDATE,'dd/mm/yyyy') - REC1_BT.ACRDATE;
                v_dblAMT:= ROUND(REC1_BT.NML * REC1_BT.RATE1 / 100 * v_intDAYS / v_dblDRATE,4);
                v_dblINTNMLACR:= v_dblINTNMLACR + v_dblAMT;
                V_DBLAMTBANK:=0;
                --NAMNT
                --v_dblamtbank:= DECODE( REC.ISPAYBANK,'Y', ROUND(REC1.NML * (REC1.RATE2-REC1.RATE1) / 100 * v_intDAYS / v_dblDRATE,4),0);
                IF REC1_BT.ISPAYBANK = 'Y' THEN
                V_DBLAMTBANK:= ROUND(REC1_BT.NML * GREATEST((REC1_BT.RATE2-REC1_BT.RATE1),0) / 100 * v_intDAYS / v_dblDRATE,4);
                END IF;
                V_DBLINTNMLACRBANK:=V_DBLINTNMLACRBANK +V_DBLAMTBANK;
                --END NAMNT--
                --
                v_dblfeeAMT:= ROUND(REC1_BT.NML * REC1_BT.CFRATE1 / 100 * v_intDAYS / v_dblDRATE,4);
                v_dblFEEINTNMLACR:= v_dblFEEINTNMLACR + v_dblfeeAMT;
                --
                IF (v_dblAMT > 0 OR v_dblFeeAMT >0 OR V_DBLAMTBANK>0) then
                    INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT,Cfirrate,Feeintamt,BRATE,INTNMLACRBANK, LNSCHDID)
                    VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'I', REC1_BT.ACRDATE, TO_DATE(V_INDATE,'dd/mm/yyyy'), 'S', REC1_BT.RATE1, REC1_BT.NML, v_dblAMT,REC1_BT.cfrate1,v_dblfeeAMT, GREATEST(REC1_BT.RATE2- REC1_BT.RATE1,0),V_DBLAMTBANK, REC1_BT.AUTOID);

                    INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID,FEEINTNMLACR,intnmlacrbank)
                    VALUES(REC1_BT.AUTOID, NULL, TO_DATE(v_strCURRDATE,'dd/mm/yyyy'), 0, 0, 0, v_dblAMT, 0, 0, 0, 0, 0, 0, 0 ,0,v_dblFEEAMT,V_DBLAMTBANK);

                End If;

                UPDATE LNSCHD SET ACRDATE = TO_DATE(V_INDATE,'dd/mm/yyyy'), INTNMLACR = INTNMLACR + v_dblAMT, FEEINTNMLACR = FEEINTNMLACR + v_dblFEEAMT,INTNMLACRBANK=INTNMLACRBANK+V_DBLAMTBANK,DUE='N' WHERE AUTOID = REC1_BT.AUTOID;
            END LOOP;
            --
          IF l_isMAS10 = 'N' THEN
            FOR REC2 IN
                (SELECT AUTOID, NML, ACRDATE, REFTYPE,RATE2,CFRATE2 FROM LNSCHD WHERE ACCTNO=  REC.ACCTNO AND NML > 0 AND DUEDATE < TO_DATE(V_INDATE,'dd/mm/rrrr') AND OVERDUEDATE >= TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='P'
                AND NOT EXISTS (SELECT 1 FROM LNSCHDEXT l WHERE ACCTNO=  REC.ACCTNO AND NML > 0 AND DUEDATE < TO_DATE(V_INDATE,'dd/mm/rrrr') AND OVERDUEDATE >= TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='P' AND l.autoid = autoid)) --MSBS-2589
            LOOP
                v_intDAYS:= TO_DATE(V_INDATE,'dd/mm/yyyy') - REC2.ACRDATE;
                v_dblAMT:= ROUND(REC2.NML * REC2.RATE2 / 100 * v_intDAYS / v_dblDRATE,4);
                v_dblINTNMLACR:= v_dblINTNMLACR + v_dblAMT;
                --
                v_dblFEEAMT:= ROUND(REC2.NML * REC2.CFRATE2 / 100 * v_intDAYS / v_dblDRATE,4);
                v_dblFEEINTNMLACR:= v_dblFEEINTNMLACR + v_dblFEEAMT;
                --
                If (v_dblAMT > 0 OR v_dblFEEAMT > 0 )then
                    INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT,Cfirrate,Feeintamt, LNSCHDID)
                    VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'I', REC2.ACRDATE, TO_DATE(V_INDATE,'dd/mm/yyyy'), 'S', REC2.RATE2, REC2.NML, v_dblAMT,rec2.cfrate2,v_dblFEEAMT, REC2.AUTOID);
                    INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID,FEEINTNMLACR)
                    VALUES(REC2.AUTOID, NULL, TO_DATE(v_strCURRDATE,'dd/mm/yyyy'), 0, 0, 0, v_dblAMT, 0, 0, 0, 0, 0, 0, 0 ,0,v_dblFEEAMT);
                End If;

                UPDATE LNSCHD SET ACRDATE = TO_DATE(V_INDATE,'dd/mm/yyyy'), INTNMLACR = INTNMLACR + v_dblAMT,FEEINTNMLACR = FEEINTNMLACR + v_dblFEEAMT,DUE='N' WHERE AUTOID = REC2.AUTOID;
            END LOOP;
            ---lai bac thang
            FOR REC2_BT IN
                (SELECT AUTOID, NML, ACRDATE, REFTYPE,RATE2,CFRATE2 FROM LNSCHDEXT WHERE ACCTNO=  REC.ACCTNO AND NML > 0 AND DUEDATE < TO_DATE(V_INDATE,'dd/mm/rrrr') AND OVERDUEDATE >= TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='P')
            LOOP
                v_intDAYS:= TO_DATE(V_INDATE,'dd/mm/yyyy') - REC2_BT.ACRDATE;
                v_dblAMT:= ROUND(REC2_BT.NML * REC2_BT.RATE2 / 100 * v_intDAYS / v_dblDRATE,4);
                v_dblINTNMLACR:= v_dblINTNMLACR + v_dblAMT;
                --
                v_dblFEEAMT:= ROUND(REC2_BT.NML * REC2_BT.CFRATE2 / 100 * v_intDAYS / v_dblDRATE,4);
                v_dblFEEINTNMLACR:= v_dblFEEINTNMLACR + v_dblFEEAMT;
                --
                If (v_dblAMT > 0 OR v_dblFEEAMT > 0 )then
                    INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT,Cfirrate,Feeintamt, LNSCHDID)
                    VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'I', REC2_BT.ACRDATE, TO_DATE(V_INDATE,'dd/mm/yyyy'), 'S', REC2_BT.RATE2, REC2_BT.NML, v_dblAMT,REC2_BT.cfrate2,v_dblFEEAMT, REC2_BT.AUTOID);
                    INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID,FEEINTNMLACR)
                    VALUES(REC2_BT.AUTOID, NULL, TO_DATE(v_strCURRDATE,'dd/mm/yyyy'), 0, 0, 0, v_dblAMT, 0, 0, 0, 0, 0, 0, 0 ,0,v_dblFEEAMT);
                End If;

                UPDATE LNSCHD SET ACRDATE = TO_DATE(V_INDATE,'dd/mm/yyyy'), INTNMLACR = INTNMLACR + v_dblAMT,FEEINTNMLACR = FEEINTNMLACR + v_dblFEEAMT,DUE='N' WHERE AUTOID = REC2_BT.AUTOID;
            END LOOP;
            ---
          ELSE
            --1.5.7.3|MSBS-1932: Tinh Lai Rieng Theo Ngay
            FOR REC21 IN
                (SELECT AUTOID, NML, ACRDATE, REFTYPE,cfRATE1, rate1, RATE2, CFRATE2, dueDate, overDueDate, isPayBank
                 FROM LNSCHD
                 WHERE ACCTNO=  REC.ACCTNO AND NML > 0
                 AND DUEDATE < TO_DATE(V_INDATE,'dd/mm/rrrr')
                 AND OVERDUEDATE >= TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='P'
                 AND NOT EXISTS (SELECT 1 FROM LNSCHDEXT l WHERE ACCTNO=  REC.ACCTNO AND NML > 0 --MSBS-2589
                 AND DUEDATE < TO_DATE(V_INDATE,'dd/mm/rrrr')
                 AND OVERDUEDATE >= TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='P' AND l.autoid = autoid)
                 )
            LOOP
              IF rec21.acrdate < rec21.duedate THEN
                l_bfDueDays := rec21.duedate - rec21.acrdate;
                l_dueDays := TO_DATE(v_indate, systemnums.C_DATE_FORMAT) - rec21.duedate;
              ELSE
                l_bfDueDays := 0;
                l_dueDays := TO_DATE(v_indate, systemnums.C_DATE_FORMAT) - rec21.acrdate;
              END IF;
              --
              v_dblAMT := 0;
              --v_dblINTNMLACR := 0; --1.5.7.9|MSBS-1952 Bo reset Lai Tinh tren lnmast
              V_DBLAMTBANK := 0;
              v_dblfeeAMT := 0;
              -- So Tien Phi RATE1
              IF l_bfDueDays > 0 THEN
                l_bfDueAmt := ROUND(REC21.NML * REC21.RATE1 / 100 * l_bfDueDays / v_dblDRATE,4);
                v_dblAMT := l_bfDueAmt;
                v_dblINTNMLACR := v_dblINTNMLACR + l_bfDueAmt;
                --NAMNT
                --v_dblamtbank:= DECODE( REC.ISPAYBANK,'Y', ROUND(REC1.NML * (REC1.RATE2-REC1.RATE1) / 100 * v_intDAYS / v_dblDRATE,4),0);
                IF REC21.ISPAYBANK = 'Y' THEN
                  V_DBLAMTBANK := ROUND(REC21.NML * GREATEST((REC21.RATE2-REC21.RATE1),0) / 100 * l_bfDueDays / v_dblDRATE,4);
                END IF;
                V_DBLINTNMLACRBANK := V_DBLINTNMLACRBANK + V_DBLAMTBANK;
                --END NAMNT--
                --
                l_bfDueFeeAmt := ROUND(REC21.NML * REC21.CFRATE1 / 100 * l_bfDueDays / v_dblDRATE,4);
                v_dblfeeAMT := l_bfDueFeeAmt;
                v_dblFEEINTNMLACR := v_dblFEEINTNMLACR + l_bfDueFeeAmt;
              END IF;
              -- Tien Phi Rate2
              IF l_dueDays > 0 THEN
                l_dueAmt := ROUND(REC21.NML * REC21.RATE2 / 100 * l_dueDays / v_dblDRATE,4);
                v_dblAMT := v_dblAMT + l_dueAmt;
                v_dblINTNMLACR := v_dblINTNMLACR + l_dueAmt;
                --
                l_dueFeeAmt := ROUND(REC21.NML * REC21.CFRATE2 / 100 * l_dueDays / v_dblDRATE,4);
                v_dblFEEAMT := v_dblFEEAMT + l_dueFeeAmt;
                v_dblFEEINTNMLACR := v_dblFEEINTNMLACR + l_dueFeeAmt;
              END IF;

              IF l_bfDueAmt > 0 OR V_DBLAMTBANK > 0 OR l_bfDueFeeAmt > 0 THEN
                  INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT,Cfirrate,Feeintamt, LNSCHDID)
                  VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'I', REC21.ACRDATE, rec21.duedate, 'S', REC21.RATE1, REC21.NML, l_bfDueAmt,rec21.cfrate2,l_bfDueFeeAmt, REC21.AUTOID);
              END IF;
              IF l_dueAmt > 0 OR l_dueFeeAmt > 0  THEN
                  INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT,Cfirrate,Feeintamt, LNSCHDID)
                  VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'I', GREATEST(REC21.ACRDATE, rec21.duedate), TO_DATE(V_INDATE,'dd/mm/rrrr'), 'S', REC21.RATE2, REC21.NML, l_dueAmt,rec21.cfrate2,l_dueFeeAmt, REC21.AUTOID);
              END IF;
              IF v_dblAMT > 0 OR v_dblFEEAMT > 0 THEN
                INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID,FEEINTNMLACR)
                VALUES(REC21.AUTOID, NULL, TO_DATE(v_strCURRDATE,'dd/mm/yyyy'), 0, 0, 0, v_dblAMT, 0, 0, 0, 0, 0, 0, 0 ,0,v_dblFEEAMT);
              END IF;

              UPDATE LNSCHD SET ACRDATE = TO_DATE(V_INDATE,'dd/mm/yyyy'), INTNMLACR = INTNMLACR + v_dblAMT,FEEINTNMLACR = FEEINTNMLACR + v_dblFEEAMT,DUE='N' WHERE AUTOID = REC21.AUTOID;
            END LOOP;
            --LAI BAC THANG
            FOR REC21_BT IN
                (SELECT AUTOID, NML, ACRDATE, REFTYPE,cfRATE1, rate1, RATE2, CFRATE2, dueDate, overDueDate, isPayBank
                 FROM LNSCHDEXT
                 WHERE ACCTNO=  REC.ACCTNO AND NML > 0
                 AND DUEDATE < TO_DATE(V_INDATE,'dd/mm/rrrr')
                 AND OVERDUEDATE >= TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='P')
            LOOP
              IF REC21_BT.acrdate < REC21_BT.duedate THEN
                l_bfDueDays := REC21_BT.duedate - REC21_BT.acrdate;
                l_dueDays := TO_DATE(v_indate, systemnums.C_DATE_FORMAT) - REC21_BT.duedate;
              ELSE
                l_bfDueDays := 0;
                l_dueDays := TO_DATE(v_indate, systemnums.C_DATE_FORMAT) - REC21_BT.acrdate;
              END IF;
              --
              v_dblAMT := 0;
              --v_dblINTNMLACR := 0; --1.5.7.9|MSBS-1952 Bo reset Lai Tinh tren lnmast
              V_DBLAMTBANK := 0;
              v_dblfeeAMT := 0;
              -- So Tien Phi RATE1
              IF l_bfDueDays > 0 THEN
                l_bfDueAmt := ROUND(REC21_BT.NML * REC21_BT.RATE1 / 100 * l_bfDueDays / v_dblDRATE,4);
                v_dblAMT := l_bfDueAmt;
                v_dblINTNMLACR := v_dblINTNMLACR + l_bfDueAmt;
                --NAMNT
                --v_dblamtbank:= DECODE( REC.ISPAYBANK,'Y', ROUND(REC1.NML * (REC1.RATE2-REC1.RATE1) / 100 * v_intDAYS / v_dblDRATE,4),0);
                IF REC21_BT.ISPAYBANK = 'Y' THEN
                  V_DBLAMTBANK := ROUND(REC21_BT.NML * GREATEST((REC21_BT.RATE2-REC21_BT.RATE1),0) / 100 * l_bfDueDays / v_dblDRATE,4);
                END IF;
                V_DBLINTNMLACRBANK := V_DBLINTNMLACRBANK + V_DBLAMTBANK;
                --END NAMNT--
                --
                l_bfDueFeeAmt := ROUND(REC21_BT.NML * REC21_BT.CFRATE1 / 100 * l_bfDueDays / v_dblDRATE,4);
                v_dblfeeAMT := l_bfDueFeeAmt;
                v_dblFEEINTNMLACR := v_dblFEEINTNMLACR + l_bfDueFeeAmt;
              END IF;
              -- Tien Phi Rate2
              IF l_dueDays > 0 THEN
                l_dueAmt := ROUND(REC21_BT.NML * REC21_BT.RATE2 / 100 * l_dueDays / v_dblDRATE,4);
                v_dblAMT := v_dblAMT + l_dueAmt;
                v_dblINTNMLACR := v_dblINTNMLACR + l_dueAmt;
                --
                l_dueFeeAmt := ROUND(REC21_BT.NML * REC21_BT.CFRATE2 / 100 * l_dueDays / v_dblDRATE,4);
                v_dblFEEAMT := v_dblFEEAMT + l_dueFeeAmt;
                v_dblFEEINTNMLACR := v_dblFEEINTNMLACR + l_dueFeeAmt;
              END IF;

              IF l_bfDueAmt > 0 OR V_DBLAMTBANK > 0 OR l_bfDueFeeAmt > 0 THEN
                  INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT,Cfirrate,Feeintamt, LNSCHDID)
                  VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'I', REC21_BT.ACRDATE, REC21_BT.duedate, 'S', REC21_BT.RATE1, REC21_BT.NML, l_bfDueAmt,REC21_BT.cfrate2,l_bfDueFeeAmt, REC21_BT.AUTOID);
              END IF;
              IF l_dueAmt > 0 OR l_dueFeeAmt > 0  THEN
                  INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT,Cfirrate,Feeintamt, LNSCHDID)
                  VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'I', GREATEST(REC21_BT.ACRDATE, REC21_BT.duedate), TO_DATE(V_INDATE,'dd/mm/rrrr'), 'S', REC21_BT.RATE2, REC21_BT.NML, l_dueAmt,REC21_BT.cfrate2,l_dueFeeAmt, REC21_BT.AUTOID);
              END IF;
              IF v_dblAMT > 0 OR v_dblFEEAMT > 0 THEN
                INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID,FEEINTNMLACR)
                VALUES(REC21_BT.AUTOID, NULL, TO_DATE(v_strCURRDATE,'dd/mm/yyyy'), 0, 0, 0, v_dblAMT, 0, 0, 0, 0, 0, 0, 0 ,0,v_dblFEEAMT);
              END IF;

              UPDATE LNSCHD SET ACRDATE = TO_DATE(V_INDATE,'dd/mm/yyyy'), INTNMLACR = INTNMLACR + v_dblAMT,FEEINTNMLACR = FEEINTNMLACR + v_dblFEEAMT,DUE='N' WHERE AUTOID = REC21_BT.AUTOID;
            END LOOP;
            --
          END IF;
        END IF;

        -- Tinh lai vay T0

        IF REC.OPRINNML > 0 THEN
            FOR REC3 IN
                (SELECT AUTOID, NML, ACRDATE, REFTYPE, MINTERMDATE FROM LNSCHD WHERE ACCTNO=  REC.ACCTNO AND NML > 0 AND DUEDATE >= TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='GP')
            LOOP
                v_intDAYS:= TO_DATE(V_INDATE,'dd/mm/yyyy') - REC3.ACRDATE;
                v_dblAMT:= ROUND(REC3.NML * REC.ORATE1 / 100 * v_intDAYS / v_dblDRATE,4);
                v_dblOINTNMLACR:= v_dblOINTNMLACR + v_dblAMT;
                If v_dblAMT > 0 then
                    INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT, LNSCHDID)
                    VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'GI', REC3.ACRDATE, TO_DATE(V_INDATE,'dd/mm/yyyy'), 'S', REC.ORATE1, REC3.NML, v_dblAMT,REC3.AUTOID);
                    INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID)
                    VALUES(REC3.AUTOID, NULL, TO_DATE(v_strCURRDATE,'dd/mm/yyyy'), 0, 0, 0, v_dblAMT, 0, 0, 0, 0, 0, 0, 0 ,0);
                End If;
                UPDATE LNSCHD SET ACRDATE = TO_DATE(V_INDATE,'dd/mm/yyyy'), INTNMLACR = INTNMLACR + v_dblAMT,DUE='N' WHERE AUTOID = REC3.AUTOID;
                --Du tru lai cho mon BL
                v_intDAYS:= REC3.MINTERMDATE - TO_DATE(V_INDATE,'dd/mm/yyyy');
                v_dblAMT:= ROUND(REC3.NML * REC.ORATE1 / 100 * v_intDAYS / v_dblDRATE,4);
                UPDATE lnmast SET intnmlpbl = intnmlpbl + v_dblAMT WHERE ACCTNO = REC.ACCTNO;
                --End du tru lai cho mon BL
            END LOOP;

            FOR REC4 IN
                (SELECT AUTOID, NML, ACRDATE, REFTYPE FROM LNSCHD WHERE ACCTNO=  REC.ACCTNO AND NML > 0 AND DUEDATE < TO_DATE(V_INDATE,'dd/mm/rrrr') AND OVERDUEDATE >= TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='GP')
            LOOP
                v_intDAYS:= TO_DATE(V_INDATE,'dd/mm/yyyy') - REC4.ACRDATE;
                v_dblAMT:= ROUND(REC4.NML * REC.ORATE2 / 100 * v_intDAYS / v_dblDRATE,4);
                v_dblOINTNMLACR:= v_dblOINTNMLACR + v_dblAMT;
                If v_dblAMT > 0 then
                    INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT, LNSCHDID)
                    VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'GI', REC4.ACRDATE, TO_DATE(V_INDATE,'dd/mm/yyyy'), 'S', REC.ORATE2, REC4.NML, v_dblAMT, REC4.AUTOID);
                    INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID)
                    VALUES(REC4.AUTOID, NULL, TO_DATE(v_strCURRDATE,'dd/mm/yyyy'), 0, 0, 0, v_dblAMT, 0, 0, 0, 0, 0, 0, 0 ,0);
                End If;
                UPDATE LNSCHD SET ACRDATE = TO_DATE(V_INDATE,'dd/mm/yyyy'), INTNMLACR = INTNMLACR + v_dblAMT,DUE='N' WHERE AUTOID = REC4.AUTOID;
            END LOOP;
        END IF;

        -- Lai tren goc qua han
        -- Lai margin
        IF REC.PRINOVD > 0 THEN
            FOR REC5 IN
                (SELECT AUTOID, OVD, OVDACRDATE, REFTYPE,RATE3,CFRATE3, RATE2,CFRATE2,FEEINTNMLOVD, INTOVD  FROM LNSCHD WHERE ACCTNO=  REC.ACCTNO AND OVD > 0 AND OVERDUEDATE < TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='P'
                )
            LOOP
                -- Phi quan ly lai QH & Phi tren lai QH & Phi tren phi QH:
                if REC.INTOVDCD = 'Y' then

                    v_intDAYS:= TO_DATE(V_INDATE,'dd/mm/yyyy') - REC5.OVDACRDATE;
                    v_dblINTOVDACR:= v_dblINTOVDACR + 0;

                    l_fee_ovd:= ROUND((REC5.OVD + REC5.INTOVD + REC5.FEEINTNMLOVD) * REC5.CFRATE3 / 100 * v_intDAYS / v_dblDRATE,4);
                    l_fee_intovd:= ROUND(REC5.INTOVD * REC5.RATE2 / 100 * v_intDAYS / v_dblDRATE,4);
                    l_fee_feeintovdacr:= ROUND(REC5.FEEINTNMLOVD * REC5.RATE2 / 100 * v_intDAYS / v_dblDRATE,4);

                    --
                    If  (l_fee_ovd > 0 OR l_fee_intovd > 0 or l_fee_feeintovdacr > 0 )  then
                        -- l_fee_ovd: Phi quan ly qua han
                        INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT,CFIRRATE,FEEINTAMT, LNSCHDID)
                        VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'FO', REC5.OVDACRDATE, TO_DATE(V_INDATE,'dd/mm/yyyy'), 'S', REC5.RATE3, (REC5.OVD + REC5.INTOVD + REC5.FEEINTNMLOVD), 0,rec5.cfrate3,l_fee_ovd, REC5.AUTOID);
                        INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID,FEEINTOVDPRIN)
                        VALUES(REC5.AUTOID, NULL, TO_DATE(v_strCURRDATE,'dd/mm/yyyy'), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0,l_fee_ovd);
                        -- l_fee_intovd: Lai tren lai qua han
                        INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT,CFIRRATE,FEEINTAMT, LNSCHDID)
                        VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'FIO', REC5.OVDACRDATE, TO_DATE(V_INDATE,'dd/mm/yyyy'), 'S', REC5.RATE2, REC5.INTOVD, 0,rec5.cfrate2,l_fee_intovd, REC5.AUTOID);
                        INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID,FEEINTOVDPRIN)
                        VALUES(REC5.AUTOID, NULL, TO_DATE(v_strCURRDATE,'dd/mm/yyyy'), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0,l_fee_intovd);
                        -- l_fee_feeintovdacr: Lai tren phi qua han
                        INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT,CFIRRATE,FEEINTAMT, LNSCHDID)
                        VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'FFO', REC5.OVDACRDATE, TO_DATE(V_INDATE,'dd/mm/yyyy'), 'S', REC5.RATE2, REC5.FEEINTNMLOVD, 0,rec5.cfrate3,l_fee_feeintovdacr, REC5.AUTOID);
                        INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID,FEEINTOVDPRIN)
                        VALUES(REC5.AUTOID, NULL, TO_DATE(v_strCURRDATE,'dd/mm/yyyy'), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0,l_fee_feeintovdacr);
                    End If;
                    --rec not in bt
					          v_dblamt_t := 0;
                    for rec5_NBT in
                      (SELECT AUTOID, OVD, OVDACRDATE, REFTYPE,RATE3,CFRATE3, RATE2,CFRATE2,FEEINTNMLOVD, INTOVD  FROM LNSCHD WHERE ACCTNO=  REC.ACCTNO AND OVD > 0 AND OVERDUEDATE < TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='P'
                       and autoid=rec5.AUTOID
                       AND NOT EXISTS (SELECT 1 FROM LNSCHDEXT l WHERE ACCTNO=  REC.ACCTNO AND OVD > 0 AND OVERDUEDATE < TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='P' AND l.autoid = autoid)) --MSBS-2589
                    loop
					              v_dblAMT:= ROUND(rec5_NBT.OVD * rec5_NBT.RATE3 / 100 * v_intDAYS / v_dblDRATE,4);
                        -- l_fee_ovd: Phi quan ly qua han
                        INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT,CFIRRATE,FEEINTAMT, LNSCHDID)
                        VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'O', rec5_NBT.OVDACRDATE, TO_DATE(V_INDATE,'dd/mm/yyyy'), 'S', rec5_NBT.RATE3, rec5_NBT.OVD, 0,rec5_NBT.rate3,v_dblAMT, REC5.AUTOID);
                        INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID,FEEINTOVDPRIN)
                        VALUES(REC5.AUTOID, NULL, TO_DATE(v_strCURRDATE,'dd/mm/yyyy'), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0,v_dblAMT);
                        v_dblamt_t :=  v_dblAMT;
                    end loop;
                  --rec in bac thang
                  for rec5_IBT in
                    (SELECT AUTOID, OVD, OVDACRDATE, REFTYPE,RATE3,CFRATE3, RATE2,CFRATE2,FEEINTNMLOVD, INTOVD  FROM LNSCHDEXT  WHERE ACCTNO=  REC.ACCTNO AND OVD > 0 AND OVERDUEDATE < TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='P'and autoid=rec5.AUTOID)
                  loop
                         v_dblAMT:= ROUND(rec5_IBT.OVD * rec5_IBT.RATE3 / 100 * v_intDAYS / v_dblDRATE,4);
                        -- l_fee_ovd: Phi quan ly qua han
                        INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT,CFIRRATE,FEEINTAMT, LNSCHDID)
                        VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'O', rec5_IBT.OVDACRDATE, TO_DATE(V_INDATE,'dd/mm/yyyy'), 'S', rec5_IBT.RATE3, rec5_IBT.OVD, 0,rec5_IBT.rate3,v_dblAMT, REC5.AUTOID);
                        INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID,FEEINTOVDPRIN)
                        VALUES(REC5.AUTOID, NULL, TO_DATE(v_strCURRDATE,'dd/mm/yyyy'), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0,v_dblAMT);
                        v_dblamt_t := v_dblamt_t + v_dblAMT;
                  end loop;
                    v_dblfeeintovdacr:= v_dblfeeintovdacr + l_fee_ovd + l_fee_intovd + l_fee_feeintovdacr + v_dblamt_t;

                    UPDATE LNSCHD
                    SET OVDACRDATE = TO_DATE(V_INDATE,'dd/mm/yyyy'),
                        FEEINTOVDACR = FEEINTOVDACR + l_fee_ovd + l_fee_intovd + l_fee_feeintovdacr + v_dblamt_t
                    WHERE AUTOID = REC5.AUTOID;
                else

                    v_intDAYS:= TO_DATE(V_INDATE,'dd/mm/yyyy') - REC5.OVDACRDATE;
					          v_dblamt_t := 0;
                    ---- not in lai bactang
                    for rec51_NBT in
                      (SELECT AUTOID, OVD, OVDACRDATE, REFTYPE,RATE3,CFRATE3, RATE2,CFRATE2,FEEINTNMLOVD, INTOVD  FROM LNSCHD WHERE ACCTNO=  REC.ACCTNO AND OVD > 0 AND OVERDUEDATE < TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='P'
                       and autoid=rec5.AUTOID
                       AND NOT EXISTS (SELECT 1 FROM LNSCHDEXT l WHERE ACCTNO=  REC.ACCTNO AND OVD > 0 AND OVERDUEDATE < TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='P' AND l.autoid = autoid)) --MSBS-2589
                    loop
                    v_dblAMT:= ROUND(rec51_NBT.OVD * rec51_NBT.RATE3 / 100 * v_intDAYS / v_dblDRATE,4);
                    v_dblINTOVDACR:= v_dblINTOVDACR + v_dblAMT;
                    --
                    v_dblFEEAMT:= ROUND(rec51_NBT.OVD * rec51_NBT.CFRATE3 / 100 * v_intDAYS / v_dblDRATE,4);
                    v_dblfeeintovdacr:= v_dblfeeintovdacr + v_dblFEEAMT;
                    --
                    If  (v_dblAMT > 0 OR v_dblFEEAMT > 0)  then
                        INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT,CFIRRATE,FEEINTAMT, LNSCHDID)
                        VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'O', rec51_NBT.OVDACRDATE, TO_DATE(V_INDATE,'dd/mm/yyyy'), 'S', rec51_NBT.RATE3, rec51_NBT.OVD, v_dblAMT,rec51_NBT.cfrate3,v_dblFEEAMT, REC5.AUTOID);
                        INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID,FEEINTOVDPRIN)
                        VALUES(REC5.AUTOID, NULL, TO_DATE(v_strCURRDATE,'dd/mm/yyyy'), 0, 0, 0, 0, 0, 0, 0, v_dblAMT, 0, 0, 0 ,0,v_dblFEEAMT);
                    End If;
                        v_dblamt_t :=  v_dblAMT;
                    end loop;
                    --
                    ----  in lai bactang
                    for rec51_IBT in
                      (SELECT AUTOID, OVD, OVDACRDATE, REFTYPE,RATE3,CFRATE3, RATE2,CFRATE2,FEEINTNMLOVD, INTOVD  FROM LNSCHDEXT  WHERE ACCTNO=  REC.ACCTNO AND OVD > 0 AND OVERDUEDATE < TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='P'and autoid=rec5.AUTOID)
                    loop
                    v_dblAMT:= ROUND(rec51_IBT.OVD * rec51_IBT.RATE3 / 100 * v_intDAYS / v_dblDRATE,4);
                    v_dblINTOVDACR:= v_dblINTOVDACR + v_dblAMT;
                    --
                    v_dblFEEAMT:= ROUND(rec51_IBT.OVD * rec51_IBT.CFRATE3 / 100 * v_intDAYS / v_dblDRATE,4);
                    v_dblfeeintovdacr:= v_dblfeeintovdacr + v_dblFEEAMT;
                    --
                    If  (v_dblAMT > 0 OR v_dblFEEAMT > 0)  then
                        INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT,CFIRRATE,FEEINTAMT, LNSCHDID)
                        VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'O', rec51_IBT.OVDACRDATE, TO_DATE(V_INDATE,'dd/mm/yyyy'), 'S', rec51_IBT.RATE3, rec51_IBT.OVD, v_dblAMT,rec51_IBT.cfrate3,v_dblFEEAMT, REC5.AUTOID);
                        INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID,FEEINTOVDPRIN)
                        VALUES(REC5.AUTOID, NULL, TO_DATE(v_strCURRDATE,'dd/mm/yyyy'), 0, 0, 0, 0, 0, 0, 0, v_dblAMT, 0, 0, 0 ,0,v_dblFEEAMT);
                    End If;
                        v_dblamt_t := v_dblamt_t + v_dblAMT;
                    end loop;

                    ----
                    UPDATE LNSCHD
                    SET OVDACRDATE = TO_DATE(V_INDATE,'dd/mm/yyyy'),
                        INTOVDPRIN = INTOVDPRIN + v_dblamt_t,
                        FEEINTOVDACR = FEEINTOVDACR + v_dblFEEAMT
                    WHERE AUTOID = REC5.AUTOID;

                end if;


            END LOOP;
            ---LAI BAC THANG

        END IF;





        -- Lai T0
        IF REC.OPRINOVD > 0 THEN
            FOR REC6 IN
                (SELECT AUTOID, OVD, OVDACRDATE, REFTYPE, INTOVD, FEEINTNMLOVD FROM LNSCHD WHERE ACCTNO=  REC.ACCTNO AND OVD > 0 AND OVERDUEDATE < TO_DATE(V_INDATE,'dd/mm/rrrr') AND REFTYPE ='GP')
            LOOP
                v_intDAYS:= TO_DATE(V_INDATE,'dd/mm/yyyy') - REC6.OVDACRDATE;
                v_dblAMT:= ROUND(REC6.OVD * REC.ORATE3 / 100 * v_intDAYS / v_dblDRATE,4);
                v_dblOINTOVDACR:= v_dblOINTOVDACR + v_dblAMT;
                If v_dblAMT > 0 then
                    INSERT INTO LNINTTRAN (AUTOID, ACCTNO, INTTYPE, FRDATE, TODATE, ICRULE, IRRATE, INTBAL, INTAMT, LNSCHDID)
                    VALUES(SEQ_CIINTTRAN.NEXTVAL, REC.ACCTNO, 'GO', REC6.OVDACRDATE, TO_DATE(V_INDATE,'dd/mm/yyyy'), 'S', REC.ORATE3, REC6.OVD, v_dblAMT, REC6.AUTOID);
                    INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID)
                    VALUES(REC6.AUTOID, NULL, TO_DATE(v_strCURRDATE,'dd/mm/yyyy'), 0, 0, 0, 0, 0, 0, 0, v_dblAMT, 0, 0, 0 ,0);
                End If;


                UPDATE LNSCHD
                SET OVDACRDATE = TO_DATE(V_INDATE,'dd/mm/yyyy'),
                    INTOVDPRIN = INTOVDPRIN + v_dblAMT
                WHERE AUTOID = REC6.AUTOID;
            END LOOP;
        END IF;

        UPDATE LNMAST
            SET INTNMLACR = INTNMLACR + v_dblINTNMLACR,
                OINTNMLACR = OINTNMLACR + v_dblOINTNMLACR,
                INTOVDACR = INTOVDACR + v_dblINTOVDACR,
                OINTOVDACR = OINTOVDACR + v_dblOINTOVDACR,
                FEEINTNMLACR = FEEINTNMLACR + v_dblFEEINTNMLACR,
                FEEINTOVDACR = FEEINTOVDACR + v_dblFEEINTOVDACR,
                intnmlacrbank = intnmlacrbank +  V_DBLINTNMLACRBANK,
                ACRDATE = TO_DATE(V_INDATE,'dd/mm/yyyy'), OACRDATE = TO_DATE(V_INDATE,'dd/mm/yyyy')
        WHERE ACCTNO = REC.ACCTNO;

/*        IF REC.FTYPE<>'DF' THEN
            --UPDATE CIMAST SET ODAMT = round(REC.ODAMT,0) + round(v_dblOINTNMLACR,0) + round(v_dblINTNMLACR,0) + round(v_dblINTOVDACR,0) + round(v_dblOINTOVDACR,0)
            --WHERE ACCTNO = REC.TRFACCTNO;
            UPDATE CIMAST SET ODAMT =
            round(rec.PRINNML)+round(rec.PRINOVD)+round(rec.INTNMLACR+v_dblINTNMLACR)+round(rec.INTOVDACR+v_dblINTOVDACR)+round(rec.INTNMLOVD)+round(rec.INTDUE)-round(rec.INTPREPAID)+
            round(rec.OPRINNML)+round(rec.OPRINOVD)+round(rec.OINTNMLACR+v_dblOINTNMLACR)+round(rec.OINTOVDACR+v_dblOINTOVDACR)+round(rec.OINTNMLOVD)+
            round(rec.OINTDUE)-round(rec.OINTPREPAID)+round(rec.FEE)+round(rec.FEEDUE)+round(rec.FEEOVD)+
            +round(rec.FEEINTNMLACR+v_dblFEEINTNMLACR)+round(rec.FEEINTOVDACR+v_dblFEEINTOVDACR)+round(rec.FEEINTNMLOVD)+round(rec.FEEINTDUE)-round(rec.FEEINTPREPAID)
            WHERE ACCTNO = REC.TRFACCTNO;

        END IF;*/
    END LOOP;

    /*--Reset CIMAST.ODAMT = 0;
    UPDATE CIMAST SET ODAMT = 0;
    for rec_af in
    (
        select trfacctno, sum(PRINNML + PRINOVD + INTNMLACR + INTOVDACR + INTNMLOVD + INTDUE + INTPREPAID +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTNMLACR + FEEINTOVDACR + FEEINTNMLOVD + FEEINTDUE + FEEINTPREPAID) ODAMT
               from lnmast
               where ftype = 'AF'
               group by trfacctno
               order by trfacctno
    )
    loop -- rec_af
        UPDATE CIMAST SET ODAMT = rec_af.ODAMT
        WHERE ACCTNO = rec_af.TRFACCTNO;
    end loop; -- rec_af

    --Reset CIMAST.OVAMT = 0;
    UPDATE CIMAST SET OVAMT = 0;
    for rec_af in
    (
        select trfacctno, sum(PRINOVD + INTOVDACR + INTNMLOVD + INTPREPAID +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTOVDACR + FEEINTNMLOVD + FEEINTPREPAID) OVAMT
        from lnmast
        where ftype = 'AF'
        group by trfacctno
        order by trfacctno
    )
    loop -- rec_af
        UPDATE CIMAST SET OVAMT = rec_af.OVAMT
        WHERE ACCTNO = rec_af.TRFACCTNO;
    end loop; -- rec_af*/

    SP_GEN_LNSCHD_EXT_HIST;

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_LNNormalInterestAccrue');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_LNNormalInterestAccrue');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_LNNormalInterestAccrue;

---------------------------------pr_DFDealFeeAccrue------------------------------------------------
  PROCEDURE pr_DFDealFeeAccrue(p_err_code  OUT varchar2)
  IS
    v_nextdate varchar2(10);
    v_currdate varchar2(10);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_DFDealFeeAccrue');
    v_nextdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'NEXTDATE');
    v_currdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');
    update dfmast set intamtacr= intamtacr + round(fee * (amt-rlsamt) /100/360 *
            to_number(to_date(v_nextdate,systemnums.c_date_format)-to_date(v_currdate,systemnums.c_date_format)),4)
    where status in ('P','A');
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_DFDealFeeAccrue');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_DFDealFeeAccrue');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_DFDealFeeAccrue;

  ---------------------------------pr_SABackupData------------------------------------------------
  PROCEDURE pr_SAOnlineSynData(p_err_code  OUT varchar2)
  IS
    v_nextdate varchar2(10);
    v_currdate varchar2(10);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_SAOnlineSynData');

    prc_ol_syndata;

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_SAOnlineSynData');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_SAOnlineSynData');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_SAOnlineSynData;

    ---------------------------------pr_SABeforeBatch------------------------------------------------
  PROCEDURE pr_SABeforeBatch(p_err_code  OUT varchar2)
  IS
    v_nextdate varchar2(10);
    v_currdate varchar2(10);
    v_dblTAXRATE number;
    l_err_param varchar2(300);
    l_count NUMBER(20);
    V_overduedate DATE ;
    l_txmsg               tx.msg_rectype;
    V_INDATE varchar2(20);
    v_strDesc VARCHAR2(500);
    v_strEN_Desc VARCHAR2(500);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_SABeforeBatch');
    p_err_code:=0;
    v_currdate:= cspks_system.fn_get_sysvar('SYSTEM','CURRDATE');
    v_dblTAXRATE:=to_number(cspks_system.fn_get_sysvar('SYSTEM','ADVSELLDUTY'));
    /*--Apply tham so thay doi tren loai hinh LNTYPE xuong cac hop dong vay LNMAST
    plog.info(pkgctx,'Begin pr_LNApplyTypeToMaster');
    cspks_lnproc.pr_LNApplyTypeToMaster(p_err_code);
    plog.info(pkgctx,'End pr_LNApplyTypeToMaster');*/

    PR_NOTIFYBATCH('START');
    --chaunh log balance from cimast
    for ci in
    (select * from cimast)
    loop
        insert into log_mr4000( txdate, afacctno, balance)
        values (to_date(v_currdate,'DD/MM/RRRR'), ci.acctno, ci.balance);
    end loop;
    --end chaunh

    SELECT COUNT(1) into l_count
    FROM ODMAST A,
        (SELECT * FROM ODMAPEXT WHERE DELTD <> 'Y' AND STATUS <> 'Y' ORDER BY ORDERID) B,
        SBSECURITIES C, AFMAST D, CFMAST E , SECURITIES_INFO F
    WHERE A.ORDERID = B.ORDERID AND A.CODEID=C.CODEID AND D.ACCTNO=A.AFACCTNO AND D.CUSTID=E.CUSTID AND A.CODEID=F.CODEID
        AND A.exectype ='NS' and A.matchtype='P' and A.grporder='Y'
        and A.deltd<>'Y';

    if l_count > 0 then
        p_err_code:='-100722';
        plog.setendsection (pkgctx, 'pr_SABeforeBatch');
        return;
    end if;

    --HaiLT them de giai toa cho lenh thoan thuan tong
    for rec in
        (select * from odmast where matchtype='P' and deltd<>'Y' and remainqtty>0 )
    loop
        cspks_seproc.pr_ExecuteOD9996 (rec.orderid, p_err_code,l_err_param);
    end loop;
    --End of HaiLT them de giai toa cho lenh thoan thuan tong


    --Begin GianhVG them phan thue se thu cho lenh ban trong ngay
    --NAMNT 10/01/2015
    begin
        for rec in (
            select mst.orderid, mst.execqtty, mst.execamt
            from odmast mst, afmast af, aftype aft
            where mst.exectype in ('NS','MS')
                and mst.afacctno = af.acctno
                and af.actype = aft.actype and aft.vat='Y'
                and txdate = to_date(v_currdate,'DD/MM/RRRR')
                and mst.execqtty>0 and mst.deltd <> 'Y'


/*            select mst.orderid, mst.execqtty, mst.execamt,nvl(pit.rlsamt,0) rlsamt
            from odmast mst, afmast af, aftype aft,
                (select orgorderid, sum(qtty) pitqtty, sum(case when price<sb.parvalue then qtty*price else 0 end) 0  rlsamt
                    from sepitallocate pit, odmast od, sbsecurities sb
                    where pit.orgorderid = od.orderid and od.codeid = sb.codeid
                 group by orgorderid) pit
            where mst.exectype in ('NS','MS')
                and mst.afacctno = af.acctno
                and af.actype = aft.actype and aft.vat='Y'
                and txdate = to_date(v_currdate,'DD/MM/RRRR')
                and mst.execqtty>0 and mst.deltd <> 'Y'
                and mst.orderid = pit.orgorderid(+)
*/


        )
        loop
          update odmast set taxrate = v_dblTAXRATE, taxsellamt= round(v_dblTAXRATE * rec.execamt/100,0) where orderid = rec.orderid;
            --update odmast set taxrate = v_dblTAXRATE, taxsellamt= round(v_dblTAXRATE * (rec.execamt-rec.rlsamt)/100,0) where orderid = rec.orderid;
            pr_allocate_iod_tax(rec.orderid); --Gianh VG moi them
        end loop;

    --log lai AFPRALLOC
    insert into afpralloc_bf_batch( autoid,afacctno,prinused,codeid,alloctyp,orgorderid,txdate,txnum,restype)
    select autoid,afacctno,prinused,codeid,alloctyp,orgorderid,txdate,txnum,restype
    from AFPRALLOC;

FOR REC IN (
SELECT overduedate , LN.AUTOID  FROM lnschd LN , sbcldr SB
WHERE LN.overduedate =SB.sbdate
AND cldrtype ='000' AND holiday ='Y')

LOOP
SELECT  MAX(sbdate) INTO V_overduedate FROM sbcldr WHERE  cldrtype ='000' AND holiday ='N' AND sbdate <= REC.overduedate;

insert into lnschdlog (autoid,txdate,overduedate_old,overduedate_new)
select rec.autoid autoid, to_date(v_currdate,'DD/MM/RRRR') txdate , rec.overduedate overduedate_old, V_overduedate overduedate_new from dual ;

UPDATE lnschd SET overduedate  = V_overduedate WHERE AUTOID = REC.AUTOID;

END LOOP ;


    EXCEPTION when others then
        p_err_code := errnums.C_SYSTEM_ERROR;
        plog.error (pkgctx, 'Error when then data for buffer.');
        plog.error (pkgctx, SQLERRM || dbms_utility.format_error_backtrace);
        plog.setendsection (pkgctx, 'pr_SABeforeBatch');
        RAISE errnums.E_SYSTEM_ERROR;
    end;
    --End  GianhVG them phan thue se thu cho lenh ban trong ngay
 --Huy cac deal cap bao lanh phe duyet dang cho phe duyet

     SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='1819';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := 'pr_SAAfterBatch';
    l_txmsg.txdate:=v_CURRDATE;
    l_txmsg.busdate:=v_CURRDATE;
    l_txmsg.tltxcd:='1819';

    FOR rec IN
      (
      SELECT oln.*, cf.fullname, cf.custodycd FROM Olndetail oln , cfmast cf,afmast af
           WHERE oln.status ='P' and oln.acctno = af.acctno and af.custid =cf.custid
      )
      LOOP

               SELECT systemnums.C_BATCH_PREFIXED
                   || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
            INTO l_txmsg.txnum
            FROM DUAL;
            l_txmsg.brid:= substr(rec.ACCTNO,1,4);


          --Set cac field giao dich
            --01   C   USERID
            l_txmsg.txfields ('01').defname   := 'USERID';
            l_txmsg.txfields ('01').TYPE      := 'C';
            l_txmsg.txfields ('01').VALUE     := rec.USERID;

             --02   C   AUTOID
            l_txmsg.txfields ('02').defname   := 'AUTOID';
            l_txmsg.txfields ('02').TYPE      := 'C';
            l_txmsg.txfields ('02').VALUE     := rec.AUTOID;

            --03   C   ACCTNO
            l_txmsg.txfields ('03').defname   := 'ACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;

            --10   N   TOAMT
            l_txmsg.txfields ('10').defname   := 'TOAMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := rec.TOAMT;
            --11   N   ACCLIMIT
            l_txmsg.txfields ('11').defname   := 'ACCLIMIT';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := rec.ACCLIMIT;

            --12   N   RLIMIT
            l_txmsg.txfields ('12').defname   := 'RLIMIT';
            l_txmsg.txfields ('12').TYPE      := 'N';
            l_txmsg.txfields ('12').VALUE     := rec.RLIMIT;

            --13   N   ACCUSED
            l_txmsg.txfields ('13').defname   := 'ACCUSED';
            l_txmsg.txfields ('13').TYPE      := 'N';
            l_txmsg.txfields ('13').VALUE     := rec.ACCUSED;

            --16   N   CUSTAVLLIMIT
            l_txmsg.txfields ('16').defname   := 'CUSTAVLLIMIT';
            l_txmsg.txfields ('16').TYPE      := 'N';
            l_txmsg.txfields ('16').VALUE     := rec.CUSTAVLLIMIT;

            --21    N   PERIOD
            l_txmsg.txfields ('21').defname   := 'PERIOD';
            l_txmsg.txfields ('21').TYPE      := 'N';
            l_txmsg.txfields ('21').VALUE     := REC.PERIOD;

            --22    N   T0AMTUSED
            l_txmsg.txfields ('22').defname   := 'T0AMTUSED';
            l_txmsg.txfields ('22').TYPE      := 'N';
            l_txmsg.txfields ('22').VALUE     := REC.T0AMTUSED;

            --23    N   T0AMTPENDING
            l_txmsg.txfields ('23').defname   := 'T0AMTPENDING';
            l_txmsg.txfields ('23').TYPE      := 'N';
            l_txmsg.txfields ('23').VALUE     := REC.T0AMTPENDING;

            --26    N   TLID
            l_txmsg.txfields ('26').defname   := 'TLID';
            l_txmsg.txfields ('26').TYPE      := 'N';
            l_txmsg.txfields ('26').VALUE     := REC.TLID;

            --30   C   DESC
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := v_strDESC;

            --43   N   T0DEB
            l_txmsg.txfields ('43').defname   := 'T0DEB';
            l_txmsg.txfields ('43').TYPE      := 'N';
            l_txmsg.txfields ('43').VALUE     := rec.T0DEB;

            --88   C   DESC
            l_txmsg.txfields ('88').defname   := 'CUSTODYCD';
            l_txmsg.txfields ('88').TYPE      := 'C';
            l_txmsg.txfields ('88').VALUE     := rec.CUSTODYCD;

            BEGIN
                IF txpks_#1819.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 1819: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;


        END LOOP;

    --fix cac table can thiet de tranh chay cham
    PR_GATHER_TABLE_BEFORE_BATCH;
    --end fix cac table can thiet de tranh chay cham

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_SABeforeBatch');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM  || dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_SABeforeBatch');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_SABeforeBatch;


    ---------------------------------pr_SAAfterBatch------------------------------------------------
  PROCEDURE pr_SAAfterInDayProcess(p_err_code  OUT varchar2)
  IS

    l_txmsg               tx.msg_rectype;
    v_nextdate varchar2(10);
    v_currdate varchar2(10);
    l_maxdebtqttyrate number(20,4);
    l_maxdebtse number(20,0);
    l_iratio number(20,4);
    V_INDATE varchar2(20);
    v_strDesc VARCHAR2(500);
    v_strEN_Desc VARCHAR2(500);
    l_err_param varchar2(300);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_SAAfterBatch');
    -- update cimast set odamt
    --Reset CIMAST.ODAMT = 0;
--Begin MSBS-2589
    UPDATE CIMAST SET ODAMT = 0 WHERE odamt <> 0;
    /*for rec_af in
    (
        select trfacctno, sum(PRINNML + PRINOVD + INTNMLACR + INTOVDACR + INTNMLOVD + INTDUE + INTPREPAID + INTNMLPBL +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTNMLACR + FEEINTOVDACR + FEEINTNMLOVD + FEEINTDUE + FEEINTPREPAID) ODAMT
               from lnmast
               where ftype = 'AF'
               group by trfacctno
               order by trfacctno
    )
    loop -- rec_af
        UPDATE CIMAST SET ODAMT = rec_af.ODAMT
        WHERE ACCTNO = rec_af.TRFACCTNO;
    end loop;*/ -- rec_af

    MERGE INTO cimast ci
    USING(select trfacctno, sum(PRINNML + PRINOVD + INTNMLACR + INTOVDACR + INTNMLOVD + INTDUE + INTPREPAID + INTNMLPBL +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTNMLACR + FEEINTOVDACR + FEEINTNMLOVD + FEEINTDUE + FEEINTPREPAID) ODAMT
               from lnmast
               where ftype = 'AF'
               group by trfacctno
               order by trfacctno) ln
    ON (ci.acctno = ln.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET ODAMT = ln.ODAMT;

    -- update cimast set dueamt
    V_INDATE:= cspks_system.fn_get_sysvar('SYSTEM','CURRDATE');

    UPDATE CIMAST SET DUEAMT = 0 WHERE dueamt <> 0;
    /*FOR REC IN
    (
        select m.trfacctno, sum(nml + INTDUE + FEEINTDUE) nml
        from
        (SELECT ACCTNO, SUM(NML) NML
            FROM LNSCHD
            WHERE OVERDUEDATE = TO_DATE(V_INDATE,'DD/MM/YYYY') AND nml + INTDUE + FEEINTDUE > 0 AND REFTYPE IN ('P') group by acctno) S,
            LNMAST M
        where S.ACCTNO = M.ACCTNO AND M.STATUS NOT IN ('P','R','C') and M.FTYPE<>'DF'
        GROUP BY M.TRFACCTNO
        order by trfacctno
    )
    LOOP
        UPDATE CIMAST SET DUEAMT = round(DUEAMT + REC.NML,0) WHERE ACCTNO = REC.TRFACCTNO;
    END LOOP;*/

    MERGE INTO cimast ci
    USING(select m.trfacctno, sum(nml + INTDUE + FEEINTDUE) nml
        from
        (SELECT ACCTNO, SUM(NML) NML
            FROM LNSCHD
            WHERE OVERDUEDATE = TO_DATE(V_INDATE,'DD/MM/YYYY') AND nml + INTDUE + FEEINTDUE > 0 AND REFTYPE IN ('P') group by acctno) S,
            LNMAST M
        where S.ACCTNO = M.ACCTNO AND M.STATUS NOT IN ('P','R','C') and M.FTYPE<>'DF'
        GROUP BY M.TRFACCTNO
        order by trfacctno) ln
    ON (ci.acctno = ln.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET DUEAMT = round(DUEAMT + ln.NML,0);

    -- update cimast set ovamt
    --Reset CIMAST.OVAMT = 0;
    UPDATE CIMAST SET OVAMT = 0 WHERE ovamt <> 0;
    /*for rec_af in
    (
        select trfacctno, sum(PRINOVD + INTOVDACR + INTNMLOVD + INTPREPAID + INTNMLPBL +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTOVDACR + FEEINTNMLOVD + FEEINTPREPAID) OVAMT
        from lnmast
        where ftype = 'AF'
        group by trfacctno
        order by trfacctno
    )
    loop -- rec_af
        UPDATE CIMAST SET OVAMT = rec_af.OVAMT
        WHERE ACCTNO = rec_af.TRFACCTNO;
    end loop;*/ -- rec_af

    MERGE INTO cimast ci
    USING(select trfacctno, sum(PRINOVD + INTOVDACR + INTNMLOVD + INTPREPAID + INTNMLPBL +
                                OPRINNML + OPRINOVD + OINTNMLACR + OINTOVDACR + OINTNMLOVD + OINTDUE + OINTPREPAID +
                                FEE + FEEDUE + FEEOVD + FEEINTOVDACR + FEEINTNMLOVD + FEEINTPREPAID) OVAMT
        from lnmast
        where ftype = 'AF'
        group by trfacctno
        order by trfacctno) ln
    ON (ci.acctno = ln.trfacctno)
    WHEN MATCHED THEN
      UPDATE SET OVAMT = ln.OVAMT;
--End MSBS-2589

      update securities_info
         set dfrefprice         = fn_get_refprice_nextdate(codeid, AVGPRICE, 2),
             margincallprice    = fn_get_refprice_nextdate(codeid, AVGPRICE, 2),
             marginrefcallprice = fn_get_refprice_nextdate(codeid, AVGPRICE, 2);
    -- Ducnv them tu dong gom bang ke MSBS chi chay batch 1 lan nen gen bang ke o buoc cuoi
    -- cspks_rmproc.sp_exec_create_crbtrflog_ALL;
    --Huy cac deal cap bao lanh phe duyet dang cho phe duyet
          SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='1819';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
                        l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := 'pr_SAAfterBatch';
    l_txmsg.txdate:=v_CURRDATE;
    l_txmsg.busdate:=v_CURRDATE;
    l_txmsg.tltxcd:='1819';
             FOR rec IN
      (
      SELECT oln.*, cf.fullname, cf.custodycd FROM Olndetail oln , cfmast cf,afmast af
           WHERE oln.status ='P' and oln.acctno = af.acctno and af.custid =cf.custid
      )
      LOOP
                            SELECT systemnums.C_BATCH_PREFIXED
                   || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
            INTO l_txmsg.txnum
            FROM DUAL;
            l_txmsg.brid:= substr(rec.ACCTNO,1,4);

          --Set cac field giao dich
            --01   C   USERID
            l_txmsg.txfields ('01').defname   := 'USERID';
            l_txmsg.txfields ('01').TYPE      := 'C';
            l_txmsg.txfields ('01').VALUE     := rec.USERID;

             --02   C   AUTOID
            l_txmsg.txfields ('02').defname   := 'AUTOID';
            l_txmsg.txfields ('02').TYPE      := 'C';
            l_txmsg.txfields ('02').VALUE     := rec.AUTOID;

            --03   C   ACCTNO
            l_txmsg.txfields ('03').defname   := 'ACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;

            --10   N   TOAMT
            l_txmsg.txfields ('10').defname   := 'TOAMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := rec.TOAMT;
            --11   N   ACCLIMIT
            l_txmsg.txfields ('11').defname   := 'ACCLIMIT';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := rec.ACCLIMIT;

            --12   N   RLIMIT
            l_txmsg.txfields ('12').defname   := 'RLIMIT';
            l_txmsg.txfields ('12').TYPE      := 'N';
            l_txmsg.txfields ('12').VALUE     := rec.RLIMIT;

            --13   N   ACCUSED
            l_txmsg.txfields ('13').defname   := 'ACCUSED';
            l_txmsg.txfields ('13').TYPE      := 'N';
            l_txmsg.txfields ('13').VALUE     := rec.ACCUSED;

            --16   N   CUSTAVLLIMIT
            l_txmsg.txfields ('16').defname   := 'CUSTAVLLIMIT';
            l_txmsg.txfields ('16').TYPE      := 'N';
            l_txmsg.txfields ('16').VALUE     := rec.CUSTAVLLIMIT;

            --21    N   PERIOD
            l_txmsg.txfields ('21').defname   := 'PERIOD';
            l_txmsg.txfields ('21').TYPE      := 'N';
            l_txmsg.txfields ('21').VALUE     := REC.PERIOD;

            --22    N   T0AMTUSED
            l_txmsg.txfields ('22').defname   := 'T0AMTUSED';
            l_txmsg.txfields ('22').TYPE      := 'N';
            l_txmsg.txfields ('22').VALUE     := REC.T0AMTUSED;

            --23    N   T0AMTPENDING
            l_txmsg.txfields ('23').defname   := 'T0AMTPENDING';
            l_txmsg.txfields ('23').TYPE      := 'N';
            l_txmsg.txfields ('23').VALUE     := REC.T0AMTPENDING;

            --26    N   TLID
            l_txmsg.txfields ('26').defname   := 'TLID';
            l_txmsg.txfields ('26').TYPE      := 'N';
            l_txmsg.txfields ('26').VALUE     := REC.TLID;

            --30   C   DESC
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := v_strDESC;

            --43   N   T0DEB
            l_txmsg.txfields ('43').defname   := 'T0DEB';
            l_txmsg.txfields ('43').TYPE      := 'N';
            l_txmsg.txfields ('43').VALUE     := rec.T0DEB;

            --88   C   DESC
            l_txmsg.txfields ('88').defname   := 'CUSTODYCD';
            l_txmsg.txfields ('88').TYPE      := 'C';
            l_txmsg.txfields ('88').VALUE     := rec.CUSTODYCD;
            BEGIN
                IF txpks_#1819.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 1819: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;


        END LOOP;
  --PhuongHT add
    pr_gencibufall;
    -- end of PhuongHT add
    p_err_code:=0;
    PR_NOTIFYBATCH('END');
    plog.setendsection(pkgctx, 'pr_SAAfterBatch');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_SAAfterBatch');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_SAAfterInDayProcess;

    ---------------------------------pr_SAAfterBatch------------------------------------------------
  PROCEDURE pr_SAAfterBatch(p_err_code  OUT varchar2)
  IS
    v_nextdate          varchar2(10);
    v_currdate          varchar2(10);
    l_maxdebtqttyrate   number(20,4);
    l_maxdebtse         number(20,0);
    l_iratio            number(20,4);
    v_prinused          number;
    v_nextmonth2        VARCHAR2(2);
    v_nextmonth1        VARCHAR2(2);
    v_currmonth         VARCHAR2(2);
    v_count             NUMBER;
    v_currmonth1        VARCHAR2(2);
    l_hnx_ceiling_ratio number(20,4);
    l_upcom_ceiling_ratio  number(20,4);
    l_hsx_ceiling_ratio number(20,4);

    l_hnx_floor_ratio   number(20,4);
    l_upcom_floor_ratio number(20,4);
    l_hsx_floor_ratio   number(20,4);
    V_VARVALUE          DATE;
    v_strSQL            VARCHAR2(100);
    --1.7.1.9
    v_curdate           date;
    v_prevdate          date;
    v_endweek           date;
    v_endmonth          date;
    v_mendmonth         DATE;
    l_datasource        varchar2(1000);
    l_afchallenge       varchar2(100);
    l_fdate             DATE;
    l_todate            DATE;

    v_count_rate        number(2);
    v_count_mail        number(2);
    --

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_SAAfterBatch');
    --1.7.1.9
    select to_date(varvalue,'dd/mm/rrrr') into v_curdate from sysvar where grname='SYSTEM' and varname='CURRDATE';
    select to_date(varvalue,'dd/mm/rrrr') into v_prevdate from sysvar where grname='SYSTEM' and varname='PREVDATE';
    -- ngay cuoi tuan
    select trunc( v_prevdate +6 ,'day') into v_endweek  from dual;
    -- ngay cuoi thang
    SELECT TRUNC (LAST_DAY (v_prevdate)) into v_endmonth FROM DUAL;
    -- ngay lam viec cuoi cung cua thang
    SELECT to_date(max(sbdate),'DD/MM/RRRR') into v_mendmonth FROM sbcldr WHERE sbdate<=v_endmonth AND holiday='N';
    -- loai hinh kh tham gia cuoc thi
    SELECT varvalue INTO l_afchallenge FROM sysvar WHERE grname = 'SA' AND varname = 'AFCHALLENGE';
    -- ngay bat dau cuoc thi
    SELECT to_date(varvalue,'DD/MM/RRRR') INTO l_fdate FROM sysvar WHERE grname = 'SA' AND varname = 'FDATE_AFCHALLENGE';
    -- ngay ket thuc cuoc thi
    SELECT to_date(varvalue,'DD/MM/RRRR') INTO l_todate FROM sysvar WHERE grname = 'SA' AND varname = 'TDATE_AFCHALLENGE';

    IF v_prevdate >= l_fdate and v_prevdate <= l_todate THEN
       BEGIN
         FOR rc IN (select * from KBCHALLENGE_OUT WHERE STATUS='A')
           LOOP
                  l_datasource := 'select '''|| rc.fullname || ''' fullname,'''|| rc.custodycd||''' custodycd,'''|| rc.typename ||''' typename from dual';
                  -- chan trung mail
                  SELECT count(*) INTO v_count_mail from emaillog where templateid='2303' and datasource=l_datasource and email=rc.EMAIL and status<>'R';

                   if LENGTH(rc.email) > 0 AND v_count_mail=0 then
                        nmpks_ems.InsertEmailLog (p_email => rc.email,
                                                 p_template_id => '2303',
                                                 p_data_source => l_datasource,
                                                 p_account => rc.afacctno);
                   end if;

                   UPDATE KBCHALLENGE_OUT
                   SET STATUS='C'
                   WHERE AFACCTNO=rc.afacctno;
           END LOOP;

         IF (v_curdate > v_endweek and v_endweek>=l_fdate and v_endweek<=l_todate) OR ( v_prevdate=v_mendmonth and v_mendmonth>= l_fdate and v_mendmonth <= l_todate) THEN
          FOR rec in (SELECT af.ACCTNO, cf.custodycd,at.typename, nvl(cf.email,'') email , cf.opndate, cf.fullname, af.actype
              FROM AFMAST af, cfmast cf, aftype at
              WHERE af.custid= cf.custid
              and af.ACTYPE =l_afchallenge
              and af.actype=at.actype
              and af.acctno not in (select afacctno from KBCHALLENGE_OUT)
              --and cf.email is not null --1.7.2.5
              AND af.STATUS ='A')
            LOOP
                  IF v_curdate > v_endweek and v_endweek>=l_fdate and v_endweek<=l_todate
                     THEN
                        l_datasource := 'select '''|| rec.acctno || ''' afacctno,'''|| rec.custodycd ||''' custodycd,'''|| rec.typename ||''' typename,'''||to_char(v_prevdate,'DD/MM/RRRR')||''' fdate,'''||to_char(v_prevdate,'DD/MM/RRRR')||''' FROMDATE,'''|| rec.actype ||''' ACTYPE from dual';
                        -- chan trung mail
                        SELECT count(*) INTO v_count_mail from emaillog where templateid='2302' and datasource=l_datasource and email=rec.EMAIL and status<>'R';

                        if LENGTH(rec.email) > 0 AND v_count_mail=0 then
                        nmpks_ems.InsertEmailLog (p_email => rec.email,
                                                 p_template_id => '2302',
                                                 p_data_source => l_datasource,
                                                 p_account => rec.acctno);
                        end if;
                  END IF;
                  IF v_prevdate=v_mendmonth and v_mendmonth>= l_fdate and v_mendmonth <= l_todate
                    THEN
                     	 l_datasource := 'select '''|| rec.acctno || ''' afacctno,'''|| rec.custodycd ||''' custodycd,'''|| rec.typename ||''' typename,'''||to_char(v_prevdate,'DD/MM/RRRR')||''' fdate,'''||to_char(v_prevdate,'DD/MM/RRRR')||''' FROMDATE,'''|| rec.actype ||''' ACTYPE from dual';

                       SELECT count(*) INTO v_count_mail from emaillog where templateid='2302' and datasource=l_datasource and email=rec.EMAIL and status<>'R';

                       -- chan trung mail
                       -- vua la cuoi tuan vua la cuoi thang
                       IF v_curdate > v_endweek AND LENGTH(rec.email) > 0 AND v_count_mail<=1 THEN
                        nmpks_ems.InsertEmailLog (p_email => rec.email,
                                                 p_template_id => '2302',
                                                 p_data_source => l_datasource,
                                                 p_account => rec.acctno);
                        -- ngay cuoi thang la ngay thuong
                        ELSIF LENGTH(rec.email) > 0 AND v_count_mail=0 THEN
                         nmpks_ems.InsertEmailLog (p_email => rec.email,
                                                 p_template_id => '2302',
                                                 p_data_source => l_datasource,
                                                 p_account => rec.acctno);
                        END IF;
                  END IF;
          END LOOP;
        END IF;
       exception
         when others then
           p_err_code := errnums.C_SYSTEM_ERROR;
           plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
           return;
       END;
     --end 1.7.1.9
    END IF;

     begin
     for rc in (SELECT A1.CDCONTENT SEX, CF.FULLNAME, TBH.FDATE,TBH.TDATE, TBH.CUSTODYCD, TBH.AFACCTNO, TBH.TXDATE, CF.EMAIL,
               tbh.rate1a, tbh.rate2a, tbh.rate3a, tbh.cfrate1a, tbh.cfrate2a, tbh.cfrate3a, tbh.autoapplynew, tbh.alllnschd, tbh.lntype,
               case when tbh.alllnschd = 'Y' then '2805' else '2804' end template_id
              FROM CFMAST CF, TBLINTCHANGEHIST TBH, ALLCODE A1
              WHERE CF.CUSTODYCD = TBH.CUSTODYCD
              AND A1.CDVAL = CF.SEX
              AND A1.cdname = 'SEXEMAIL'
              AND TBH.TXDATE = v_prevdate
             --AND TBH.DELTD = 'N'
              AND TBH.STATUS = 'A'
              AND CF.STATUS = 'A'
              AND CF.EMAIL IS NOT NULL)
     loop

     -- neu co thay doi lai suat so voi lan import truoc thi moi gui mail
     SELECT count(*) INTO v_count_rate
     FROM (SELECT * FROM
     (SELECT tb.rate1a, tb.rate2a, tb.rate3a, tb.cfrate1a, tb.cfrate2a, tb.cfrate3a, tb.autoapplynew, tb.alllnschd
       FROM TBLINTCHANGEHIST tb
       WHERE tb.custodycd=rc.custodycd
       and tb.afacctno=rc.afacctno
       and (tb.tdate <rc.fdate or (tb.tdate=rc.tdate and tb.fdate=rc.fdate and tb.txdate<> rc.txdate)) --1.7.1.3: iss2378
       and tb.lntype=rc.lntype
       order by tb.tdate desc)
       WHERE rownum=1) a
     WHERE a.rate1a=rc.rate1a AND a.rate2a=rc.rate2a AND a.rate3a=rc.rate3a
       AND a.cfrate1a=rc.cfrate1a AND a.cfrate2a=rc.cfrate2a AND a.cfrate3a=rc.cfrate3a
       AND a.autoapplynew=rc.autoapplynew AND a.alllnschd=rc.alllnschd;

     IF v_count_rate=0 THEN

         l_datasource := 'select '''|| rc.FULLNAME || ''' fullname,'''|| rc.SEX || ''' sex,'''|| rc.custodycd || ''' custodycd,'''|| to_char(rc.fdate,'DD/MM/RRRR') ||''' fdate,
                         '''|| rc.CUSTODYCD ||''' custodycd,'''|| to_char(rc.fdate,'DD/MM/RRRR') ||''' FROMDATE  from dual';

         SELECT count(*) INTO v_count_mail from emaillog where templateid=rc.template_id and datasource=l_datasource and email=rc.EMAIL and status<>'R';

                      if LENGTH(rc.EMAIL) > 0 AND v_count_mail=0 then
                      nmpks_ems.InsertEmailLog (p_email => rc.EMAIL,
                                               p_template_id => rc.template_id,
                                               p_data_source => l_datasource,
                                               p_account => rc.AFACCTNO);
                      end if;
     END IF;
     end loop;
     exception
         when others then
           p_err_code := errnums.C_SYSTEM_ERROR;
           plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
           return;
     end;
    -- Ducnv them tu dong gom bang ke
    --cspks_rmproc.sp_exec_create_crbtrflog_ALL;
    if fn_gen_margininfo() <> 0 then
        p_err_code:=errnums.C_SYSTEM_ERROR;
        plog.setendsection(pkgctx, 'pr_SAAfterBatch');
        return;
    end if;

    if not cspks_cfproc.fn_ApplyTypeToMast(p_err_code)  then
        p_err_code:=errnums.C_SYSTEM_ERROR;
        plog.setendsection(pkgctx, 'pr_SAAfterBatch');
        return;
    end if;

    -- Log trigger margin account
    if not cspks_mrproc.fn_TriggerAccountLog(p_err_code)  then
        p_err_code:=errnums.C_SYSTEM_ERROR;
        plog.setendsection(pkgctx, 'pr_SAAfterBatch');
        return;
    end if;

    -- Cap nhat lai SECURITIES_INFO.ROOMLIMIT
    select to_number(varvalue)/100 into l_maxdebtqttyrate from sysvar where grname = 'MARGIN' and varname = 'MAXDEBTQTTYRATE';
    select to_number(varvalue) into l_maxdebtse from sysvar where grname = 'MARGIN' and varname = 'MAXDEBTSE';
    select 1 - to_number(varvalue)/100 into l_iratio from sysvar where grname = 'MARGIN' and varname = 'IRATIO';

    update securities_info
    set roomlimit = least(listingqtty*l_maxdebtqttyrate, l_maxdebtse/marginrefprice/l_iratio)
    where marginrefprice <> 0 and l_iratio <> 0;

    --Update lai room toan he thong va room margin theo rm thiet lap lai cuoi ngay
    for rec in (
        select * from securities_info where syroomlimit_set+roomlimitmax_set>0
    )
    loop
        --Cap nhat room he thong
        begin
            select nvl(afpr.prinused,0) + sb.syroomused into v_prinused
                from securities_info sb,
                       (select codeid, sum(prinused) prinused from vw_afpralloc_all where restype = 'S' group by codeid) afpr
                where sb.codeid = afpr.codeid(+)
                and sb.codeid = rec.codeid;
        exception when others then
            v_prinused:=0;
        end;

        update securities_info
        set syroomlimit = greatest(syroomlimit_set,v_prinused)
        where codeid = rec.codeid;
        --Cap nhat room margin
        begin
            select nvl(sum(prinused),0) into v_prinused from vw_afpralloc_all
            where restype = 'M'
            and codeid = rec.codeid;
        exception when others then
            v_prinused:=0;
        end;
        update securities_info
        set roomlimitmax = GREATEST(roomlimitmax_set,v_prinused)
        where codeid = rec.codeid;
    end loop;

    -- Release AdvanceLine:
    if cspks_mrproc.fn_ReleaseAdvanceLine(p_err_code) <> systemnums.C_SUCCESS then
        p_err_code := errnums.C_SYSTEM_ERROR;
        plog.error (pkgctx, 'Error when Release AdvanceLine.');
        plog.error (pkgctx, SQLERRM || dbms_utility.format_error_backtrace);
        plog.setendsection (pkgctx, 'pr_SAAfterBatch');
        RAISE errnums.E_SYSTEM_ERROR;
    end if;


    v_currdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');


    begin

/*
      -- Ducnv cap nhap lai gia tran san cho ngay hom sau
      --HOSE
      l_hsx_ceiling_ratio:=fn_get_ratio_by_floor_code('PRICELIMIT_HOSE','C');
      l_hsx_floor_ratio:=fn_get_ratio_by_floor_code('PRICELIMIT_HOSE','F');

      For vc in(
        SELECT h.trading_date, CODE,
               --match_PRICE*10 BASICPRICE,
               (CEILING_PRICE*10 + FLOOR_PRICE*10) /2 BASICPRICE,
               CEILING_PRICE*10 CEILINGPRICE,
               FLOOR_PRICE*10 FLOORPRICE,
               sb.avgprice, nvl(tz.ticksize,0) ticksize
        FROM HO_SEC_INFO h, securities_info sb, securities_ticksize tz
        WHERE STOCK_TYPE IN('1','3') AND sb.symbol=TRIM(h.code)
        AND sb.avgprice >= tz.fromprice(+) AND sb.avgprice <= tz.toprice(+)
            AND sb.codeid = tz.codeid(+)
         ) loop
            Update securities_info
            SET    BASICPRICE= fn_get_refprice_nextdate(codeid, nvl(VC.avgprice,0), 1),
                   CEILINGPRICE=fn_correct_price(codeid,greatest(TRUNC(fn_get_refprice_nextdate(codeid, nvl(VC.avgprice,0), 1)*l_hsx_ceiling_ratio),
                                                                 vc.ticksize + fn_get_refprice_nextdate(codeid, nvl(VC.avgprice,0), 1)),'C'),
                   FLOORPRICE=fn_correct_price(codeid,least(CEIL (fn_get_refprice_nextdate(codeid, nvl(VC.avgprice,0), 1)*l_hsx_floor_ratio),
                          fn_get_refprice_nextdate(codeid, nvl(VC.avgprice,0), 1)-vc.ticksize),'F'),
                   dfrlsprice =  fn_get_refprice_nextdate(codeid, nvl(VC.avgprice,0), 1),
                   dfrefprice  =  fn_get_refprice_nextdate(codeid, nvl(VC.avgprice,0), 1),
                   marginprice =  fn_get_refprice_nextdate(codeid, nvl(VC.avgprice,0), 1),
                   margincallprice =  fn_get_refprice_nextdate(codeid, nvl(VC.avgprice,0), 1),
                   marginrefcallprice =  fn_get_refprice_nextdate(codeid, nvl(VC.avgprice,0), 1),
                   marginrefprice =  fn_get_refprice_nextdate(codeid, nvl(VC.avgprice,0), 1)
             WHERE SYMBOL=TRIM(VC.CODE);
         End loop;
       -------Tinh san gia tran san cho HNX
l_hnx_ceiling_ratio:=fn_get_ratio_by_floor_code('PRICELIMIT_HNX','C');
l_hnx_floor_ratio:=fn_get_ratio_by_floor_code('PRICELIMIT_HNX','F');
        For VC in(
                SELECT S.SYMBOL,s.codeid, s.AVGPRICE avgprice, nvl(tz.ticksize,100) ticksize --them de tinh cho ETF
                 FROM SECURITIES_INFO S, SBSECURITIES SB, securities_ticksize tz
                 WHERE S.SYMBOL=SB.SYMBOL AND SB.TRADEPLACE = '002' and S.avgprice>0 AND s.codeid = tz.codeid(+)) loop
             update securities_info
             set        ceilingprice=greatest(TRUNC(fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1)*l_hnx_ceiling_ratio /vc.ticksize)*vc.ticksize,vc.ticksize
                                + fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1)),--nvl(vc.ceilingprice,0),
                        floorprice=least(CEIL (fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1)*l_hnx_floor_ratio/vc.ticksize)*vc.ticksize,
                                fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1)-vc.ticksize),--nvl(vc.floorprice,0),
                        basicprice= fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1),--nvl(vc.avgprice,0),
                        dfrlsprice =  fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1),--nvl(vc.avgprice,0),
                        dfrefprice  =  fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1),--nvl(vc.avgprice,0),
                        marginprice = fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1),--nvl(vc.avgprice,0),
                        margincallprice =  fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1),--nvl(vc.avgprice,0),
                        marginrefcallprice =  fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1),--nvl(vc.avgprice,0),
                        marginrefprice =  fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1)--nvl(vc.avgprice,0),
             where symbol=vc.symbol;
        End loop;
        -------Tinh san gia tran san cho UPCOM
l_upcom_ceiling_ratio:=fn_get_ratio_by_floor_code('PRICELIMIT_UPCOM','C');
l_upcom_floor_ratio:=fn_get_ratio_by_floor_code('PRICELIMIT_UPCOM','F');
        For VC in(
                SELECT S.SYMBOL,s.codeid, s.AVGPRICE avgprice, nvl(tz.ticksize,100) ticksize --them de tinh cho ETF
                 FROM SECURITIES_INFO S, SBSECURITIES SB, securities_ticksize tz
                 WHERE S.SYMBOL=SB.SYMBOL AND SB.TRADEPLACE = '005' and S.avgprice>0 AND s.codeid = tz.codeid(+)) loop
             update securities_info
             set        ceilingprice=greatest(TRUNC(fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1)*l_upcom_ceiling_ratio /vc.ticksize)*vc.ticksize,vc.ticksize
                                + fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1)),--nvl(vc.ceilingprice,0),
                        floorprice=least(CEIL (fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1)*l_upcom_floor_ratio/vc.ticksize)*vc.ticksize,
                                fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1)-vc.ticksize),--nvl(vc.floorprice,0),
                        basicprice= fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1),--nvl(vc.avgprice,0),
                        dfrlsprice =  fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1),--nvl(vc.avgprice,0),
                        dfrefprice  =  fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1),--nvl(vc.avgprice,0),
                        marginprice = fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1),--nvl(vc.avgprice,0),
                        margincallprice =  fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1),--nvl(vc.avgprice,0),
                        marginrefcallprice =  fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1),--nvl(vc.avgprice,0),
                        marginrefprice =  fn_get_refprice_nextdate(vc.codeid, vc.AVGPRICE, 1)--nvl(vc.avgprice,0),
             where symbol=vc.symbol;
        End loop;

  */
      -- LOG LAI GIA CUOI NGAY -- view VSE2284
      SELECT TO_DATE(VARVALUE,'DD/MM/RRRR') INTO V_VARVALUE FROM SYSVAR WHERE VARNAME ='PREVDATE' AND GRNAME ='SYSTEM';
      v_strSQL := ' truncate table PRICE_END_OF_DAY ' ; --MSBS-2589
      execute immediate v_strSQL;
      INSERT INTO PRICE_END_OF_DAY(CODEID,Symbol,NEWCEILINGPRICE,NEWFLOORPRICE,NEWBASICPRICE)
      SELECT se.codeid,se.symbol,se.newceilingprice,se.newfloorprice,se.newbasicprice FROM securities_info se ;
      UPDATE PRICE_END_OF_DAY SET logdate = V_VARVALUE WHERE logdate <> V_VARVALUE;

      --2016.11.06- sua lai giong ban BSC
--Begin MSBS-2589
      /*UPDATE SECURITIES_INFO
         SET BASICPRICE         = NEWBASICPRICE,
             CEILINGPRICE       = NEWCEILINGPRICE,
             FLOORPRICE         = NEWFLOORPRICE,
             DFRLSPRICE         = AVGPRICE,
             DFREFPRICE         = AVGPRICE,
             MARGINPRICE        = AVGPRICE,--fn_get_refprice_nextdate(codeid, nvl(AVGPRICE,0), 1), --avgprice,
             MARGINCALLPRICE    = AVGPRICE,--fn_get_refprice_nextdate(codeid, nvl(AVGPRICE,0), 1), --avgprice,
             MARGINREFCALLPRICE = AVGPRICE,--fn_get_refprice_nextdate(codeid, nvl(AVGPRICE,0), 1), --avgprice,
             MARGINREFPRICE     = AVGPRICE,--fn_get_refprice_nextdate(codeid, nvl(AVGPRICE,0), 1), --avgprice,
             basic_price_4buf   = AVGPRICE,
             NEWPRICE           = '0'
       WHERE NVL(AVGPRICE, 0) > 0
         AND NEWPRICE = '1'
    --1.5.6.0
         AND CODEID IN (SELECT CODEID FROM SBSECURITIES WHERE SECTYPE NOT IN ('012'));

      UPDATE SECURITIES_INFO
         SET BASICPRICE         = NEWBASICPRICE,
             --CEILINGPRICE       = NEWCEILINGPRICE,
             --FLOORPRICE         = NEWFLOORPRICE,
             DFRLSPRICE         = AVGPRICE,
             DFREFPRICE         = AVGPRICE,
             MARGINPRICE        = AVGPRICE,--fn_get_refprice_nextdate(codeid, nvl(AVGPRICE,0), 1), --avgprice,
             MARGINCALLPRICE    = AVGPRICE,--fn_get_refprice_nextdate(codeid, nvl(AVGPRICE,0), 1), --avgprice,
             MARGINREFCALLPRICE = AVGPRICE,--fn_get_refprice_nextdate(codeid, nvl(AVGPRICE,0), 1), --avgprice,
             MARGINREFPRICE     = AVGPRICE,--fn_get_refprice_nextdate(codeid, nvl(AVGPRICE,0), 1), --avgprice,
             basic_price_4buf   = AVGPRICE,
             NEWPRICE           = '0'
       WHERE NVL(AVGPRICE, 0) > 0
         AND NEWPRICE = '1'
         AND CODEID IN (SELECT CODEID FROM SBSECURITIES WHERE SECTYPE = '012');
    --1.5.6.0
       --Cap nhat lai ma chung khoan WFT giong ma CK goc.
        for rec in (
            select wft.codeid, wft.refcodeid,
                inf.ceilingprice, inf.floorprice ,inf.basicprice,
                inf.dfrlsprice, inf.dfrefprice, inf.marginprice,
                inf.margincallprice, inf.marginrefcallprice, inf.marginrefprice
                from sbsecurities wft, securities_info inf
                where wft.symbol like '%_WFT'
                and wft.refcodeid = inf.codeid
        )
        loop
            update securities_info
            set  ceilingprice=rec.ceilingprice,
                 floorprice=rec.floorprice,
                 basicprice= rec.basicprice,
                 dfrlsprice =  rec.dfrlsprice,
                  dfrefprice  = rec.dfrefprice,
                  marginprice = rec.marginprice,
                  margincallprice =  rec.margincallprice,
                  marginrefcallprice =  rec.marginrefcallprice,
                  marginrefprice =  rec.marginrefprice
            where codeid = rec.codeid;
        end loop;*/
        --------- END of DUCNV -----
        --MSBS-2589
        MERGE INTO SECURITIES_INFO se
        USING (SELECT CODEID FROM SBSECURITIES WHERE SECTYPE NOT IN ('012')
            ) inf
        ON (se.codeid = inf.codeid)
        WHEN MATCHED THEN
        UPDATE SET
             BASICPRICE         = NEWBASICPRICE,
             CEILINGPRICE       = NEWCEILINGPRICE,
             FLOORPRICE         = NEWFLOORPRICE,
             DFRLSPRICE         = AVGPRICE,
             DFREFPRICE         = AVGPRICE,
             MARGINPRICE        = AVGPRICE,--fn_get_refprice_nextdate(codeid, nvl(AVGPRICE,0), 1), --avgprice,
             MARGINCALLPRICE    = AVGPRICE,--fn_get_refprice_nextdate(codeid, nvl(AVGPRICE,0), 1), --avgprice,
             MARGINREFCALLPRICE = AVGPRICE,--fn_get_refprice_nextdate(codeid, nvl(AVGPRICE,0), 1), --avgprice,
             MARGINREFPRICE     = AVGPRICE,--fn_get_refprice_nextdate(codeid, nvl(AVGPRICE,0), 1), --avgprice,
             basic_price_4buf   = AVGPRICE,
             NEWPRICE           = '0'
       WHERE NVL(AVGPRICE, 0) > 0
         AND NEWPRICE = '1';

        MERGE INTO SECURITIES_INFO se
        USING (SELECT CODEID FROM SBSECURITIES WHERE SECTYPE = '012'
            ) inf
        ON (se.codeid = inf.codeid)
        WHEN MATCHED THEN
        UPDATE SET
             BASICPRICE         = NEWBASICPRICE,
             --CEILINGPRICE       = NEWCEILINGPRICE,
             --FLOORPRICE         = NEWFLOORPRICE,
             DFRLSPRICE         = AVGPRICE,
             DFREFPRICE         = AVGPRICE,
             MARGINPRICE        = AVGPRICE,--fn_get_refprice_nextdate(codeid, nvl(AVGPRICE,0), 1), --avgprice,
             MARGINCALLPRICE    = AVGPRICE,--fn_get_refprice_nextdate(codeid, nvl(AVGPRICE,0), 1), --avgprice,
             MARGINREFCALLPRICE = AVGPRICE,--fn_get_refprice_nextdate(codeid, nvl(AVGPRICE,0), 1), --avgprice,
             MARGINREFPRICE     = AVGPRICE,--fn_get_refprice_nextdate(codeid, nvl(AVGPRICE,0), 1), --avgprice,
             basic_price_4buf   = AVGPRICE,
             NEWPRICE           = '0'
       WHERE NVL(AVGPRICE, 0) > 0
         AND NEWPRICE = '1';

        MERGE INTO securities_info se
        USING (select wft.codeid, wft.refcodeid,
                inf.ceilingprice, inf.floorprice ,inf.basicprice,
                inf.dfrlsprice, inf.dfrefprice, inf.marginprice,
                inf.margincallprice, inf.marginrefcallprice, inf.marginrefprice
                from sbsecurities wft, securities_info inf
                where wft.symbol like '%_WFT'
                and wft.refcodeid = inf.codeid
            ) inf
        ON (se.codeid = inf.codeid)
        WHEN MATCHED THEN
        UPDATE SET
               ceilingprice=inf.ceilingprice,
               floorprice=inf.floorprice,
               basicprice= inf.basicprice,
               dfrlsprice =  inf.dfrlsprice,
               dfrefprice  = inf.dfrefprice,
               marginprice = inf.marginprice,
               margincallprice =  inf.margincallprice,
               marginrefcallprice =  inf.marginrefcallprice,
               marginrefprice =  inf.marginrefprice;
       --end MSBS-2589

        plog.debug(pkgctx,'Begin gen SE buffer');
        fopks_api.pr_gen_buf_se_account;
        plog.debug(pkgctx,'End gen SE buffer');
        commit;
        plog.debug(pkgctx,'Begin gen OD buffer');
        fopks_api.pr_gen_buf_od_account;
        plog.debug(pkgctx,'End gen OD buffer');
        commit;



        insert into mr9000_loghist
        (custodycd, actype, afacctno, careby, trfbuydt,
               trfbuyext, fullname, trfamt, ovdamt, balance,
               avladvance, totalvnd, exvndamt, avlmargin, exmarginamt,
               ext0amt, callamt, rtnamt, acctnokey, aftrfbuyext, txdate)
        SELECT custodycd, actype, afacctno, careby, trfbuydt,
               trfbuyext, fullname, trfamt, ovdamt, balance,
               avladvance, totalvnd, exvndamt, avlmargin, exmarginamt,
               ext0amt, callamt, rtnamt, acctnokey, aftrfbuyext, txdate
          FROM mr9000_log;

        v_strSQL := ' truncate table mr9000_log ' ; --MSBS-2589
        execute immediate v_strSQL;

        insert into mr9000_log
        (custodycd, actype, afacctno, careby, trfbuydt,
               trfbuyext, fullname, trfamt, ovdamt, balance,
               avladvance, totalvnd, exvndamt, avlmargin, exmarginamt,
               ext0amt, callamt, rtnamt, acctnokey, aftrfbuyext, txdate)
        SELECT custodycd, actype, afacctno, careby, trfbuydt,
               trfbuyext, fullname, trfamt, ovdamt, balance,
               avladvance, totalvnd, exvndamt, avlmargin, exmarginamt,
               ext0amt, callamt, rtnamt, acctnokey, aftrfbuyext, TO_DATE(v_currdate,'DD/MM/RRRR') txdate
          FROM vw_mr9000;

        --Log lai nhung tai khoan bi call sau khi chay batch
        cspks_logproc.pr_log_mr0002('AF-END');
        cspks_logproc.pr_log_mr3008('AF-END');
        cspks_logproc.pr_log_mr3009('AF-END');
        pr_gencibufall;
        commit;
              -- cap nhat lai thue
        UPDATE sysvar SET varvalue= (SELECT varvalue FROM sysvar WHERE varname='ADVSELLDUTY_SET')
        WHERE varname='ADVSELLDUTY';

        commit;
        DELETE smsbeginday WHERE TXDATE=TO_DATE(v_currdate,'DD/MM/RRRR');
               ---- goi 1.5.9.6 tuning batch /
        v_strSQL := ' truncate table MR9004_FOR_LOG_TEMP ' ;
        execute immediate v_strSQL;

        INSERT INTO MR9004_FOR_LOG_TEMP
        SELECT * FROM vw_mr9004_for_log WHERE trade >0 ;

        INSERT INTO smsbeginday(AUTOID,TXDATE,afacctno, custodycd,  balance, acctno, symbol,
           codeid, trade)
        SELECT SEQ_smsbeginday.NEXTVAL AUTOID,
             TO_DATE(v_currdate,'DD/MM/RRRR') TXDATE,
             AF.ACCTNO AFACCTNO ,
            CF.CUSTODYCD,
            CI.BALANCE,
            NVL(T1.ACCTNO,'') ACCTNO,
            NVL(T1.SYMBOL,'') SYMBOL ,NVL(T1.CODEID,'') CODEID,NVL(T1.TRADE,0) TRADE
        FROM CFMAST CF, AFMAST AF,CIMAST CI,
             MR9004_FOR_LOG_TEMP T1
            WHERE CF.CUSTID = AF.CUSTID AND AF.ACCTNO = CI.AFACCTNO
           AND AF.ACCTNO = T1.AFACCTNO (+)
           and (CI.BALANCE>0 or NVL(T1.TRADE,0)>0 ) ;
        COMMIT;
         prc_email_sms_dayend;
         --Update lai ky han  vay bao lanh de khong co mon vay bao lanh nao goi tu thang nay sang thang khac
         --Ktra co phai la ngay lam viec truoc ngay lam viec cuoi cung cua thang 1 ngay khong
         SELECT to_char(getduedate(to_date(v_currdate,'DD/MM/RRRR'), 'B', '001',1),'MM'),to_char(getduedate(to_date(v_currdate,'DD/MM/RRRR'), 'B', '001',2),'MM'),to_char(to_date(v_currdate,'DD/MM/RRRR'),'MM') INTO v_nextmonth1, v_nextmonth2, v_currmonth FROM dual ;
         IF instr(v_nextmonth1,v_currmonth)>0  AND instr(v_currmonth, v_nextmonth2) =0 THEN
                 FOR rec IN (
                   SELECT * FROM lntype WHERE loantype ='T0' AND minterm=2
                   )
                   LOOP
                   --backup
                   --ktra da co trong bang lntypeBK chua neu chua thuc hien insert (chi insert trong lan dau sua doi)
                   SELECT nvl(COUNT(*),0) INTO v_count  FROM lntypeBK WHERE actype =rec.actype AND backdata='N';
                   IF v_count=0 THEN
                       INSERT INTO lntypeBK (minterm, oprinfrq, oprinperiod
                                   , mintermnew, oprinfrqnew , oprinperiodnew,createdt, backdata,actype   )
                       VALUES (rec.minterm, rec.oprinfrq, rec.oprinperiod ,GREATEST(rec.minterm-1,0), GREATEST(CASE WHEN rec.oprinfrq = 2 THEN rec.oprinfrq-1 ELSE rec.oprinfrq END,0), GREATEST(CASE WHEN rec.oprinperiod = 2 THEN rec.oprinperiod-1 ELSE rec.oprinperiod END,0), to_date(v_currdate,'DD/MM/RRRR'),'N', rec.actype);
                   END IF;
                   --update ve T1
                   UPDATE lntype SET
                          minterm=GREATEST(minterm-1,0),
                          oprinfrq=GREATEST(CASE WHEN oprinfrq = 2 THEN oprinfrq-1 ELSE oprinfrq END,0),
                          oprinperiod =GREATEST(CASE WHEN oprinperiod = 2 THEN oprinperiod-1 ELSE oprinperiod END,0)
                    WHERE actype =rec.actype;
                   END LOOP;
           END IF;
           --Kiem tra neu la ngay cuoi thang
           IF instr(v_nextmonth1,v_currmonth)=0  THEN
                 FOR rec IN (
                   SELECT * FROM lntype WHERE loantype ='T0' AND minterm=1
                   )
                   LOOP
                   --backup
                   --ktra da co trong bang lntypeBK chua neu chua thuc hien insert (chi insert trong lan dau sua doi)
                   SELECT nvl(COUNT(*),0) INTO v_count  FROM lntypeBK WHERE actype =rec.actype AND backdata='N';
                   IF v_count=0 THEN
                       INSERT INTO lntypeBK (minterm, oprinfrq, oprinperiod
                                   , mintermnew, oprinfrqnew , oprinperiodnew,createdt, backdata,actype   )
                       VALUES (rec.minterm, rec.oprinfrq, rec.oprinperiod ,GREATEST(rec.minterm-1,0), GREATEST(CASE WHEN rec.oprinfrq = 1 THEN rec.oprinfrq-1 ELSE rec.oprinfrq END,0), GREATEST(CASE WHEN rec.oprinperiod = 1 THEN rec.oprinperiod-1 ELSE rec.oprinperiod END,0), to_date(v_currdate,'DD/MM/RRRR'),'N', rec.actype);
                   END IF;
                   --update ve T1
                   UPDATE lntype SET
                          minterm=GREATEST(minterm-1,0),
                          oprinfrq=GREATEST(CASE WHEN oprinfrq = 1 THEN oprinfrq-1 ELSE oprinfrq END,0),
                          oprinperiod =GREATEST(CASE WHEN oprinperiod = 1 THEN oprinperiod-1 ELSE oprinperiod END,0)
                    WHERE actype =rec.actype;
                   END LOOP;
           END IF;

           --Ktra neu la ngay dau thang thuc hien restore cac update
             SELECT to_char(to_date(varvalue,'DD/MM/RRRR'),'MM')
               INTO v_currmonth1 --thang cua ngay lam viec truoc do
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'PREVDATE';
            IF instr(v_currmonth1, v_currmonth)=0 THEN
              --MSBS-2589 Tunning batch
                 /*FOR rec IN (
                   SELECT * FROM lntypeBK WHERE backdata='N'
                   )
                   LOOP
                   --restore
                   UPDATE lntype SET
                          minterm=rec.minterm,
                          oprinfrq=rec.oprinfrq,
                          oprinperiod =rec.oprinperiod
                    WHERE actype =rec.actype;

                    UPDATE lntypebk SET  backdata='Y' WHERE   actype =rec.actype;
                    END LOOP;*/

               MERGE INTO lntype lnt
               USING (SELECT * FROM lntypeBK WHERE backdata='N') bk
               ON (lnt.actype = bk.actype)
               WHEN MATCHED THEN
                 UPDATE SET minterm=bk.minterm,
                            oprinfrq=bk.oprinfrq,
                            oprinperiod =bk.oprinperiod;

               MERGE INTO lntypebk ln
               USING (SELECT * FROM lntypeBK WHERE backdata='N') bk
               ON (ln.actype = bk.actype)
               WHEN MATCHED THEN
                 UPDATE SET backdata='Y' WHERE actype =bk.actype;
             --end MSBS-2589 Tunning batch
           END IF;
           COMMIT;

        -- 1.6.0.0:  update lai bang han muc chuyen tien
        update tlemaillimit
        set readvancelimit=t_advancelimit,
        retotaltranlimit=t_totaltranlimit
        WHERE readvancelimit<>t_advancelimit OR --MSBS-2589
        retotaltranlimit<>t_totaltranlimit;
        COMMIT;
    -- end--
        --Tinh lai Pool
        p_err_code:=txpks_prchk.fn_ResetPool(p_err_code);
        --End Tinh lai Pool

        -- Day du lieu cho F0
        pr_t_fo_accounts;
        COMMIT;
        pr_t_fo_basket;
        COMMIT;
        pr_t_fo_customer;
        COMMIT;
        pr_t_fo_defrules;
        COMMIT;
        pr_t_fo_fousers;
        COMMIT;
        pr_t_fo_instruments;
        COMMIT;
        pr_t_fo_orderbook;
        COMMIT;
        pr_t_fo_OWNPOOLROOM;
        COMMIT;
        pr_t_fo_poolroom;
        COMMIT;
        pr_t_fo_portfolios;
        COMMIT;
        pr_t_fo_products;
        COMMIT;
        pr_t_fo_profiles;
        COMMIT;
        pr_t_fo_sysconfig;
        COMMIT;
        PR_T_FO_WORKINGCALENDAR;
        COMMIT;
        plog.error (pkgctx, 'Begin Init BOD data for FO.');
        cspks_init_data4fo.PRC_MAIN(p_err_code);
        plog.error (pkgctx, 'Init BOD data for FO p_err_code='||p_err_code);
        COMMIT;
        plog.error (pkgctx, 'End  Init BOD data for FO.');
    EXCEPTION when others then
        p_err_code := errnums.C_SYSTEM_ERROR;
        plog.error (pkgctx, 'Error when then data for buffer.');
        plog.error (pkgctx, SQLERRM || dbms_utility.format_error_backtrace);
        plog.setendsection (pkgctx, 'pr_SAAfterBatch');
        RAISE errnums.E_SYSTEM_ERROR;
    end;
    p_err_code:=0;
    PR_NOTIFYBATCH('END');
    plog.setendsection(pkgctx, 'pr_SAAfterBatch');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_SAAfterBatch');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_SAAfterBatch;
  ---------------------------------pr_SABackupData------------------------------------------------
  PROCEDURE pr_SABackupData(p_err_code  OUT varchar2)
  IS
    v_nextdate     varchar2(10);
    v_currdate     varchar2(10);
    v_strFRTABLE   varchar2(100);
    v_strTOTABLE   varchar2(100);
    v_strSQL       varchar2(2000);
    v_Sql1         varchar2(1000);
    v_Sql2         varchar2(1000);
    v_err          varchar2(200);
    v_count        number(10);
    l_lastdateofmonth DATE;     --them log cho bc RE0088_1

    v_prevdate        varchar2(10);

    -- 1.7.2.8
    l_fdate           DATE;
    l_todate          DATE;
    v_datetime        varchar2(10);
    l_afchallenge     varchar2(20);
    v_count_1         NUMBER(10);
    v_count_3         NUMBER(10);
    v_count_4         NUMBER(10);
    v_count_5         NUMBER(10);
    v_amt_2           NUMBER(20);
	v_temp            varchar2(20);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_SABackupData');
    v_nextdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'NEXTDATE');
    v_currdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');
    v_prevdate :=cspks_system.fn_get_sysvar ('SYSTEM', 'PREVDATE');
	  -- 1.8.2.0.P2:
	  SP_GEN_LNSCHD_AVGRATE;

   --1.7.2.8- KBCHALLEGE
   -- loai hinh kh tham gia cuoc thi
    SELECT varvalue INTO l_afchallenge FROM sysvar WHERE grname = 'SA' AND varname = 'AFCHALLENGE';
    -- ngay bat dau cuoc thi
    SELECT to_date(varvalue,'DD/MM/RRRR') INTO l_fdate FROM sysvar WHERE grname = 'SA' AND varname = 'FDATE_AFCHALLENGE';
    -- ngay ket thuc cuoc thi
    SELECT to_date(varvalue,'DD/MM/RRRR') INTO l_todate FROM sysvar WHERE grname = 'SA' AND varname = 'TDATE_AFCHALLENGE';

	-- xu ly map boorderid  cho lenh nhap
	for rec in
       (
       select * from draft_order_active d where  d.boorderid is null and txdate = to_date(v_currdate,'DD/MM/RRRR')
       )
     loop
         v_temp := '';
         if rec.foorderid is not null then
           begin
             select boorderid into v_temp
             from newfo_ordermap
             where foorderid = rec.foorderid;
           exception when others then
             v_temp := '';
           end;

         elsif rec.foacctno is not null then
           begin
           select orderid into v_temp
           from rootordermap
           where foacctno = rec.foacctno;
           exception when others then
             v_temp := '';
           end;
         end if;
         update draft_order_active d set d.boorderid = v_temp where autoid = rec.autoid;

     end loop;

    update draft_order set status = 'P', actcount = 0 where status not in ('P','H');
    -- end lenh nhom

    IF to_date(v_currdate,'DD/MM/RRRR') >= l_fdate and to_date(v_currdate,'DD/MM/RRRR') <= l_todate THEN
       BEGIN
          FOR rec in (SELECT af.ACCTNO, cf.custodycd,at.typename, nvl(cf.email,'') email , cf.opndate, cf.fullname, af.actype
              FROM AFMAST af, cfmast cf, aftype at
              WHERE af.custid= cf.custid
              and af.ACTYPE =l_afchallenge
              and af.actype=at.actype
              and af.acctno not in (select afacctno from KBCHALLENGE_OUT)
              --and cf.email is not null --1.7.2.5
              AND af.STATUS ='A')
          LOOP
              --3. Khong duoc chuyen khoan ra ngoai
              Select count(*) into v_count_3 -- count=0 - pass
               from vw_citran ci
                where ci.acctno=rec.acctno
                and ci.field='BALANCE'
                and ci.txtype='D'
                and ci.tltxcd in ('1101','1111','1118','1120','1129','1132','1133','1184','1185','1188','1199','1130')
                --and autoid not in (51883554,51860752)  -- KB chinh sua. mail: 27/03/2020
                --and ci.txdate between rec.opndate and to_date(v_currdate,'DD/MM/RRRR')
                ;

              IF v_count_3 > 0  THEN
                 INSERT INTO KBCHALLENGE_OUT(CUSTODYCD,AFACCTNO,TXDATE,STATUS,FULLNAME,TYPENAME,EMAIL)
                      VALUES(rec.custodycd, rec.acctno,to_date(v_currdate,'DD/MM/RRRR'),'A',rec.fullname,rec.typename, rec.email);
              ELSE
                 --4. KL chung khoan nhan- chuyen
                 select count(*) into v_count_4 -- count=0 - pass
                  from vw_setran se
                  where substr(se.acctno,1,10)=rec.acctno
                  and se.field='TRADE'
                  and se.tltxcd in ('2242','2246','2245','2200')
                  --and se.txdate between rec.opndate and to_date(v_currdate,'DD/MM/RRRR')
                  ;

                  IF v_count_4 > 0 THEN
                     INSERT INTO KBCHALLENGE_OUT(CUSTODYCD,AFACCTNO,TXDATE,STATUS,FULLNAME,TYPENAME,EMAIL)
                         VALUES(rec.custodycd, rec.acctno,to_date(v_currdate,'DD/MM/RRRR'),'A',rec.fullname,rec.typename, rec.email);

                    ELSE
                       --5. Khong thuc hien giao dich thoa thuan
                        select count(*) into v_count_5  -- count =0 - pass
                        from odmast
                        where AFACCTNO=rec.acctno
                        and EXECQTTY >0 and MATCHTYPE ='P'
                        --and TXDATE between rec.opndate and to_date(v_currdate,'DD/MM/RRRR')
                        ;

                        IF v_count_5 > 0 THEN
                          INSERT INTO KBCHALLENGE_OUT(CUSTODYCD,AFACCTNO,TXDATE,STATUS,FULLNAME,TYPENAME,EMAIL)
                               VALUES(rec.custodycd, rec.acctno,to_date(v_currdate,'DD/MM/RRRR'),'A',rec.fullname,rec.typename, rec.email);
                          ELSE
                             --2. Tong tien nop vao tai khoan >=200tr
                                BEGIN
                                  select min (od.TXDATE) INTO v_datetime
                                    from vw_odmast_all od
                                          where od.AFACCTNO= rec.acctno
                                          and od.execqtty >0
                                          group by od.AFACCTNO;
                                  exception
                                  when others then
                                    v_datetime:='';
                                END;

                                IF  v_datetime is not null THEN
                                  select nvl(sum(ci.namt),0) into v_amt_2 -- namt >=200.000.000 - pass
                                    from vw_citran_gen ci
                                    where  ci.acctno=rec.acctno
                                      and TO_DATE(ci.txdate, 'DD/MM/RRRR')  <= TO_DATE(v_datetime, 'DD/MM/RRRR')
                                      and ci.tltxcd in ('1131','1141','1198','1120','1130')  -- THÊM CHUYỂN KHOẢN NỘI BỘ QUA TELE
                                      and ci.field='BALANCE'
                                      and ci.txtype='C';
                                END IF;

                            IF v_amt_2 < 200000000 THEN
                                INSERT INTO KBCHALLENGE_OUT(CUSTODYCD,AFACCTNO,TXDATE,STATUS,FULLNAME,TYPENAME,EMAIL)
                                     VALUES(rec.custodycd, rec.acctno,to_date(v_currdate,'DD/MM/RRRR'),'A',rec.fullname,rec.typename, rec.email);
                                                    ELSE
                                  -- 1. khong thuc hien giao dich truoc cuoc thi -- count=0 - pass
                                select count(*) into v_count_1 from vw_odmast_all
                                where AFACCTNO=rec.acctno and EXECQTTY >0 and TXDATE < l_fdate;

                                IF v_count_1 > 0 THEN
                                  INSERT INTO KBCHALLENGE_OUT(CUSTODYCD,AFACCTNO,TXDATE,STATUS,FULLNAME,TYPENAME,EMAIL)
                                      VALUES(rec.custodycd, rec.acctno,to_date(v_currdate,'DD/MM/RRRR'),'A',rec.fullname,rec.typename, rec.email);
                                 END IF;
                             END IF;
                        END IF;
                   END IF;
              END IF;
           END LOOP;
        END;
     END IF;
     -- END 1.7.2.8--

    --Hien thuc hoa lai/lo khi danh muc het chung khoan.
    UPDATE SEMAST SET ACCUMULATEPNL= TOTALSELLAMT-TOTALBUYAMT --,COSTPRICE=0
    WHERE PREVQTTY=0 AND TRADE = 0;

    --Gen du lieu vao truong cfcustodycd va cffullname cho truy van lich su giao dich.
    pr_gen_tllog_infor;

    --Gen du lieu cuoi ngay cho phan he CI
    --1.7.1.9: them thoi gian duyet giao dich
    INSERT INTO citran_gen (AUTOID,CUSTODYCD,CUSTID,TXNUM,TXDATE,ACCTNO,TXCD,NAMT,CAMT,REF,DELTD,ACCTREF,TLTXCD,BUSDATE,TXDESC,TXTIME,BRID,TLID,OFFID,CHID,DFACCTNO,OLD_DFACCTNO,TXTYPE,FIELD,TLLOG_AUTOID,TRDESC)
    select ci.autoid, cf.custodycd, cf.custid,
        ci.txnum, ci.txdate, ci.acctno, ci.txcd, ci.namt,
        ci.camt, ci.ref, nvl(ci.deltd,'N') deltd, ci.acctref,
        tl.tltxcd, tl.busdate,
        case when tl.tlid ='6868' then trim(tl.txdesc) || ' (Online)' else tl.txdesc end txdesc,
        tl.txtime, tl.brid, tl.tlid, tl.offid, tl.chid,
        case when tl.tltxcd in ('2670') then ci.ref else df.acctno end  dfacctno,
                       ''  old_dfacctno,
        app.txtype, app.field ,tl.autoid,
        case when ci.trdesc is not null
            then (case when tl.tlid ='6868' then trim(ci.trdesc) || ' (Online)' else ci.trdesc end)
            else ci.trdesc end trdesc
    from citran ci, tllog tl, cfmast cf, afmast af, apptx app, (select nvl(max(acctno),groupid) acctno ,lnacctno from vw_dfmast_all group by GROUPid,lnacctno )df
    where ci.txdate = tl.txdate and ci.txnum = tl.txnum
        and cf.custid = af.custid
        and ci.acctno = af.acctno
        and ci.txcd = app.txcd and app.apptype = 'CI' and app.txtype in ('D','C')
        and ci.ref = df.lnacctno (+)
        and tl.deltd <> 'Y'
        and ci.namt <> 0;
    commit;

    -- Gen data giao dich phan he SE
    INSERT INTO setran_gen (AUTOID,CUSTODYCD,CUSTID,TXNUM,TXDATE,ACCTNO,TXCD,NAMT,CAMT,REF,DELTD,ACCTREF,TLTXCD,BUSDATE,TXDESC,TXTIME,BRID,TLID,OFFID,CHID,AFACCTNO,SYMBOL,SECTYPE,TRADEPLACE,TXTYPE,FIELD,CODEID,TLLOG_AUTOID,TRDESC)
    select tr.autoid, cf.custodycd, cf.custid, tr.txnum, tr.txdate, tr.acctno, tr.txcd, tr.namt, tr.camt, tr.ref, tr.deltd, tr.acctref,
        tl.tltxcd, tl.busdate,
        case when tl.tlid ='6868' then trim(tl.txdesc) || ' (Online)' else tl.txdesc end txdesc,
        tl.txtime, tl.brid, tl.tlid, tl.offid, tl.chid,
        se.afacctno, sb.symbol, sb.sectype, sb.tradeplace, ap.txtype, ap.field, sb.codeid ,tl.autoid,
        case when tr.trdesc is not null
            then (case when tl.tlid ='6868' then trim(tr.trdesc) || ' (Online)' else tr.trdesc end)
            else tr.trdesc end trdesc
    from setran tr, tllog tl, sbsecurities sb, semast se, cfmast cf, apptx ap
    where tr.txdate = tl.txdate and tr.txnum = tl.txnum
        and tr.acctno = se.acctno
        and sb.codeid = se.codeid
        and se.custid = cf.custid
        and tr.txcd = ap.txcd and ap.apptype = 'SE' and ap.txtype in ('D','C')
        and tr.deltd <> 'Y' and tr.namt <> 0;
    commit;

    cspks_logproc.pr_log_ci1018;
    cspks_logproc.pr_log_od0019;
    --'Xoa cac bang __TRAN cua cac phan he nghiep vu
    for rec in (
        SELECT FRTABLE, TOTABLE FROM TBLBACKUP WHERE TYPBK='T'
    )
    loop

        v_strFRTABLE:=rec.FRTABLE;
        v_strTOTABLE:=rec.TOTABLE;
        plog.debug(pkgctx, 'FRTABLE:' || v_strFRTABLE || '->TOTABLE:' || v_strTOTABLE);
        v_strSQL := 'INSERT INTO ' || v_strTOTABLE || ' SELECT DTL.* FROM ' || v_strFRTABLE ||
                ' DTL, TLLOG, TLTX
                 WHERE TLLOG.TLTXCD=TLTX.TLTXCD AND TRIM(TLTX.BACKUP)=''Y''' ||
                 CASE
                    when v_strFRTABLE in  ('SETRAN','ODTRAN','CATRAN','AFTRAN','CITRAN','CLTRAN','LNTRAN','DFTRAN','SETRAN')
                    then ' AND DTL.NAMT<>0 '
                    else ' '
                 end ||
                'AND TLLOG.TXNUM=DTL.TXNUM AND TLLOG.TXDATE=DTL.TXDATE AND TRIM(TLLOG.TXSTATUS) IN (''1'',''3'',''7'',''4'')';
                 --AND (TRIM(TLLOG.TXSTATUS)=''3'' OR TRIM(TLLOG.TXSTATUS)=''1'')';

        execute immediate v_strSQL;
        INSERT INTO log_err
                  (id,date_log, POSITION, text)
           VALUES ( seq_log_err.NEXTVAL,SYSDATE, ' BACKUPDATA ', v_strSQL);
        commit;
        v_strSQL := ' truncate table ' || v_strFRTABLE;
        execute immediate v_strSQL;
    end loop;
    --'Sao luu du lieu bang TLLOG, TLLOGFLD Cho cac giao dichi?? BACKUP=Y
     INSERT INTO TLLOGALL SELECT TLLOG.* FROM TLLOG, TLTX
     WHERE TLLOG.TLTXCD=TLTX.TLTXCD AND TLTX.BACKUP='Y'
     AND (TLLOG.TXSTATUS='3' OR TLLOG.TXSTATUS='1' OR TLLOG.TXSTATUS='7' OR TLLOG.TXSTATUS='4');
     commit;
     INSERT INTO TLLOGFLDALL SELECT DTL.* FROM TLLOGFLD DTL, TLLOG, TLTX
     WHERE TLLOG.TLTXCD=TLTX.TLTXCD AND TLTX.BACKUP='Y'
     AND TLLOG.TXNUM=DTL.TXNUM AND TLLOG.TXDATE=DTL.TXDATE
     AND (TLLOG.TXSTATUS='3' OR TLLOG.TXSTATUS='1' OR TLLOG.TXSTATUS='7' OR TLLOG.TXSTATUS='4');
     commit;
     --'Xoa bnag TLLOG vai?? TLLOGFLD hien tai
     v_strSQL:='truncate table TLLOG';
     execute immediate v_strSQL;
     v_strSQL:='truncate table TLLOGFLD';
     execute immediate v_strSQL;
    --'Xoa cac bang khong phai bang giao dich, can backup
    for rec in (
        SELECT FRTABLE, TOTABLE FROM TBLBACKUP WHERE TYPBK='N'
    )
    loop
        v_strFRTABLE :=rec.FRTABLE;
        v_strTOTABLE := rec.TOTABLE;
        --Sao luu __HIST
        v_strSQL := 'INSERT INTO ' || v_strTOTABLE || ' SELECT * FROM ' || v_strFRTABLE;
        execute immediate v_strSQL;

        INSERT INTO log_err
                  (id,date_log, POSITION, text
                  )
           VALUES ( seq_log_err.NEXTVAL,SYSDATE, ' BACKUPDATA ', v_strSQL
                  );

        commit;
        v_strSQL := 'TRUNCATE TABLE ' || v_strFRTABLE;
        execute immediate v_strSQL;
    end loop;

    --'Xoa cac bang khong phai bang giao dich, khong backup
     for rec in (
        SELECT FRTABLE, TOTABLE FROM TBLBACKUP WHERE TYPBK='D'
     )
     loop
        v_strFRTABLE := rec.FRTABLE;
        --'Xoa bang __TRONGNGAY
        v_strSQL := 'TRUNCATE TABLE ' || v_strFRTABLE;
        execute immediate v_strSQL;
        INSERT INTO log_err
                  (id,date_log, POSITION, text
                  )
           VALUES ( seq_log_err.NEXTVAL,SYSDATE, ' BACKUPDATA ', v_strSQL
                  );

        commit;
     end loop;

    --backup stdfmap
     insert into stdfmaphist
     select * from stdfmap
     where not exists (select 1 from stschd where stdfmap.stschdid = stschd.autoid);

     delete stdfmap
     where not exists (select 1 from stschd where stdfmap.stschdid = stschd.autoid);

     --Kiem tra tao sequence moi
     For rec in(
       SELECT FRTABLE, TOTABLE FROM TBLBACKUP WHERE TYPBK='S'
       )
       Loop
           v_strFRTABLE:= rec.FRTABLE;
           Select count(*) into v_count from user_sequences where sequence_name =v_strFRTABLE;
           If v_count >0 Then
                INSERT INTO log_err
                  (id,date_log, POSITION, text
                      )
                   VALUES ( seq_log_err.NEXTVAL,SYSDATE, ' BACKUPDATA ', 'Begin reset seq_' || v_strFRTABLE
                      );
                commit;
                reset_sequence(SEQ_NAME=>v_strFRTABLE, STARTVALUE=>1);
                commit;
            ELSE

               v_Sql2:='CREATE SEQUENCE '||v_strFRTABLE ||'
                  INCREMENT BY 1
                  START WITH 1
                  MINVALUE 1
                  MAXVALUE 999999999999999999999999999
                  NOCYCLE
                  NOORDER
                  NOCACHE';
               INSERT INTO log_err
                      (id,date_log, POSITION, text
                          )
                       VALUES ( seq_log_err.NEXTVAL,SYSDATE, ' BACKUPDATA ', v_Sql2
                          );
               commit;
               Execute immediate v_Sql2;
           End if;
           commit;
       End Loop;

    /*Select count(*) into v_count from user_sequences where sequence_name like '%ORDERMAP%';
    If v_count >0 Then
     v_Sql1:='DROP SEQUENCE seq_ordermap';
     Execute immediate v_Sql1;

     INSERT INTO log_err
                  (id,date_log, POSITION, text
                      )
                   VALUES ( seq_log_err.NEXTVAL,SYSDATE, ' BACKUPDATA ', v_Sql1
                      );
      Commit;
    End if;

     v_Sql2:='CREATE SEQUENCE seq_ordermap
      INCREMENT BY 1
      START WITH 1
      MINVALUE 1
      MAXVALUE 999999999999999999999999999
      NOCYCLE
      NOORDER
      CACHE 300';
     Execute immediate v_Sql2;

     INSERT INTO log_err
                  (id,date_log, POSITION, text
                      )
                   VALUES ( seq_log_err.NEXTVAL,SYSDATE, ' BACKUPDATA ', v_Sql2
                      );
      Commit;
      */


    -- Backup data T0LIMITSCHD
    insert into T0LIMITSCHDHIST
    select * from T0LIMITSCHD where allocatedlimit - retrievedlimit = 0;
    delete T0LIMITSCHD where allocatedlimit - retrievedlimit = 0;
    commit;


    INSERT INTO DFGROUPHIST
    SELECT groupid, actype, afacctno, lnacctno, dftype,
           flagtrigger, limitchk, custbank, rrtype, ciacctno,
           pstatus, status, rlsfeeamt, feeamt, intamtacr,
           orgamt, amt, rlsamt, dfamt, calltype, lrate, mrate,
           irate, amtmin, tax, feemin, fee, lntype, txtime,
           txdate, autopaid, last_change, description,
           contractchk, dfblockamt, examt,isvsd
    FROM dfgroup WHERE NOT EXISTS (SELECT 1 FROM DFMAST d WHERE d.groupid = groupid); --MSBS-2589


    DELETE FROM dfgroup WHERE NOT EXISTS (SELECT 1 FROM DFMAST d WHERE d.groupid = groupid); --MSBS-2589

    COMMIT;


    --backup afserule

    INSERT INTO afserulehist (AUTOID,BORS,TYPORMST,REFID,CODEID,FOA,TERMVAL,TERMRATIO,EFFDATE,EXPDATE,STATUS,AFSERULETYPE)
    SELECT * FROM afserule afse WHERE (afse.afseruletype = 'BL' OR afse.expdate < to_date(v_currdate,'DD/MM/RRRR'));

    DELETE FROM afserule afse WHERE (afse.afseruletype = 'BL' OR afse.expdate < to_date(v_currdate,'DD/MM/RRRR'));
    --end backup afserule

    ---Log du lieu MR3007
        ---- goi 1.5.9.6 tuning batch /
        v_strSQL := ' truncate table MR9004_FOR_LOG_TEMP ' ;
        execute immediate v_strSQL;
        INSERT INTO MR9004_FOR_LOG_TEMP
        SELECT * FROM vw_mr9004_for_log
        WHERE trade+mortage+receiving+receivingt2+totalreceiving+
        sellmatchqtty+buyqtty+totalbuyqtty<>0;

         DELETE FROM TBL_MR3007_LOG WHERE TXDATE = to_date(v_currdate,'DD/MM/YYYY');
         -- goi 1.5.9.6 tuning batch /
       -- them cac doan hint de execute plan tot hon
        INSERT /*+parallel(tlb_mr3007_log, 8)*/ /*+append nologing*/
        INTO TBL_MR3007_LOG ( AUTOID,TXDATE,AFACCTNO,CUSTODYCD,T0AMT,MRAMT,DFAMT,
        TRFBUYAMT_IN,TRFBUYAMT_OVER,TRFBUYAMT_INDAY,SECUREAMT_INDAY,MRCRLIMITMAX,
        BALANCE,DEPOFEEAMT,DFODAMT,AVLADVANCE,
        SYMBOL,CODEID,TRADE,MORTAGE,RECEIVING,RECEIVINGT2,TOTALRECEIVING,
        SELLMATCHQTTY,BUYQTTY,TOTALBUYQTTY,AVLSYSROOM,USEDSYSROOM,AVL74ROOM,
        USED74ROOM,RATECL,PRICECL,CALLPRICECL,RATE74,PRICE74,CALLPRICE74,
        TS_SUCMUA,TS_DANHDAU,TS_T2,TS_CALLT2,TS_CALL,REALASS,ACCTNO,mrratiorate,TS_WITHD,
        ROOMCHK, AVLGRPROOM,USEDGRPROOM )
        SELECT /*+ ALL_ROWS */
        /*+parallel(cf, 8) parallel(af, 8) parallel(ci, 8) */
        SEQ_MR3007_LOG.NEXTVAL AUTOID,
        to_date(v_currdate,'DD/MM/YYYY') TXDATE, AF.ACCTNO AFACCTNO ,
        CF.CUSTODYCD,
        NVL(T2.T0AMT,0) T0AMT, NVL(T2.MRAMT,0) MRAMT,0 DFAMT,
        0 TRFBUYAMT_IN, 0 TRFBUYAMT_OVER,
        0 TRFBUYAMT_INDAY, nvl(T4.secureamt,0) SECUREAMT_INDAY,
        AF.MRCRLIMITMAX, CI.BALANCE,CI.DEPOFEEAMT,0 DFODAMT, NVL(T6.AVLADVANCE,0) AVLADVANCE,
        NVL(T1.SYMBOL,'') SYMBOL ,NVL(T1.CODEID,'') CODEID,NVL(T1.TRADE,0) TRADE,
        NVL(T1.MORTAGE,0) MORTAGE,NVL(T1.RECEIVING,0) RECEIVING,NVL(T1.RECEIVINGT2,0) RECEIVINGT2,
        NVL(T1.TOTALRECEIVING,0) TOTALRECEIVING,NVL(T1.SELLMATCHQTTY,0) SELLMATCHQTTY,
        NVL(T1.BUYQTTY,0) BUYQTTY,NVL(T1.TOTALBUYQTTY,0) TOTALBUYQTTY,
        NVL(T1.AVLSYSROOM,0) AVLSYSROOM,NVL(T1.USEDSYSROOM,0) USEDSYSROOM,
        NVL(T1.AVL74ROOM,0) AVL74ROOM,NVL(T1.USED74ROOM,0) USED74ROOM,
        NVL(T1.RATECL,0) RATECL,NVL(T1.PRICECL,0) PRICECL,NVL(T1.CALLPRICECL,0) CALLPRICECL,
        NVL(T1.RATE74,0) RATE74,NVL(T1.PRICE74,0) PRICE74,NVL(T1.CALLPRICE74,0) CALLPRICE74,
        NVL(T1.TS_SUCMUA,0) TS_SUCMUA,NVL(T1.TS_DANHDAU,0) TS_DANHDAU,
        NVL(T1.TS_T2,0) TS_T2,NVL(T1.TS_CALLT2,0) TS_CALLT2,NVL(T1.TS_CALL,0) TS_CALL,
        NVL(T1.REALASS,0) REALASS,NVL(T1.ACCTNO,'') ACCTNO,t1.mrratiorate,t1.TS_WITHD, nvl(T1.ROOMCHK,'Y') ROOMCHK,
        nvl(T1.AVLGRPROOM,0) AVLGRPROOM, nvl(T1.USEDGRPROOM,0) USEDGRPROOM

        FROM CFMAST CF, AFMAST AF,CIMAST CI,
        (SELECT SUM(T0AMT) T0AMT,SUM(MARGINAMT) MRAMT,TRFACCTNO AFACCTNO
         FROM VW_LNGROUP_ALL  GROUP BY TRFACCTNO ) T2,
       /* (SELECT SUM(PRINNML+PRINOVD+INTNMLACR+INTNMLOVD+INTOVDACR+INTDUE+FEEINTNMLACR+
         FEEINTNMLOVD+FEEINTOVDACR+FEEINTDUE)  DFAMT,
         sum(prinnml+prinovd)  DFODAMT,
         TRFACCTNO AFACCTNO
        FROM LNMAST  WHERE  FTYPE = 'DF'  GROUP BY  TRFACCTNO) T3,*/

        (SELECT  nvl(secureamt,0) secureamt, AFACCTNO
         FROM V_GETBUYORDERINFO
         ) T4,
   /*     (SELECT NVL(SUM(TRFSECUREDAMT_INDAY+TRFT0AMT_INDAY),0) TRFBUYAMT_INDAY,
        NVL(SUM(SECUREAMT_INDAY),0) SECUREAMT_INDAY,AFACCTNO
         FROM VW_TRFBUYINFO_INDAY
         GROUP BY  AFACCTNO ) T5,*/ -- PhuongHT comment goi 1.5.9.6
           (   SELECT NVL(DEPOAMT,0) AVLADVANCE, AFACCTNO
           FROM V_GETACCOUNTAVLADVANCE
            ) T6,
        MR9004_FOR_LOG_TEMP T1
        WHERE CF.CUSTID = AF.CUSTID AND AF.ACCTNO = CI.AFACCTNO
        AND AF.ACCTNO = T2.AFACCTNO (+)
        AND AF.ACCTNO = T4.AFACCTNO (+)
        AND AF.ACCTNO = T6.AFACCTNO (+)
        AND AF.ACCTNO = T1.AFACCTNO (+) ;

        COMMIT;

    -- 1.5.7.6|iss:1967
    -- Tong hop gia tri NAV theo tai khoan
    DELETE FROM cfnavlog WHERE TXDATE = TO_DATE(V_CURRDATE,'DD/MM/YYYY');
    INSERT INTO cfnavlog(txdate, custid, balance, advamt, etmassetamt, debtamt, navamt)
    SELECT TO_DATE(V_CURRDATE,'DD/MM/YYYY'), CUSTID, SUM(BALANCE), SUM(ADVAMT), SUM(ETMASSETAMT),
           SUM(DEPOFEEAMT + T0AMT + MRAMT + DFAMT),
           SUM(BALANCE + ADVAMT + ETMASSETAMT - (DEPOFEEAMT + T0AMT + MRAMT + DFAMT))
    FROM (
       SELECT LOG.TXDATE, AF.ACCTNO, MAX(AF.CUSTID) CUSTID, MAX(LOG.BALANCE) BALANCE,
              MAX(LOG.AVLADVANCE) ADVAMT, SUM(LOG.REALASS) ETMASSETAMT,
              MAX(LOG.DEPOFEEAMT) DEPOFEEAMT, MAX(LOG.T0AMT) T0AMT,
              MAX(LOG.MRAMT) MRAMT, MAX(LOG.DFAMT) DFAMT
       FROM TBL_MR3007_LOG LOG, AFMAST AF
       WHERE LOG.AFACCTNO = AF.ACCTNO
         AND AF.STATUS NOT IN ('C', 'N')
         AND LOG.TXDATE = TO_DATE(V_CURRDATE,'DD/MM/YYYY')
       GROUP BY LOG.TXDATE, AF.ACCTNO
    )
    GROUP BY CUSTID
    HAVING SUM(BALANCE + ADVAMT + ETMASSETAMT - (DEPOFEEAMT + T0AMT + MRAMT + DFAMT)) <> 0;
    -- End Tong hop gia tri NAV theo tai khoan
--Ducnv
INSERT into emailpoplog_HIST SELECT * FROM emailpoplog WHERE PROCESS='Y' AND STATUS='S';
DELETE emailpoplog WHERE PROCESS='Y' AND STATUS='S';
COMMIT;
-- goi 1.5.9.6 tuning batch
INSERT INTO SMSBEGINDAY_HIST
SELECT *
FROM smsbeginday  WHERE txdate < TO_date(v_prevdate,'DD/MM/RRRR');

DELETE FROM smsbeginday WHERE txdate< to_date(v_prevdate,'DD/MM/RRRR');
COMMIT;
--end of goi 1.5.9.6 tuning batch
begin
cspks_logproc.pr_log_sa0015();
end ;

begin
    cspks_logproc.pr_log_pr0004();
end ;

commit;

    --backup t_fo_Room_Allocation
    INSERT INTO t_fo_Room_Allocation_hist SELECT * FROM t_fo_Room_Allocation WHERE status = 'C';
    DELETE FROM t_fo_Room_Allocation  WHERE status = 'C';
    COMMIT;
    --end backup t_fo_Room_Allocation

    --log cho room nhom (room dac biet)
    begin
    cspks_logproc.pr_log_pr0001();
    cspks_logproc.pr_log_pr0002();
    cspks_logproc.pr_log_pr0003();
    end ;
    commit;
    --end log cho room nhom (room dac biet)
/*
    --Them log cho bc RE0088_1
    BEGIN
        SELECT MAX(sbdate) INTO l_lastdateofmonth FROM sbcldr WHERE sbdate BETWEEN trunc(getcurrdate,'MM') AND LAST_DAY(getcurrdate) AND holiday = 'N' AND cldrtype = '000';
        IF l_lastdateofmonth = getcurrdate THEN
            cspks_logproc.pr_log_re0088_1();
            COMMIT;
        END IF;
    END;
    --End Them log cho bc RE0088_1
*/
    --log cho bao cao mr3003 vao ngay lam viec cuoi cung cua thang
    begin
           cspks_logproc.pr_log_MR3003();
    end ;
    commit;
    --BACKUP DIEN TON TAI > 30 NGAY
    INSERT INTO VSDTXREQHIST
    SELECT * FROM VSDTXREQ VSD WHERE TO_DATE(VSD.TXDATE,'DD/MM/RRRR') < TO_DATE(v_currdate,'DD/MM/RRRR') - 30
                                   AND VSD.MSGSTATUS IN ('P','N','R','E','F','C') ;
    DELETE FROM VSDTXREQ VSD WHERE TO_DATE(VSD.TXDATE,'DD/MM/RRRR') < TO_DATE(v_currdate,'DD/MM/RRRR') - 30
                                   AND VSD.MSGSTATUS IN ('P','N','R','E','F','C') ;
    COMMIT;

    --Backup table of BloomBerg
    BEGIN
      INSERT INTO bl_odmasthist SELECT * FROM bl_odmast bl WHERE bl.expdate <= to_date(v_currdate, 'DD/MM/RRRR');
      DELETE bl_odmast bl WHERE bl.expdate <= to_date(v_currdate, 'DD/MM/RRRR');

      INSERT INTO bl_maporderhist SELECT * FROM bl_maporder WHERE NOT EXISTS (SELECT 1 FROM bl_odmast b WHERE b.blorderid = blOrderId);
      DELETE bl_maporder WHERE NOT EXISTS (SELECT 1 FROM bl_odmast b WHERE b.blorderid = blOrderId); --MSBS-2589

      INSERT INTO bl_autoorderplanhist SELECT * FROM bl_autoorderplan WHERE NOT EXISTS (SELECT 1 FROM bl_odmast b WHERE b.blorderid = blOrderId);
      DELETE bl_autoorderplan WHERE NOT EXISTS (SELECT 1 FROM bl_odmast b WHERE b.blorderid = blOrderId); --MSBS-2589
    END;

   -- BACKUP INTRADAY_CHANGE_EVENT (backup du lieu truoc ngay hien tai 3 ngay)
   DELETE INTRADAY_CHANGE_EVENT WHERE TXDATE < getprevdate(TO_DATE(v_currdate,'DD/MM/RRRR'), 3);

   INSERT INTO NEWBANKGW_LOG_HIST SELECT * FROM NEWBANKGW_LOG A WHERE A.TXDATE + 30 < to_date(v_currdate, 'DD/MM/RRRR');
   DELETE NEWBANKGW_LOG A WHERE A.TXDATE + 30 < to_date(v_currdate, 'DD/MM/RRRR');

   INSERT INTO COMPARELIST_HIST SELECT * FROM COMPARELIST A WHERE A.TXDATE + 30 < to_date(v_currdate, 'DD/MM/RRRR');
   DELETE COMPARELIST A WHERE A.TXDATE + 30 < to_date(v_currdate, 'DD/MM/RRRR');

   p_err_code:=0;
   plog.setendsection(pkgctx, 'pr_SABackupData');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_SABackupData');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_SABackupData;


 ---------------------------------pr_SAGeneralWorking------------------------------------------------
 PROCEDURE pr_SAGeneralWorking(p_err_code  OUT varchar2)
  IS
    v_nextdate varchar2(10);
    v_currdate varchar2(10);
    v_strFRTABLE   varchar2(100);
    v_strTOTABLE   varchar2(100);
    v_strSQL       varchar2(2000);
    v_Sql1 varchar2(1000);
    v_Sql2 varchar2(1000);
    v_err          varchar2(200);
    v_count number(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_SAGeneralWorking');

    /*if cspks_saproc.fn_SAGenCF1002(p_err_code) <> 0 then
        p_err_code:=-1; --Loi he thong
        plog.setendsection(pkgctx, 'pr_SAGeneralWorking');
        return;
    end if;*/



    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_SAGeneralWorking');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_SAGeneralWorking');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_SAGeneralWorking;
  ---------------------------------pr_SAChangeWorkingDate------------------------------------------------
  PROCEDURE pr_SAChangeWorkingDate(p_err_code  OUT varchar2)
  IS
    v_nextdate varchar2(20);
    v_currdate varchar2(20);
    v_prevdate   varchar2(20);
    v_duedate   varchar2(20);
    v_intNum   number;
    v_intBKNUM number;
    v_intNEXTNUM number;
    v_strLAST_DAY varchar2(20);
    --v_prinused number;
    v_clearday varchar2(20); --T2_HoangND add
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_SAChangeWorkingDate');
    v_nextdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'NEXTDATE');
    v_currdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');

    -- Xuat log Report Giai Ngan.
    if not fn_gen_cl_drawndown_report('DF') then
        p_err_code:='-540229';
        plog.setendsection(pkgctx, 'pr_SAChangeWorkingDate');
        return;
    end if;

    if not fn_gen_report_log('ALL') then
        p_err_code:='-540229';
        plog.setendsection(pkgctx, 'pr_SAChangeWorkingDate');
        return;
    end if;

/*    SELECT TO_CHAR(DT.LAST_DAY,'DD/MM/YYYY') LAST_DAY,DT.NUM,DT.NEXTNUM,DT.BKNUM
    into    v_strLAST_DAY,v_intNum,v_intNEXTNUM,v_intBKNUM
    FROM (SELECT TO_DATE(v_nextdate,systemnums.c_date_format)-TO_DATE(v_currdate,systemnums.c_date_format) NUM,
                DT.LAST_DAY,TO_DATE(v_nextdate,systemnums.c_date_format)- DT.LAST_DAY NEXTNUM,
                DT.LAST_DAY-TO_DATE(v_currdate,systemnums.c_date_format) BKNUM
                FROM (SELECT LAST_DAY(TO_DATE(v_currdate,systemnums.c_date_format)) LAST_DAY FROM DUAL ) DT )DT;
*/
    for rec in (
        SELECT * FROM IRRATESCHD
        WHERE EFFECTIVEDT<=TO_DATE(v_nextdate,systemnums.c_date_format) ORDER BY AUTOID
    )
    loop
        --1. CAP NHAT LAI SUAT CU VAO TRONG HIST
        INSERT INTO IRRATEHIST (RATEID,RATENAME,CCYCD,RATE,FLRRATE,
                                CELRATE,RATETERM, LASTDATE,EFFECTIVEDT,
                                RATETYPE,MODCODE,STATUS)
               SELECT RATEID ,RATENAME,CCYCD,RATE,FLRRATE,
                                CELRATE,RATETERM,TO_DATE(v_currdate,systemnums.c_date_format) LASTDATE,EFFECTIVEDT,
                                RATETYPE,MODCODE,STATUS FROM IRRATE WHERE RATEID=rec.RATEID;
        DELETE FROM IRRATE WHERE RATEID=rec.RATEID;
        INSERT INTO IRRATE (RATEID,RATENAME,CCYCD,RATE,FLRRATE,
                            CELRATE,RATETERM,EFFECTIVEDT,
                            RATETYPE,MODCODE,STATUS)
               SELECT RATEID ,RATENAME,CCYCD,RATE,FLRRATE,
                            CELRATE,RATETERM,EFFECTIVEDT,
                            RATETYPE,MODCODE,STATUS
                            FROM IRRATESCHD WHERE AUTOID=rec.AUTOID;
        DELETE FROM IRRATESCHD WHERE AUTOID=rec.AUTOID;
    end loop;
    for rec in (
        SELECT * FROM EXAFSCHD WHERE EFFECTIVEDT<=TO_DATE(v_nextdate,systemnums.c_date_format) ORDER BY AUTOID
    )
    loop
        --1. CAP NHAT SU KIEN CU TRUNG VOI SU KIEN NAY VAO TRONG HIST
        INSERT INTO EXAFMASTHIST(AUTOID,EVENTCODE,AFACCTNO,EXPDATE,EXCYCLE,OPERAND,DELTA,
                                MINVAL,MAXVAL,STATUS,CURRRATE,EFFECTIVEDT,MODCODE,EXTYPE)
               SELECT SEQ_EXAFMASTHIST.NEXTVAL AUTOID,EVENTCODE,AFACCTNO,EXPDATE,EXCYCLE,OPERAND,DELTA,
                                MINVAL,MAXVAL,STATUS, CURRRATE,EFFECTIVEDT,MODCODE,EXTYPE
               FROM EXAFMAST WHERE EVENTCODE=rec.EVENTCODE AND AFACCTNO=rec.AFACCTNO AND EXTYPE= rec.EXTYPE;
        --2. XOA CAC SU KIEN CU
        DELETE FROM EXAFMAST
        WHERE EVENTCODE=rec.EVENTCODE AND AFACCTNO=rec.AFACCTNO AND EXTYPE= rec.EXTYPE;
        --3. CAP NHAT CAC SU KIEN DEN KY TU EXAFSCHD VAO EXAFMAST
        INSERT INTO EXAFMAST(AUTOID,EVENTCODE,AFACCTNO,EXPDATE,EXCYCLE,OPERAND,DELTA,
                            MINVAL,MAXVAL,STATUS,CURRRATE,EFFECTIVEDT,MODCODE,EXTYPE)
               SELECT SEQ_EXAFMASTHIST.NEXTVAL AUTOID,EVENTCODE,AFACCTNO,EXPDATE,EXCYCLE,OPERAND,DELTA,
                            MINVAL,MAXVAL,STATUS, CURRRATE,EFFECTIVEDT,MODCODE,EXTYPE FROM EXAFSCHD WHERE AUTOID=rec.AUTOID;
        --4. XOA TRONG EXAFSCHD NHUNG SU KIEN DA DUA VAO TRONG EXAFMAST
        DELETE FROM EXAFSCHD WHERE AUTOID=rec.AUTOID;
    end loop;
    --Kiem tra xem lich nao den ngay Exprire thi day vao trong HIST
    INSERT INTO EXAFMASTHIST(AUTOID,EVENTCODE,AFACCTNO,EXPDATE,EXCYCLE,OPERAND,DELTA,
                            MINVAL,MAXVAL,STATUS,CURRRATE,EFFECTIVEDT,MODCODE,EXTYPE)
           SELECT SEQ_EXAFMASTHIST.NEXTVAL AUTOID,EVENTCODE,AFACCTNO,EXPDATE,EXCYCLE,OPERAND,DELTA,
                            MINVAL,MAXVAL,STATUS, CURRRATE, EFFECTIVEDT,MODCODE,EXTYPE
           FROM EXAFMAST WHERE EXPDATE<=TO_DATE(v_nextdate,systemnums.c_date_format);

    -- Reset EXAMT (TSrut ? S? ti?n du?c r?t th?c sau khi b? sung) trong DF
    UPDATE DFGROUP SET EXAMT=0 WHERE examt <> 0; --MSBS-2589

    --Cap nhat Securities_info_hist
    INSERT INTO securities_info_hist (AUTOID,CODEID,SYMBOL,HISTDATE,TXDATE,LISTINGQTTY,TRADEUNIT,LISTINGSTATUS,ADJUSTQTTY,
     LISTTINGDATE,REFERENCESTATUS,ADJUSTRATE,REFERENCERATE,REFERENCEDATE,STATUS,BASICPRICE,OPENPRICE,PREVCLOSEPRICE,
     CURRPRICE,CLOSEPRICE,AVGPRICE,CEILINGPRICE,FLOORPRICE,MTMPRICE,MTMPRICECD,INTERNALBIDPRICE,INTERNALASKPRICE,PE,
     EPS,DIVYEILD,DAYRANGE,YEARRANGE,TRADELOT,TRADEBUYSELL,TELELIMITMIN,TELELIMITMAX,ONLINELIMITMIN,ONLINELIMITMAX,
     REPOLIMITMIN,REPOLIMITMAX,ADVANCEDLIMITMIN,ADVANCEDLIMITMAX,MARGINLIMITMIN,MARGINLIMITMAX,SECURERATIOTMIN,
     SECURERATIOMAX,DEPOFEEUNIT,DEPOFEELOT,MORTAGERATIOMIN,MORTAGERATIOMAX,SECUREDRATIOMIN,SECUREDRATIOMAX,
     CURRENT_ROOM,BMINAMT,SMINAMT,MARGINPRICE,MARGINREFPRICE,ROOMLIMIT,ROOMLIMITMAX,DFREFPRICE,SYROOMLIMIT,
     SYROOMUSED,MARGINCALLPRICE,MARGINREFCALLPRICE,DFRLSPRICE,ROOMLIMITMAX_SET,SYROOMLIMIT_SET)
     select seq_securities_info_hist.nextval AUTOID,CODEID,SYMBOL,TO_DATE(v_currdate,systemnums.c_date_format)  HISTDATE, TXDATE,LISTINGQTTY,TRADEUNIT,LISTINGSTATUS,ADJUSTQTTY,
     LISTTINGDATE,REFERENCESTATUS,ADJUSTRATE,REFERENCERATE,REFERENCEDATE,STATUS,BASICPRICE,OPENPRICE,PREVCLOSEPRICE,
     CURRPRICE,CLOSEPRICE,AVGPRICE,CEILINGPRICE,FLOORPRICE,MTMPRICE,MTMPRICECD,INTERNALBIDPRICE,INTERNALASKPRICE,PE,
     EPS,DIVYEILD,DAYRANGE,YEARRANGE,TRADELOT,TRADEBUYSELL,TELELIMITMIN,TELELIMITMAX,ONLINELIMITMIN,ONLINELIMITMAX,
     REPOLIMITMIN,REPOLIMITMAX,ADVANCEDLIMITMIN,ADVANCEDLIMITMAX,MARGINLIMITMIN,MARGINLIMITMAX,SECURERATIOTMIN,
     SECURERATIOMAX,DEPOFEEUNIT,DEPOFEELOT,MORTAGERATIOMIN,MORTAGERATIOMAX,SECUREDRATIOMIN,SECUREDRATIOMAX,
     CURRENT_ROOM,BMINAMT,SMINAMT,MARGINPRICE,MARGINREFPRICE,ROOMLIMIT,ROOMLIMITMAX,DFREFPRICE,SYROOMLIMIT,
     SYROOMUSED,MARGINCALLPRICE,MARGINREFCALLPRICE,DFRLSPRICE,ROOMLIMITMAX_SET,SYROOMLIMIT_SET  from securities_info;

    /*--Update lai room toan he thong va room margin
    for rec in (
        select * from securities_info where syroomlimit_set+roomlimitmax_set>0
    )
    loop
        --Cap nhat room he thong
        begin
            select nvl(afpr.prinused,0) + sb.syroomused into v_prinused
                from securities_info sb,
                       (select codeid, sum(prinused) prinused from vw_afpralloc_all where restype = 'S' group by codeid) afpr
                where sb.codeid = afpr.codeid(+)
                and sb.codeid = rec.codeid;
        exception when others then
            v_prinused:=0;
        end;

        update securities_info
        set syroomlimit = greatest(syroomlimit_set,v_prinused)
        where codeid = rec.codeid;
        --Cap nhat room margin
        begin
            select nvl(sum(prinused),0) into v_prinused from vw_afpralloc_all
            where restype = 'M'
            and codeid = rec.codeid;
        exception when others then
            v_prinused:=0;
        end;
        update securities_info
        set roomlimitmax = GREATEST(roomlimitmax_set,v_prinused)
        where codeid = rec.codeid;
    end loop;*/
    --Xoa nhung lich den ngay Exprire
    DELETE FROM EXAFMAST WHERE EXPDATE<=TO_DATE(v_nextdate,systemnums.c_date_format);
    if CSPKS_SAPROC.fn_BackupSMSData(p_err_code) <> 0 then
        plog.debug(pkgctx, 'got error on fn_BackupSMSData');
        rollback;
        return;
    end if;

    if to_char(TO_DATE(v_currdate,systemnums.c_date_format),'RRRR') <> to_char(TO_DATE(v_nextdate,systemnums.c_date_format),'RRRR') then
        UPDATE SBCLDR SET SBEOY = 'Y', SBEOQ = 'Y', SBEOM = 'Y'
        WHERE CLDRTYPE='000' AND SBDATE = TO_DATE(v_currdate,systemnums.c_date_format);
    ElsIf to_char(TO_DATE(v_currdate,systemnums.c_date_format),'MM') <> to_char(TO_DATE(v_nextdate,systemnums.c_date_format),'MM')
        And mod(to_char(TO_DATE(v_currdate,systemnums.c_date_format),'MM') ,3)=0  Then
        UPDATE SBCLDR SET SBEOQ = 'Y', SBEOM = 'Y'
        WHERE CLDRTYPE='000' AND SBDATE = TO_DATE(v_currdate,systemnums.c_date_format);
    ElsIf to_char(TO_DATE(v_currdate,systemnums.c_date_format),'MM') <> to_char(TO_DATE(v_nextdate,systemnums.c_date_format),'MM') Then
       UPDATE SBCLDR SET SBEOM = 'Y' WHERE CLDRTYPE='000' AND SBDATE = TO_DATE(v_currdate,systemnums.c_date_format);
    ElsIf to_char(TO_DATE(v_currdate,systemnums.c_date_format),'IW') <> to_char(TO_DATE(v_nextdate,systemnums.c_date_format),'IW') Then
        UPDATE SBCLDR SET SBEOW = 'Y' WHERE CLDRTYPE='000' AND SBDATE = TO_DATE(v_currdate,systemnums.c_date_format);
    end if;


    --CAP NHAT CAC LOAI HINH ODTYPE DEN HAN SU DUNG
    UPDATE ODTYPE SET STATUS='Y' WHERE STATUS='N'
    AND TO_DATE(VALDATE,systemnums.c_date_format)>=TO_DATE(v_nextdate,systemnums.c_date_format);

    --CAP NHAT CAC LOAI HINH ODTYPE HET HAN SU DUNG
    UPDATE ODTYPE SET STATUS='N' WHERE STATUS='Y'
    AND TO_DATE(EXPDATE,systemnums.c_date_format)<=TO_DATE(v_nextdate,systemnums.c_date_format);

    --TungNT added, backup du lieu va reset seq phan he RM
    BEGIN
        cspks_rmproc.pr_ChangeWorkingDate(p_err_code);
    EXCEPTION
        WHEN OTHERS THEN
            plog.debug(pkgctx,'Backup RM failed!');
            plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
    END;
    --End

    --Ngay lam viec truoc
    v_prevdate := v_currdate;
    begin
        SELECT to_char(MIN(SBDATE),'DD/MM/YYYY')
        into v_currdate
        FROM SBCLDR
        WHERE CLDRTYPE='000' AND HOLIDAY='N'
        AND SBDATE > TO_DATE(v_currdate,systemnums.c_date_format);
    exception when others then
        plog.debug(pkgctx,'l_lngErrCode: ' || errnums.C_SA_CALENDAR_MISSING);
            p_err_code := errnums.C_SA_CALENDAR_MISSING;
            return;
    end;

    --Ngay lam viec tiep theo
    begin
        SELECT to_char(MIN(SBDATE),'DD/MM/YYYY')
        into v_nextdate
        FROM SBCLDR
        WHERE CLDRTYPE='000' AND HOLIDAY='N'
        AND SBDATE > TO_DATE(v_currdate,systemnums.c_date_format);
    exception when others then
        plog.debug(pkgctx,'l_lngErrCode: ' || errnums.C_SA_CALENDAR_MISSING);
            p_err_code := errnums.C_SA_CALENDAR_MISSING;
            return;
    end;

    --Ngay lam viec tiep theo
    begin
        SELECT to_char(max(SBDATE),'DD/MM/YYYY')
        into v_duedate
        FROM SBCLDR
        WHERE CLDRTYPE='000' AND HOLIDAY='N'
        AND SBDATE < TO_DATE(v_prevdate,systemnums.c_date_format);
    exception when others then
        plog.debug(pkgctx,'l_lngErrCode: ' || errnums.C_SA_CALENDAR_MISSING);
            p_err_code := errnums.C_SA_CALENDAR_MISSING;
            return;
    end;

    --T2_HoangND add
    --CK thanh toan tiep theo

    v_clearday:=cspks_system.fn_get_sysvar ('OD', 'CLEARDAY');

    BEGIN
        SELECT getduedate(to_date(v_currdate,'DD/MM/RRRR'),'B','000',v_clearday) - to_date(v_currdate,'DD/MM/RRRR') INTO v_clearday FROM dual;
    EXCEPTION WHEN OTHERS THEN
        plog.debug(pkgctx,'l_lngErrCode: ' || errnums.C_SA_CALENDAR_MISSING);
            p_err_code := errnums.C_SA_CALENDAR_MISSING;
            RETURN;
    END;
    --End T2_HoangND add

    --Dat lai thong tin bang SYSVAR
    cspks_system.pr_set_sysvar('SYSTEM', 'DUEDATE', v_duedate);
    cspks_system.pr_set_sysvar('SYSTEM', 'PREVDATE', v_prevdate);
    cspks_system.pr_set_sysvar('SYSTEM', 'CURRDATE', v_currdate);
    cspks_system.pr_set_sysvar('SYSTEM', 'NEXTDATE', v_nextdate);
    cspks_system.pr_set_sysvar('OD', 'ADVCLEARDAY', v_clearday);   --T2_HoangND add

    --Cap nhat lai tin trong SBCLDR
    UPDATE SBCLDR SET SBBUSDAY='N'
    WHERE CLDRTYPE='000' AND SBDATE = TO_DATE(v_prevdate,systemnums.c_date_format);
    UPDATE SBCLDR SET SBBUSDAY='Y'
    WHERE CLDRTYPE='000' AND SBDATE = TO_DATE(v_currdate,systemnums.c_date_format);

    pr_gen_sbcurrdate;

    if cspks_saproc.fn_ApplySystemParam(p_err_code) <> 0 then
        p_err_code:= errnums.C_SYSTEM_ERROR; --Loi he thong
        plog.setendsection(pkgctx, 'pr_SAChangeWorkingDate');
        return;
    end if;

    --cap nhap ngay hieu luc thu hoi han muc cua MG cap BL
    FOR rec IN
    (
        SELECT * FROM userlimit WHERE valdate IS NOT NULL
    )
    LOOP
        IF rec.valdate <= to_date(v_currdate,'dd/mm/rrrr') AND rec.expdate >= to_date(v_currdate,'dd/mm/rrrr') THEN
            UPDATE userlimit SET status = 'B' WHERE tliduser = rec.tliduser;
        ELSIF rec.expdate < to_date(v_currdate,'dd/mm/rrrr') THEN
            UPDATE userlimit SET status = 'A' WHERE tliduser = rec.tliduser;
        END IF;

    END LOOP;
    --End cap nhap ngay hieu luc thu hoi han muc cua MG cap BL

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_SAChangeWorkingDate');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_SAChangeWorkingDate');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_SAChangeWorkingDate;

  PROCEDURE pr_SASynOnlineData(p_err_code  OUT varchar2)
  IS
  v_strSQL VARCHAR2(1000);
  Begin
   plog.setbeginsection(pkgctx, 'pr_SASynOnlineData');
   v_strSQL := ' truncate table ol_log ' ; --MSBS-2589
   execute immediate v_strSQL;
   v_strSQL := ' truncate table OL_ACCOUNT_SE ' ;
   execute immediate v_strSQL;
   Insert into ol_account_se  select * from VW_OL_ACCOUNT_SE;
   For V_Acc in (Select acctno from Afmast )
    Loop
         sp_bd_getaccountposition_ol(v_Acc.acctno);
    End loop;
   p_err_code:=0;
   plog.setendsection(pkgctx, 'pr_SAChangeWorkingDate');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_SASynOnlineData');
      RAISE errnums.E_SYSTEM_ERROR;
  End pr_SASynOnlineData;
---------------------------------pr_T0OverdraftCalculate------------------------------------------------
PROCEDURE pr_T0OverdraftCalculate(p_err_code  OUT varchar2)
  IS
      l_currdate varchar2(10);
      l_afacctno varchar2(20);
      l_toamt number(20,4);
      l_toodamt number(20,4);
      l_TOTALTOODAMT number(20,4);
      l_TOTALTOAMT number(20,4);
      l_groupleader varchar2(20);
      l_COMPANYCD varchar2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_T0OverdraftCalculate');
    l_currdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');
    --0.phan bo T0 cho cac tai khoan thuong va vay margin loan
    plog.DEBUG(pkgctx, 'Calculate for Normal and margin loan');
    l_COMPANYCD:=cspks_system.fn_get_sysvar ('SYSTEM', 'COMPANYCD');
    update cimast set t0odamt = 0 where t0odamt > 0;

    /*for rec in
    (
        select ci.afacctno,--nvl(u.t0,0) T0,
\*                greatest(-ci.Balance,
                            -ci.Balance
                            -nvl(adv.avladvance,0)
                            +nvl(sts.trfsecureamt,0)
                        ,0) ADDVND*\
                  greatest(-ci.Balance + nvl(nl.gpamt,0),
                            greatest(
                                    least(
                                        greatest(nvl(sts.trfsecureamt_in,0) - greatest(balance+nvl(af.mrcrlimit,0)+nvl(avladvance,0),0),0)
                                        ,
                                        nvl(trf.trfamt,0)
                                        )
                                ,
                                    -ci.Balance + nvl(nl.gpamt,0)
                                )
                                + greatest(nvl(sts.trfsecureamt_t0,0) - greatest(greatest(balance+nvl(af.mrcrlimit,0)+nvl(avladvance,0),0) - nvl(sts.trfsecureamt_in,0),0),0)
                            ,0) ADDVND
        from
            cimast ci, afmast af, aftype aft, mrtype mrt, cfmast cf,
            \*(Select U.acctno, U.ACCLIMIT - nvl(t0prin,0) T0
                    From
                        (Select acctno, sum(ACCLIMIT) ACCLIMIT
                        From useraflimit
                        Where typereceive = 'T0'
                        Group by acctno) U,
                        (select trfacctno, sum(oprinnml + oprinovd) t0prin from lnmast where ftype = 'AF' group by trfacctno) L
                    where U.acctno = l.trfacctno(+)) U,*\
            (select sts.afacctno,
                                sum(case when sts.txdate = to_date(sy_CURRDATE.varvalue,'DD/MM/RRRR') then amt + feeacr - feeamt - trfexeamt - trft0amt else 0 end) trfsecureamt_t0,
                                sum(case when sts.txdate <> to_date(sy_CURRDATE.varvalue,'DD/MM/RRRR') then amt + feeacr - feeamt - trfexeamt - trft0amt else 0 end) trfsecureamt_in
                            from stschd sts, odmast od, sysvar sy_CURRDATE
                            where sts.orgorderid = od.orderid and duetype = 'SM' and sts.deltd <> 'Y' and trfbuyrate > 0 and trfbuyext > 0 and trfbuysts <> 'Y'
                                and sy_CURRDATE.grname='SYSTEM' and sy_CURRDATE.varname='CURRDATE'
                                and to_date(sy_CURRDATE.varvalue,'DD/MM/RRRR') < nvl(sts.trfbuydt,to_date(sy_CURRDATE.varvalue,'DD/MM/RRRR'))
                            group by sts.afacctno) sts,
            (select sts.afacctno, sum(amt) trfamt
                    from stschd sts, sysvar sy
                    where sts.duetype = 'SM' and sts.deltd <> 'Y' and nvl(sts.trfbuydt,to_date(sy.varvalue,'DD/MM/RRRR')) = to_date(sy.varvalue,'DD/MM/RRRR')
                    and sy.varname = 'CURRDATE' and sts.amt - sts.trfexeamt = 0
                    group by afacctno) trf,
            (select sum(depoamt) avladvance, afacctno from v_getaccountavladvance group by afacctno) adv,
            v_getbuyorderinfo b,
            --(select afacctno, sum(matchamt+ feeacr - feeamt) matchamt from odmast where txdate = to_date(l_currdate,'DD/MM/RRRR') group by afacctno) od,
            (select * from ln_gp_log where log_date = to_date(l_currdate,'DD/MM/RRRR') )nl --chaunh
        where af.acctno = ci.afacctno and af.custid = cf.custid
        and af.actype = aft.actype
        and aft.mrtype = mrt.actype  and mrt.mrtype in ('N','L')
        AND AFT.T0LNTYPE IS NOT NULL
        AND af.status <> 'C'
        and af.acctno = nl.acctno(+) --chaunh
        and af.acctno = sts.afacctno(+)
        and af.acctno = adv.afacctno(+)
        --and af.acctno = od.afacctno(+)
        and af.acctno = b.afacctno(+)
        and af.acctno = trf.afacctno(+)
        and substr(cf.custodycd ,1,3) = l_COMPANYCD
        --and af.acctno=u.acctno(+)
        and greatest(-ci.Balance  + nvl(nl.gpamt,0),
                            greatest(
                                    least(
                                        greatest(nvl(sts.trfsecureamt_in,0) - greatest(balance+nvl(af.mrcrlimit,0)+nvl(avladvance,0),0),0)
                                        ,
                                        nvl(trf.trfamt,0)
                                        )
                                ,
                                    -ci.Balance  + nvl(nl.gpamt,0)
                                )
                                + greatest(nvl(sts.trfsecureamt_t0,0) - greatest(greatest(balance+nvl(af.mrcrlimit,0)+nvl(avladvance,0),0) - nvl(sts.trfsecureamt_in,0),0),0)
                            ,0) > 0
     )
     loop
            plog.DEBUG(pkgctx, 'account:' || rec.afacctno);
            update cimast
            set t0odamt = GREATEST(REC.ADDVND, 0)
            where acctno = rec.afacctno;
     end loop;*/

     MERGE INTO cimast
     USING (select ci.afacctno,
                  greatest(-ci.Balance + nvl(nl.gpamt,0),
                            greatest(
                                    least(
                                        greatest(nvl(sts.trfsecureamt_in,0) - greatest(balance+nvl(af.mrcrlimit,0)+nvl(avladvance,0),0),0)
                                        ,
                                        nvl(trf.trfamt,0)
                                        )
                                ,
                                    -ci.Balance + nvl(nl.gpamt,0)
                                )
                                + greatest(nvl(sts.trfsecureamt_t0,0) - greatest(greatest(balance+nvl(af.mrcrlimit,0)+nvl(avladvance,0),0) - nvl(sts.trfsecureamt_in,0),0),0)
                            ,0) ADDVND
        from
            cimast ci, afmast af, aftype aft, mrtype mrt, cfmast cf,
            (select sts.afacctno,
                                sum(case when sts.txdate = to_date(sy_CURRDATE.varvalue,'DD/MM/RRRR') then amt + feeacr - feeamt - trfexeamt - trft0amt else 0 end) trfsecureamt_t0,
                                sum(case when sts.txdate <> to_date(sy_CURRDATE.varvalue,'DD/MM/RRRR') then amt + feeacr - feeamt - trfexeamt - trft0amt else 0 end) trfsecureamt_in
                            from stschd sts, odmast od, sysvar sy_CURRDATE
                            where sts.orgorderid = od.orderid and duetype = 'SM' and sts.deltd <> 'Y' and trfbuyrate > 0 and trfbuyext > 0 and trfbuysts <> 'Y'
                                and sy_CURRDATE.grname='SYSTEM' and sy_CURRDATE.varname='CURRDATE'
                                and to_date(sy_CURRDATE.varvalue,'DD/MM/RRRR') < nvl(sts.trfbuydt,to_date(sy_CURRDATE.varvalue,'DD/MM/RRRR'))
                            group by sts.afacctno) sts,
            (select sts.afacctno, sum(amt) trfamt
                    from stschd sts, sysvar sy
                    where sts.duetype = 'SM' and sts.deltd <> 'Y' and nvl(sts.trfbuydt,to_date(sy.varvalue,'DD/MM/RRRR')) = to_date(sy.varvalue,'DD/MM/RRRR')
                    and sy.varname = 'CURRDATE' and sts.amt - sts.trfexeamt = 0
                    group by afacctno) trf,
            (select sum(depoamt) avladvance, afacctno from v_getaccountavladvance group by afacctno) adv,
            v_getbuyorderinfo b,
            (select * from ln_gp_log where log_date = to_date(l_currdate,'DD/MM/RRRR') )nl --chaunh
        where af.acctno = ci.afacctno and af.custid = cf.custid
        and af.actype = aft.actype
        and aft.mrtype = mrt.actype  and mrt.mrtype in ('N','L')
        AND AFT.T0LNTYPE IS NOT NULL
        AND af.status <> 'C'
        and af.acctno = nl.acctno(+) --chaunh
        and af.acctno = sts.afacctno(+)
        and af.acctno = adv.afacctno(+)
        and af.acctno = b.afacctno(+)
        and af.acctno = trf.afacctno(+)
        and substr(cf.custodycd ,1,3) = l_COMPANYCD
        and greatest(-ci.Balance  + nvl(nl.gpamt,0),
                            greatest(
                                    least(
                                        greatest(nvl(sts.trfsecureamt_in,0) - greatest(balance+nvl(af.mrcrlimit,0)+nvl(avladvance,0),0),0)
                                        ,
                                        nvl(trf.trfamt,0)
                                        )
                                ,
                                    -ci.Balance  + nvl(nl.gpamt,0)
                                )
                                + greatest(nvl(sts.trfsecureamt_t0,0) - greatest(greatest(balance+nvl(af.mrcrlimit,0)+nvl(avladvance,0),0) - nvl(sts.trfsecureamt_in,0),0),0)
                            ,0) > 0) a
    ON (cimast.acctno = a.afacctno)
    WHEN MATCHED THEN
      UPDATE SET t0odamt = GREATEST(a.ADDVND, 0);

    --1 Phan bo voi T0 cho cac tk margin khong thuoc group
    /*For rec in(
                select ci.afacctno,--nvl(u.t0,0) T0,
\*                        greatest(-ci.Balance,
                                    -ci.Balance
                                    -nvl(se.avladvance,0)
                                    -greatest(least(se.mrcrlimitmax-dfodamt,af.mrcrlimit + nvl(se.seamt,0))
                                                - nvl(ln.ovdprin,0),0)
                                    +nvl(sts.trfsecureamt,0)
                                ,0) ADDVND*\

                  greatest(-ci.Balance  + nvl(nl.gpamt,0),
                            greatest(
                                    least(
                                        greatest(nvl(sts.trfsecureamt_in,0)
                                            - greatest(greatest(balance+nvl(af.mrcrlimit,0)+nvl(avladvance,0),0) + greatest(least(se.mrcrlimitmax-dfodamt,\*af.mrcrlimit +*\ nvl(se.seamt,0)) ,0)- nvl(ovdprin,0) ,0),0)
                                        ,
                                        nvl(trf.trfamt,0)
                                        )
                                ,
                                    -ci.Balance  + nvl(nl.gpamt,0)
                                )
                                + greatest(nvl(sts.trfsecureamt_t0,0) - greatest(greatest(balance+nvl(af.mrcrlimit,0)+nvl(avladvance,0),0)+greatest(least(se.mrcrlimitmax-dfodamt,\*af.mrcrlimit +*\ nvl(se.seamt,0)),0)-nvl(ovdprin,0) - nvl(sts.trfsecureamt_in,0),0),0)
                            ,0) ADDVND
                from
                cimast ci, afmast af, aftype aft, mrtype mrt, cfmast cf,
                    (select sts.afacctno,
                                sum(case when sts.txdate = to_date(sy_CURRDATE.varvalue,'DD/MM/RRRR') then amt + feeacr - feeamt - trfexeamt - trft0amt else 0 end) trfsecureamt_t0,
                                sum(case when sts.txdate <> to_date(sy_CURRDATE.varvalue,'DD/MM/RRRR') then amt + feeacr - feeamt - trfexeamt - trft0amt else 0 end) trfsecureamt_in
                            from stschd sts, odmast od, sysvar sy_CURRDATE
                            where sts.orgorderid = od.orderid and duetype = 'SM' and sts.deltd <> 'Y' and trfbuyrate > 0 and trfbuyext > 0 and trfbuysts <> 'Y'
                                and sy_CURRDATE.grname='SYSTEM' and sy_CURRDATE.varname='CURRDATE'
                                and to_date(sy_CURRDATE.varvalue,'DD/MM/RRRR') < nvl(sts.trfbuydt,to_date(sy_CURRDATE.varvalue,'DD/MM/RRRR'))
                            group by sts.afacctno) sts,
                    \*(Select U.acctno, U.ACCLIMIT - nvl(t0prin,0) T0
                            From
                                (Select acctno, sum(ACCLIMIT) ACCLIMIT
                                From useraflimit
                                Where typereceive = 'T0'
                                Group by acctno) U,
                                (select trfacctno, sum(oprinnml + oprinovd) t0prin from lnmast where ftype = 'AF' group by trfacctno) L
                            where U.acctno = l.trfacctno(+)) U,*\
                    (select trfacctno, sum(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd) ovdprin from lnmast where ftype = 'AF' group by trfacctno) ln,
                    v_getsecmarginratio se,
                    (select sts.afacctno, sum(amt) trfamt
                            from stschd sts, sysvar sy
                            where sts.duetype = 'SM' and sts.deltd <> 'Y' and nvl(sts.trfbuydt,to_date(sy.varvalue,'DD/MM/RRRR')) = to_date(sy.varvalue,'DD/MM/RRRR')
                            and sy.varname = 'CURRDATE' and sts.amt - sts.trfexeamt = 0
                            group by afacctno) trf,
                    --(select afacctno, sum(matchamt+ feeacr - feeamt) matchamt from odmast where txdate = to_date(l_currdate,'DD/MM/RRRR') group by afacctno) od,
                    (select * from ln_gp_log where log_date = to_date(l_currdate,'DD/MM/RRRR') )nl --chaunh
               where (Af.groupleader is null or length(Af.groupleader)<>10)
               and cf.custid = af.custid
               and af.acctno=ci.acctno
               and af.actype = aft.actype
               and aft.mrtype = mrt.actype
               and mrt.mrtype in ('S','T')
               AND AFT.T0LNTYPE IS NOT NULL
               and af.acctno = nl.acctno(+)
               --and af.acctno=U.acctno(+)
               and af.acctno = sts.afacctno(+)
               --and af.acctno = od.afacctno(+)
               and af.acctno = se.afacctno(+)
               and af.acctno = ln.trfacctno(+)
               and af.acctno = trf.afacctno(+)
               and greatest(-ci.Balance  + nvl(nl.gpamt,0),
                            greatest(
                                    least(
                                        greatest(nvl(sts.trfsecureamt_in,0)
                                            - greatest(greatest(balance+nvl(af.mrcrlimit,0)+nvl(avladvance,0),0) + greatest(least(se.mrcrlimitmax-dfodamt,\*af.mrcrlimit +*\ nvl(se.seamt,0)) ,0)- nvl(ovdprin,0) ,0),0)
                                        ,
                                        nvl(trf.trfamt,0)
                                        )
                                ,
                                    -ci.Balance  + nvl(nl.gpamt,0)
                                )
                                + greatest(nvl(sts.trfsecureamt_t0,0) - greatest(greatest(balance+nvl(af.mrcrlimit,0)+nvl(avladvance,0),0)+greatest(least(se.mrcrlimitmax-dfodamt,\*af.mrcrlimit +*\ nvl(se.seamt,0)),0)-nvl(ovdprin,0) - nvl(sts.trfsecureamt_in,0),0),0)
                            ,0) > 0
         )

      loop
            plog.DEBUG(pkgctx, 'account:' || rec.afacctno);
            update cimast
            set t0odamt = GREATEST(REC.ADDVND, 0)
            where acctno = rec.afacctno;
      end loop;*/

      MERGE INTO cimast
      USING (select ci.afacctno,
                  greatest(-ci.Balance  + nvl(nl.gpamt,0),
                            greatest(
                                    least(
                                        greatest(nvl(sts.trfsecureamt_in,0)
                                            - greatest(greatest(balance+nvl(af.mrcrlimit,0)+nvl(avladvance,0),0) + greatest(least(se.mrcrlimitmax-dfodamt,/*af.mrcrlimit +*/ nvl(se.seamt,0)) ,0)- nvl(ovdprin,0) ,0),0)
                                        ,
                                        nvl(trf.trfamt,0)
                                        )
                                ,
                                    -ci.Balance  + nvl(nl.gpamt,0)
                                )
                                + greatest(nvl(sts.trfsecureamt_t0,0) - greatest(greatest(balance+nvl(af.mrcrlimit,0)+nvl(avladvance,0),0)+greatest(least(se.mrcrlimitmax-dfodamt,/*af.mrcrlimit +*/ nvl(se.seamt,0)),0)-nvl(ovdprin,0) - nvl(sts.trfsecureamt_in,0),0),0)
                            ,0) ADDVND
                from
                cimast ci, afmast af, aftype aft, mrtype mrt, cfmast cf,
                    (select sts.afacctno,
                                sum(case when sts.txdate = to_date(sy_CURRDATE.varvalue,'DD/MM/RRRR') then amt + feeacr - feeamt - trfexeamt - trft0amt else 0 end) trfsecureamt_t0,
                                sum(case when sts.txdate <> to_date(sy_CURRDATE.varvalue,'DD/MM/RRRR') then amt + feeacr - feeamt - trfexeamt - trft0amt else 0 end) trfsecureamt_in
                            from stschd sts, odmast od, sysvar sy_CURRDATE
                            where sts.orgorderid = od.orderid and duetype = 'SM' and sts.deltd <> 'Y' and trfbuyrate > 0 and trfbuyext > 0 and trfbuysts <> 'Y'
                                and sy_CURRDATE.grname='SYSTEM' and sy_CURRDATE.varname='CURRDATE'
                                and to_date(sy_CURRDATE.varvalue,'DD/MM/RRRR') < nvl(sts.trfbuydt,to_date(sy_CURRDATE.varvalue,'DD/MM/RRRR'))
                            group by sts.afacctno) sts,
                    (select trfacctno, sum(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd) ovdprin from lnmast where ftype = 'AF' group by trfacctno) ln,
                    v_getsecmarginratio se,
                    (select sts.afacctno, sum(amt) trfamt
                            from stschd sts, sysvar sy
                            where sts.duetype = 'SM' and sts.deltd <> 'Y' and nvl(sts.trfbuydt,to_date(sy.varvalue,'DD/MM/RRRR')) = to_date(sy.varvalue,'DD/MM/RRRR')
                            and sy.varname = 'CURRDATE' and sts.amt - sts.trfexeamt = 0
                            group by afacctno) trf,
                    (select * from ln_gp_log where log_date = to_date(l_currdate,'DD/MM/RRRR') )nl --chaunh
               where (Af.groupleader is null or length(Af.groupleader)<>10)
               and cf.custid = af.custid
               and af.acctno=ci.acctno
               and af.actype = aft.actype
               and aft.mrtype = mrt.actype
               and mrt.mrtype in ('S','T')
               AND AFT.T0LNTYPE IS NOT NULL
               and af.acctno = nl.acctno(+)
               and af.acctno = sts.afacctno(+)
               and af.acctno = se.afacctno(+)
               and af.acctno = ln.trfacctno(+)
               and af.acctno = trf.afacctno(+)
               and greatest(-ci.Balance  + nvl(nl.gpamt,0),
                            greatest(
                                    least(
                                        greatest(nvl(sts.trfsecureamt_in,0)
                                            - greatest(greatest(balance+nvl(af.mrcrlimit,0)+nvl(avladvance,0),0) + greatest(least(se.mrcrlimitmax-dfodamt,/*af.mrcrlimit +*/ nvl(se.seamt,0)) ,0)- nvl(ovdprin,0) ,0),0)
                                        ,
                                        nvl(trf.trfamt,0)
                                        )
                                ,
                                    -ci.Balance  + nvl(nl.gpamt,0)
                                )
                                + greatest(nvl(sts.trfsecureamt_t0,0) - greatest(greatest(balance+nvl(af.mrcrlimit,0)+nvl(avladvance,0),0)+greatest(least(se.mrcrlimitmax-dfodamt,/*af.mrcrlimit +*/ nvl(se.seamt,0)),0)-nvl(ovdprin,0) - nvl(sts.trfsecureamt_in,0),0),0)
                            ,0) > 0) a
       ON (cimast.acctno = a.afacctno)
       WHEN MATCHED THEN
        UPDATE SET t0odamt = GREATEST(a.ADDVND, 0);

       --2 Phan bo voi T0 cho cac tk margin thuoc group
      For rec in
      (
            SELECT  af.groupleader,
                    sum(least(
                        least(nvl(STS.TRFSECUREDAMT,0) + nvl(b.trfsecuredamt,0)
                                    - least(greatest(ci.balance +nvl(af.mrcrlimit,0)+ nvl(adv.avladvance,0) - ci.odamt + least(af.mrcrlimitmax - dfodamt,/*nvl(AF.MRCRLIMIT,0) +*/ nvl(se.SEMRAMT,0)),0),ci.balance), nvl(matchamt,0)),
                        least(greatest(- (getavlpp(ci.acctno)- nvl(STS.TRFSECUREDAMT,0)),0),nvl(matchamt,0)+nvl(trft0addamt,0))
                            )
                        ) ADDVND
               FROM cimast ci, afmast af,aftype aft,mrtype mrt, v_getsecmargininfo SE,
                    (select afacctno, sum(amt * (1 - TRFBUYRATE/100) - trfexeamt) TRFSECUREDAMT
                        from stschd
                        where duetype = 'SM' and deltd <> 'Y' and trfbuysts = 'N' and TRFBUYRATE > 0 and trfbuyext > 0 and status = 'C'
                            and  txdate = to_date(l_currdate,'DD/MM/RRRR')
                        group by afacctno) sts,
                    (select sum(depoamt) avladvance, afacctno from v_getaccountavladvance group by afacctno) adv,
                    (select * from v_getbuyorderinfo) b,
                    (select afacctno, sum(matchamt+ feeacr - feeamt) matchamt from odmast where txdate = to_date(l_currdate,'DD/MM/RRRR') group by afacctno) od
               where (Af.groupleader is not null and length(Af.groupleader)=10)
                and af.acctno=ci.acctno
                and af.actype = aft.actype
                and aft.mrtype = mrt.actype
                and mrt.mrtype in ('S','T')
                AND AFT.T0LNTYPE IS NOT NULL
                and af.acctno=se.afacctno(+)
                and af.acctno = sts.afacctno(+)
                and af.acctno = adv.afacctno(+)
                and af.acctno = od.afacctno(+)
                and af.acctno = b.afacctno(+)
               group by af.groupleader
      )
      loop
            plog.DEBUG(pkgctx, 'groupleader:' || rec.groupleader);
            l_groupleader:=rec.groupleader;
            l_TOTALTOODAMT:=round(REC.ADDVND,0);
            For vc in
            (
                    select af.acctno,
                             abs(least(ci.balance,0)) balance,
                             nvl(sts.TRFSECUREDAMT,0) TRFSECUREDAMT,
                             nvl(U.t0,0) T0
                      From afmast af,
                           cimast ci,
                           (select afacctno, sum(amt * (1 - TRFBUYRATE/100) - trfexeamt) TRFSECUREDAMT
                                from stschd
                                where duetype = 'SM'  and deltd <> 'Y' and trfbuysts = 'N' and TRFBUYRATE > 0 and trfbuyext > 0 and status = 'C'
                                    and  txdate = to_date(l_currdate,'DD/MM/RRRR')
                                group by afacctno) sts,
                          (Select U.acctno, U.ACCLIMIT - nvl(t0prin,0) T0
                            From
                                (Select acctno, sum(ACCLIMIT) ACCLIMIT
                                From useraflimit
                                Where typereceive = 'T0'
                                Group by acctno) U, (select trfacctno, sum(oprinnml + oprinovd) t0prin from lnmast where ftype = 'AF' group by trfacctno) L
                            where U.acctno = l.trfacctno(+)
                           ) U
                      where af.acctno=ci.acctno
                      and af.groupleader=rec.groupleader
                      and af.acctno=U.acctno(+)
                      and af.acctno = sts.afacctno(+)
                      order by ci.balance, CI.TRFBUYAMT DESC
            )
            Loop
            l_toodamt := least(l_TOTALTOODAMT,vc.T0);
            l_TOTALTOODAMT:= l_TOTALTOODAMT- l_toodamt;
            l_toamt:=round(vc.T0-l_toodamt,0);
            gentransaction1159_t2(vc.acctno, l_toodamt,l_toamt);
            End loop;
      End loop;


      if cspks_saproc.fn_SBS_AutoGenAdvanceLine(p_err_code) <> 0 then
            p_err_code:= errnums.C_SYSTEM_ERROR; --Loi he thong
            plog.setendsection(pkgctx, 'pr_SAGeneralWorking');
            return;
      end if;
      p_err_code:=0;
      plog.setendsection(pkgctx, 'pr_T0OverdraftCalculate');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_T0OverdraftCalculate');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_T0OverdraftCalculate;

---------------------------------pr_T2OverdraftInterestAccure------------------------------------------------
  PROCEDURE pr_T2OverdraftInterestAccure(p_err_code  OUT varchar2)
  IS
      v_frdate VARCHAR2(10);
      v_todate VARCHAR2(10);
      v_days NUMBER(20,0);
  BEGIN
    plog.setendsection(pkgctx, 'pr_T2OverdraftInterestAccure');
    v_frdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'PREVDATE');
    v_todate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');
    v_days:=to_date(v_todate,systemnums.c_date_format)-to_date(v_frdate,systemnums.c_date_format);
    INSERT INTO ciinttran
    (AUTOID,ACCTNO,INTTYPE,FRDATE,TODATE,ICRULE,IRRATE,INTBAL,INTAMT)
    select seq_ciinttran.NEXTVAL, mst.acctno,'OD',to_date(V_FRDATE,'DD/MM/YYYY'),to_date(V_TODATE,'DD/MM/YYYY'),
        ICDEF.RULETYPE,icdef.ICRATE,mst.T2ODAMT odamt,round(T2ODAMT*icdef.ICRATE/100/360*V_DAYS,4) intamt
    from (SELECT A.ACCTNO,A.ACTYPE,A.STATUS,A.ODAMT-NVL(STS.T2AMT,0) T2ODAMT FROM CIMAST A,
                (SELECT AFACCTNO, SUM(AMT+ FEEAMT) T2AMT FROM
                    (SELECT S.AFACCTNO, SUM(S.AMT) AMT , MAX(OD.FEEAMT) FEEAMT FROM STSCHD S,ODMAST OD
                    WHERE S.ORGORDERID=OD.ORDERID
                    AND DUETYPE ='RS' AND STATUS <> 'C'
                    AND GETDUEDATE(S.TXDATE,'B','000',2) >=
                    (SELECT TO_DATE(VARVALUE,'DD/MM/YYYY') FROM SYSVAR WHERE GRNAME ='SYSTEM' AND VARNAME='CURRDATE')
                    GROUP BY ORGORDERID,S.AFACCTNO)
                    GROUP BY AFACCTNO
                ) STS
                WHERE A.AFACCTNO = STS.AFACCTNO (+)
         ) mst,
        citype typ,iccftypedef icdef
    where MST.T2ODAMT >0  and mst.actype=typ.actype and mst.status <>'C'
        and typ.actype=icdef.actype and icdef.modcode ='CI' and eventcode='ODT2INTACR'
        and icdef.ruletype IN ('S','F') and icdef.deltd='N';

    update cimast set ODINTDT=to_date(V_TODATE,'DD/MM/YYYY'),
        odintacr=odintacr
        + nvl(
        (
            select intamt from
                (select round(MST.T2ODAMT*icdef.ICRATE/100/360*V_DAYS,4) intamt, mst.acctno
                from (SELECT A.ACCTNO,A.ACTYPE,A.STATUS,A.ODAMT-NVL(STS.T2AMT,0) T2ODAMT FROM CIMAST A,
                        (SELECT AFACCTNO, SUM(AMT+ FEEAMT) T2AMT FROM
                            (SELECT S.AFACCTNO, SUM(S.AMT) AMT , MAX(OD.FEEAMT) FEEAMT FROM STSCHD S,ODMAST OD
                            WHERE S.ORGORDERID=OD.ORDERID
                            AND DUETYPE ='RS' AND STATUS <> 'C'
                            AND GETDUEDATE(S.TXDATE,'B','000',2) >=
                            (SELECT TO_DATE(VARVALUE,'DD/MM/YYYY') FROM SYSVAR WHERE GRNAME ='SYSTEM' AND VARNAME='CURRDATE')
                            GROUP BY ORGORDERID,S.AFACCTNO)
                            GROUP BY AFACCTNO
                        ) STS
                        WHERE A.AFACCTNO = STS.AFACCTNO (+)
                    ) mst,citype typ,iccftypedef icdef
                where MST.T2ODAMT >0
                    and mst.actype=typ.actype and mst.status <>'C' and typ.actype=icdef.actype
                    and icdef.modcode ='CI' and eventcode='ODT2INTACR'
                    and icdef.ruletype IN ('S','F') and icdef.deltd='N'
                ) A
            where A.acctno=cimast.acctno
        ),0);
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_T2OverdraftInterestAccure');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_T2OverdraftInterestAccure');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_T2OverdraftInterestAccure;

---------------------------------pr_SimpleOvdtInterestAccure------------------------------------------------
  PROCEDURE pr_SimpleOvdtInterestAccure(p_err_code  OUT varchar2)
  IS
      v_frdate VARCHAR2(10);
      v_todate VARCHAR2(10);
      v_days NUMBER(20,0);
  BEGIN
    plog.setendsection(pkgctx, 'pr_SimpleOvdtInterestAccure');
    v_frdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'PREVDATE');
    v_todate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');
    v_days:=to_date(v_todate,systemnums.c_date_format)-to_date(v_frdate,systemnums.c_date_format);
    INSERT INTO ciinttran
    (AUTOID,ACCTNO,INTTYPE,FRDATE,TODATE,ICRULE,IRRATE,INTBAL,INTAMT)
    select seq_ciinttran.NEXTVAL, mst.acctno,'OD',to_date(v_frdate,'DD/MM/YYYY'),to_date(v_todate,'DD/MM/YYYY'),
        'S',icdef.ICRATE,mst.odamt,round(mst.odamt*icdef.ICRATE/100/360*v_days,4) intamt
    from cimast mst,citype typ,iccftypedef icdef
    where odamt >0  and mst.actype=typ.actype and mst.status <>'C'
        and typ.actype=icdef.actype and icdef.modcode ='CI' and eventcode='ODINTACR'
        and icdef.ruletype='S' and icdef.deltd='N';

    update cimast set ODINTDT=to_date(v_todate,'DD/MM/YYYY'),
        odintacr=odintacr
        + nvl(
        (
            select intamt from
                (select round(mst.odamt*icdef.ICRATE/100/360*v_days,4) intamt, mst.acctno
                from cimast mst,citype typ,iccftypedef icdef
                where odamt >0
                    and mst.actype=typ.actype and mst.status <>'C' and typ.actype=icdef.actype
                    and icdef.modcode ='CI' and eventcode='ODINTACR'
                    and icdef.ruletype='S' and icdef.deltd='N'
                ) A
            where A.acctno=cimast.acctno
        ),0);
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_SimpleOvdtInterestAccure');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_SimpleOvdtInterestAccure');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_SimpleOvdtInterestAccure;


---------------------------------pr_CILateSendMoney------------------------------------------------
PROCEDURE pr_CILateSendMoney(p_bchmdl varchar,p_err_code  OUT varchar2)
IS
    l_txmsg tx.msg_rectype;
    v_strCURRDATE varchar2(20);
    v_strDesc varchar2(1000);
    v_strEN_Desc varchar2(1000);
    l_err_param varchar2(300);
BEGIN
    plog.setendsection(pkgctx, 'pr_CILateSendMoney');

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8889';
    SELECT TO_DATE (varvalue, systemnums.c_date_format)
              INTO v_strCURRDATE
              FROM sysvar
              WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
            SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
    INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8889';

    FOR rec IN
    (
        SELECT sts.AUTOID,sts.ACCTNO,sts.TXDATE,(sts.AMT-sts.trfexeamt) AMT,sts.AFACCTNO,sts.TRFBUYDT,sts.TRFBUYSTS, sts.ORGORDERID,
               sb.symbol,sts.qtty
        FROM STSCHD sts, afmast af, cfmast cf, sbsecurities sb
        WHERE DUETYPE='SM' AND sts.STATUS='C'
        AND TRFBUYSTS='N' AND TRFBUYDT=v_strCURRDATE
        and sts.afacctno = af.acctno and af.custid = cf.custid
        and cf.custatcom = 'Y' and sts.AMT-sts.trfexeamt > 0
        AND sb.codeid=sts.codeid
    )
    LOOP
        BEGIN
             SELECT systemnums.C_BATCH_PREFIXED
                   || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
            INTO l_txmsg.txnum
            FROM DUAL;
            l_txmsg.brid:= substr(rec.AFACCTNO,1,4);

            l_txmsg.txfields ('01').defname   := 'STSCHDAUTOID';
            l_txmsg.txfields ('01').TYPE      := 'N';
            l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

            l_txmsg.txfields ('03').defname   := 'CIACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;

            l_txmsg.txfields ('05').defname   := 'AFACCTNO';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;

            l_txmsg.txfields ('08').defname   := 'ORGORDERID';
            l_txmsg.txfields ('08').TYPE      := 'C';
            l_txmsg.txfields ('08').VALUE     := rec.ORGORDERID;

            l_txmsg.txfields ('10').defname   := 'AMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := rec.AMT;

            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := UTF8NUMS.c_const_TLTX_TXDESC_8865 || ' ' ||  trim(to_char(rec.QTTY,'999,999,999,999,999,999,999'))  || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' '|| to_date(rec.txdate,'DD/MM/RRRR');

            BEGIN
                IF txpks_#8889.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 8889: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
            p_err_code:=0;
            plog.setendsection(pkgctx, 'pr_CILateSendMoney');
        END;
    END LOOP;

EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CILateSendMoney');
      RAISE errnums.E_SYSTEM_ERROR;
END;

--TungNT added - for corebank
---------------------------------pr_CILateSendMoney------------------------------------------------
PROCEDURE pr_CILateSendMoneyCB(p_err_code  OUT varchar2)
IS
    l_txmsg tx.msg_rectype;
    v_strCURRDATE varchar2(20);
    v_strDesc varchar2(1000);
    v_strEN_Desc varchar2(1000);
    l_err_param varchar2(300);
BEGIN
    plog.setendsection(pkgctx, 'pr_CILateSendMoneyCB');

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8889';
    SELECT TO_DATE (varvalue, systemnums.c_date_format)
              INTO v_strCURRDATE
              FROM sysvar
              WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
            SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
    INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := 'CILATESENDMONEY';
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8889';

    FOR rec IN
    (
        SELECT CHD.AUTOID,CHD.ACCTNO,CHD.TXDATE,(CHD.AMT-CHD.trfexeamt) AMT,CHD.AFACCTNO,CHD.TRFBUYDT,CHD.TRFBUYSTS, CHD.ORGORDERID,
               chd.qtty, sb.symbol
        FROM STSCHD CHD,CIMAST CI, afmast af, cfmast cf,sbsecurities sb
        WHERE CHD.AFACCTNO=CI.AFACCTNO AND CI.COREBANK='Y' AND CHD.DUETYPE='SM' AND CHD.STATUS='C'
        AND CHD.TRFBUYSTS='N' AND CHD.TRFBUYDT=v_strCURRDATE
        and CHD.afacctno = af.acctno and af.custid = cf.custid
        and cf.custatcom = 'Y' and CHD.AMT-CHD.trfexeamt > 0
        AND sb.codeid=chd.codeid
    )
    LOOP
        BEGIN
             SELECT systemnums.C_BATCH_PREFIXED
                   || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
            INTO l_txmsg.txnum
            FROM DUAL;
            l_txmsg.brid:= substr(rec.AFACCTNO,1,4);

            l_txmsg.txfields ('01').defname   := 'STSCHDAUTOID';
            l_txmsg.txfields ('01').TYPE      := 'N';
            l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

            l_txmsg.txfields ('03').defname   := 'CIACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;

            l_txmsg.txfields ('05').defname   := 'AFACCTNO';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;

            l_txmsg.txfields ('08').defname   := 'ORGORDERID';
            l_txmsg.txfields ('08').TYPE      := 'C';
            l_txmsg.txfields ('08').VALUE     := rec.ORGORDERID;

            l_txmsg.txfields ('10').defname   := 'AMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := rec.AMT;

            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     :=  UTF8NUMS.c_const_TLTX_TXDESC_8865 || ' ' ||  trim(to_char(rec.QTTY,'999,999,999,999,999,999,999'))  || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' '|| to_date(rec.txdate,'DD/MM/RRRR');
            --v_strDesc || ' ' ||  trim(to_char(rec.QTTY,'999,999,999,999,999,999,999'))  || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' '|| to_date(rec.txdate,'DD/MM/RRRR');

            BEGIN
                IF txpks_#8889.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 8889: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
            p_err_code:=0;
            plog.setendsection(pkgctx, 'pr_CILateSendMoneyCB');
        END;
    END LOOP;

EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CILateSendMoneyCB');
      RAISE errnums.E_SYSTEM_ERROR;
END;
--End



---------------------------------pr_CIT0SendMoney------------------------------------------------
PROCEDURE pr_CIT0SendMoney(p_bchmdl varchar,p_err_code  OUT varchar2)
IS
    l_txmsg tx.msg_rectype;
    v_strCURRDATE varchar2(20);
    v_strDesc varchar2(1000);
    v_strEN_Desc varchar2(1000);
    l_err_param varchar2(300);
    l_t0ODAmt number(20,4);
BEGIN
    plog.setendsection(pkgctx, 'pr_CIT0SendMoney');

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8889';
    SELECT TO_DATE (varvalue, systemnums.c_date_format)
              INTO v_strCURRDATE
              FROM sysvar
              WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
            SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
    INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8889';

    FOR rec IN
    (
        SELECT AUTOID,sts.ACCTNO,sts.TXDATE,greatest(AMT + feeacr - feeamt - trft0amt - trfexeamt,0) AMT,sts.AFACCTNO,TRFBUYDT,TRFBUYSTS, ORGORDERID,
               sts.qtty, sb.symbol
        FROM STSCHD sts, odmast od, afmast af, cfmast cf,sbsecurities sb
        WHERE sts.orgorderid = od.orderid and DUETYPE='SM' AND sts.STATUS='C'
        AND TRFBUYSTS='N' AND sts.TXDATE=v_strCURRDATE
        and sts.afacctno = af.acctno and af.custid = cf.custid
        and cf.custatcom = 'Y' and greatest(AMT + feeacr - feeamt - trft0amt - trfexeamt,0) > 0
        AND sts.codeid=sb.codeid
    )
    LOOP
        BEGIN

            select t0odamt into l_t0ODAmt from cimast where afacctno = rec.AFACCTNO;
             SELECT systemnums.C_BATCH_PREFIXED
                   || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
            INTO l_txmsg.txnum
            FROM DUAL;
            l_txmsg.brid:= substr(rec.AFACCTNO,1,4);

            l_txmsg.txfields ('01').defname   := 'STSCHDAUTOID';
            l_txmsg.txfields ('01').TYPE      := 'N';
            l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

            l_txmsg.txfields ('03').defname   := 'CIACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;

            l_txmsg.txfields ('05').defname   := 'AFACCTNO';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;

            l_txmsg.txfields ('08').defname   := 'ORGORDERID';
            l_txmsg.txfields ('08').TYPE      := 'C';
            l_txmsg.txfields ('08').VALUE     := rec.ORGORDERID;

            l_txmsg.txfields ('10').defname   := 'AMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := least(rec.AMT,l_t0ODAmt);

            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     :=  UTF8NUMS.c_const_TLTX_TXDESC_8865 || ' ' ||  trim(to_char(rec.QTTY,'999,999,999,999,999,999,999'))  || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' '|| to_date(rec.txdate,'DD/MM/RRRR');
            --v_strDesc || ' ' ||  trim(to_char(rec.QTTY,'999,999,999,999,999,999,999'))  || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' '|| to_date(rec.txdate,'DD/MM/RRRR');

            BEGIN
                IF txpks_#8889.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 8889: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
            p_err_code:=0;
            plog.setendsection(pkgctx, 'pr_CIT0SendMoney');
        END;
    END LOOP;

EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CIT0SendMoney');
      RAISE errnums.E_SYSTEM_ERROR;
END;

--TungNT added , for corebank
---------------------------------pr_CIT0SendMoney------------------------------------------------
PROCEDURE pr_CIT0SendMoneyCB(p_err_code  OUT varchar2)
IS
    l_txmsg tx.msg_rectype;
    v_strCURRDATE varchar2(20);
    v_strDesc varchar2(1000);
    v_strEN_Desc varchar2(1000);
    l_err_param varchar2(300);
    l_t0ODAmt number(20,4);
BEGIN
    plog.setendsection(pkgctx, 'pr_CIT0SendMoneyCB');

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8889';
    SELECT TO_DATE (varvalue, systemnums.c_date_format)
              INTO v_strCURRDATE
              FROM sysvar
              WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
            SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
    INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := 'CIT0SENDMONEY';
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8889';

    FOR rec IN
    (
        SELECT AUTOID,sts.ACCTNO,sts.TXDATE,greatest(AMT + feeacr - feeamt - trft0amt - trfexeamt,0) AMT,sts.AFACCTNO,TRFBUYDT,TRFBUYSTS, ORGORDERID,
               sts.qtty, sb.symbol
        FROM STSCHD sts, odmast od,cimast ci, afmast af, cfmast cf, sbsecurities sb
        WHERE sts.orgorderid = od.orderid and DUETYPE='SM' AND sts.STATUS='C'
        AND sts.AFACCTNO=ci.AFACCTNO AND CI.COREBANK='Y' AND TRFBUYSTS='N' AND sts.TXDATE=v_strCURRDATE
        and sts.afacctno = af.acctno and af.custid = cf.custid
        and cf.custatcom = 'Y' and greatest(AMT + feeacr - feeamt - trft0amt - trfexeamt,0) > 0
        AND sb.codeid=sts.codeid
    )
    LOOP
        BEGIN

            select t0odamt into l_t0ODAmt from cimast where afacctno = rec.AFACCTNO;
             SELECT systemnums.C_BATCH_PREFIXED
                   || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
            INTO l_txmsg.txnum
            FROM DUAL;
            l_txmsg.brid:= substr(rec.AFACCTNO,1,4);

            l_txmsg.txfields ('01').defname   := 'STSCHDAUTOID';
            l_txmsg.txfields ('01').TYPE      := 'N';
            l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

            l_txmsg.txfields ('03').defname   := 'CIACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;

            l_txmsg.txfields ('05').defname   := 'AFACCTNO';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;

            l_txmsg.txfields ('08').defname   := 'ORGORDERID';
            l_txmsg.txfields ('08').TYPE      := 'C';
            l_txmsg.txfields ('08').VALUE     := rec.ORGORDERID;

            l_txmsg.txfields ('10').defname   := 'AMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := least(rec.AMT,l_t0ODAmt);

            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     :=  UTF8NUMS.c_const_TLTX_TXDESC_8865 || ' ' ||  trim(to_char(rec.QTTY,'999,999,999,999,999,999,999'))  || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' '|| to_date(rec.txdate,'DD/MM/RRRR');
            --v_strDesc || ' ' ||  trim(to_char(rec.QTTY,'999,999,999,999,999,999,999'))  || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' '|| to_date(rec.txdate,'DD/MM/RRRR');

            BEGIN
                IF txpks_#8889.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 8889: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
            p_err_code:=0;
            plog.setendsection(pkgctx, 'pr_CIT0SendMoneyCB');
        END;
    END LOOP;

EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CIT0SendMoneyCB');
      RAISE errnums.E_SYSTEM_ERROR;
END;
--End

---------------------------------pr_SimpleCreditInterestAccure------------------------------------------------
  PROCEDURE pr_SimpleCreditInterestAccure(p_err_code  OUT varchar2)
  IS
      v_frdate VARCHAR2(10);
      v_todate VARCHAR2(10);
      v_days NUMBER(20,0);
      v_Runat varchar2(20);
  BEGIN
    plog.setendsection(pkgctx, 'pr_SimpleCreditInterestAccure');
    --Neu chay batch cuoi ngay thi tinh tu ngya hien tai den ngay ke tiep
    --Neu chay batch dau ngay thi tinh tu ngay hom truoc den ngay hien tai
    select runat into v_runat from sbbatchctl where bchmdl ='SCRINTACR';
    if v_runat ='BOD' then
        v_frdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'PREVDATE');
        v_todate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');
    else
        v_frdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');
        v_todate:=cspks_system.fn_get_sysvar ('SYSTEM', 'NEXTDATE');
    end if;
    --v_frdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'PREVDATE');
    --v_todate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');
    v_days:=to_date(v_todate,systemnums.c_date_format)-to_date(v_frdate,systemnums.c_date_format);
/*
    INSERT INTO ciinttran
    (AUTOID,ACCTNO,INTTYPE,FRDATE,TODATE,ICRULE,IRRATE,INTBAL,INTAMT)
    select seq_ciinttran.NEXTVAL, mst.acctno,'CR',to_date(v_frdate,'DD/MM/YYYY'),to_date(v_todate,'DD/MM/YYYY'),
        'S',icdef.ICRATE,mst.balance + nvl(sts.exeamt,0),round((mst.balance+nvl(sts.exeamt,0))*icdef.ICRATE/100/360*V_DAYS,4) intamt
    from cimast mst,citype typ,iccftypedef icdef,
                                    (select acctno , sum(trfexeamt) exeamt
                                    from stschd sts, sbsecurities sb
                                    where sts.codeid = sb.codeid and duetype = 'SM' and sts.deltd <> 'Y' and trfbuysts = 'N'
                                        and sts.cleardate <= (select to_date(varvalue,'DD/MM/RRRR') from sysvar where varname = 'CURRDATE')
                                    group by acctno) sts,
                                    CFMAST CF
    where mst.balance+nvl(sts.exeamt,0) >0  and mst.actype=typ.actype and mst.status <>'C' and mst.status <>'N'
        and typ.actype=icdef.actype and icdef.modcode ='CI' and eventcode='CRINTACR'
        and icdef.ruletype='S' and icdef.deltd='N'
        and mst.acctno = sts.acctno(+)
        and mst.corebank <> 'Y'
        AND MST.CUSTID=CF.CUSTID AND CF.CUSTATCOM='Y';
*/

    INSERT INTO ciinttran
    (AUTOID,ACCTNO,INTTYPE,FRDATE,TODATE,ICRULE,IRRATE,INTBAL,INTAMT)
    select seq_ciinttran.NEXTVAL, mst.acctno,'CR',to_date(v_frdate,'DD/MM/YYYY'),to_date(v_todate,'DD/MM/YYYY'),
        'S',icdef.ICRATE,mst.balance ,round(mst.balance *icdef.ICRATE/100/360*V_DAYS,4) intamt
    from cimast mst,citype typ,iccftypedef icdef, CFMAST CF
    where mst.balance >0  and mst.actype=typ.actype and mst.status <>'C' and mst.status <>'N'
        and typ.actype=icdef.actype and icdef.modcode ='CI' and eventcode='CRINTACR'
        and icdef.ruletype='S' and icdef.deltd='N'
        and mst.corebank <> 'Y'
        AND MST.CUSTID=CF.CUSTID AND CF.CUSTATCOM='Y';


    update cimast set CRINTDT=to_date(v_todate,'DD/MM/YYYY'),
        crintacr=crintacr
        + nvl(
        (
        /*
           select intamt from
                (select round(mst.balance+nvl(sts.trfexeamt,0))*icdef.icrate/100/360*V_DAYS,4) intamt, mst.acctno
                from cimast mst,citype typ,iccftypedef icdef,
                                    (select acctno , sum(trfexeamt) trfexeamt
                                    from stschd sts, sbsecurities sb
                                    where sts.codeid = sb.codeid and duetype = 'SM' and sts.deltd <> 'Y' and trfbuysts = 'N'
                                        and sts.cleardate <= (select to_date(varvalue,'DD/MM/RRRR') from sysvar where varname = 'CURRDATE')
                                    group by acctno) sts,
                                    CFMAST CF
                where mst.balance+nvl(sts.trfexeamt,0) >0
                    and mst.actype=typ.actype and mst.status <>'C' and mst.status <>'N'
                    and typ.actype=icdef.actype
                    and icdef.modcode ='CI' and eventcode='CRINTACR'
                    and icdef.ruletype='S' and icdef.deltd='N'
                    and mst.acctno = sts.acctno(+)
                    AND CF.CUSTID=MST.CUSTID AND CF.CUSTATCOM='Y'
          */
              select intamt from
                (select round(mst.balance*icdef.icrate/100/360*V_DAYS,4) intamt, mst.acctno
                from cimast mst,citype typ,iccftypedef icdef, CFMAST CF
                where mst.balance >0
                    and mst.actype=typ.actype and mst.status <>'C' and mst.status <>'N'
                    and typ.actype=icdef.actype
                    and icdef.modcode ='CI' and eventcode='CRINTACR'
                    and icdef.ruletype='S' and icdef.deltd='N'
                    AND CF.CUSTID=MST.CUSTID AND CF.CUSTATCOM='Y'

                ) A
            where A.acctno=cimast.acctno
        ),0);
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_SimpleCreditInterestAccure');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_SimpleCreditInterestAccure');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_SimpleCreditInterestAccure;

---------------------------------pr_ICCFCreditInterestAccure------------------------------------------------
PROCEDURE pr_ICCFCreditInterestAccure(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE     Varchar2(20);
      v_strPREVDATE     Varchar2(20);
      v_strNEXTDATE     Varchar2(20);
      v_strDesc         Varchar2(1000);
      v_strEN_Desc      Varchar2(1000);
      v_blnVietnamese   BOOLEAN;
      l_err_param       Varchar2(300);
      l_MaxRow          NUMBER(20,0);
      l_intrate         Number(20,6);
      l_rightrate       Number(20,6);
      v_delta           Number(20,6);
      l_ruletype        Varchar2(10);
      l_CalcDays        Number;
      l_dblINTAMT       Number(20,4);
      v_inttype         Varchar2(10);
      l_dblTotalAmt        Number(20,4);
      l_dblTempAmt         Number(20,4);
      l_Count           Number;
      l_TempCount       Number;

      v_frdate date;
      v_todate date;
      v_Runat varchar2(20);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ICCFCreditInterestAccure');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  AFMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

    SELECT varvalue
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    SELECT varvalue
               INTO v_strPREVDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'PREVDATE';

    SELECT varvalue
               INTO v_strNEXTDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'NEXTDATE';

    --Neu chay batch cuoi ngay thi tinh tu ngya hien tai den ngay ke tiep
    --Neu chay batch dau ngay thi tinh tu ngay hom truoc den ngay hien tai
    select runat into v_runat from sbbatchctl where bchmdl ='CICRINTACR';
    if v_runat ='BOD' then
        v_frdate:=to_date(v_strPREVDATE,'DD/MM/RRRR');
        v_todate:=to_date(v_strCURRDATE,'DD/MM/RRRR');
    else
        v_frdate:=to_date(v_strCURRDATE,'DD/MM/RRRR');
        v_todate:=to_date(v_strNEXTDATE,'DD/MM/RRRR');
    end if ;

    BEGIN
        --Select to_date(v_strCURRDATE,systemnums.c_date_format) -
        --        to_date(v_strPREVDATE,systemnums.c_date_format) into l_CalcDays
        --From dual;
        Select  v_todate -
                v_frdate into l_CalcDays
        From dual;
    EXCEPTION
        WHEN OTHERS
        THEN l_CalcDays := 1;
    END;

    l_intrate:= 0;
    v_delta:= 0;
    v_inttype := 'CR';

    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    for rec in
    (
        SELECT MST.*, AF.TRADERATE, AF.DEPORATE, AF.MISCRATE, (mst.balance) INTBAL, CIT.RATEID, CIT.EFFECTIVEDT
        FROM AFMAST AF,
            ( SELECT A.ACTYPE, A.RATEID, B.EFFECTIVEDT
              FROM ICCFTYPEDEF I, CITYPE A LEFT JOIN IRRATE B ON A.RATEID = B.RATEID
              WHERE A.ACTYPE = I.ACTYPE AND I.MODCODE ='CI' AND I.EVENTCODE ='CRINTACR'
            ) CIT,
            (
                SELECT MOD.* FROM (SELECT ROWNUM INDEXROW, CIMAST.* FROM CIMAST) MOD WHERE INDEXROW BETWEEN p_FromRow AND p_ToRow
            ) MST, CFMAST CF
        WHERE   AF.ACCTNO=MST.AFACCTNO
                AND CIT.ACTYPE = MST.ACTYPE
                and mst.corebank <> 'Y'
                AND af.status <> 'N'
                AND cf.custid=af.custid
                AND cf.custatcom='Y'-- PhuongHT sua chi tinh lai tien gui cho tklk tai cong ty
                AND NOT EXISTS (SELECT 1 FROM EXAFMAST WHERE STATUS <> 'E' AND EXTYPE='B' AND MODCODE='CI' AND EVENTCODE='CRINTACR' AND EXPDATE>=TO_DATE(v_strCURRDATE,systemnums.c_date_format) AND afacctno = mst.afacctno) --DIEU KIEN LOAI BO NHUNG KHACH HANG DUOC MIEN PHI --MSBS-2589

    )
    loop

        -- Neu lich lai cai dat truoc da den ngay hieu luc
        -- Tinh lai theo lich da cai dat truoc
        If rec.INTBAL > 0 then

            If To_Date(REC.EFFECTIVEDT,systemnums.c_date_format) <= To_Date(v_strCURRDATE,systemnums.c_date_format) Then

                l_intrate := cspks_ciproc.pr_IRCalcCreditInterest(rec.actype, rec.intbal, l_ruletype);
                l_dblINTAMT := round(l_intrate/100/360*REC.INTBAL * l_CalcDays,4);

                If l_dblINTAMT > 0 Then
                    INSERT INTO ciinttran(autoid, acctno, inttype, frdate, todate, icrule, irrate, intbal, intamt)
                    VALUES(seq_ciinttran.nextval, rec.ACCTNO, v_inttype, v_frdate, v_todate, l_ruletype, nvl(l_intrate,0), rec.INTBAL, nvl(l_dblINTAMT,0));
                    UPDATE CIMAST SET CRINTACR = CRINTACR + nvl(l_dblINTAMT,0) , CRINTDT = to_date(v_strCURRDATE,systemnums.c_date_format) WHERE ACCTNO = rec.ACCTNO;
                End If;

            Else
                    --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                    begin
                        --Lay base rate trong iccftypedef
                        select icrate,ruletype into l_intrate,l_ruletype
                        from iccftypedef
                        where actype = rec.actype
                              and modcode ='CI'
                              and eventcode='CRINTACR'
                              and deltd <> 'Y'
                              -- Ham nay chi tinh cho 3 TH : F: Co dinh, T: Tier, C: Cluster, TH S: Don gian co han khac tinh.
                              and ruletype in ('T','C','F');
                        --Xac dinh tier
                        If l_ruletype ='T' Then

                            select delta into v_delta from iccftier
                            where actype =rec.actype and modcode ='CI'
                            and eventcode='CRINTACR' and deltd <> 'Y'
                            and framt < rec.INTBAL and toamt > rec.INTBAL;

                            l_intrate:=l_intrate+v_delta;
                            l_dblINTAMT := round(l_intrate/100/360*REC.INTBAL * l_CalcDays,4);

                        Elsif l_ruletype='C'  Then

                            v_delta:=0;
                            l_dblINTAMT :=0;
                            l_dblTotalAmt := rec.INTBAL;
                            l_TempCount := 0;

                            BEGIN
                                    SELECT count(1) into l_Count
                                    FROM iccftypedef A, iccftier B
                                    WHERE A.eventcode = 'CRINTACR' and A.deltd <> 'Y'
                                          AND A.actype = B.actype AND A.eventcode = B.eventcode
                                          AND A.modcode ='CI' and A.modcode =B.modcode
                                          AND A.ACTYPE = REC.ACTYPE AND B.TOAMT <= l_dblTotalAmt;
                                Exception When Others Then l_Count:= 0;
                            End;

                            FOR Cluster_Rec IN
                            (
                                SELECT A.operand, a.icrate,  B.autoid, B.modcode, B.actype, B.eventcode, B.tiername, B.framt, B.toamt, B.delta, B.iccfstatus, B.deltd
                                FROM iccftypedef A, iccftier B
                                WHERE A.eventcode = 'CRINTACR' and A.deltd <> 'Y'
                                      AND A.actype = B.actype AND A.eventcode = B.eventcode
                                      AND A.modcode ='CI' and A.modcode =B.modcode
                                      AND A.ACTYPE = REC.ACTYPE AND B.TOAMT <= l_dblTotalAmt
                                ORDER BY B.FRAMT DESC
                            )Loop

                                If Cluster_Rec.operand = '+' Then
                                    l_intrate := Cluster_Rec.icrate +  Cluster_Rec.delta;
                                Elsif Cluster_Rec.operand = '-' Then
                                    l_intrate := Cluster_Rec.icrate  - Cluster_Rec.delta;
                                Elsif Cluster_Rec.operand = '=' Then
                                    l_intrate := Cluster_Rec.delta;
                                End If;


                                If l_Count > l_TempCount Then
                                    l_TempCount := l_TempCount + 1;
                                    l_dblTempAmt := l_dblTotalAmt - Cluster_Rec.framt;
                                    l_dblTotalAmt := l_dblTotalAmt - Cluster_Rec.framt;
                                Else
                                    l_dblTempAmt := l_dblTotalAmt;
                                End If;

                                -- Tien lai
                                l_dblINTAMT := round(l_intrate/100/360*l_dblTempAmt * l_CalcDays,4);

                                If l_dblINTAMT > 0 then

                                    INSERT INTO ciinttran(autoid, acctno, inttype, frdate, todate, icrule, irrate, intbal, intamt)
                                    VALUES(seq_ciinttran.nextval, rec.ACCTNO, v_inttype, v_frdate, v_todate, l_ruletype, l_intrate, l_dblTempAmt, l_dblINTAMT);

                                    UPDATE CIMAST SET CRINTACR = CRINTACR + l_dblINTAMT , CRINTDT = to_date(v_strCURRDATE,systemnums.c_date_format) WHERE ACCTNO = rec.ACCTNO;

                                End If;

                            End Loop;
                        Else -- If l_ruletype ='T' Then
                            v_delta:=0;
                            l_dblINTAMT := round(l_intrate/100/360*REC.INTBAL * l_CalcDays,4) ;
                        End if;

                        -- l_intrate:=l_intrate+v_delta;

                    Exception When Others Then
                        l_intrate := 0;
                        l_dblINTAMT := round(l_intrate/100/360*REC.INTBAL * l_CalcDays,4) ;
                    End;


                    If l_ruletype <> 'C' And l_dblINTAMT > 0 Then

                        /*INSERT INTO ciinttran(autoid, acctno, inttype, frdate, todate, icrule, irrate, intbal, intamt)
                        VALUES(seq_ciinttran.nextval, rec.ACCTNO, v_inttype, to_date(v_strPREVDATE,systemnums.c_date_format), to_date(v_strCURRDATE,systemnums.c_date_format), l_ruletype, l_intrate, rec.INTBAL, l_dblINTAMT);
                        UPDATE CIMAST SET CRINTACR = CRINTACR + l_dblINTAMT , CRINTDT = to_date(v_strCURRDATE,systemnums.c_date_format) WHERE ACCTNO = rec.ACCTNO;*/
                        INSERT INTO ciinttran(autoid, acctno, inttype, frdate, todate, icrule, irrate, intbal, intamt)
                        VALUES(seq_ciinttran.nextval, rec.ACCTNO, v_inttype, v_frdate, v_todate, l_ruletype, l_intrate, rec.INTBAL, l_dblINTAMT);
                        UPDATE CIMAST SET CRINTACR = CRINTACR + l_dblINTAMT , CRINTDT = to_date(v_strCURRDATE,systemnums.c_date_format) WHERE ACCTNO = rec.ACCTNO;

                    End If;

            End If; -- If To_Date(REC.EFFECTIVEDT,systemnums.c_date_format) <= To_Date(v_strCURRDATE,systemnums.c_date_format) Then
        End If; -- If rec.INTBAL > 0 then
    End loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ICCFCreditInterestAccure');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on release pr_ICCFCreditInterestAccure');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ICCFCreditInterestAccure');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ICCFCreditInterestAccure;


  ---------------------------------pr_ICCFCreditInterestAccure2------------------------------------------------
PROCEDURE pr_ICCFCreditInterestAccure2(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE     Varchar2(20);
      v_strPREVDATE     Varchar2(20);
      v_strNEXTDATE     Varchar2(20);
      l_err_param       Varchar2(300);
      l_MaxRow          NUMBER(20,0);
      l_intrate         Number(20,6);
      l_rightrate       Number(20,6);
      v_delta           Number(20,6);
      l_ruletype        Varchar2(10);
      l_CalcDays        Number;
      l_dblINTAMT       Number(20,4);
      v_inttype         Varchar2(10);
      l_dblTotalAmt        Number(20,4);
      l_dblTempAmt         Number(20,4);
      l_Count           Number;
      l_TempCount       Number;

      v_frdate date;
      v_todate date;
      v_Runat varchar2(20);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ICCFCreditInterestAccure2');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  AFMAST;
    p_lastRun:='Y';

    SELECT varvalue
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    SELECT varvalue
               INTO v_strPREVDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'PREVDATE';

    SELECT varvalue
               INTO v_strNEXTDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'NEXTDATE';

    --Neu chay batch cuoi ngay thi tinh tu ngya hien tai den ngay ke tiep
    --Neu chay batch dau ngay thi tinh tu ngay hom truoc den ngay hien tai
    select runat into v_runat from sbbatchctl where bchmdl ='CICRINTACR';
    if v_runat ='BOD' then
        v_frdate:=to_date(v_strPREVDATE,'DD/MM/RRRR');
        v_todate:=to_date(v_strCURRDATE,'DD/MM/RRRR');
    else
        v_frdate:=to_date(v_strCURRDATE,'DD/MM/RRRR');
        v_todate:=to_date(v_strNEXTDATE,'DD/MM/RRRR');
    end if ;

    BEGIN
        --Select to_date(v_strCURRDATE,systemnums.c_date_format) -
        --        to_date(v_strPREVDATE,systemnums.c_date_format) into l_CalcDays
        --From dual;
        Select  v_todate -
                v_frdate into l_CalcDays
        From dual;
    EXCEPTION
        WHEN OTHERS
        THEN l_CalcDays := 1;
    END;

    l_intrate:= 0;
    v_delta:= 0;
    v_inttype := 'CR';

    --Tinh lai cong don cho cac truong hop tinh lai theo Tier va Cluster
    for rec in
    (
        SELECT MST.*, AF.TRADERATE, AF.DEPORATE, AF.MISCRATE, (mst.balance + mst.emkamt) INTBAL,ICCF.icrate,ICCF.ruletype
        FROM AFMAST AF,
            CIMAST MST, CFMAST CF,iccftypedef ICCF
        WHERE   AF.ACCTNO=MST.AFACCTNO
                and mst.corebank <> 'Y'
                AND af.status <> 'N'
                AND cf.custid=af.custid
                AND cf.custatcom='Y'-- PhuongHT sua chi tinh lai tien gui cho tklk tai cong ty
                AND NOT EXISTS (SELECT 1 FROM EXAFMAST WHERE STATUS <> 'E' AND EXTYPE='B' AND MODCODE='CI' AND EVENTCODE='CRINTACR' AND EXPDATE>=TO_DATE(v_strCURRDATE,systemnums.c_date_format) AND afacctno = mst.afacctno) --DIEU KIEN LOAI BO NHUNG KHACH HANG DUOC MIEN PHI --MSBS-2589
                AND MST.BALANCE>0
                AND ICCF.ACTYPE=MST.ACTYPE
                and ICCF.modcode ='CI'
                and ICCF.eventcode='CRINTACR'
                and ICCF.deltd <> 'Y'
                -- Ham nay chi tinh cho 3 TH : T: Tier, C: Cluster, TH S,F: Don gian co han khac tinh.
                and ICCF.ruletype in ('T','C')

    )
    loop

        -- Neu lich lai cai dat truoc da den ngay hieu luc
        -- Tinh lai theo lich da cai dat truoc
        --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
        begin
         l_intrate:=rec.icrate;
         l_ruletype:=rec.ruletype;
         --Xac dinh tier
         If l_ruletype ='T' Then

             select delta into v_delta from iccftier
             where actype =rec.actype and modcode ='CI'
             and eventcode='CRINTACR' and deltd <> 'Y'
             and framt < rec.INTBAL and toamt > rec.INTBAL;

             l_intrate:=l_intrate+v_delta;
             l_dblINTAMT := round(l_intrate/100/360*REC.INTBAL * l_CalcDays,4);

         Elsif l_ruletype='C'  Then

             v_delta:=0;
             l_dblINTAMT :=0;
             l_dblTotalAmt := rec.INTBAL;
             l_TempCount := 0;

             BEGIN
                     SELECT count(1) into l_Count
                     FROM iccftypedef A, iccftier B
                     WHERE A.eventcode = 'CRINTACR' and A.deltd <> 'Y'
                           AND A.actype = B.actype AND A.eventcode = B.eventcode
                           AND A.modcode ='CI' and A.modcode =B.modcode
                           AND A.ACTYPE = REC.ACTYPE AND B.TOAMT <= l_dblTotalAmt;
                 Exception When Others Then l_Count:= 0;
             End;

             FOR Cluster_Rec IN
             (
                 SELECT A.operand, a.icrate,  B.autoid, B.modcode, B.actype, B.eventcode, B.tiername, B.framt, B.toamt, B.delta, B.iccfstatus, B.deltd
                 FROM iccftypedef A, iccftier B
                 WHERE A.eventcode = 'CRINTACR' and A.deltd <> 'Y'
                       AND A.actype = B.actype AND A.eventcode = B.eventcode
                       AND A.modcode ='CI' and A.modcode =B.modcode
                       AND A.ACTYPE = REC.ACTYPE AND B.TOAMT <= l_dblTotalAmt
                 ORDER BY B.FRAMT DESC
             )Loop

                 If Cluster_Rec.operand = '+' Then
                     l_intrate := Cluster_Rec.icrate +  Cluster_Rec.delta;
                 Elsif Cluster_Rec.operand = '-' Then
                     l_intrate := Cluster_Rec.icrate  - Cluster_Rec.delta;
                 Elsif Cluster_Rec.operand = '=' Then
                     l_intrate := Cluster_Rec.delta;
                 End If;


                 If l_Count > l_TempCount Then
                     l_TempCount := l_TempCount + 1;
                     l_dblTempAmt := l_dblTotalAmt - Cluster_Rec.framt;
                     l_dblTotalAmt := l_dblTotalAmt - Cluster_Rec.framt;
                 Else
                     l_dblTempAmt := l_dblTotalAmt;
                 End If;

                 -- Tien lai
                 l_dblINTAMT := round(l_intrate/100/360*l_dblTempAmt * l_CalcDays,4);

                 If l_dblINTAMT > 0 then

                     INSERT INTO ciinttran(autoid, acctno, inttype, frdate, todate, icrule, irrate, intbal, intamt)
                     VALUES(seq_ciinttran.nextval, rec.ACCTNO, v_inttype, v_frdate, v_todate, l_ruletype, l_intrate, l_dblTempAmt, l_dblINTAMT);

                     UPDATE CIMAST SET CRINTACR = CRINTACR + l_dblINTAMT , CRINTDT = to_date(v_strCURRDATE,systemnums.c_date_format) WHERE ACCTNO = rec.ACCTNO;

                 End If;

             End Loop;
         Else -- If l_ruletype ='T' Then
             v_delta:=0;
             l_dblINTAMT := round(l_intrate/100/360*REC.INTBAL * l_CalcDays,4) ;
         End if;

         -- l_intrate:=l_intrate+v_delta;

        Exception When Others Then
         l_intrate := 0;
         l_dblINTAMT := round(l_intrate/100/360*REC.INTBAL * l_CalcDays,4) ;
        End;


        If l_ruletype <> 'C' And l_dblINTAMT > 0 Then

         INSERT INTO ciinttran(autoid, acctno, inttype, frdate, todate, icrule, irrate, intbal, intamt)
         VALUES(seq_ciinttran.nextval, rec.ACCTNO, v_inttype, v_frdate, v_todate, l_ruletype, l_intrate, rec.INTBAL, l_dblINTAMT);
         UPDATE CIMAST SET CRINTACR = CRINTACR + l_dblINTAMT , CRINTDT = to_date(v_strCURRDATE,systemnums.c_date_format) WHERE ACCTNO = rec.ACCTNO;

        End If;
    End loop;


    --Tinh lai cong don cho cac truong hop tinh lai theo kieu tinh lai Fix
    INSERT INTO ciinttran
    (AUTOID,ACCTNO,INTTYPE,FRDATE,TODATE,ICRULE,IRRATE,INTBAL,INTAMT)
    select seq_ciinttran.NEXTVAL, mst.acctno,v_inttype,v_frdate,v_todate,
        'F',icdef.ICRATE,mst.balance + mst.emkamt,round((mst.balance + mst.emkamt )*icdef.ICRATE/100/360*l_CalcDays,4) intamt
    from cimast mst,citype typ,iccftypedef icdef,
         CFMAST CF
    where mst.balance + mst.emkamt >0  and mst.actype=typ.actype and mst.status <>'C' and mst.status <>'N'
        and typ.actype=icdef.actype and icdef.modcode ='CI' and eventcode='CRINTACR'
        and icdef.ruletype='F' and icdef.deltd='N'
        and mst.corebank <> 'Y'
        AND MST.CUSTID=CF.CUSTID AND CF.CUSTATCOM='Y';

    update cimast set CRINTDT=to_date(v_strCURRDATE,systemnums.c_date_format),--to_date(v_todate,'DD/MM/YYYY'),
        crintacr=crintacr
        + nvl(
        (
            select intamt from
                (select round((mst.balance + mst.emkamt)*icdef.icrate/100/360*l_CalcDays,4) intamt, mst.acctno
                from cimast mst,citype typ,iccftypedef icdef,
                     CFMAST CF
                where mst.balance + mst.emkamt >0
                    and mst.actype=typ.actype and mst.status <>'C' and mst.status <>'N'
                    and typ.actype=icdef.actype
                    and icdef.modcode ='CI' and eventcode='CRINTACR'
                    and icdef.ruletype='F' and icdef.deltd='N'
                    AND CF.CUSTID=MST.CUSTID AND CF.CUSTATCOM='Y'
                ) A
            where A.acctno=cimast.acctno
        ),0);
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ICCFCreditInterestAccure2');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on release pr_ICCFCreditInterestAccure2');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ICCFCreditInterestAccure2');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ICCFCreditInterestAccure2;

/*---------------------------------pr_SECostPriceCalculate------------------------------------------------
PROCEDURE pr_SECostPriceCalculate(p_err_code  OUT varchar2)
    --ANHVT Coded for porfolio
  IS
      v_currdate VARCHAR2(10);
      v_nextdate VARCHAR2(10);
      v_days NUMBER(20,0);
  BEGIN
    plog.setendsection(pkgctx, 'pr_SECostPriceCalculate');
    v_nextdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'NEXTDATE');
    v_currdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');
    v_days:=TO_DATE(v_nextdate, systemnums.c_date_format)-TO_DATE(v_currdate, systemnums.c_date_format);
    plog.debug(pkgctx,'gianh1');
    -- Ghi nhan cac giao dich quyen
    begin
    for i in (
        select a.afacctno || b.codeid acctno, cf.custodycd,cf.custatcom,
        sum(DECODE(CATYPE, '014', qtty, 0)) CPQUYENVE,
        sum(DECODE(CATYPE, '014', qtty*exprice, 0)) GTQUYENVE,
        sum(DECODE(CATYPE, '021', qtty, 0)) CPTHUONG,
        sum(DECODE(CATYPE, '021', amt, 0)) CPLECPTHUONG,
        sum(decode(catype, '010', amt, 0)) COTUCTIEN,
        sum(decode(catype, '011', qtty, 0)) COTUCCP,
        sum(decode(catype, '011', amt, 0)) CPLECOTUCCP,
        sum(DECODE(CATYPE, '012', qtty, 0)) CPTACH,
        sum(DECODE(CATYPE, '012', amt, 0)) CPLECPTACH,
        sum(DECODE(CATYPE, '013', aqtty, 0)) CPGOP,
        sum(DECODE(CATYPE, '013', amt, 0)) CPLECPGOP
        from caschd a, camast b, cfmast cf, afmast af,
            (select distinct b.cvalue camastid, a.msgacct from tllog a, tllogfld b where tltxcd = '3380' and a.txnum = b.txnum and a.deltd = 'N'
            and b.fldcd = '02') c
        where a.camastid = b.camastid and cf.custid = af.custid and af.acctno = a.afacctno
        -- Chua lam tach/gop CP
        and b.catype in ('021','010','011','012','013','014')
        and b.camastid = c.camastid
        and a.deltd = 'N'
        and a.afacctno = c.msgacct
        and a.status in ('S','I')

        group by a.afacctno || b.codeid, cf.custodycd,cf.custatcom
    )
    loop
        if  NOT (i.custatcom='Y' AND substr(i.custodycd,4,1)='P') then
            update semast set DCRAMT = DCRAMT + i.GTQUYENVE,
                              DCRQTTY = DCRQTTY+ i.CPQUYENVE + i.CPTHUONG + i.COTUCCP + i.CPTACH,
                              DDROUTQTTY = DDROUTQTTY + i.CPGOP,
                              DDROUTAMT = DDROUTAMT + i.COTUCTIEN + i.CPLECOTUCCP + i.CPLECPTHUONG + i.CPLECPTACH + i.CPLECPGOP
            where acctno = i.ACCTNO;
        end if;

        begin
            update secostpricedtl set
                    PROVRIGHTQTTY = PROVRIGHTQTTY + i.CPQUYENVE,
                    PROVRIGHTAMT= PROVRIGHTAMT + i.GTQUYENVE,
                    PROVDIVIDEND = PROVDIVIDEND + i.COTUCTIEN,
                    PROVBONUSQTTY = PROVBONUSQTTY + i.CPTHUONG,
                    PROVBONUSAMT = PROVBONUSAMT + 0,
                    PROVDIVIDENDSHARES = PROVDIVIDENDSHARES + i.COTUCCP
           where    txdate = TO_DATE(v_currdate, systemnums.c_date_format)
                    and acctno = i.acctno;
           if SQL%ROWCOUNT = 0 then
                insert into secostpricedtl(autoid, acctno, txdate, provrightqtty, provrightamt, provdividend, provbonusqtty, provbonusamt, provdividendshares)
                select
                seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format), nvl(PROVRIGHTQTTY, 0) + i.CPQUYENVE,
                    nvl(PROVRIGHTAMT, 0) + i.GTQUYENVE,
                    nvl(PROVDIVIDEND, 0) + i.COTUCTIEN,
                    nvl(PROVBONUSQTTY, 0) + i.CPTHUONG,
                    nvl(PROVBONUSAMT, 0) + 0,
                    nvl(PROVDIVIDENDSHARES, 0) + i.COTUCCP
                from secostpricedtl where autoid = (select max(autoid) from secostpricedtl where acctno = i.acctno);
                if SQL%ROWCOUNT = 0 then
                    insert into secostpricedtl(autoid, acctno, txdate, provrightqtty, provrightamt, provdividend, provbonusqtty, provbonusamt, provdividendshares)
                    values
                    (seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format), i.CPQUYENVE, i.GTQUYENVE, i.COTUCTIEN, i.CPTHUONG, 0, i.COTUCCP);
                end if;
           end if;
        end;

    end loop;
    end;
    plog.debug(pkgctx,'gianh2');
    -- Ghi nhan cac giao dich phan bo quyen
    begin
    for i in (
        select a.afacctno || b.codeid acctno, cf.custodycd,cf.custatcom,
        sum(DECODE(CATYPE, '014', qtty, 0)) CPQUYENVE,
        sum(DECODE(CATYPE, '014', qtty*exprice, 0)) GTQUYENVE,
        sum(DECODE(CATYPE, '021', qtty, 0)) CPTHUONG,
        sum(DECODE(CATYPE, '021', amt, 0)) CPLECPTHUONG,
        sum(decode(catype, '010', amt, 0)) COTUCTIEN,
        sum(decode(catype, '011', qtty, 0)) COTUCCP,
        sum(decode(catype, '011', amt, 0)) CPLECOTUCCP,
        sum(DECODE(CATYPE, '012', qtty, 0)) CPTACH,
        sum(DECODE(CATYPE, '012', amt, 0)) CPLECPTACH,
        sum(DECODE(CATYPE, '013', aqtty, 0)) CPGOP,
        sum(DECODE(CATYPE, '013', amt, 0)) CPLECPGOP
        from caschd a, camast b, cfmast cf, afmast af,
            (select distinct b.cvalue camastid, a.msgacct from tllog a, tllogfld b where tltxcd in ('3350','3351') and a.txnum = b.txnum and a.deltd = 'N'
            and b.fldcd = '02') c
        where a.camastid = b.camastid and cf.custid = af.custid and af.acctno = a.afacctno
        -- Chua lam tach/gop CP
        and b.catype in ('021','010','011','012','013','014')
        and b.camastid = c.camastid
        and a.afacctno = c.msgacct
        and a.deltd = 'N'
        group by a.afacctno || b.codeid, cf.custodycd,cf.custatcom
    )
    loop
        begin
            if substr(i.custodycd,4,1) ='P' AND i.custatcom='Y' then
                update semast set DCRAMT = DCRAMT + i.GTQUYENVE,
                    DCRQTTY = DCRQTTY+ i.CPQUYENVE + i.CPTHUONG + i.COTUCCP,
                    DDROUTQTTY = DDROUTQTTY
                where acctno = i.ACCTNO;
            end if;

            update secostpricedtl set
                    RIGHTQTTY = RIGHTQTTY + i.CPQUYENVE,
                    RIGHTAMT= RIGHTAMT + i.GTQUYENVE,
                    DIVIDEND = DIVIDEND + i.COTUCTIEN,
                    BONUSQTTY = BONUSQTTY + i.CPTHUONG,
                    BONUSAMT = BONUSAMT + 0,
                    DIVIDENDSHARES = DIVIDENDSHARES + i.COTUCCP,
                    PROVRIGHTQTTY = PROVRIGHTQTTY - i.CPQUYENVE,
                    PROVRIGHTAMT= PROVRIGHTAMT - i.GTQUYENVE,
                    PROVDIVIDEND = PROVDIVIDEND - i.COTUCTIEN,
                    PROVBONUSQTTY = PROVBONUSQTTY - i.CPTHUONG,
                    PROVBONUSAMT = PROVBONUSAMT - 0,
                    PROVDIVIDENDSHARES = PROVDIVIDENDSHARES - i.COTUCCP
           where    txdate = TO_DATE(v_currdate, systemnums.c_date_format)
                    and acctno = i.acctno;
           if SQL%ROWCOUNT = 0 then
                insert into secostpricedtl(autoid, acctno, txdate, rightqtty, rightamt, dividend, bonusqtty, bonusamt, dividendshares,
                    provrightqtty, provrightamt, provdividend, provbonusqtty, provbonusamt, provdividendshares)
                select
                seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format),
                    i.CPQUYENVE, i.GTQUYENVE, i.COTUCTIEN, i.CPTHUONG, 0, i.COTUCCP,
                    nvl(PROVRIGHTQTTY, 0) - i.CPQUYENVE ,
                    nvl(PROVRIGHTAMT, 0) - i.GTQUYENVE,
                    nvl(PROVDIVIDEND, 0) - i.COTUCTIEN,
                    nvl(PROVBONUSQTTY, 0) - i.CPTHUONG,
                    nvl(PROVBONUSAMT, 0),
                    nvl(PROVDIVIDENDSHARES, 0) - i.COTUCCP
                from secostpricedtl where autoid = (select max(autoid) from secostpricedtl where acctno = i.acctno);
                if SQL%ROWCOUNT = 0 then
                    insert into secostpricedtl(autoid, acctno, txdate, rightqtty, rightamt, dividend, bonusqtty, bonusamt, dividendshares)
                    values
                    (seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format), i.CPQUYENVE, i.GTQUYENVE, i.COTUCTIEN, i.CPTHUONG, 0, i.COTUCCP);
                end if;
           end if;
        end;
    end loop;
    end;
    plog.debug(pkgctx,'gianh3');
    -- Ghi nhan cac gd mua trong ngay
    begin
    for i in (
        SELECT CF.CUSTODYCD,CF.CUSTATCOM, AFACCTNO||CODEID ACCTNO, SUM(EXECQTTY) EXECQTTY, SUM(EXECAMT) EXECAMT, SUM(FEEACR) RECEIVING_VALUE FROM ODMAST, AFMAST AF, CFMAST CF
        WHERE EXECTYPE = 'NB' AND EXECQTTY <> 0
            AND TXDATE = to_date(v_currdate,'DD/MM/YYYY') AND AF.CUSTID = CF.CUSTID AND AFACCTNO = AF.ACCTNO
        GROUP BY CF.CUSTODYCD, AFACCTNO||CODEID, cf.custatcom
    )
    loop
        if not(substr(i.custodycd,4,1)='P' AND i.custatcom='Y' ) then
            update semast set DCRAMT = DCRAMT + i.EXECAMT + i.RECEIVING_VALUE, DCRQTTY = DCRQTTY + i.EXECQTTY where acctno = i.ACCTNO;
        end if;

        update secostpricedtl set
                BUYRCVQTTY = i.EXECQTTY
           where    txdate = TO_DATE(v_currdate, systemnums.c_date_format)
                    and acctno = i.acctno;
           if SQL%ROWCOUNT = 0 then
                insert into secostpricedtl(autoid, acctno, txdate, BUYRCVQTTY, provrightqtty, provrightamt, provdividend, provbonusqtty, provbonusamt, provdividendshares)
                select
                seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format),
                    i.EXECQTTY,
                    nvl(PROVRIGHTQTTY, 0),
                    nvl(PROVRIGHTAMT, 0),
                    nvl(PROVDIVIDEND, 0),
                    nvl(PROVBONUSQTTY, 0),
                    nvl(PROVBONUSAMT, 0),
                    nvl(PROVDIVIDENDSHARES, 0)
                from secostpricedtl where autoid = (select max(autoid) from secostpricedtl where acctno = i.acctno);
                if SQL%ROWCOUNT = 0 then
                    insert into secostpricedtl(autoid, acctno, txdate, BUYRCVQTTY)
                    values
                    (seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format), i.EXECQTTY);
                end if;
           end if;
    end loop;
    end;
    plog.debug(pkgctx,'gianh4');
    -- Ghi nhan cac gd nhan CK ve TK(T+3)
    begin
    for i in (
        SELECT CF.CUSTODYCD,cf.custatcom ,STS.AFACCTNO||STS.CODEID ACCTNO, SUM(OD.EXECQTTY) EXECQTTY, SUM(OD.EXECAMT) EXECAMT, SUM(OD.FEEACR) RECEIVING_VALUE
        FROM ODMAST OD, STSCHD STS, AFMAST AF, CFMAST CF
        WHERE OD.EXECTYPE = 'NB' AND OD.EXECQTTY <> 0 AND AF.CUSTID = CF.CUSTID AND AF.ACCTNO = OD.AFACCTNO
            AND STS.CLEARDATE = to_date(v_currdate,'DD/MM/YYYY')
            AND OD.ORDERID = STS.ORGORDERID
            AND STS.DUETYPE = 'RS'
        GROUP BY CF.CUSTODYCD, STS.AFACCTNO||STS.CODEID,cf.custatcom)
    loop
        if (substr(i.custodycd,4,1)='P' AND i.custatcom='Y' )  then
            update semast set DCRAMT = DCRAMT + i.EXECAMT + i.RECEIVING_VALUE, DCRQTTY = DCRQTTY + i.EXECQTTY where acctno = i.ACCTNO;
        end if;

        update secostpricedtl set
                    BUYQTTY = i.EXECQTTY,
                    BUYAMT = i.EXECAMT,
                    BUYFEE = i.RECEIVING_VALUE
           where    txdate = TO_DATE(v_currdate, systemnums.c_date_format)
                    and acctno = i.acctno;
           if SQL%ROWCOUNT = 0 then
                insert into secostpricedtl(autoid, acctno, txdate, BUYQTTY, BUYAMT, BUYFEE, provrightqtty, provrightamt, provdividend, provbonusqtty, provbonusamt, provdividendshares)
                select
                seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format),
                    i.EXECQTTY, i.EXECAMT, i.RECEIVING_VALUE,
                    nvl(PROVRIGHTQTTY, 0),
                    nvl(PROVRIGHTAMT, 0),
                    nvl(PROVDIVIDEND, 0),
                    nvl(PROVBONUSQTTY, 0),
                    nvl(PROVBONUSAMT, 0),
                    nvl(PROVDIVIDENDSHARES, 0)
                from secostpricedtl where autoid = (select max(autoid) from secostpricedtl where acctno = i.acctno);
                if SQL%ROWCOUNT = 0 then
                    insert into secostpricedtl(autoid, acctno, txdate, BUYQTTY, BUYAMT, BUYFEE)
                    values
                    (seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format), i.EXECQTTY, i.EXECAMT, i.RECEIVING_VALUE);
                end if;
           end if;
    end loop;
    end;

    plog.debug(pkgctx,'gianh5');
    -- Ghi nhan cac gd ban
    begin
    for i in (
        SELECT AFACCTNO||CODEID ACCTNO, SUM(EXECQTTY) EXECQTTY, SUM(EXECAMT) EXECAMT, SUM(FEEACR) RECEIVING_VALUE FROM ODMAST
        WHERE EXECTYPE IN ('NS','MS') AND EXECQTTY <> 0
            AND TXDATE = to_date(v_currdate,'DD/MM/YYYY')
        GROUP BY AFACCTNO||CODEID
    )
    loop
        update secostpricedtl set
                    SELLQTTY = i.EXECQTTY,
                    SELLAMT = i.EXECAMT,
                    SELLFEE = i.RECEIVING_VALUE
           where    txdate = TO_DATE(v_currdate, systemnums.c_date_format)
                    and acctno = i.acctno;

           if SQL%ROWCOUNT = 0 then
                insert into secostpricedtl(autoid, acctno, txdate, SELLQTTY, SELLAMT, SELLFEE, provrightqtty, provrightamt, provdividend, provbonusqtty, provbonusamt, provdividendshares)
                select
                seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format),
                    i.EXECQTTY, i.EXECAMT, i.RECEIVING_VALUE,
                    nvl(PROVRIGHTQTTY, 0),
                    nvl(PROVRIGHTAMT, 0),
                    nvl(PROVDIVIDEND, 0),
                    nvl(PROVBONUSQTTY, 0),
                    nvl(PROVBONUSAMT, 0),
                    nvl(PROVDIVIDENDSHARES, 0)
                from secostpricedtl where autoid = (select max(autoid) from secostpricedtl where acctno = i.acctno);
                if SQL%ROWCOUNT = 0 then
                    insert into secostpricedtl(autoid, acctno, txdate, SELLQTTY, SELLAMT, SELLFEE)
                    values
                    (seq_secostpricedtl.nextval, i.acctno, TO_DATE(v_currdate, systemnums.c_date_format), i.EXECQTTY, i.EXECAMT, i.RECEIVING_VALUE);
                end if;
           end if;
    end loop;
    end;
    plog.debug(pkgctx,'gianh6');
    --Tinh lai gia von va so du luu ky cua tai khoan SE
    --Ghi nhan gia von thay doi
    INSERT INTO SECOSTPRICE (AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, DCRAMT, DCRQTTY, DELTD, PREVQTTY, DDROUTAMT, DDROUTQTTY, TRADE, MORTAGE)
           SELECT SEQ_SECOSTPRICE.NEXTVAL, ACCTNO, TO_DATE(v_currdate, systemnums.c_date_format),
           ROUND((PREVQTTY*COSTPRICE+DCRAMT-DDROUTAMT)/(DCRQTTY+PREVQTTY-DDROUTQTTY),4), ROUND(COSTPRICE,4), DCRAMT, DCRQTTY, 'N', PREVQTTY, DDROUTAMT, DDROUTQTTY, TRADE, MORTAGE
           FROM SEMAST WHERE ((DCRAMT+DDROUTAMT+DCRQTTY+DDROUTQTTY>0 AND STATUS<>'C')
                    OR EXISTS (SELECT 1 FROM SECOSTPRICEDTL WHERE ACCTNO = SEMAST.ACCTNO AND TXDATE = TO_DATE(v_currdate, systemnums.c_date_format)))
                    AND DCRQTTY+PREVQTTY-DDROUTQTTY>0;
        -- Cap nhat khi co trang thai moi
    UPDATE SEMAST SET ACCUMULATEPNL= ACCUMULATEPNL + TOTALSELLAMT-TOTALBUYAMT - DEALINTPAID, TOTALSELLQTTY = 0, TOTALBUYAMT = 0, TOTALSELLAMT = 0, DEALINTPAID = 0
               WHERE DCRAMT+DDROUTAMT+DCRQTTY+DDROUTQTTY>0 AND DCRQTTY+PREVQTTY-DDROUTQTTY>0 AND STATUS<>'C' AND COSTPRICE=0;
    --Cap nhat thong tin gia von
    UPDATE SEMAST SET COSTPRICE=ROUND((PREVQTTY*COSTPRICE+DCRAMT-DDROUTAMT)/(DCRQTTY+PREVQTTY-DDROUTQTTY),4),
           COSTDT=TO_DATE(v_nextdate, systemnums.c_date_format)
           WHERE DCRAMT+DDROUTAMT+DCRQTTY+DDROUTQTTY>0 AND DCRQTTY+PREVQTTY-DDROUTQTTY>0 AND STATUS<>'C';

    --Cap nhat so du lu ky cong don
    UPDATE SEMAST SET TBALDEPO=TBALDEPO+(TRADE+MORTAGE+MARGIN+WITHDRAW+DEPOSIT+SENDDEPOSIT+BLOCKED+SECURED) * v_days
           WHERE STATUS<>'C' AND TRADE+MORTAGE+MARGIN+WITHDRAW+DEPOSIT+SENDDEPOSIT+BLOCKED+SECURED>0;
    --Cap nhat lai ngay
    UPDATE SEMAST SET
           PREVQTTY=DCRQTTY+PREVQTTY-DDROUTQTTY,
           DCRAMT=0,DCRQTTY=0,DDROUTQTTY=0,DDROUTAMT=0,
           TBALDT=TO_DATE(v_nextdate, systemnums.c_date_format),
           COSTDT=TO_DATE(v_nextdate, systemnums.c_date_format),
           LASTDATE=TO_DATE(v_nextdate, systemnums.c_date_format) WHERE STATUS<>'C';
     --Cap nhat lai thong tin ban chung khoan
    begin
    for i in (select sts.acctno, sum(amt-feeacr) amt, sum(qtty) qtty from stschd sts, odmast od where duetype ='SS' and sts.orgorderid = od.orderid and sts.txdate = od.txdate
                and sts.deltd <> 'Y' and sts.txdate =TO_DATE(v_currdate, systemnums.c_date_format)
             group by sts.acctno)
    loop
        update semast set totalsellamt = totalsellamt + i.amt, totalsellqtty = totalsellqtty + i.qtty, totalbuyamt= totalbuyamt + costprice * i.qtty where acctno = i.acctno;
    end loop;
    end;
    plog.debug(pkgctx,'gianh7');
    for i in (
            select c.afacctno || c.codeid seacctno, sum(nvalue) nvalue from tllog a, tllogfld b, dfmast c
            where a.txnum = b.txnum
                and b.fldcd in ('72','74','77','80') and a.tltxcd = '2643'
                and a.msgacct = c.acctno
                and a.deltd = 'N'
            group by c.afacctno || c.codeid
            having sum(nvalue) <> 0)
    loop
        update semast set dealintpaid = dealintpaid + i.nvalue where acctno = i.seacctno;
    end loop;
    commit;
    plog.debug(pkgctx,'gianh8');
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_SECostPriceCalculate');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_SECostPriceCalculate');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_SECostPriceCalculate;*/

  --GianhVG comment lai de chay cach tinh gia von theo kieu cua VNDS
  ---------------------------------pr_SECostPriceCalculate------------------------------------------------
/*
  PROCEDURE pr_SECostPriceCalculate(p_err_code  OUT varchar2)
  IS
      v_currdate VARCHAR2(10);
      v_nextdate VARCHAR2(10);
      v_days NUMBER(20,0);
      v_wft number;
  BEGIN
    plog.setendsection(pkgctx, 'pr_SECostPriceCalculate');
    v_nextdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'NEXTDATE');
    v_currdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');
    v_days:=TO_DATE(v_nextdate, systemnums.c_date_format)-TO_DATE(v_currdate, systemnums.c_date_format);
    --Tinh lai gia von va so du luu ky cua tai khoan SE
    --Ghi nhan gia von thay doi
    INSERT INTO SECOSTPRICE (AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, DCRAMT, DCRQTTY, DELTD, PREVQTTY)
           SELECT SEQ_SECOSTPRICE.NEXTVAL, ACCTNO, TO_DATE(v_currdate, systemnums.c_date_format),
           ROUND((PREVQTTY*COSTPRICE+DCRAMT-DDROUTAMT)/(DCRQTTY+PREVQTTY-DDROUTQTTY),4), ROUND(COSTPRICE,4), DCRAMT, DCRQTTY, 'N', PREVQTTY
           FROM SEMAST WHERE DCRAMT+DDROUTAMT+DCRQTTY+DDROUTQTTY<>0 AND DCRQTTY+PREVQTTY-DDROUTQTTY>0 AND STATUS<>'C';
    --Cap nhat thong tin gia von
    UPDATE SEMAST
            SET COSTPRICE=   ROUND((PREVQTTY*COSTPRICE+DCRAMT-DDROUTAMT)/(DCRQTTY+PREVQTTY-DDROUTQTTY),4),
           COSTDT=TO_DATE(v_currdate, systemnums.c_date_format)
           WHERE DCRAMT+DDROUTAMT+DCRQTTY+DDROUTQTTY<>0 AND DCRQTTY+PREVQTTY-DDROUTQTTY>0 AND STATUS<>'C';

    /*--Ghi lai thay doi so du luu ky cong don
    INSERT INTO SEDEPOBAL (AUTOID, ACCTNO, TXDATE, DAYS, QTTY, DELTD)
           SELECT SEQ_SEDEPOBAL.NEXTVAL, ACCTNO, TO_DATE(v_nextdate, systemnums.c_date_format),v_days,
           TRADE+MORTAGE+MARGIN+WITHDRAW+DEPOSIT+SENDDEPOSIT+BLOCKED+SECURED, 'N'
           FROM SEMAST WHERE STATUS<>'C' AND TRADE+MORTAGE+MARGIN+WITHDRAW+DEPOSIT+SENDDEPOSIT+BLOCKED+SECURED>0;
    --Cap nhat so du lu ky cong don
    UPDATE SEMAST SET TBALDEPO=TBALDEPO+(TRADE+MORTAGE+MARGIN+WITHDRAW+DEPOSIT+SENDDEPOSIT+BLOCKED+SECURED) * v_days
           WHERE STATUS<>'C' AND TRADE+MORTAGE+MARGIN+WITHDRAW+DEPOSIT+SENDDEPOSIT+BLOCKED+SECURED>0;*/
    --Cap nhat lai ngay
/*
    --cap nhap prevqtty them ck WFT
    for rc in
        (select * from semast where status <> 'C')
    loop
          v_wft:= 0;
          For chaunh in (
            select sum(nvl(s.receiving,0) + nvl(s.trade,0)) wtf
             from semast s, sbsecurities b
            where s.codeid = b.codeid and s.trade + s.receiving >0 and s.status <> 'C'
            and b.refcodeid is not null and b.refcodeid = rc.codeid and s.afacctno = rc.afacctno
            and rc.DCRAMT+rc.DDROUTAMT+rc.DCRQTTY+rc.DDROUTQTTY<>0 and rc.DCRQTTY+rc.PREVQTTY-rc.DDROUTQTTY>0
            )
          loop
            v_wft:=nvl(chaunh.wtf,0);
          end loop;

          UPDATE SEMAST
          SET DCRAMT=0,DCRQTTY=0,DDROUTQTTY=0,DDROUTAMT=0,
                PREVQTTY= TRADE+MORTAGE+MARGIN+SECURED+BLOCKED+WITHDRAW + RECEIVING + v_wft,
                COSTDT=TO_DATE(v_currdate, systemnums.c_date_format),
                LASTDATE=TO_DATE(v_currdate, systemnums.c_date_format)
            where STATUS<>'C' and acctno = rc.acctno;
    end loop;

    /*UPDATE SEMAST RS SET DCRAMT=0,DCRQTTY=0,DDROUTQTTY=0,DDROUTAMT=0,
           PREVQTTY= TRADE+MORTAGE+MARGIN+SECURED+BLOCKED+WITHDRAW + RECEIVING
           + (select sum(nvl(s.receiving,0)+ nvl(s.trade,0)) from semast s, sbsecurities b where s.codeid = b.codeid and b.refcodeid = RS.codeid
               and s.afacctno = RS.afacctno and s.trade + s.receiving > 0 and s.status <> 'C'),
           COSTDT=TO_DATE(v_currdate, systemnums.c_date_format),
           LASTDATE=TO_DATE(v_currdate, systemnums.c_date_format) WHERE STATUS<>'C';*/

/*
    --Cap nhat lai thong tin ban chung khoan
    update semast set totalbuyamt= totalbuyamt + costprice *
    (select sum(qtty) qtty from stschd where duetype ='SS'
    and deltd <> 'Y' and txdate =TO_DATE(v_currdate, systemnums.c_date_format)
    and stschd.acctno = semast.acctno);

    update semast set totalsellamt= totalsellamt +
    (select sum(amt) amt from stschd where duetype ='SS'
    and deltd <> 'Y' and txdate =TO_DATE(v_currdate, systemnums.c_date_format)
    and stschd.acctno = semast.acctno);

    update semast set totalsellqtty= totalsellqtty +
    (select sum(qtty) qtty from stschd where duetype ='SS'
    and deltd <> 'Y' and txdate =TO_DATE(v_currdate, systemnums.c_date_format)
    and stschd.acctno = semast.acctno);

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_SECostPriceCalculate');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_SECostPriceCalculate');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_SECostPriceCalculate;
*/

  PROCEDURE pr_SECostPriceCalculate(p_err_code  OUT varchar2)
  IS

    Cursor c_SETran  is
      SELECT TR.ACCTNO ACCTNO, NVL(SE.PREVQTTY,0) PREVQTTY, NVL(SE.COSTPRICE,0) COSTPRICE,
            SUM(CASE WHEN AP.FIELD = 'DCRQTTY' THEN NVL(TR.NAMT,0) * DECODE(AP.TXTYPE, 'C', 1, -1)
            ELSE 0 END) DCRQTTY,
            SUM(CASE WHEN AP.FIELD = 'DCRAMT' THEN NVL(TR.NAMT,0) * DECODE(AP.TXTYPE, 'C', 1, -1)
            ELSE 0 END) DCRAMT,
            SUM(CASE WHEN AP.FIELD = 'DDROUTQTTY' THEN NVL(TR.NAMT,0) * DECODE(AP.TXTYPE, 'C', 1, -1)
            ELSE 0 END) DDROUTQTTY,
            SUM(CASE WHEN AP.FIELD = 'DDROUTAMT' THEN NVL(TR.NAMT,0) * DECODE(AP.TXTYPE, 'C', 1, -1)
            ELSE 0 END) DDROUTAMT
        FROM    SETRAN TR, APPTX AP, SEMAST SE
        WHERE   TR.TXCD = AP.TXCD
        AND     AP.APPTYPE = 'SE'
        AND     AP.TXTYPE IN ('C','D')
        AND     AP.FIELD IN ('DCRQTTY', 'DCRAMT', 'DDROUTQTTY', 'DDROUTAMT')
        AND     TR.BKDATE = TR.TXDATE
        AND     SE.ACCTNO = TR.ACCTNO
        AND     SE.STATUS <> 'C'
        AND     TR.DELTD <> 'Y'
        AND     TR.NAMT <> 0
        AND     tr.tltxcd NOT IN ('2222')
        GROUP BY TR.ACCTNO, SE.PREVQTTY, SE.COSTPRICE;


    Cursor c_SEBackDate  is
      SELECT TR.BKDATE VALUEDATE, TR.ACCTNO ACCTNO,
            SUM(CASE WHEN AP.FIELD = 'DCRQTTY' THEN NVL(TR.NAMT,0) * DECODE(AP.TXTYPE, 'C', 1, -1)
            ELSE 0 END) DCRQTTY,
            SUM(CASE WHEN AP.FIELD = 'DCRAMT' THEN NVL(TR.NAMT,0) * DECODE(AP.TXTYPE, 'C', 1, -1)
            ELSE 0 END) DCRAMT,
            SUM(CASE WHEN AP.FIELD = 'DDROUTQTTY' THEN NVL(TR.NAMT,0) * DECODE(AP.TXTYPE, 'C', 1, -1)
            ELSE 0 END) DDROUTQTTY,
            SUM(CASE WHEN AP.FIELD = 'DDROUTAMT' THEN NVL(TR.NAMT,0) * DECODE(AP.TXTYPE, 'C', 1, -1)
            ELSE 0 END) DDROUTAMT
        FROM    SETRAN TR, APPTX AP, SEMAST SE
        WHERE   TR.TXCD = AP.TXCD
        AND     AP.APPTYPE = 'SE'
        AND     AP.TXTYPE IN ('C','D')
        AND     AP.FIELD IN ('DCRQTTY', 'DCRAMT', 'DDROUTQTTY', 'DDROUTAMT')
        AND     TR.BKDATE < TR.TXDATE
        AND     TR.DELTD <> 'Y'
        AND     TR.NAMT <> 0
        AND     SE.ACCTNO = TR.ACCTNO
        AND     SE.STATUS <> 'C'
        AND     tr.tltxcd NOT IN ('2222')
        --AND     (SE.COSTPRICE_ADJ_DATE <= TR.BKDATE OR SE.COSTPRICE_ADJ_DATE IS NULL)
        GROUP BY TR.BKDATE, TR.ACCTNO
        ORDER BY TR.BKDATE DESC, TR.ACCTNO;
-- Cursor c_SECostPriceAtValueDate lay gia tri COSTPRICE o ngay value date (back date). Cursor nay chi duoc fetch 1 lan
-- nham muc dich chi lay 1 ban ghi gan nhat so voi ngay Value Date
    Cursor c_SECostPriceAtValueDate (p_ValueDate in Date, p_AcctNo in Varchar2) is
        SELECT * FROM SECOSTPRICE
        WHERE   TXDATE <= p_ValueDate
        AND     ACCTNO = p_AcctNo
        ORDER BY TXDATE DESC;
-- Cursor c_SECostPriceAfterValueDate lay gia tri COSTPRICE o cac lon hon value date (back date).
-- Nham muc dich cap nhat gia tri COSTPRICE trong bang SECOSTPRICE bi anh huong boi giao dich back date
-- Neu trong qua trinh cap nhat, khoi luong chung khoan = 0 thi can cap nhat gia von = 0
    Cursor c_SECostPriceAfterValueDate (p_ValueDate in Date, p_CurrDate in Date, p_AcctNo in Varchar2) is
        SELECT * FROM SECOSTPRICE
        WHERE   TXDATE > p_ValueDate
        AND     TXDATE < p_CurrDate
        AND     ACCTNO = p_AcctNo
        ORDER BY TXDATE;
    v_SECostPriceAtValueDate   c_SECostPriceAtValueDate%ROWTYPE;
    v_SECostPriceAfterValueDate   c_SECostPriceAfterValueDate%ROWTYPE;
    v_currdate VARCHAR2(10);
    v_nextdate VARCHAR2(10);
    v_Prev_CostPrice    number;
    v_Prev_Qtty         number;
    v_Count             NUMBER;
    v_SE_PrevQtty       NUMBER;
    v_CurrCostPrice     NUMBER;
    v_strSQL            VARCHAR2(1000);

  BEGIN
    plog.setendsection(pkgctx, 'pr_SECostPriceCalculate');
    v_nextdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'NEXTDATE');
    v_currdate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');

-- Xu ly cac giao dich BackDate lam thay doi gia von
-- Can cap nhat vao 2 bang: SECostPrice va DWSEBAL
    For v_SEBackDate in c_SEBackDate Loop
        Open c_SECostPriceAtValueDate(v_SEBackDate.ValueDate, v_SEBackDate.AcctNo);
        Fetch c_SECostPriceAtValueDate into v_SECostPriceAtValueDate;
        If c_SECostPriceAtValueDate%NOTFOUND then
            -- tai khoan chung khoan nay chua tung duoc luu gia von
            -- chi can insert 1 ban ghi vi tu ngay value date chi co 1 phat sinh tai ngay value date
            If v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY > 0 then
                v_Prev_CostPrice := CASE WHEN v_SEBackDate.DCRQTTY > 0 THEN
                                            ROUND((v_SEBackDate.DCRAMT /*- v_SEBackDate.DDROUTAMT*/)/ (v_SEBackDate.DCRQTTY /*- v_SEBackDate.DDROUTQTTY*/),4)
                                            ELSE 0 END;
                INSERT INTO SECOSTPRICE(AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, PREVQTTY, DCRQTTY, DCRAMT,
                                    DDROUTQTTY, DDROUTAMT, DELTD)
                VALUES(SEQ_SECOSTPRICE.NEXTVAL, v_SEBackDate.ACCTNO, v_SEBackDate.ValueDate,
                    v_Prev_CostPrice,
                    0, v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY, v_SEBackDate.DCRQTTY, v_SEBackDate.DCRAMT,
                    v_SEBackDate.DDROUTQTTY, v_SEBackDate.DDROUTAMT, 'N');

                v_Prev_Qtty := v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY;
            End if;
        ElsIf v_SECostPriceAtValueDate.TXDATE = v_SEBackDate.VALUEDATE then
            -- Tai khoan chung khoan nay co gia von tai ngay Value Date
            -- Can update gia von cho tai khoan chung khoan tai ngay Value Date
            If v_SECostPriceAtValueDate.PREVQTTY + v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY = 0 then
                -- Tang giam chung khoan lam so du tai khoan bang 0. Can cap nhat gia von = 0
                UPDATE  SECOSTPRICE
                SET     COSTPRICE = 0,
                        PREVQTTY = 0,
                        DCRQTTY = DCRQTTY + v_SEBackDate.DCRQTTY,
                        DDROUTQTTY = DDROUTQTTY + v_SEBackDate.DDROUTQTTY,
                        DCRAMT = DCRAMT + v_SEBackDate.DCRAMT,
                        DDROUTAMT = DDROUTAMT + v_SEBackDate.DDROUTAMT
                WHERE   TXDATE =   v_SEBackDate.VALUEDATE
                AND     ACCTNO = v_SEBackDate.ACCTNO;

                v_Prev_CostPrice := 0;
                v_Prev_Qtty := 0;

            Else
                -- Tang giam chung khoan lam so du tai khoan khac 0. Can cap nhat gia von theo quy dinh
                v_Prev_CostPrice := CASE WHEN v_SECostPriceAtValueDate.PREVQTTY + v_SECostPriceAtValueDate.DDROUTQTTY + v_SEBackDate.DCRQTTY > 0 THEN
                                        ROUND(((v_SECostPriceAtValueDate.PREVQTTY + v_SECostPriceAtValueDate.DDROUTQTTY) * v_SECostPriceAtValueDate.COSTPRICE
                                            + v_SEBackDate.DCRAMT /*- v_SEBackDate.DDROUTAMT*/)/
                                        (v_SECostPriceAtValueDate.PREVQTTY + v_SECostPriceAtValueDate.DDROUTQTTY + v_SEBackDate.DCRQTTY /*- v_SEBackDate.DDROUTQTTY*/),4)
                                        ELSE v_SECostPriceAtValueDate.COSTPRICE END;

                UPDATE  SECOSTPRICE
                SET     COSTPRICE = v_Prev_CostPrice,
                        PREVQTTY = PREVQTTY + v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY,
                        DCRQTTY = DCRQTTY + v_SEBackDate.DCRQTTY,
                        DDROUTQTTY = DDROUTQTTY + v_SEBackDate.DDROUTQTTY,
                        DCRAMT = DCRAMT + v_SEBackDate.DCRAMT,
                        DDROUTAMT = DDROUTAMT + v_SEBackDate.DDROUTAMT
                WHERE   TXDATE =   v_SEBackDate.VALUEDATE
                AND     ACCTNO = v_SEBackDate.ACCTNO;


                v_Prev_Qtty := v_SECostPriceAtValueDate.PREVQTTY + v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY;

             End if;
        Else
            -- truong hop co gia von ngay truoc nhung khong co gia von ngay Value date
            -- can insert 1 ban ghi vao ngay Value Date
            If v_SECostPriceAtValueDate.PREVQTTY + v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY = 0 then
                -- Tang giam chung khoan lam so du tai khoan bang 0. Can cap nhat gia von = 0
                INSERT INTO SECOSTPRICE(AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, PREVQTTY, DCRQTTY, DCRAMT,
                                    DDROUTQTTY, DDROUTAMT, DELTD)
                VALUES(SEQ_SECOSTPRICE.NEXTVAL, v_SEBackDate.ACCTNO, v_SEBackDate.ValueDate,
                    0, v_SECostPriceAtValueDate.PREVCOSTPRICE, 0, v_SEBackDate.DCRQTTY, v_SEBackDate.DCRAMT,
                    v_SEBackDate.DDROUTQTTY, v_SEBackDate.DDROUTAMT, 'N');

                v_Prev_CostPrice := 0;
                v_Prev_Qtty := 0;

            Else
                -- Tang giam chung khoan lam so du tai khoan khac 0. Can cap nhat gia von theo quy dinh
                v_Prev_CostPrice := CASE WHEN v_SECostPriceAtValueDate.PREVQTTY + v_SECostPriceAtValueDate.DDROUTQTTY + v_SEBackDate.DCRQTTY > 0  THEN
                                        ROUND(((v_SECostPriceAtValueDate.PREVQTTY + v_SECostPriceAtValueDate.DDROUTQTTY) * v_SECostPriceAtValueDate.COSTPRICE
                                            + v_SEBackDate.DCRAMT /*- v_SEBackDate.DDROUTAMT*/)/
                                        (v_SECostPriceAtValueDate.PREVQTTY + v_SECostPriceAtValueDate.DDROUTQTTY + v_SEBackDate.DCRQTTY /*- v_SEBackDate.DDROUTQTTY*/),4)
                                        ELSE v_SECostPriceAtValueDate.COSTPRICE END;

                INSERT INTO SECOSTPRICE(AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, PREVQTTY, DCRQTTY, DCRAMT,
                                    DDROUTQTTY, DDROUTAMT, DELTD)
                VALUES(SEQ_SECOSTPRICE.NEXTVAL, v_SEBackDate.ACCTNO, v_SEBackDate.ValueDate,
                    v_Prev_CostPrice,
                    v_SECostPriceAtValueDate.COSTPRICE, v_SECostPriceAtValueDate.PREVQTTY + v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY,
                    v_SEBackDate.DCRQTTY, v_SEBackDate.DCRAMT, v_SEBackDate.DDROUTQTTY, v_SEBackDate.DDROUTAMT, 'N');


                v_Prev_Qtty := v_SECostPriceAtValueDate.PREVQTTY + v_SEBackDate.DCRQTTY - v_SEBackDate.DDROUTQTTY;

            End if;
        End If;
        Close c_SECostPriceAtValueDate;

        -- Cap nhat lai gia von cua tai khoan trong SECOSTPRICE cua nhung ngay tu Value Date + 1 cho den Current Date - 1
        -- Trong qua trinh cap nhat, neu khoi luong chung khoan = 0 thi can cap nhat gia von = 0
        -- Bien v_Prev_CostPrice va v_Prev_Qtty luu gia von va khoi luong truoc do
        For v_SECostPriceAfterValueDate in c_SECostPriceAfterValueDate (v_SEBackDate.VALUEDATE,
                                TO_DATE(v_currdate, systemnums.c_date_format), v_SEBackDate.ACCTNO) Loop

            If v_Prev_Qtty + v_SECostPriceAfterValueDate.DCRQTTY - v_SECostPriceAfterValueDate.DDROUTQTTY = 0 then
                -- cap nhat gia von = 0

                UPDATE  SECOSTPRICE
                SET     COSTPRICE = 0,
                        PREVCOSTPRICE = v_Prev_CostPrice,
                        PREVQTTY = 0
                WHERE   TXDATE =   v_SECostPriceAfterValueDate.TXDATE
                AND     ACCTNO = v_SECostPriceAfterValueDate.ACCTNO;

                v_Prev_CostPrice := 0;
                v_Prev_Qtty := 0;

            Else  -- khoi luong <> 0, cap nhat gia von theo quy dinh

                UPDATE  SECOSTPRICE
                SET     COSTPRICE = CASE WHEN v_Prev_Qtty + v_SECostPriceAfterValueDate.DCRQTTY > 0 THEN
                                            ROUND((v_Prev_Qtty*v_Prev_CostPrice + v_SECostPriceAfterValueDate.DCRAMT /*- v_SECostPriceAfterValueDate.DDROUTAMT*/)/
                                            (v_Prev_Qtty + v_SECostPriceAfterValueDate.DCRQTTY /*- v_SECostPriceAfterValueDate.DDROUTQTTY*/ ),4)
                                            ELSE v_Prev_CostPrice END,
                        PREVCOSTPRICE = v_Prev_CostPrice,
                        PREVQTTY = v_Prev_Qtty + v_SECostPriceAfterValueDate.DCRQTTY - v_SECostPriceAfterValueDate.DDROUTQTTY
                WHERE   TXDATE =   v_SECostPriceAfterValueDate.TXDATE
                AND     ACCTNO = v_SECostPriceAfterValueDate.ACCTNO;

                v_Prev_CostPrice := CASE WHEN v_Prev_Qtty + v_SECostPriceAfterValueDate.DCRQTTY > 0 THEN
                                        ROUND((v_Prev_Qtty*v_Prev_CostPrice + v_SECostPriceAfterValueDate.DCRAMT /*- v_SECostPriceAfterValueDate.DDROUTAMT*/)/
                                            (v_Prev_Qtty + v_SECostPriceAfterValueDate.DCRQTTY /*- v_SECostPriceAfterValueDate.DDROUTQTTY*/ ),4)
                                        ELSE v_Prev_CostPrice END;
                v_Prev_Qtty := v_Prev_Qtty + v_SECostPriceAfterValueDate.DCRQTTY - v_SECostPriceAfterValueDate.DDROUTQTTY;

            End if;
        End Loop;  -- Ket thuc cap nhat gia von cac ngay tu Value Date + 1 den Current Date - 1

        -- Cap nhat gia tri COSTPRICE va PREVQTTY trong SEMAST tuong ung voi cac gia tri do trong bang SECOSTPRICE cua ngay hom truoc
        UPDATE  SEMAST
        SET     COSTPRICE = v_Prev_CostPrice,
                PREVQTTY = v_Prev_Qtty
        WHERE   ACCTNO = v_SEBackDate.ACCTNO
        AND     STATUS <> 'C';

    End Loop;  -- Ket thuc cap nhat gia von bi anh huong boi cac giao dich back date trong SETRAN

    --Tinh lai gia von va so du luu ky cua tai khoan SE cua ngay hien tai

    -- Doi voi nhung tai khoan KHONG phat sinh giao dich, update cac gia tri tang giam trong ngay bang 0
    -- Doi voi nhung tai khoan CO phat sinh giao dich, update cac gia tri tang giam trong ngay bang gia tri trong SETRAN

    UPDATE SEMAST
    SET DCRQTTY     =   0,
        DCRAMT      =   0,
        DDROUTQTTY  =   0,
        DDROUTAMT   =   0
    WHERE   STATUS  <> 'C';


    For v_SETran in c_SETran LOOP

        -- Xac dinh xem trong ngay da co tinh gia von hay chua
        -- Neu co roi thi cap nhat them de dam bao moi ngay chi co 1 dong trong secostprice
        v_Count := 0;
        SELECT count(1)
        INTO v_Count
        FROM secostprice
        WHERE txdate = TO_DATE(v_currdate, systemnums.c_date_format) AND acctno = v_SETran.ACCTNO;

        -- Neu so luong chung khoan khac 0 thi cap nhat gia von theo quy dinh
        If v_SETran.DCRQTTY + v_SETran.PREVQTTY - v_SETran.DDROUTQTTY <> 0 then
            IF v_Count = 0 THEN
                -- Insert ban ghi vao SECostPrice
                INSERT INTO SECOSTPRICE (AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, PREVQTTY, DCRQTTY, DCRAMT,
                                        DDROUTQTTY, DDROUTAMT, DELTD)
                VALUES (SEQ_SECOSTPRICE.NEXTVAL, v_SETran.ACCTNO, TO_DATE(v_currdate, systemnums.c_date_format),
                        CASE WHEN v_SETran.DCRQTTY + v_SETran.PREVQTTY > 0 THEN
                                ROUND((v_SETran.PREVQTTY*v_SETran.COSTPRICE + v_SETran.DCRAMT /*- v_SETran.DDROUTAMT*/)/
                                (v_SETran.DCRQTTY + v_SETran.PREVQTTY /*- v_SETran.DDROUTQTTY*/),4)
                                ELSE v_SETran.COSTPRICE END,
                        ROUND(v_SETran.COSTPRICE,4), v_SETran.DCRQTTY + v_SETran.PREVQTTY - v_SETran.DDROUTQTTY,
                        v_SETran.DCRQTTY, v_SETran.DCRAMT, v_SETran.DDROUTQTTY, v_SETran.DDROUTAMT, 'N');
            ELSE
                -- Cap nhat SECOSTPRICE
                UPDATE  SECOSTPRICE SET
                        COSTPRICE = CASE WHEN v_SETran.DCRQTTY + v_SETran.PREVQTTY > 0 THEN
                                ROUND((v_SETran.PREVQTTY*v_SETran.COSTPRICE + v_SETran.DCRAMT /*- v_SETran.DDROUTAMT*/)/
                                (v_SETran.DCRQTTY + v_SETran.PREVQTTY /*- v_SETran.DDROUTQTTY*/),4)
                                ELSE ROUND(v_SETran.COSTPRICE,4) END,
                        PREVCOSTPRICE = ROUND(v_SETran.COSTPRICE,4),
                        PREVQTTY = v_SETran.DCRQTTY + v_SETran.PREVQTTY - v_SETran.DDROUTQTTY,
                        DCRQTTY = DCRQTTY + v_SETran.DCRQTTY,
                        DCRAMT = DCRAMT + v_SETran.DCRAMT,
                        DDROUTQTTY = DDROUTQTTY + v_SETran.DDROUTQTTY,
                        DDROUTAMT = DDROUTAMT + v_SETran.DDROUTAMT
                WHERE   TXDATE =   TO_DATE(v_currdate, systemnums.c_date_format)
                AND     ACCTNO = v_SETran.ACCTNO;
            END IF;

            -- Cap nhat gia von trong SEMAST

            UPDATE SEMAST
            SET COSTPRICE = CASE WHEN v_SETran.DCRQTTY + v_SETran.PREVQTTY > 0 THEN
                            ROUND((v_SETran.PREVQTTY*v_SETran.COSTPRICE + v_SETran.DCRAMT /*- v_SETran.DDROUTAMT*/)/
                            (v_SETran.DCRQTTY + v_SETran.PREVQTTY /*- v_SETran.DDROUTQTTY*/),4)
                            ELSE round(v_SETran.COSTPRICE,4) END,
                COSTDT      =   TO_DATE(v_currdate, systemnums.c_date_format),
                PREVQTTY    =   v_SETran.DCRQTTY + v_SETran.PREVQTTY - v_SETran.DDROUTQTTY,
                --DCRQTTY     =   v_SETran.DCRQTTY,
                --DCRAMT      =   v_SETran.DCRAMT,
                --DDROUTQTTY  =   v_SETran.DDROUTQTTY,
                --DDROUTAMT   =   v_SETran.DDROUTAMT,
                LASTDATE    =   TO_DATE(v_currdate, systemnums.c_date_format)
            WHERE   ACCTNO  = v_SETran.ACCTNO
            AND     STATUS  <> 'C';

        Else  -- truong hop tong so luong chung khoan = 0 thi cap nhat lai gia von = 0
            IF v_Count = 0 THEN
                -- Insert ban ghi vao SECostPrice
                INSERT INTO SECOSTPRICE (AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, PREVQTTY, DCRQTTY, DCRAMT,
                                        DDROUTQTTY, DDROUTAMT, DELTD)
                VALUES (SEQ_SECOSTPRICE.NEXTVAL, v_SETran.ACCTNO, TO_DATE(v_currdate, systemnums.c_date_format),
                        0, ROUND(v_SETran.COSTPRICE,4), v_SETran.DCRQTTY + v_SETran.PREVQTTY - v_SETran.DDROUTQTTY,
                        v_SETran.DCRQTTY, v_SETran.DCRAMT, v_SETran.DDROUTQTTY, v_SETran.DDROUTAMT, 'N');
            ELSE
                -- Cap nhat SECOSTPRICE
                UPDATE  SECOSTPRICE SET
                        COSTPRICE = 0,
                        PREVCOSTPRICE = ROUND(v_SETran.COSTPRICE,4),
                        PREVQTTY = v_SETran.DCRQTTY + v_SETran.PREVQTTY - v_SETran.DDROUTQTTY,
                        DCRQTTY = DCRQTTY + v_SETran.DCRQTTY,
                        DCRAMT = DCRAMT + v_SETran.DCRAMT,
                        DDROUTQTTY = DDROUTQTTY + v_SETran.DDROUTQTTY,
                        DDROUTAMT = DDROUTAMT + v_SETran.DDROUTAMT
                WHERE   TXDATE =   TO_DATE(v_currdate, systemnums.c_date_format)
                AND     ACCTNO = v_SETran.ACCTNO;
            END IF;

            -- Cap nhat gia von trong SEMAST

            UPDATE SEMAST
            SET COSTPRICE = 0,
                COSTDT      =   TO_DATE(v_currdate, systemnums.c_date_format),
                PREVQTTY    =   v_SETran.DCRQTTY + v_SETran.PREVQTTY - v_SETran.DDROUTQTTY,
                --DCRQTTY     =   v_SETran.DCRQTTY,
                --DCRAMT      =   v_SETran.DCRAMT,
                --DDROUTQTTY  =   v_SETran.DDROUTQTTY,
                --DDROUTAMT   =   v_SETran.DDROUTAMT,
                LASTDATE    =   TO_DATE(v_currdate, systemnums.c_date_format)
            WHERE   ACCTNO  = v_SETran.ACCTNO
            AND     STATUS  <> 'C';
        End If;
    End Loop;


         --Cap nhat lai thong tin ban chung khoan -- giu nguyen nhu cu for backward compatibility
    update semast set totalbuyamt= totalbuyamt + costprice *
    (select sum(qtty) qtty from stschd where duetype ='SS'
    and deltd <> 'Y' and txdate =TO_DATE(v_currdate, systemnums.c_date_format)
    and stschd.acctno = semast.acctno);
    update semast set totalsellamt= totalsellamt +
    (select sum(amt) amt from stschd where duetype ='SS'
    and deltd <> 'Y' and txdate =TO_DATE(v_currdate, systemnums.c_date_format)
    and stschd.acctno = semast.acctno);
    update semast set totalsellqtty= totalsellqtty +
    (select sum(qtty) qtty from stschd where duetype ='SS'
    and deltd <> 'Y' and txdate =TO_DATE(v_currdate, systemnums.c_date_format)
    and stschd.acctno = semast.acctno);
    -- Cap nhat lai so CK PREVQTTY cho cac TK ban CK trong ngay
    FOR rec IN
    (
        SELECT sts.acctno, sum(sts.qtty) qtty
        FROM stschd sts
        WHERE sts.txdate = TO_DATE(v_currdate, systemnums.c_date_format) AND sts.duetype = 'SS' AND sts.deltd = 'N'
        GROUP BY sts.acctno
        ORDER BY sts.acctno
    )
    LOOP
        -- Cap nhat lai cho gia von trong ngay
        SELECT count(1)
        INTO v_Count
        FROM secostprice
        WHERE txdate = TO_DATE(v_currdate, systemnums.c_date_format) AND acctno = rec.acctno;

        SELECT prevqtty, costprice
        INTO v_SE_PrevQtty, v_CurrCostPrice
        FROM semast se
        WHERE se.acctno = rec.acctno;

        IF v_Count = 0 THEN
            -- Them dong moi
            INSERT INTO SECOSTPRICE (AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, PREVQTTY, DCRQTTY, DCRAMT,
                                    DDROUTQTTY, DDROUTAMT, DELTD)
            SELECT SEQ_SECOSTPRICE.NEXTVAL, rec.acctno, TO_DATE(v_currdate, systemnums.c_date_format),
                    CASE WHEN se.PREVQTTY - rec.qtty = 0 THEN 0 ELSE se.costprice END, se.costprice, se.PREVQTTY - rec.qtty,
                    0, 0, rec.qtty, round(rec.qtty*se.costprice), 'N'
            FROM semast se WHERE se.acctno = rec.acctno;
        ELSE
            -- Cap nhat SECOSTPRICE

            UPDATE secostprice SET
                costprice = CASE WHEN v_SE_PrevQtty - rec.qtty = 0 THEN 0 ELSE costprice END,
                PREVQTTY = PREVQTTY - rec.qtty,
                DDROUTQTTY = DDROUTQTTY + rec.qtty,
                DDROUTAMT = DDROUTAMT + round(rec.qtty*costprice)
            WHERE txdate = TO_DATE(v_currdate, systemnums.c_date_format) AND acctno = rec.acctno;
        END IF;

        -- Cap nhat lai gia von lenh ban
        -- Lay gia von cuoi ngay
        UPDATE stschd SET
            costprice = v_CurrCostPrice
        WHERE txdate = TO_DATE(v_currdate, systemnums.c_date_format) AND duetype = 'SS' AND deltd = 'N'
            AND acctno = rec.acctno;

        -- Cap nhat SEMAST
        UPDATE semast SET
            costprice = CASE WHEN prevqtty - rec.qtty = 0 THEN 0 ELSE costprice END,
            PREVQTTY = PREVQTTY - rec.qtty
        WHERE acctno = rec.acctno;
    END LOOP;
    -- Ket thuc: Cap nhat lai so CK PREVQTTY

    -- Cap nhat gia von cho giao dich ban lo le trong ngay
    FOR rec1 IN
    (
        SELECT app.txtype, app.field, st.acctno, st.acctref
        FROM setran st, apptx app
        WHERE tltxcd = '8879'
            AND st.txcd = app.txcd AND app.apptype = 'SE'
            AND app.field = 'DDROUTQTTY'
        ORDER BY st.autoid
    )
    LOOP
        -- Lay thong tin gia von
        SELECT costprice
        INTO v_CurrCostPrice
        FROM semast se
        WHERE se.acctno = rec1.acctno;
        -- Cap nhat lai thong tin GD ban CK lo le
        UPDATE SERETAIL SET
            costprice  = v_CurrCostPrice
        WHERE TXDATE = to_date(substr(rec1.acctref,1,10),'dd/mm/yyyy') AND txnum = substr(rec1.acctref,11);
    END LOOP;
    -- Ket thuc: Cap nhat gia von GD lo le

    --Cap nhat lai gia von khi tong so luong ck = 0
    DELETE FROM secostprice_prev;

    FOR rec IN
    (
        SELECT se.afacctno, se.costprice, se.prevqtty, se.acctno, se.trade + se.mortage + se.receiving + se.blocked + se.withdraw + nvl(sdtl_wft.wft_receiving,0) + nvl(trade_8878,0) trade
        FROM semast se
        LEFT JOIN
        (
            SELECT afacctno, sb.refcodeid, se.trade + se.mortage + se.receiving + se.blocked + se.withdraw wft_receiving
            FROM semast se, sbsecurities sb
            WHERE se.codeid = sb.codeid AND sb.refcodeid IS NOT NULL
        ) sdtl_wft ON se.codeid = sdtl_wft.refcodeid AND se.afacctno = sdtl_wft.afacctno
        LEFT JOIN
        (
            SELECT acctno, sum(qtty) trade_8878 FROM seretail WHERE status IN ('N','S')
            GROUP BY acctno
            UNION ALL
            SELECT desacctno acctno, -sum(qtty) trade_8878 FROM seretail WHERE status IN ('N','S')
            GROUP BY desacctno
        ) sdtl_8878 ON se.acctno = sdtl_8878.acctno
        WHERE se.prevqtty + se.costprice <> 0
    )
    LOOP
        IF rec.trade = 0 THEN
            SELECT COUNT (*) INTO v_Count FROM secostprice WHERE acctno = rec.acctno AND txdate = to_date(v_currdate,'DD/MM/RRRR');
            IF v_Count = 0 THEN
                INSERT INTO SECOSTPRICE (AUTOID, ACCTNO, TXDATE, COSTPRICE, PREVCOSTPRICE, PREVQTTY, DCRQTTY, DCRAMT,
                                        DDROUTQTTY, DDROUTAMT, DELTD)
                VALUES (SEQ_SECOSTPRICE.NEXTVAL, rec.acctno, to_date(v_currdate,'DD/MM/RRRR'),
                        0, 0, 0, 0, 0, 0, 0, 'N');

                UPDATE semast SET prevqtty = 0, costprice = 0 WHERE acctno = rec.acctno;

                INSERT INTO secostprice_log(txdate,afacctno, costprice, prevqtty, acctno, trade)
                VALUES (to_date(v_currdate,'DD/MM/RRRR'),rec.afacctno, rec.costprice, rec.prevqtty, rec.acctno, rec.trade);

            ELSE

                UPDATE secostprice SET prevqtty = 0, costprice = 0 WHERE acctno = rec.acctno AND txdate = to_date(v_currdate,'DD/MM/RRRR');
                UPDATE semast SET prevqtty = 0, costprice = 0 WHERE acctno = rec.acctno;

                INSERT INTO secostprice_log(txdate,afacctno, costprice, prevqtty, acctno, trade)
                VALUES (to_date(v_currdate,'DD/MM/RRRR'),rec.afacctno, rec.costprice, rec.prevqtty, rec.acctno, rec.trade);
            END IF;
        ELSE
            INSERT INTO secostprice_prev(afacctno, costprice, prevqtty, acctno, trade)
            VALUES (rec.afacctno, rec.costprice, rec.prevqtty, rec.acctno, rec.trade);
        END IF;

    END LOOP;
    --End Cap nhat lai gia von khi tong so luong ck = 0


    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_SECostPriceCalculate');

  EXCEPTION
      WHEN OTHERS THEN
        p_err_code := errnums.C_SYSTEM_ERROR;
        plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
        plog.debug(pkgctx,'pr_SECostPriceCalculate: ' || dbms_utility.format_error_backtrace);
        plog.setendsection (pkgctx, 'pr_SECostPriceCalculate');
        RAISE errnums.E_SYSTEM_ERROR;
  END pr_SECostPriceCalculate;


---------------------------------pr_ODExtentionAccount------------------------------------------------
  PROCEDURE pr_ODExtentionAccount(p_err_code  OUT varchar2)
  IS
      indate varchar2(20);
      v_COMPANYCD VARCHAR2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ODExtentionAccount');

    v_COMPANYCD:=cspks_system.fn_get_sysvar ('SYSTEM', 'COMPANYCD');
    indate:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');
    plog.debug(pkgctx, 'Update schedule!');

----MSBS-2589
    UPDATE STSCHD s SET STATUS='C' WHERE CLEARDATE =to_date(indate,systemnums.c_date_format) AND EXISTS
    (
        SELECT 1 FROM CFMAST CF, AFMAST AF, AFTYPE TYP
        WHERE  CF.CUSTATCOM ='N' AND CF.CUSTID=AF.CUSTID AND AF.ACTYPE=TYP.ACTYPE AND acctno = s.afacctno
    );

    --Reset Han muc bao lanh ve 0
    plog.debug(pkgctx, 'Reset custodient contract!');
    UPDATE AFMAST SET DEAL = 'Y' WHERE DEAL <> 'Y'; -- 1.5.8.9 Cap nhat deal ve Y
    UPDATE AFMAST a SET ADVANCELINE=0, T0AMT =0 WHERE EXISTS
    (
        SELECT 1 FROM CFMAST CF, AFMAST AF, AFTYPE TYP
        WHERE CF.CUSTATCOM ='N' AND CF.CUSTID=AF.CUSTID AND AF.ACTYPE=TYP.ACTYPE AND acctno = a.acctno
    );
    plog.debug(pkgctx, 'Reset custodient securities contract!');
    UPDATE SEMAST s SET TRADE=0 WHERE EXISTS
    (
        SELECT 1 FROM CFMAST CF, AFMAST AF, AFTYPE TYP
        WHERE CF.CUSTATCOM ='N' AND CF.CUSTID=AF.CUSTID AND AF.ACTYPE=TYP.ACTYPE AND s.afacctno = acctno
    );
    --Xoa giao dich lien quan den CK
    plog.debug(pkgctx, 'Reset custodient securities tran!');
    UPDATE SETRAN s SET DELTD='Y' WHERE EXISTS
    (
        SELECT 1 FROM SEMAST SE,CFMAST CF, AFMAST AF, AFTYPE TYP
        WHERE CF.CUSTATCOM ='N' AND CF.CUSTID=AF.CUSTID AND AF.ACTYPE=TYP.ACTYPE
        AND SE.AFACCTNO = AF.ACCTNO AND se.acctno = s.acctno
    );
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ODExtentionAccount');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ODExtentionAccount');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ODExtentionAccount;

---------------------------------pr_OrderBackUp------------------------------------------------
  PROCEDURE pr_OrderBackUp(p_err_code  OUT varchar2)
  IS
      indate varchar2(20);
      PREVDATE varchar2(20);
      v_strSQL VARCHAR2(1000);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_OrderBackUp');
    select varvalue into PREVDATE from sysvar where grname ='SYSTEM' and varname ='PREVDATE';
    select varvalue into indate from sysvar where grname ='SYSTEM' and varname ='CURRDATE';
    --Sao luu vao odmasthist
    INSERT INTO ODMASTHIST SELECT * FROM ODMAST WHERE ORDERID IN
           (SELECT OD.ORDERID FROM
           (SELECT * FROM ODMAST OD
           WHERE (EXPDATE<=TO_DATE(indate,'DD/MM/YYYY') OR ORDERQTTY=EXECQTTY) AND ORSTATUS IN ('5','7')
                -- THENN THEM DE CHECK LENH LOI GD CHUA HOAN TAT THI KO CHUYEN XUONG HIST
                AND (CASE WHEN OD.ERROD = 'Y' AND od.errsts IN ('A','E','G') THEN 0 ELSE 1 END) = 1
                --AND (CASE WHEN OD.FERROD = 'Y' AND od.errsts IN ('N') THEN 0 ELSE 1 END) = 1
           ) OD
           LEFT JOIN
           (SELECT * FROM STSCHD WHERE STATUS='N' AND DELTD = 'N') SCHD
           ON OD.ORDERID=SCHD.ORGORDERID
           GROUP BY OD.ORDERID
           HAVING COUNT(SCHD.ORGORDERID)=0);
    --Sao luu cac lich thanh toan da xoa
    INSERT INTO STSCHDHIST
    SELECT * FROM STSCHD
    WHERE DELTD='Y'
        AND NOT EXISTS (SELECT 1 FROM ODMAST OD --MSBS-2589
           WHERE OD.errod = 'Y' AND OD.errsts <> 'C' AND ORGORDERID = od.orderid);
    --Sao luu cac lich thanh toan da thanh toan het
    INSERT INTO STSCHDHIST SELECT * FROM STSCHD WHERE ORGORDERID IN
           (SELECT OD.ORDERID FROM
           (SELECT * FROM ODMAST OD
           WHERE (EXPDATE<=TO_DATE(indate,'DD/MM/YYYY') OR ORDERQTTY=EXECQTTY) AND ORSTATUS IN ('5','7')
                -- THENN THEM DE CHECK LENH LOI GD CHUA HOAN TAT THI KO CHUYEN XUONG HIST
                AND (CASE WHEN OD.ERROD = 'Y' AND od.errsts IN ('A','E','G') THEN 0 ELSE 1 END) = 1
                --AND (CASE WHEN OD.FERROD = 'Y' AND od.errsts IN ('N') THEN 0 ELSE 1 END) = 1
           ) OD
           LEFT JOIN
           (SELECT * FROM STSCHD WHERE STATUS='N' AND DELTD = 'N') SCHD
           ON OD.ORDERID=SCHD.ORGORDERID
           GROUP BY OD.ORDERID HAVING COUNT(SCHD.ORGORDERID)=0);
    --Xoa cac lich thanh toan da bi xoa
    DELETE FROM STSCHD
    WHERE DELTD='Y'
        AND NOT EXISTS (SELECT 1 FROM ODMAST OD --MSBS-2589
           WHERE OD.errod = 'Y' AND OD.errsts <> 'C' AND ORGORDERID = od.orderid);
    --Xoa cac lich thanh toan da thanh toan xong
    DELETE FROM STSCHD WHERE ORGORDERID IN
           (SELECT OD.ORDERID FROM
           (SELECT * FROM ODMAST OD
           WHERE (EXPDATE<=TO_DATE(indate,'DD/MM/YYYY') OR ORDERQTTY=EXECQTTY) AND ORSTATUS IN ('5','7')
                -- THENN THEM DE CHECK LENH LOI GD CHUA HOAN TAT THI KO CHUYEN XUONG HIST
                AND (CASE WHEN OD.ERROD = 'Y' AND od.errsts IN ('A','E','G') THEN 0 ELSE 1 END) = 1
                --AND (CASE WHEN OD.FERROD = 'Y' AND od.errsts IN ('N') THEN 0 ELSE 1 END) = 1
           ) OD
           LEFT JOIN
           (SELECT * FROM STSCHD WHERE STATUS='N' AND DELTD = 'N') SCHD
           ON OD.ORDERID=SCHD.ORGORDERID
           GROUP BY OD.ORDERID HAVING COUNT(SCHD.ORGORDERID)=0);
    --Xoa cac lenh da duoc backup
    DELETE FROM ODMAST WHERE ORDERID IN
           (SELECT OD.ORDERID FROM
           (SELECT * FROM ODMAST OD
           WHERE (EXPDATE<=TO_DATE(indate,'DD/MM/YYYY') OR ORDERQTTY=EXECQTTY) AND ORSTATUS IN ('5','7')
                -- THENN THEM DE CHECK LENH LOI GD CHUA HOAN TAT THI KO CHUYEN XUONG HIST
                AND (CASE WHEN OD.ERROD = 'Y' AND od.errsts IN ('A','E','G') THEN 0 ELSE 1 END) = 1
                --AND (CASE WHEN OD.FERROD = 'Y' AND od.errsts IN ('N') THEN 0 ELSE 1 END) = 1
           ) OD
           LEFT JOIN
           (SELECT * FROM STSCHD WHERE STATUS='N' AND DELTD = 'N') SCHD
           ON OD.ORDERID=SCHD.ORGORDERID
           GROUP BY OD.ORDERID HAVING COUNT(SCHD.ORGORDERID)=0);
    --Dong bo thong tin khop lenh GTC tu ODMAST ve FOMAST
    --1.7.2.8: turning batch - k lay odmasthist
----MSBS-2589
    /*for rec in
    (
        select fo.acctno,od.EXECQTTY,od.EXECAMT EXECAMT
            from odmast od, fomast fo
            where od.foacctno = fo.acctno and od.deltd <> 'Y'
            AND od.txdate=TO_DATE(PREVDATE,'DD/MM/RRRR')

    )
    loop
        UPDATE FOMAST SET
            EXECQTTY=EXECQTTY+rec.EXECQTTY,
            EXECAMT=EXECAMT+rec.EXECAMT
        WHERE acctno=rec.acctno;
    end loop;*/

    MERGE INTO fomast fo
    USING (select fo.acctno,sum(od.EXECQTTY)  execqtty , sum(od.EXECAMT) EXECAMT
            from odmast od, fomast fo
            where od.foacctno = fo.acctno and od.deltd <> 'Y'
            AND od.txdate=TO_DATE(PREVDATE,'DD/MM/RRRR')
            GROUP BY fo.acctno) od
    ON (fo.acctno = od.acctno)
    WHEN MATCHED THEN
      UPDATE SET EXECQTTY=EXECQTTY+od.EXECQTTY,
            EXECAMT=EXECAMT+od.EXECAMT;
    --end 1.7.2.8
    --Cap nhat trang thai cho lenh GTC truoc khi backup

    update fomast set
        status =(case when EXECAMT>0 then 'C'
                      else 'E' end)
    WHERE EXPDATE<TO_DATE(indate,'DD/MM/YYYY') OR DELTD='Y' OR REMAINQTTY=0;

    --cap nhat trang thai Huy lenh GTC khi ma chung khoan CW het han
    UPDATE fomast SET status = 'C'
    WHERE fn_check_cwsecurities(symbol) <> 0
      AND TIMETYPE='G'
      AND STATUS NOT IN ('C','E');

    --'Back up FOMAST--> FOMASTHIST
    INSERT INTO FOMASTHIST SELECT * FROM FOMAST
        WHERE EXPDATE<TO_DATE(indate,'DD/MM/YYYY') OR DELTD='Y' OR REMAINQTTY=0 OR STATUS='C';
    DELETE FROM FOMAST
        WHERE EXPDATE<TO_DATE(indate,'DD/MM/YYYY') OR DELTD='Y' OR REMAINQTTY=0 OR STATUS='C';
    UPDATE FOMAST SET STATUS='P'
        WHERE REMAINQTTY>0 AND DELTD <>'Y';
    INSERT INTO FOMASTLOGALL
        SELECT * FROM FOMASTLOG;
    v_strSQL := ' truncate table FOMASTLOG ' ; --MSBS-2589
    execute immediate v_strSQL;

    --RUN store sp_sbs_batch_adhoc_bod
    sp_sbs_batch_adhoc_bod;
   gen_gltran_BATCH('ALL',PREVDATE) ;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_OrderBackUp');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_OrderBackUp');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_OrderBackUp;

---------------------------------pr_ODSettlementReceiveMoney------------------------------------------------
  PROCEDURE pr_ODSettlementReceiveMoney(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      v_dblProfit number(20,0);
      v_dblLoss number(20,0);
      v_dblAVLRCVAMT  number(20,0);
      v_dblVATRATE number(20,0);
      l_err_param varchar2(300);
      l_MaxRow number(20,0);
      v_COMPANYCD VARCHAR2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ODSettlementReceiveMoney');

    v_COMPANYCD:=cspks_system.fn_get_sysvar ('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8866';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8866';
    v_dblProfit:=0;
    v_dblLoss:=0;
    for rec in
    (
        SELECT SUBSTR(MAX(CUSTODYCD),4,1) CUSTODYCD,MAX(COSTPRICE) COSTPRICE ,CLR2.SBDATE, TO_DATE( v_strCURRDATE,systemnums.c_date_format) CURRDATE,
            SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 0 ELSE 1 END) WITHHOLIDAY,
            SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 1 ELSE 1 END) WITHOUTHOLIDAY,
            CASE WHEN CI.COREBANK='Y' THEN 1 ELSE 0 END COREBANK,
            MST.AUTOID, MST.AFACCTNO,MAX(ODMST.ORDERQTTY) ORGORDERQTTY,MAX(ODMST.EXECTYPE) EXECTYPE,MAX(ODMST.QUOTEPRICE) ORGQUOTEPRICE, MST.ACCTNO, MIN(MST.DUETYPE) DUETYPE, MIN(MST.TXDATE) TXDATE, MIN(MST.ORGORDERID) ORGORDERID, MIN(MST.CLEARCD) CLEARCD, MIN(MST.CLEARDAY) CLEARDAY,
            MIN(SEC.CODEID) CODEID, MIN(SEC.SYMBOL) SYMBOL, MIN(SEC.PARVALUE) PARVALUE, MIN(TYP.VATRATE) VATRATE, MIN(ODMST.FEEACR-ODMST.FEEAMT) AVLFEEAMT,
            MIN(MST.AMT) AMT, MIN(MST.AAMT) AAMT, MIN(MST.FAMT) FAMT, MIN(MST.QTTY) QTTY,MIN(ODMST.EXECQTTY) SQTTY , MIN(MST.AQTTY) AQTTY, ROUND(MIN(MST.AMT/MST.QTTY),4) MATCHPRICE,MIN(ODMST.ACTYPE) ACTYPE
            FROM SBCLDR CLR1, SBCLDR CLR2, (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST, ODMAST ODMST,AFMAST AF,CFMAST CF,CIMAST CI, ODTYPE TYP, SBSECURITIES SEC
            WHERE ODMST.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND  CLR1.SBDATE>=MST.TXDATE AND CLR1.SBDATE<CLR2.SBDATE AND CLR2.SBDATE>=MST.TXDATE
            AND CLR1.CLDRTYPE=SEC.TRADEPLACE AND CLR2.CLDRTYPE=SEC.TRADEPLACE AND ODMST.AFACCTNO=CI.AFACCTNO
            AND ODMST.ACTYPE=TYP.ACTYPE AND MST.ORGORDERID=ODMST.ORDERID AND MST.CODEID=SEC.CODEID AND SEC.TRADEPLACE <> '003'
            AND CLR2.SBDATE=TO_DATE( v_strCURRDATE,systemnums.c_date_format) AND MST.STATUS='N' AND MST.DELTD<>'Y'
            AND (MST.DUETYPE='RM' )
            AND CF.CUSTATCOM ='Y'
            GROUP BY MST.AUTOID, CLR2.SBDATE, MST.AFACCTNO, MST.ACCTNO,CI.COREBANK
            HAVING MIN(MST.CLEARDAY)<=
            (CASE WHEN MIN(MST.CLEARCD)='B' THEN SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 0 ELSE 1 END) ELSE SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 1 ELSE 1 END) END)
            ORDER BY ORGORDERID
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
        IF rec.custodycd='F' then
            v_blnVietnamese:= false;
        else
            v_blnVietnamese:= true;
        end if;
        v_dblAVLRCVAMT := rec.AMT;
        v_dblVATRATE := rec.VATRATE;
        --Tinh gia tri lai lo cho tu doanh
        If rec.CUSTODYCD= 'P' Then
            If rec.AMT > rec.COSTPRICE * rec.QTTY Then
                v_dblProfit := round(rec.AMT - rec.COSTPRICE * rec.QTTY,0);
                v_dblLoss := 0;
            Else
                v_dblProfit := 0;
                v_dblLoss := round(rec.COSTPRICE * rec.QTTY - rec.AMT,0);
            End If;
        end if;
        --Set cac field giao dich
        --01   N   AUTOID
        l_txmsg.txfields ('01').defname   := 'AUTOID';
        l_txmsg.txfields ('01').TYPE      := 'N';
        l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

        --03   C   ORGORDERID
        l_txmsg.txfields ('03').defname   := 'ORGORDERID';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ORGORDERID;
        --04   C   AFACCTNO
        l_txmsg.txfields ('04').defname   := 'AFACCTNO';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.AFACCTNO;
        --05   C   CIACCTNO
        l_txmsg.txfields ('05').defname   := 'CIACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.ACCTNO;
        --06   C   SEACCTNO
        l_txmsg.txfields ('06').defname   := 'SEACCTNO';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.AFACCTNO || rec.CODEID;
        --07   C   SYMBOL
        l_txmsg.txfields ('07').defname   := 'SYMBOL';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.SYMBOL;
        --08   N   AMT
        l_txmsg.txfields ('08').defname   := 'AMT';
        l_txmsg.txfields ('08').TYPE      := 'N';
        l_txmsg.txfields ('08').VALUE     := round(rec.AMT,0);
        --09   N   QTTY
        l_txmsg.txfields ('09').defname   := 'QTTY';
        l_txmsg.txfields ('09').TYPE      := 'N';
        l_txmsg.txfields ('09').VALUE     := rec.QTTY;
        --10   N   RAMT
        l_txmsg.txfields ('10').defname   := 'RAMT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := round(rec.AMT,0);
        --11   N   AAMT
        l_txmsg.txfields ('11').defname   := 'AAMT';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := round(rec.AAMT,0);
        --12   N   FEEAMT
        l_txmsg.txfields ('12').defname   := 'FEEAMT';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := 0;
        --13   N   VAT
        l_txmsg.txfields ('13').defname   := 'VAT';
        l_txmsg.txfields ('13').TYPE      := 'N';
        l_txmsg.txfields ('13').VALUE     := 0;
        --14   N   PROFITAMT
        l_txmsg.txfields ('14').defname   := 'PROFITAMT';
        l_txmsg.txfields ('14').TYPE      := 'N';
        l_txmsg.txfields ('14').VALUE     := v_dblProfit;
        --15   N   LOSSAMT
        l_txmsg.txfields ('15').defname   := 'LOSSAMT';
        l_txmsg.txfields ('15').TYPE      := 'N';
        l_txmsg.txfields ('15').VALUE     := v_dblLoss;
        --16   N   COSTPRICE
        l_txmsg.txfields ('16').defname   := 'COSTPRICE';
        l_txmsg.txfields ('16').TYPE      := 'N';
        l_txmsg.txfields ('16').VALUE     := rec.COSTPRICE;
        --31   N   COREBANK
        l_txmsg.txfields ('31').defname   := 'COREBANK';
        l_txmsg.txfields ('31').TYPE      := 'N';
        l_txmsg.txfields ('31').VALUE     := rec.COREBANK;
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_8866 ||' ' || trim(to_char(rec.SQTTY,'999,999,999,999,999')) || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' ' || to_char(rec.TXDATE,'dd/mm/yyyy');
        /*If v_blnVietnamese = True Then
            l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        Else
            l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        End If;*/
        --44   N   PARVALUE
        l_txmsg.txfields ('44').defname   := 'PARVALUE';
        l_txmsg.txfields ('44').TYPE      := 'N';
        l_txmsg.txfields ('44').VALUE     := rec.PARVALUE;

        --53   N   MICD
        l_txmsg.txfields ('53').defname   := 'MICD';
        l_txmsg.txfields ('53').TYPE      := 'C';
        l_txmsg.txfields ('53').VALUE     := '';

        --60   N   ISMORTAGE
        l_txmsg.txfields ('60').defname   := 'ISMORTAGE';
        l_txmsg.txfields ('60').TYPE      := 'N';
        l_txmsg.txfields ('60').VALUE     := (case when rec.EXECTYPE='MS' then 1 else 0 end);
        BEGIN
            IF txpks_#8866.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 8866: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            --ELSE
                --txpks_sepitlog.pr_DeductionPIT(rec.ORGORDERID,rec.ACCTNO, rec.AFACCTNO || rec.CODEID, rec.CODEID, rec.QTTY, P_ERR_CODE=>p_err_code);
                --HaiLT bo tinh thue TNCN de tinh o cho khac
                --txpks_sepitlog.pr_SellStockCALog(P_ORDERID=>rec.ORGORDERID, P_ACCTNO=>rec.ACCTNO,
                --P_AFACCTNO=>rec.AFACCTNO, P_SEACCTNO=>rec.AFACCTNO || rec.CODEID, P_CODEID=>rec.CODEID, P_QTTY=>rec.QTTY,
                --P_ACTYPE=>rec.ACTYPE, P_TXDATE=>rec.TXDATE, P_ERR_CODE=>p_err_code);
                --End of HaiLT bo tinh thue TNCN de tinh o cho khac
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ODSettlementReceiveMoney');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on receive money');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ODSettlementReceiveMoney');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ODSettlementReceiveMoney;

--T2_HoangND add pr_ODSltReceiveMoney_temp
---------------------------------pr_ODSltReceiveMoney_temp------------------------------------------------
  PROCEDURE pr_ODSltReceiveMoney_temp(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      v_dblProfit number(20,0);
      v_dblLoss number(20,0);
      v_dblAVLRCVAMT  number(20,0);
      v_dblVATRATE number(20,0);
      l_err_param varchar2(300);
      l_MaxRow number(20,0);
      v_COMPANYCD VARCHAR2(10);
      l_CHGBCHORDERSTARTDATE date;
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ODSltReceiveMoney_temp');

    v_COMPANYCD:=cspks_system.fn_get_sysvar ('SYSTEM', 'COMPANYCD');

    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'OD' and varname='CHGBCHORDERSTARTDATE';

    SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8866';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8866';
    v_dblProfit:=0;
    v_dblLoss:=0;
    for rec in
    (
        SELECT SUBSTR(MAX(CUSTODYCD),4,1) CUSTODYCD,MAX(COSTPRICE) COSTPRICE ,CLR2.SBDATE, TO_DATE( v_strCURRDATE,systemnums.c_date_format) CURRDATE,
            SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 0 ELSE 1 END) WITHHOLIDAY,
            SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 1 ELSE 1 END) WITHOUTHOLIDAY,
            CASE WHEN CI.COREBANK='Y' THEN 1 ELSE 0 END COREBANK,
            MST.AUTOID, MST.AFACCTNO,MAX(ODMST.ORDERQTTY) ORGORDERQTTY,MAX(ODMST.EXECTYPE) EXECTYPE,MAX(ODMST.QUOTEPRICE) ORGQUOTEPRICE, MST.ACCTNO, MIN(MST.DUETYPE) DUETYPE, MIN(MST.TXDATE) TXDATE, MIN(MST.ORGORDERID) ORGORDERID, MIN(MST.CLEARCD) CLEARCD, MIN(MST.CLEARDAY) CLEARDAY,
            MIN(SEC.CODEID) CODEID, MIN(SEC.SYMBOL) SYMBOL, MIN(SEC.PARVALUE) PARVALUE, MIN(TYP.VATRATE) VATRATE, MIN(ODMST.FEEACR-ODMST.FEEAMT) AVLFEEAMT,
            MIN(MST.AMT) AMT, MIN(MST.AAMT) AAMT, MIN(MST.FAMT) FAMT, MIN(MST.QTTY) QTTY,MIN(ODMST.EXECQTTY) SQTTY , MIN(MST.AQTTY) AQTTY, ROUND(MIN(MST.AMT/MST.QTTY),4) MATCHPRICE,MIN(ODMST.ACTYPE) ACTYPE
            FROM SBCLDR CLR1, SBCLDR CLR2, (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST, ODMAST ODMST,AFMAST AF,CFMAST CF,CIMAST CI, ODTYPE TYP, SBSECURITIES SEC
            WHERE ODMST.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND  CLR1.SBDATE>=MST.TXDATE AND CLR1.SBDATE<CLR2.SBDATE AND CLR2.SBDATE>=MST.TXDATE
            AND CLR1.CLDRTYPE=SEC.TRADEPLACE AND CLR2.CLDRTYPE=SEC.TRADEPLACE AND ODMST.AFACCTNO=CI.AFACCTNO
            AND ODMST.ACTYPE=TYP.ACTYPE AND MST.ORGORDERID=ODMST.ORDERID AND MST.CODEID=SEC.CODEID AND SEC.TRADEPLACE <> '003'
            AND CLR2.SBDATE=TO_DATE( v_strCURRDATE,systemnums.c_date_format) AND MST.STATUS='N' AND MST.DELTD<>'Y'
            AND (MST.DUETYPE='RM' )
            AND CF.CUSTATCOM ='Y'
            and mst.txdate < l_CHGBCHORDERSTARTDATE --T2_HoangND
            GROUP BY MST.AUTOID, CLR2.SBDATE, MST.AFACCTNO, MST.ACCTNO,CI.COREBANK
            HAVING MIN(MST.CLEARDAY)<=
            (CASE WHEN MIN(MST.CLEARCD)='B' THEN SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 0 ELSE 1 END) ELSE SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 1 ELSE 1 END) END)
            ORDER BY ORGORDERID
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
        IF rec.custodycd='F' then
            v_blnVietnamese:= false;
        else
            v_blnVietnamese:= true;
        end if;
        v_dblAVLRCVAMT := rec.AMT;
        v_dblVATRATE := rec.VATRATE;
        --Tinh gia tri lai lo cho tu doanh
        If rec.CUSTODYCD= 'P' Then
            If rec.AMT > rec.COSTPRICE * rec.QTTY Then
                v_dblProfit := round(rec.AMT - rec.COSTPRICE * rec.QTTY,0);
                v_dblLoss := 0;
            Else
                v_dblProfit := 0;
                v_dblLoss := round(rec.COSTPRICE * rec.QTTY - rec.AMT,0);
            End If;
        end if;
        --Set cac field giao dich
        --01   N   AUTOID
        l_txmsg.txfields ('01').defname   := 'AUTOID';
        l_txmsg.txfields ('01').TYPE      := 'N';
        l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

        --03   C   ORGORDERID
        l_txmsg.txfields ('03').defname   := 'ORGORDERID';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ORGORDERID;
        --04   C   AFACCTNO
        l_txmsg.txfields ('04').defname   := 'AFACCTNO';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.AFACCTNO;
        --05   C   CIACCTNO
        l_txmsg.txfields ('05').defname   := 'CIACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.ACCTNO;
        --06   C   SEACCTNO
        l_txmsg.txfields ('06').defname   := 'SEACCTNO';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.AFACCTNO || rec.CODEID;
        --07   C   SYMBOL
        l_txmsg.txfields ('07').defname   := 'SYMBOL';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.SYMBOL;
        --08   N   AMT
        l_txmsg.txfields ('08').defname   := 'AMT';
        l_txmsg.txfields ('08').TYPE      := 'N';
        l_txmsg.txfields ('08').VALUE     := round(rec.AMT,0);
        --09   N   QTTY
        l_txmsg.txfields ('09').defname   := 'QTTY';
        l_txmsg.txfields ('09').TYPE      := 'N';
        l_txmsg.txfields ('09').VALUE     := rec.QTTY;
        --10   N   RAMT
        l_txmsg.txfields ('10').defname   := 'RAMT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := round(rec.AMT,0);
        --11   N   AAMT
        l_txmsg.txfields ('11').defname   := 'AAMT';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := round(rec.AAMT,0);
        --12   N   FEEAMT
        l_txmsg.txfields ('12').defname   := 'FEEAMT';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := 0;
        --13   N   VAT
        l_txmsg.txfields ('13').defname   := 'VAT';
        l_txmsg.txfields ('13').TYPE      := 'N';
        l_txmsg.txfields ('13').VALUE     := 0;
        --14   N   PROFITAMT
        l_txmsg.txfields ('14').defname   := 'PROFITAMT';
        l_txmsg.txfields ('14').TYPE      := 'N';
        l_txmsg.txfields ('14').VALUE     := v_dblProfit;
        --15   N   LOSSAMT
        l_txmsg.txfields ('15').defname   := 'LOSSAMT';
        l_txmsg.txfields ('15').TYPE      := 'N';
        l_txmsg.txfields ('15').VALUE     := v_dblLoss;
        --16   N   COSTPRICE
        l_txmsg.txfields ('16').defname   := 'COSTPRICE';
        l_txmsg.txfields ('16').TYPE      := 'N';
        l_txmsg.txfields ('16').VALUE     := rec.COSTPRICE;
        --31   N   COREBANK
        l_txmsg.txfields ('31').defname   := 'COREBANK';
        l_txmsg.txfields ('31').TYPE      := 'N';
        l_txmsg.txfields ('31').VALUE     := rec.COREBANK;
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_8866 ||' ' || trim(to_char(rec.SQTTY,'999,999,999,999,999')) || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' ' || to_char(rec.TXDATE,'dd/mm/yyyy');
        /*If v_blnVietnamese = True Then
            l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        Else
            l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        End If;*/
        --44   N   PARVALUE
        l_txmsg.txfields ('44').defname   := 'PARVALUE';
        l_txmsg.txfields ('44').TYPE      := 'N';
        l_txmsg.txfields ('44').VALUE     := rec.PARVALUE;

        --53   N   MICD
        l_txmsg.txfields ('53').defname   := 'MICD';
        l_txmsg.txfields ('53').TYPE      := 'C';
        l_txmsg.txfields ('53').VALUE     := '';

        --60   N   ISMORTAGE
        l_txmsg.txfields ('60').defname   := 'ISMORTAGE';
        l_txmsg.txfields ('60').TYPE      := 'N';
        l_txmsg.txfields ('60').VALUE     := (case when rec.EXECTYPE='MS' then 1 else 0 end);
        BEGIN
            IF txpks_#8866.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 8866: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            --ELSE
                --txpks_sepitlog.pr_DeductionPIT(rec.ORGORDERID,rec.ACCTNO, rec.AFACCTNO || rec.CODEID, rec.CODEID, rec.QTTY, P_ERR_CODE=>p_err_code);
                --HaiLT bo tinh thue TNCN de tinh o cho khac
                --txpks_sepitlog.pr_SellStockCALog(P_ORDERID=>rec.ORGORDERID, P_ACCTNO=>rec.ACCTNO,
                --P_AFACCTNO=>rec.AFACCTNO, P_SEACCTNO=>rec.AFACCTNO || rec.CODEID, P_CODEID=>rec.CODEID, P_QTTY=>rec.QTTY,
                --P_ACTYPE=>rec.ACTYPE, P_TXDATE=>rec.TXDATE, P_ERR_CODE=>p_err_code);
                --End of HaiLT bo tinh thue TNCN de tinh o cho khac
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ODSltReceiveMoney_temp');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on receive money');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ODSltReceiveMoney_temp');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ODSltReceiveMoney_temp;
--End T2_HoangND add pr_ODSltReceiveMoney_temp

---------------------------------pr_ODReleaseBlockAdvanced------------------------------------------------
  PROCEDURE pr_ODReleaseBlockAdvanced(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ODReleaseBlockAdvanced');
    p_lastRun:='Y';
    /*SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8861';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8861';
    plog.debug(pkgctx, 'Begin loop');
    for rec in
    (
        SELECT CF.CUSTODYCD,MST.AUTOID,MST.ORGORDERID,SB.SYMBOL,MST.QTTY,ODMST.EXECQTTY SQTTY ,MST.AFACCTNO,MST.AAMT-MST.PAIDAMT AMT,MST.FAMT-MST.PAIDFEEAMT FEEAMT,ODMST.TXDATE,ODMST.EXECTYPE
               FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST,ODMAST ODMST, AFMAST AF, CFMAST CF,SBSECURITIES SB
               WHERE ODMST.AFACCTNO=AF.ACCTNO AND AF.CUSTID= CF.CUSTID AND DUETYPE='RM' AND MST.STATUS='C' AND MST.AAMT-MST.PAIDAMT+MST.FAMT-MST.PAIDFEEAMT>0
               AND MST.DELTD<>'Y' AND MST.CODEID=SB.CODEID and MST.ORGORDERID=ODMST.ORDERID AND (ODMST.EXECTYPE = 'MS' or ODMST.VIA='W')
               AND GETDUEDATE(MST.TXDATE,MST.CLEARCD,SB.TRADEPLACE,MST.CLEARDAY)>=TO_DATE( v_strCURRDATE,systemnums.c_date_format)
               ORDER BY MST.ORGORDERID
    )
    loop
        --Set txnum
        plog.debug(pkgctx, 'Loop for' || rec.ORGORDERID);
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
        IF rec.custodycd='F' then
            v_blnVietnamese:= false;
        else
            v_blnVietnamese:= true;
        end if;

        --Set cac field giao dich
        --09   STAUTOID     N
        l_txmsg.txfields ('09').defname   := 'STAUTOID';
        l_txmsg.txfields ('09').TYPE      := 'N';
        l_txmsg.txfields ('09').VALUE     := rec.AUTOID;

        --03   ACCTNO       C
        l_txmsg.txfields ('03').defname   := 'ACCTNO';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --05   ORGORDERID   C
        l_txmsg.txfields ('05').defname   := 'ORGORDERID';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.ORGORDERID;

        --10   PAIDAMT      N
        l_txmsg.txfields ('10').defname   := 'PAIDAMT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := round(rec.AMT,0);
        --11   PAIDFEEAMT   N
        l_txmsg.txfields ('11').defname   := 'PAIDFEEAMT';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := round(rec.FEEAMT,0);
        --12   N   FEEAMT
        l_txmsg.txfields ('12').defname   := 'FEEAMT';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := 0;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        If v_blnVietnamese = True Then
            l_txmsg.txfields ('30').VALUE := 'Tra UTTB cua lenh' || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        Else
            l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        End If;

        --60   N   ISMORTAGE
        l_txmsg.txfields ('60').defname   := 'ISMORTAGE';
        l_txmsg.txfields ('60').TYPE      := 'N';
        l_txmsg.txfields ('60').VALUE     := (case when rec.EXECTYPE='MS' then 1 else 0 end);
        BEGIN
            IF txpks_#8861.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.debug (pkgctx,
                           'got error 8861: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;*/
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ODReleaseBlockAdvanced');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on release pr_ODReleaseBlockAdvanced');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ODReleaseBlockAdvanced');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ODReleaseBlockAdvanced;


  ---------------------------------pr_ODDayReleaseAdvanced------------------------------------------------
  PROCEDURE pr_ODDayReleaseAdvanced(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      l_ISCOREBANK NUMBER;
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ODDayReleaseAdvanced');
    --SELECT COUNT(*) MAXROW into l_MaxRow FROM  ADSCHD;
    /*IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/

    p_lastRun:='Y';

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8851';
     SELECT varvalue
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8851';
    plog.debug(pkgctx, 'Begin loop');
    for rec in
    (
        SELECT MST.AUTOID,MST.ACCTNO,MST.ISMORTAGE,MST.AMT - MST.PAIDAMT AMT ,MST.FEEAMT FEEAMT, MST.VATAMT, TO_CHAR(MST.TXDATE,'DD/MM/YYYY') TXDATE,
               MST.RRTYPE, MST.CIACCTNO, MST.CUSTBANK, MST.ODDATE, MST.PAIDDATE,
               decode(MST.RRTYPE, 'O', 1,0) CIDRAWNDOWN,
               decode(MST.RRTYPE, 'B', 1,0) BANKDRAWNDOWN,
               decode(MST.RRTYPE, 'C', 1,0) CMPDRAWNDOWN,
             ( UTF8NUMS.c_const_desc_8851 ||', ' || UTF8NUMS.c_const_desc_8851_ODDATE || ' ' ||
              to_char(mst.txdate,'dd/mm/yyyy')  || ', ' || UTF8NUMS.c_const_desc_8851_TXDATE ||' ' ||to_char(MST.ODDATE,'dd/mm/yyyy') || '')  txdesc
        /*FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM ADSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST*/
        FROM ADSCHD MST
        WHERE STATUS='N' AND DELTD <> 'Y'
              AND CLEARDT<= TO_DATE( v_strCURRDATE,systemnums.c_date_format)
        ORDER BY MST.AUTOID
    )
    loop
        select (case when corebank = 'Y' then 1 else 0 end) into l_ISCOREBANK from cimast where acctno = rec.acctno;
        --Set txnum
        plog.debug(pkgctx, 'Loop for autoid:' || rec.AUTOID);
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.ACCTNO,1,4);
        --Set cac field giao dich

        --09   STAUTOID     N
        l_txmsg.txfields ('09').defname   := 'STAUTOID';
        l_txmsg.txfields ('09').TYPE      := 'N';
        l_txmsg.txfields ('09').VALUE     := rec.AUTOID;

        --03   ACCTNO       C
        l_txmsg.txfields ('03').defname   := 'ACCTNO';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;

        --10   PAIDAMT      N
        l_txmsg.txfields ('10').defname   := 'PAIDAMT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := round(rec.AMT,0);
        --11   PAIDFEEAMT   N
        l_txmsg.txfields ('11').defname   := 'PAIDFEEAMT';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := round(rec.FEEAMT,0);
        --12   N   FEEAMT
        l_txmsg.txfields ('12').defname   := 'FEEAMT';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := 0;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := rec.txdesc ;

        --60   N   ISMORTAGE
        l_txmsg.txfields ('60').defname   := 'ISMORTAGE';
        l_txmsg.txfields ('60').TYPE      := 'N';
        l_txmsg.txfields ('60').VALUE     := rec.ISMORTAGE;


        --44   C   RRTYPE
        l_txmsg.txfields ('44').defname   := 'RRTYPE';
        l_txmsg.txfields ('44').TYPE      := 'C';
        l_txmsg.txfields ('44').VALUE     := rec.RRTYPE;

        --04   C   CIACCTNO
        l_txmsg.txfields ('04').defname   := 'CIACCTNO';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.CIACCTNO;


        --05   C   CUSTBANK
        l_txmsg.txfields ('05').defname   := 'CUSTBANK';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.CUSTBANK;

        --94   N   ISCOREBANK
        l_txmsg.txfields ('94').defname   := 'ISMORTAGE';
        l_txmsg.txfields ('94').TYPE      := 'N';
        l_txmsg.txfields ('94').VALUE     := l_ISCOREBANK; --1: la tai khoan corebank; 0: la tai khoan tai CTchung khoan

        --96   C   CIDRAWNDOWN
        l_txmsg.txfields ('96').defname   := 'CIDRAWNDOWN';
        l_txmsg.txfields ('96').TYPE      := 'C';
        l_txmsg.txfields ('96').VALUE     := rec.CIDRAWNDOWN;

        --97   C   BANKDRAWNDOWN
        l_txmsg.txfields ('97').defname   := 'BANKDRAWNDOWN';
        l_txmsg.txfields ('97').TYPE      := 'C';
        l_txmsg.txfields ('97').VALUE     := rec.BANKDRAWNDOWN;

        --98   C   CMPDRAWNDOWN
        l_txmsg.txfields ('98').defname   := 'CMPDRAWNDOWN';
        l_txmsg.txfields ('98').TYPE      := 'C';
        l_txmsg.txfields ('98').VALUE     := rec.CMPDRAWNDOWN;

        --99   C   ALLORONE         hoan ung 1 lenh hoac all
        l_txmsg.txfields ('99').defname   := 'ALLORONE';
        l_txmsg.txfields ('99').TYPE      := 'C';
        l_txmsg.txfields ('99').VALUE     := 'ALL';

        BEGIN
            IF txpks_#8851.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 8851: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ODDayReleaseAdvanced');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on release pr_ODDayReleaseAdvanced');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ODDayReleaseAdvanced');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ODDayReleaseAdvanced;

--T2_HoangND add pr_ODDayReleaseAdvanced_temp
 ---------------------------------pr_ODDayReleaseAdvanced_temp------------------------------------------------
  PROCEDURE pr_ODDayReleaseAdvanced_temp(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      l_ISCOREBANK NUMBER;
      l_CHGBCHORDERSTARTDATE date;
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ODDayReleaseAdvanced_temp');
    --SELECT COUNT(*) MAXROW into l_MaxRow FROM  ADSCHD;

    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'OD' and varname='CHGBCHORDERSTARTDATE';

    /*IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/

    p_lastRun:='Y';

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8851';
     SELECT varvalue
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8851';
    plog.debug(pkgctx, 'Begin loop');
    for rec in
    (
        SELECT MST.AUTOID,MST.ACCTNO,MST.ISMORTAGE,MST.AMT - MST.PAIDAMT AMT ,MST.FEEAMT FEEAMT, MST.VATAMT, TO_CHAR(MST.TXDATE,'DD/MM/YYYY') TXDATE,
               MST.RRTYPE, MST.CIACCTNO, MST.CUSTBANK, MST.ODDATE, MST.PAIDDATE,
               decode(MST.RRTYPE, 'O', 1,0) CIDRAWNDOWN,
               decode(MST.RRTYPE, 'B', 1,0) BANKDRAWNDOWN,
               decode(MST.RRTYPE, 'C', 1,0) CMPDRAWNDOWN,
             ( UTF8NUMS.c_const_desc_8851 ||', ' || UTF8NUMS.c_const_desc_8851_ODDATE || ' ' ||
              to_char(mst.txdate,'dd/mm/yyyy')  || ', ' || UTF8NUMS.c_const_desc_8851_TXDATE ||' ' ||to_char(MST.ODDATE,'dd/mm/yyyy') || '')  txdesc
        /*FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM ADSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST*/
        FROM ADSCHD MST
        WHERE STATUS='N' AND DELTD <> 'Y'
              AND CLEARDT<= TO_DATE( v_strCURRDATE,systemnums.c_date_format)
              and mst.oddate < l_CHGBCHORDERSTARTDATE --T2_HoangND
        ORDER BY MST.AUTOID
    )
    loop
        select (case when corebank = 'Y' then 1 else 0 end) into l_ISCOREBANK from cimast where acctno = rec.acctno;
        --Set txnum
        plog.debug(pkgctx, 'Loop for autoid:' || rec.AUTOID);
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.ACCTNO,1,4);
        --Set cac field giao dich

        --09   STAUTOID     N
        l_txmsg.txfields ('09').defname   := 'STAUTOID';
        l_txmsg.txfields ('09').TYPE      := 'N';
        l_txmsg.txfields ('09').VALUE     := rec.AUTOID;

        --03   ACCTNO       C
        l_txmsg.txfields ('03').defname   := 'ACCTNO';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;

        --10   PAIDAMT      N
        l_txmsg.txfields ('10').defname   := 'PAIDAMT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := round(rec.AMT,0);
        --11   PAIDFEEAMT   N
        l_txmsg.txfields ('11').defname   := 'PAIDFEEAMT';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := round(rec.FEEAMT,0);
        --12   N   FEEAMT
        l_txmsg.txfields ('12').defname   := 'FEEAMT';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := 0;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := rec.txdesc ;

        --60   N   ISMORTAGE
        l_txmsg.txfields ('60').defname   := 'ISMORTAGE';
        l_txmsg.txfields ('60').TYPE      := 'N';
        l_txmsg.txfields ('60').VALUE     := rec.ISMORTAGE;


        --44   C   RRTYPE
        l_txmsg.txfields ('44').defname   := 'RRTYPE';
        l_txmsg.txfields ('44').TYPE      := 'C';
        l_txmsg.txfields ('44').VALUE     := rec.RRTYPE;

        --04   C   CIACCTNO
        l_txmsg.txfields ('04').defname   := 'CIACCTNO';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.CIACCTNO;


        --05   C   CUSTBANK
        l_txmsg.txfields ('05').defname   := 'CUSTBANK';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.CUSTBANK;

        --94   N   ISCOREBANK
        l_txmsg.txfields ('94').defname   := 'ISMORTAGE';
        l_txmsg.txfields ('94').TYPE      := 'N';
        l_txmsg.txfields ('94').VALUE     := l_ISCOREBANK; --1: la tai khoan corebank; 0: la tai khoan tai CTchung khoan

        --96   C   CIDRAWNDOWN
        l_txmsg.txfields ('96').defname   := 'CIDRAWNDOWN';
        l_txmsg.txfields ('96').TYPE      := 'C';
        l_txmsg.txfields ('96').VALUE     := rec.CIDRAWNDOWN;

        --97   C   BANKDRAWNDOWN
        l_txmsg.txfields ('97').defname   := 'BANKDRAWNDOWN';
        l_txmsg.txfields ('97').TYPE      := 'C';
        l_txmsg.txfields ('97').VALUE     := rec.BANKDRAWNDOWN;

        --98   C   CMPDRAWNDOWN
        l_txmsg.txfields ('98').defname   := 'CMPDRAWNDOWN';
        l_txmsg.txfields ('98').TYPE      := 'C';
        l_txmsg.txfields ('98').VALUE     := rec.CMPDRAWNDOWN;

        --99   C   ALLORONE         hoan ung 1 lenh hoac all
        l_txmsg.txfields ('99').defname   := 'ALLORONE';
        l_txmsg.txfields ('99').TYPE      := 'C';
        l_txmsg.txfields ('99').VALUE     := 'ALL';

        BEGIN
            IF txpks_#8851.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 8851: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ODDayReleaseAdvanced_temp');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on release pr_ODDayReleaseAdvanced_temp');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ODDayReleaseAdvanced_temp');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ODDayReleaseAdvanced_temp;
--End T2_HoangND add pr_ODDayReleaseAdvanced_temp

/*---------------------------------pr_CIAutoAdvance------------------------------------------------
  PROCEDURE pr_CIAutoAdvance(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      l_dblamount number(20,0);
      l_dblbalance number(20,0);
      l_dblcmpfee number(20,0);
      l_dblbnkfee number(20,0);
      l_dbladvamount number(20,0);
      l_ADTXNUM      VARCHAR2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CIAutoAdvance');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  CIMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='1153';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='1153';
    plog.debug(pkgctx, 'Begin loop');
    l_dblamount:=0;
    l_dblbalance:=0;

    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    for rec in
    (
        SELECT MST.AFACCTNO,MST.AMT,MST.FULLNAME,MST.ADDRESS,MST.LICENSE,MST.CUSTODYCD,MST.COREBANK,MST.EXECAMT,
        MST.AAMT,MST.FAMT,MST.PAIDAMT,MST.PAIDFEEAMT,MST.VATRATE,MST.FEERATE,
        MST.ADVMINAMT, MST.ADVMINBANK, MST.ADVMINFEE, MST.ADVMINFEEBANK, MST.ADVRATE, MST.ADVBANKRATE, MST.AVATRATE,
        MST.DES,MST.CLEARDATE,MST.DAYS,MST.DEPOAMT,DEPOAMT MAXDEPOAMT,ADVAMT,
        MST.ADTYPE, MST.CIACCTNO, MST.RRTYPE, MST.TXDATE,
        decode(MST.RRTYPE, 'O', 1,0) CIDRAWNDOWN,
        decode(MST.RRTYPE, 'B', 1,0) BANKDRAWNDOWN,
        decode(MST.RRTYPE, 'C', 1,0) CMPDRAWNDOWN,
        1 AUTODRAWNDOWN
        FROM (
        SELECT  STS.AFACCTNO,STS.AMT,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,CF.CUSTODYCD,CASE WHEN CI.COREBANK='Y' THEN 0 ELSE 1 END COREBANK,STS.EXECAMT,STS.AAMT,STS.FAMT,STS.PAIDAMT,STS.PAIDFEEAMT,
            STS.VATRATE,STS.FEERATE,
            STS.ADVMINAMT, STS.ADVMINBANK, STS.ADVMINFEE, STS.ADVMINFEEBANK, STS.ADVRATE, STS.ADVBANKRATE, STS.AVATRATE,
            'Ung truoc tien ban lenh GD ngay ' || to_char(STS.TXDATE,'DD/MM/YYYY') || ' thanh toan ngay '  || to_char(STS.CLEARDATE,'DD/MM/YYYY') || ''''   DES,
            STS.CLEARDATE,STS.DAYS,
            ROUND(LEAST(
            (STS.AMT - EXFEEAMT)*(1-(STS.DAYS*ADVRATE/100/360+STS.DAYS*ADVBANKRATE/100/360))-sts.rightvat,
            (STS.AMT - EXFEEAMT)*(1-STS.DAYS*ADVBANKRATE/100/360)-STS.ADVMINFEE-sts.rightvat,
            (STS.AMT - EXFEEAMT)*(1-STS.DAYS*ADVRATE/100/360)-STS.ADVMINFEEBANK-sts.rightvat,
            (STS.AMT - EXFEEAMT-STS.ADVMINFEE-STS.ADVMINFEEBANK-sts.rightvat)
            ) ,0) DEPOAMT,
            round((STS.AMT - EXFEEAMT-sts.rightvat),0) ADVAMT,
            STS.CIACCTNO, STS.ADTYPE, STS.RRTYPE, STS.TXDATE
        FROM
        v_advanceSchedule STS, AFMAST AF,(SELECT * FROM (SELECT A.*, ROWNUM ID FROM CIMAST A)) CI, CFMAST CF
        WHERE STS.AFACCTNO =AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND CI.AFACCTNO=AF.ACCTNO AND CI.BALANCE<0
              AND sts.autoadv ='Y'
              and substr(custodycd ,1,3) = (select varvalue from sysvar where grname ='SYSTEM' and varname ='COMPANYCD')) MST
        WHERE DEPOAMT>0 AND DAYS>0
        ORDER BY AFACCTNO,DAYS
    )
    loop
        --l_dblamount :=rec.DEPOAMT;
        l_dbladvamount:=round(rec.ADVAMT,0);
        select round(ci.balance,0) into l_dblbalance from cimast CI where CI.acctno =rec.afacctno;
        l_dblbalance:=-l_dblbalance;
        l_dblbalance:= round(greatest (
            l_dblbalance + rec.ADVMINFEE + rec.ADVMINFEEBANK,
            l_dblbalance/(1- rec.DAYS*(rec.ADVRATE+rec.ADVBANKRATE)/100/360),
            l_dblbalance/(1- rec.DAYS*(rec.ADVRATE)/100/360) + rec.ADVMINFEEBANK,
            l_dblbalance/(1- rec.DAYS*(rec.ADVBANKRATE)/100/360) + rec.ADVMINFEE
        ),0);

        l_dbladvamount:= round(least(l_dbladvamount,l_dblbalance),0);

        --l_dblamount:=least(l_dblamount,-l_dblbalance);
        --l_dblcmpfee:=greatest(round(l_dblamount*rec.DAYS*rec.FEECMP/100/360/(1-rec.DAYS*(rec.FEECMP+rec.FEEBANK)/100/360),0),rec.MINBAL);
        --l_dblbnkfee:=greatest(round(l_dblamount*rec.DAYS*rec.FEEBANK/100/360/(1-rec.DAYS*(rec.FEECMP+rec.FEEBANK)/100/360),0),rec.MINFEEBANK);

        l_dblcmpfee:= round(greatest(l_dbladvamount*rec.DAYS*rec.ADVRATE/100/360,rec.ADVMINFEE),0);
        l_dblbnkfee:= round(greatest(l_dbladvamount*rec.DAYS*rec.ADVBANKRATE/100/360,rec.ADVMINFEEBANK),0);
        l_dblamount:= round(l_dbladvamount-l_dblcmpfee-l_dblbnkfee,0);

        -- TruongLD add neu so tien ung lon hon so tien ung toi thi thi moi cho ung.
        IF l_dblamount>0 AND l_dbladvamount >= ROUND(REC.ADVMINAMT+REC.ADVMINBANK,0) THEN
            --Set txnum
            plog.debug(pkgctx, 'Loop for account:' || rec.AFACCTNO || ' ngay' || to_char(rec.cleardate));
            SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
            l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
            --Set cac field giao dich
            --03   ACCTNO       C
            l_txmsg.txfields ('03').defname   := 'ACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;
            --05    BANKID      C
            l_txmsg.txfields ('05').defname   := 'BANKID';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := '';
            --08    ORDATE      C
            l_txmsg.txfields ('08').defname   := 'ORDATE';
            l_txmsg.txfields ('08').TYPE      := 'C';
            l_txmsg.txfields ('08').VALUE     := to_char(rec.CLEARDATE,'DD/MM/RRRR');
             --09   ADVAMT          N
            l_txmsg.txfields ('09').defname   := 'ADVAMT';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := l_dblamount + l_dblcmpfee + l_dblbnkfee;
            --10    AMT         N
            l_txmsg.txfields ('10').defname   := 'AMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := l_dblamount;
            --11    FEEAMT      N
            l_txmsg.txfields ('11').defname   := 'FEEAMT';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := l_dblcmpfee;

            --12    INTRATE     N
            l_txmsg.txfields ('12').defname   := 'INTRATE';
            l_txmsg.txfields ('12').TYPE      := 'N';
            l_txmsg.txfields ('12').VALUE     := rec.ADVRATE;
            --13    DAYS        N
            l_txmsg.txfields ('13').defname   := 'DAYS';
            l_txmsg.txfields ('13').TYPE      := 'N';
            l_txmsg.txfields ('13').VALUE     := rec.DAYS;
            --14    BNKFEEAMT   N
            l_txmsg.txfields ('14').defname   := 'BNKFEEAMT';
            l_txmsg.txfields ('14').TYPE      := 'N';
            l_txmsg.txfields ('14').VALUE     := l_dblbnkfee;
            --15    BNKRATE     N
            l_txmsg.txfields ('15').defname   := 'BNKRATE';
            l_txmsg.txfields ('15').TYPE      := 'N';
            l_txmsg.txfields ('15').VALUE     := rec.ADVBANKRATE;
            --16    CMPMINBAL   N
            l_txmsg.txfields ('16').defname   := 'CMPMINBAL';
            l_txmsg.txfields ('16').TYPE      := 'N';
            l_txmsg.txfields ('16').VALUE     := rec.ADVMINFEE;
            --17    BNKMINBAL   N
            l_txmsg.txfields ('17').defname   := 'BNKMINBAL';
            l_txmsg.txfields ('17').TYPE      := 'N';
            l_txmsg.txfields ('17').VALUE     := rec.ADVMINFEEBANK;
            --18    VATAMT  N
            l_txmsg.txfields ('18').defname   := 'VATAMT';
            l_txmsg.txfields ('18').TYPE      := 'N';
            l_txmsg.txfields ('18').VALUE     := 0;
            --19    VAT     N
            l_txmsg.txfields ('19').defname   := 'VAT';
            l_txmsg.txfields ('19').TYPE      := 'N';
            l_txmsg.txfields ('19').VALUE     := 0;
            --20    MAXAMT      N
            l_txmsg.txfields ('20').defname   := 'MAXAMT';
            l_txmsg.txfields ('20').TYPE      := 'N';
            l_txmsg.txfields ('20').VALUE     := round(rec.MAXDEPOAMT,0);
            --30    DESC        C
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := rec.DES;
            --40    3600        C
            l_txmsg.txfields ('40').defname   := '3600';
            l_txmsg.txfields ('40').TYPE      := 'C';
            l_txmsg.txfields ('40').VALUE     := 3600;
            --41    100         C
            l_txmsg.txfields ('41').defname   := '100';
            l_txmsg.txfields ('41').TYPE      := 'C';
            l_txmsg.txfields ('41').VALUE     := 100;
            --60    ISMORTAGE   N
            --l_txmsg.txfields ('60').defname   := 'ISMORTAGE';
            --l_txmsg.txfields ('60').TYPE      := 'N';
            --l_txmsg.txfields ('60').VALUE     := rec.ISMORTAGE;
            --90    CUSTNAME    C
            l_txmsg.txfields ('90').defname   := 'CUSTNAME';
            l_txmsg.txfields ('90').TYPE      := 'C';
            l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;
            --91    ADDRESS     C
            l_txmsg.txfields ('91').defname   := 'ADDRESS';
            l_txmsg.txfields ('91').TYPE      := 'C';
            l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;
            --92    LICENSE     C
            l_txmsg.txfields ('92').defname   := 'LICENSE';
            l_txmsg.txfields ('92').TYPE      := 'C';
            l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

            -- TruongLD Add 21/09/2011
            --42    TXDATE     C
            l_txmsg.txfields ('42').defname   := 'TXDATE';
            l_txmsg.txfields ('42').TYPE      := 'C';
            l_txmsg.txfields ('42').VALUE     := rec.TXDATE;

            --43    CIACCTNO     C
            l_txmsg.txfields ('43').defname   := 'CIACCTNO';
            l_txmsg.txfields ('43').TYPE      := 'C';
            l_txmsg.txfields ('43').VALUE     := rec.CIACCTNO;

            --44    RRTYPE     C
            l_txmsg.txfields ('44').defname   := 'RRTYPE';
            l_txmsg.txfields ('44').TYPE      := 'C';
            l_txmsg.txfields ('44').VALUE     := rec.RRTYPE;

            --46    ACTYPE     C
            l_txmsg.txfields ('46').defname   := 'ACTYPE';
            l_txmsg.txfields ('46').TYPE      := 'C';
            l_txmsg.txfields ('46').VALUE     := rec.ADTYPE;

            --96    CIDRAWNDOWN     C
            l_txmsg.txfields ('96').defname   := 'CIDRAWNDOWN';
            l_txmsg.txfields ('96').TYPE      := 'C';
            l_txmsg.txfields ('96').VALUE     := rec.CIDRAWNDOWN;

            --97    BANKDRAWNDOWN     C
            l_txmsg.txfields ('97').defname   := 'BANKDRAWNDOWN';
            l_txmsg.txfields ('97').TYPE      := 'C';
            l_txmsg.txfields ('97').VALUE     := rec.BANKDRAWNDOWN;

             -- 98   CMPDRAWNDOWN     C
            l_txmsg.txfields ('98').defname   := 'CMPDRAWNDOWN';
            l_txmsg.txfields ('98').TYPE      := 'C';
            l_txmsg.txfields ('98').VALUE     := rec.CMPDRAWNDOWN;

            -- 95   AUTODRAWNDOWN
            l_txmsg.txfields ('95').defname   := 'AUTODRAWNDOWN';
            l_txmsg.txfields ('95').TYPE      := 'C';
            l_txmsg.txfields ('95').VALUE     := rec.AUTODRAWNDOWN;

            -- 99   ADTXNUM
            l_txmsg.txfields ('99').defname   := 'ADTXNUM';
            l_txmsg.txfields ('99').TYPE      := 'C';
            l_txmsg.txfields ('99').VALUE     := '';

            -- End TruongLD
            BEGIN
                IF txpks_#1153.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.debug (pkgctx,
                               'got error 1153: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;

        END IF;

    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_CIAutoAdvance');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on release pr_CIAutoAdvance');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_CIAutoAdvance');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_CIAutoAdvance;*/

 ---------------------------------pr_CIAutoAdvance------------------------------------------------
  PROCEDURE pr_CIAutoAdvance(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      l_dblamount number(20,0);
      l_dblbalance number(20,0);
      l_dblcmpfee number(20,0);
      l_dblbnkfee number(20,0);
      l_dbladvamount number(20,0);
      l_ADTXNUM      VARCHAR2(10);
      v_lastacctno varchar2(10);
      l_remaingpamt number(20,0);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CIAutoAdvance');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  CIMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='1153';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='1153';
    plog.debug(pkgctx, 'Begin loop');
    /* DucNV sua : Doi voi nhung tk dc mien phi UTTB thi
            buoc 1 : chi Ung de tra no , co tinh phi binh thuong
            buoc 2 : ung de tra tien mua trong ngay : duoc mien phi ung

    */
    l_dblamount:=0;
    l_dblbalance:=0;
    v_lastacctno:='zzzz';
    l_remaingpamt:=0;
    for rec in
    (   --chaunh: sua check so tien duoc ung truoc: tm < tien bao lanh
        select sts.*, aft.adtype,AD.VATRATE, AD.ADVRATE AINTRATE,
            AD.ADVMINAMT AMINBAL,AD.ADVMINBANK AMINBANK, AD.ADVBANKRATE AFEEBANK,0 ADVMINFEE,0 AMINFEEBANK,
            'Ung truoc tien lenh ban ngay:' || sts.txdate DES,
            CF.address, cf.idcode license, ad.ADVMAXFEE,CASE WHEN STS.ISVSD = 'N' THEN 0 ELSE 1 END ISVSDFAKE,
            aft.disadvfeedays, nvl(od.buyamt,0) buyamt
            ,nvl(nl.gpamt,0) gpamt, nvl(nl.remaingpamt,0) remaingpamt
        FROM vw_advanceschedule sts, afmast af,
            (select * from ln_gp_log where log_date = to_date(v_strCURRDATE,systemnums.c_date_format))nl,
            (select * from (select a.*, rownum id from cimast a)) ci,
            cfmast cf, aftype aft, adtype ad,
            (SELECT o.afacctno, sum(o.execamt + o.feeamt) buyamt
              FROM ODMAST O
              WHERE O.TXDAte=v_strCURRDATE AND O.EXECTYPE='NB' and o.deltd<>'Y' and o.execamt>0
              group by o.afacctno) od
        where sts.acctno =af.acctno and af.custid=cf.custid
            and ci.afacctno=af.acctno and ci.balance -  nvl(nl.gpamt,0) <0  /*ci.balance < 0*/
            and af.actype = aft.actype  and aft.adtype = ad.actype
            AND sts.isvsd <> 'Y' -- HaiLT them de chan UT doi voi lenh ban cam co VSD
            --and substr(sts.custodycd ,1,3) = (select varvalue from sysvar where grname ='SYSTEM' and varname ='COMPANYCD')
            AND af.autoadv='Y'
            and af.acctno = nl.acctno(+)
            And af.acctno= od.afacctno(+)
        order by sts.acctno, sts.days
    )
    loop
         plog.error('1153 Step 1 acctno  = '||rec.acctno||' -----------------');
        --chaunh
        if rec.acctno <> v_lastacctno then
            l_remaingpamt:= rec.remaingpamt ;
        end if;
        --end
        l_dbladvamount:=round(rec.maxavlamt,0);
        select round(ci.balance,0) - rec.gpamt  into l_dblbalance from cimast CI where CI.acctno =rec.acctno;--chaunh: -rec.gpamt
        plog.error('1153 Step 1 l_dblbalance = '||l_dblbalance);
        plog.error('1153 Step 1 rec.buyamt = '||rec.buyamt);
        plog.error('1153 Step 1 disadvfeedays = '||rec.disadvfeedays);
        l_dblbalance:=-l_dblbalance;
        IF rec.disadvfeedays >0 and rec.buyamt >0 then
            -- Neu KH co lenhj mua trong ngay va dc mien phi ung thi chua ung de tra tien mua o buoc nay
            l_dblbalance:=greatest(l_dblbalance-rec.buyamt,0);
        End if;
        plog.error('1153 Step 1 l_dblbalance = '||l_dblbalance);
        plog.error('1153 Step 1 rec.maxavlamt = '||rec.maxavlamt);
        --l_dblbalance:= round(greatest (
        --    l_dblbalance + rec.ADVMINFEE + rec.AMINFEEBANK,
        --    l_dblbalance/(1- rec.DAYS*(rec.AINTRATE+rec.AFEEBANK)/100/360),
        --    l_dblbalance/(1- rec.DAYS*(rec.AINTRATE)/100/360) + rec.AMINFEEBANK,
        --    l_dblbalance/(1- rec.DAYS*(rec.AFEEBANK)/100/360) + rec.ADVMINFEE
        --),0); --Ung truoc tu dong khong tinh phi Min
        l_dblbalance:= ceil(greatest (
            l_dblbalance + rec.ADVMINFEE ,
            l_dblbalance/(1- rec.DAYS*rec.AINTRATE/100/360)
        )); --Ung truoc tu dong khong tinh phi Min
        --chaunh
        --l_dbladvamount:= round(least(l_dbladvamount,l_dblbalance),0);
        l_dbladvamount:= ceil(least(l_dbladvamount
                                    -  l_remaingpamt /(1 - greatest(rec.DAYS*rec.AINTRATE/100/360,rec.ADVMINFEE) )
                                    ,l_dblbalance)
                                 ); --lam tron xuong
        --end
         plog.error('1153 Step 1 l_dbladvamount = '||l_dbladvamount);
        l_dblcmpfee:= ceil(greatest(l_dbladvamount*rec.DAYS*rec.AINTRATE/100/360,rec.ADVMINFEE));
        l_dblbnkfee:= ceil(greatest(l_dbladvamount*rec.DAYS*rec.AFEEBANK/100/360,rec.AMINFEEBANK));
        --l_dblamount:= round(l_dbladvamount-l_dblcmpfee-l_dblbnkfee,0);
        l_dblamount:= round(l_dbladvamount-l_dblcmpfee,0);
         plog.error('1153 Step 1 l_dblamount = '||l_dblamount);
        --Ung truoc tu dong khong ting gia tri Ung Min
        IF l_dblamount>0 then --AND l_dbladvamount >= ROUND(REC.AMINBAL+REC.AMINBANK,0) THEN
            --Set txnum
            plog.debug(pkgctx, 'Loop for account:' || rec.ACCTNO || ' ngay' || to_char(rec.cleardate));
            SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
            l_txmsg.brid        := substr(rec.ACCTNO,1,4);
            --Set cac field giao dich
            l_txmsg.txfields ('60').defname   := 'ISVSD';
            l_txmsg.txfields ('60').TYPE      := 'C';
            l_txmsg.txfields ('60').VALUE     := rec.ISVSDFAKE;

            --03   ACCTNO       C
            l_txmsg.txfields ('03').defname   := 'ACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;
            --06    ADTYPE      C
            l_txmsg.txfields ('06').defname   := 'ADTYPE';
            l_txmsg.txfields ('06').TYPE      := 'C';
            l_txmsg.txfields ('06').VALUE     := rec.adtype;
            --08    DUEDATE      C
            l_txmsg.txfields ('08').defname   := 'DUEDATE';
            l_txmsg.txfields ('08').TYPE      := 'C';
            l_txmsg.txfields ('08').VALUE     := to_char(rec.CLEARDATE,'DD/MM/RRRR');
             --09   ADVAMT          N
            l_txmsg.txfields ('09').defname   := 'ADVAMT';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := l_dblamount + l_dblcmpfee + l_dblbnkfee;
            --10    AMT         N
            l_txmsg.txfields ('10').defname   := 'AMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := l_dblamount;
            --11    FEEAMT      N
            l_txmsg.txfields ('11').defname   := 'FEEAMT';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := l_dblcmpfee;

            --12    INTRATE     N
            l_txmsg.txfields ('12').defname   := 'INTRATE';
            l_txmsg.txfields ('12').TYPE      := 'N';
            l_txmsg.txfields ('12').VALUE     := rec.AINTRATE;
            --13    DAYS        N
            l_txmsg.txfields ('13').defname   := 'DAYS';
            l_txmsg.txfields ('13').TYPE      := 'N';
            l_txmsg.txfields ('13').VALUE     := rec.DAYS;
            --14    BNKFEEAMT   N
            l_txmsg.txfields ('14').defname   := 'BNKFEEAMT';
            l_txmsg.txfields ('14').TYPE      := 'N';
            l_txmsg.txfields ('14').VALUE     := l_dblbnkfee;
            --15    BNKRATE     N
            l_txmsg.txfields ('15').defname   := 'BNKRATE';
            l_txmsg.txfields ('15').TYPE      := 'N';
            l_txmsg.txfields ('15').VALUE     := rec.AFEEBANK;
            --16    CMPMINBAL   N
            l_txmsg.txfields ('16').defname   := 'CMPMINBAL';
            l_txmsg.txfields ('16').TYPE      := 'N';
            l_txmsg.txfields ('16').VALUE     := rec.ADVMINFEE;
            --17    BNKMINBAL   N
            l_txmsg.txfields ('17').defname   := 'BNKMINBAL';
            l_txmsg.txfields ('17').TYPE      := 'N';
            l_txmsg.txfields ('17').VALUE     := rec.AMINFEEBANK;
            --18    VATAMT  N
            l_txmsg.txfields ('18').defname   := 'VATAMT';
            l_txmsg.txfields ('18').TYPE      := 'N';
            l_txmsg.txfields ('18').VALUE     := rec.VATRATE * (l_dblcmpfee+l_dblbnkfee)/100;
            --19    VAT     N
            l_txmsg.txfields ('19').defname   := 'VAT';
            l_txmsg.txfields ('19').TYPE      := 'N';
            l_txmsg.txfields ('19').VALUE     := rec.VATRATE;
            --20    MAXAMT      N
            l_txmsg.txfields ('20').defname   := 'MAXAMT';
            l_txmsg.txfields ('20').TYPE      := 'N';
            l_txmsg.txfields ('20').VALUE     := round(rec.MAXAVLAMT,0);
            --21    AMINBAL      N
            l_txmsg.txfields ('21').defname   := 'AMINBAL';
            l_txmsg.txfields ('21').TYPE      := 'N';
            l_txmsg.txfields ('21').VALUE     := 0;
            --22   ADVMAXFEE         N
            l_txmsg.txfields ('22').defname   := 'ADVMAXFEE';
            l_txmsg.txfields ('22').TYPE      := 'N';
            l_txmsg.txfields ('22').VALUE     := rec.ADVMAXFEE;
            --30    DESC        C
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := rec.DES;
            --40    3600        C
            l_txmsg.txfields ('40').defname   := '3600';
            l_txmsg.txfields ('40').TYPE      := 'C';
            l_txmsg.txfields ('40').VALUE     := 36000;
            --41    100         C
            l_txmsg.txfields ('41').defname   := '100';
            l_txmsg.txfields ('41').TYPE      := 'C';
            l_txmsg.txfields ('41').VALUE     := 100;
            --42    MATCHDATE         C
            l_txmsg.txfields ('42').defname   := 'MATCHDATE';
            l_txmsg.txfields ('42').TYPE      := 'C';
            l_txmsg.txfields ('42').VALUE     := rec.txdate;
            --88    CUSTODYCD    C
            l_txmsg.txfields ('88').defname   := 'CUSTODYCD';
            l_txmsg.txfields ('88').TYPE      := 'C';
            l_txmsg.txfields ('88').VALUE     := rec.CUSTODYCD;
            --89    ACTYPE    C
            l_txmsg.txfields ('89').defname   := 'ACTYPE';
            l_txmsg.txfields ('89').TYPE      := 'C';
            l_txmsg.txfields ('89').VALUE     := rec.ACTYPE;
            --90    CUSTNAME    C
            l_txmsg.txfields ('90').defname   := 'CUSTNAME';
            l_txmsg.txfields ('90').TYPE      := 'C';
            l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;
            --91    ADDRESS     C
            l_txmsg.txfields ('91').defname   := 'ADDRESS';
            l_txmsg.txfields ('91').TYPE      := 'C';
            l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;
            --92    LICENSE     C
            l_txmsg.txfields ('92').defname   := 'LICENSE';
            l_txmsg.txfields ('92').TYPE      := 'C';
            l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

            --93    BANKACCT    C
            l_txmsg.txfields ('93').defname   := 'BANKACCT';
            l_txmsg.txfields ('93').TYPE      := 'C';
            l_txmsg.txfields ('93').VALUE     := rec.BANKACCT;
            --94    COREBANK     C
            l_txmsg.txfields ('94').defname   := 'COREBANK';
            l_txmsg.txfields ('94').TYPE      := 'C';
            l_txmsg.txfields ('94').VALUE     := rec.COREBANK;
            --95    BANKCODE     C
            l_txmsg.txfields ('95').defname   := 'BANKCODE';
            l_txmsg.txfields ('95').TYPE      := 'C';
            l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

            --96    IDDATE     C
            l_txmsg.txfields ('96').defname   := 'IDDATE';
            l_txmsg.txfields ('96').TYPE      := 'C';
            l_txmsg.txfields ('96').VALUE     := rec.txdate;

            --97    IDPLACE     C
            l_txmsg.txfields ('97').defname   := 'IDPLACE';
            l_txmsg.txfields ('97').TYPE      := 'C';
            l_txmsg.txfields ('97').VALUE     := '';

             --23    PAIDADVTYPE     C
            l_txmsg.txfields ('23').defname   := 'PAIDADVTYPE';
            l_txmsg.txfields ('23').TYPE      := 'C';
            l_txmsg.txfields ('23').VALUE     := 'N';

            BEGIN
                IF txpks_#1153.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 1153: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;

        END IF;
        --chaunh
        l_remaingpamt:=floor(greatest(0, l_remaingpamt - least(l_remaingpamt,(round(rec.maxavlamt,0) - greatest(l_dbladvamount,0))* (1 - greatest(rec.DAYS*rec.AINTRATE/100/360,rec.ADVMINFEE)))));
        --l_remaingpamt:= least(l_remaingpamt,(round(rec.maxavlamt,0) - greatest(l_dbladvamount,0))* (1 - greatest(rec.DAYS*rec.AINTRATE/100/360,rec.ADVMINFEE)));
        --l_remaingpamt:= greatest(l_remaingpamt - (l_dbladvamount - l_remaingpamt) ,0);
        v_lastacctno:=rec.acctno;
        --end
    end loop;
    --Ducnv UTTB tra tien mua trong ngay cho nhung tk dc mien phi UTTB
    v_lastacctno:='zzzz';
    l_dblamount:=0;
    l_dblbalance:=0;
    l_remaingpamt:=0;
    for rec in
    (
        Select CI.BALANCE,nvl(od.buyamt,0) buyamt,sb.SBDATE-sb.CURRDATE DISDAYS,
            greatest(sts.days-(sb.SBDATE-sb.CURRDATE),0) adjdays,
            sts.*, aft.adtype,AD.VATRATE, AD.ADVRATE AINTRATE,
            AD.ADVMINAMT AMINBAL,AD.ADVMINBANK AMINBANK, AD.ADVBANKRATE AFEEBANK,0 ADVMINFEE,0 AMINFEEBANK,
            'Ung truoc tien tra tien mua - lenh ban ngay:' || sts.txdate DES,
            CF.address, cf.idcode license, ad.ADVMAXFEE,CASE WHEN STS.ISVSD = 'N' THEN 0 ELSE 1 END ISVSDFAKE
            ,nvl(nl.gpamt,0) gpamt, nvl(nl.remaingpamt,0) remaingpamt
        FROM vw_advanceschedule sts, afmast af,
            (select * from ln_gp_log where log_date = to_date(v_strCURRDATE,systemnums.c_date_format))nl,
            (select * from (select a.*, rownum id from cimast a)) ci,
            cfmast cf, aftype aft, adtype ad,
            (SELECT o.afacctno, sum(o.execamt + o.feeamt) buyamt
              FROM ODMAST O
              WHERE O.TXDAte=v_strCURRDATE AND O.EXECTYPE='NB' and o.deltd<>'Y' and o.execamt>0
              group by o.afacctno) od,
              sbcurrdate sb
        where sts.acctno =af.acctno and af.custid=cf.custid
            and ci.afacctno=af.acctno and ci.balance - nvl(gpamt,0) <0 --chaunh: cat 1 phan tien duoc ung de du tru
            and af.actype = aft.actype  and aft.adtype = ad.actype
            AND sts.isvsd <> 'Y' -- HaiLT them de chan UT doi voi lenh ban cam co VSD
            --and substr(sts.custodycd ,1,3) = (select varvalue from sysvar where grname ='SYSTEM' and varname ='COMPANYCD')
            AND af.autoadv='Y'
            and af.acctno=od.afacctno
            and af.acctno = nl.acctno(+)
            and sb.numday=aft.DISADVFEEDAYS
            and sb.sbtype='B'
            and aft.DISADVFEEDAYS>0
        order by sts.acctno, sts.days
    )
    loop
        plog.error('1153 step 2 acctno  = '||rec.acctno||' -----------------');
        plog.error('1153 step 2 rec.balance = '||rec.balance);
        plog.error('1153 step 2 rec.buyamt = '||rec.buyamt);
        plog.error('1153 step 2 rec.adjdays = '||rec.adjdays);
        IF rec.acctno<>v_lastacctno then -- xac dinh so tien can phai ung de tra no
         l_dblbalance:=least(-rec.balance + rec.gpamt ,rec.buyamt);
         l_remaingpamt:= rec.remaingpamt ;
        End if;
        l_dblbalance:= ceil(greatest (
            l_dblbalance + rec.ADVMINFEE ,
            l_dblbalance/(1- rec.adjdays*rec.AINTRATE/100/360)
        ));
        plog.error('1153 step 2 l_remaingpamt = '||l_remaingpamt);
        plog.error('1153 step 2 l_dblbalance = '||l_dblbalance);
        plog.error('1153 step 2 rec.maxavlamt = '||rec.maxavlamt);
        --Ung truoc tu dong khong tinh phi Min

        l_dbladvamount:=round(rec.maxavlamt,0);
        plog.error('1153 step 2 rec.maxavlamt = '||rec.maxavlamt);
        --chaunh
        --l_dbladvamount:= round(least(l_dbladvamount,l_dblbalance),0);
        l_dbladvamount:= round(least(l_dbladvamount - l_remaingpamt /(1 - greatest(rec.DAYS*rec.AINTRATE/100/360,rec.ADVMINFEE))
                                     ,l_dblbalance ),0);
        --end
        plog.error('1153 step 2 l_dbladvamount = '||l_dbladvamount);

        l_dblcmpfee:= ceil(greatest(l_dbladvamount*rec.adjdays*rec.AINTRATE/100/360,rec.ADVMINFEE));
        l_dblbnkfee:= ceil(greatest(l_dbladvamount*rec.adjdays*rec.AFEEBANK/100/360,rec.AMINFEEBANK));
        --l_dblamount:= round(l_dbladvamount-l_dblcmpfee-l_dblbnkfee,0);
        l_dblamount:= round(l_dbladvamount-l_dblcmpfee,0);
        plog.error('1153 step 2 l_dblamount = '||l_dblamount);
        --Ung truoc tu dong khong ting gia tri Ung Min
        IF l_dblamount>0 then --AND l_dbladvamount >= ROUND(REC.AMINBAL+REC.AMINBANK,0) THEN
            --Set txnum
            --plog.debug(pkgctx, 'Loop for account:' || rec.ACCTNO || ' ngay' || to_char(rec.cleardate));
            SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
            l_txmsg.brid        := substr(rec.ACCTNO,1,4);
            --Set cac field giao dich
            l_txmsg.txfields ('60').defname   := 'ISVSD';
            l_txmsg.txfields ('60').TYPE      := 'C';
            l_txmsg.txfields ('60').VALUE     := rec.ISVSDFAKE;

            --03   ACCTNO       C
            l_txmsg.txfields ('03').defname   := 'ACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;
            --06    ADTYPE      C
            l_txmsg.txfields ('06').defname   := 'ADTYPE';
            l_txmsg.txfields ('06').TYPE      := 'C';
            l_txmsg.txfields ('06').VALUE     := rec.adtype;
            --08    DUEDATE      C
            l_txmsg.txfields ('08').defname   := 'DUEDATE';
            l_txmsg.txfields ('08').TYPE      := 'C';
            l_txmsg.txfields ('08').VALUE     := to_char(rec.CLEARDATE,'DD/MM/RRRR');
             --09   ADVAMT          N
            l_txmsg.txfields ('09').defname   := 'ADVAMT';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := l_dblamount + l_dblcmpfee + l_dblbnkfee;
            --10    AMT         N
            l_txmsg.txfields ('10').defname   := 'AMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := l_dblamount;
            --11    FEEAMT      N
            l_txmsg.txfields ('11').defname   := 'FEEAMT';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := l_dblcmpfee;

            --12    INTRATE     N
            l_txmsg.txfields ('12').defname   := 'INTRATE';
            l_txmsg.txfields ('12').TYPE      := 'N';
            l_txmsg.txfields ('12').VALUE     := rec.AINTRATE;
            --13    DAYS        N
            l_txmsg.txfields ('13').defname   := 'DAYS';
            l_txmsg.txfields ('13').TYPE      := 'N';
            l_txmsg.txfields ('13').VALUE     := rec.adjdays;
            --14    BNKFEEAMT   N
            l_txmsg.txfields ('14').defname   := 'BNKFEEAMT';
            l_txmsg.txfields ('14').TYPE      := 'N';
            l_txmsg.txfields ('14').VALUE     := l_dblbnkfee;
            --15    BNKRATE     N
            l_txmsg.txfields ('15').defname   := 'BNKRATE';
            l_txmsg.txfields ('15').TYPE      := 'N';
            l_txmsg.txfields ('15').VALUE     := rec.AFEEBANK;
            --16    CMPMINBAL   N
            l_txmsg.txfields ('16').defname   := 'CMPMINBAL';
            l_txmsg.txfields ('16').TYPE      := 'N';
            l_txmsg.txfields ('16').VALUE     := rec.ADVMINFEE;
            --17    BNKMINBAL   N
            l_txmsg.txfields ('17').defname   := 'BNKMINBAL';
            l_txmsg.txfields ('17').TYPE      := 'N';
            l_txmsg.txfields ('17').VALUE     := rec.AMINFEEBANK;
            --18    VATAMT  N
            l_txmsg.txfields ('18').defname   := 'VATAMT';
            l_txmsg.txfields ('18').TYPE      := 'N';
            l_txmsg.txfields ('18').VALUE     := rec.VATRATE * (l_dblcmpfee+l_dblbnkfee)/100;
            --19    VAT     N
            l_txmsg.txfields ('19').defname   := 'VAT';
            l_txmsg.txfields ('19').TYPE      := 'N';
            l_txmsg.txfields ('19').VALUE     := rec.VATRATE;
            --20    MAXAMT      N
            l_txmsg.txfields ('20').defname   := 'MAXAMT';
            l_txmsg.txfields ('20').TYPE      := 'N';
            l_txmsg.txfields ('20').VALUE     := round(rec.MAXAVLAMT,0);
            --21    AMINBAL      N
            l_txmsg.txfields ('21').defname   := 'AMINBAL';
            l_txmsg.txfields ('21').TYPE      := 'N';
            l_txmsg.txfields ('21').VALUE     := 0;
            --22   ADVMAXFEE         N
            l_txmsg.txfields ('22').defname   := 'ADVMAXFEE';
            l_txmsg.txfields ('22').TYPE      := 'N';
            l_txmsg.txfields ('22').VALUE     := rec.ADVMAXFEE;
            --30    DESC        C
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := rec.DES;
            --40    3600        C
            l_txmsg.txfields ('40').defname   := '3600';
            l_txmsg.txfields ('40').TYPE      := 'C';
            l_txmsg.txfields ('40').VALUE     := 36000;
            --41    100         C
            l_txmsg.txfields ('41').defname   := '100';
            l_txmsg.txfields ('41').TYPE      := 'C';
            l_txmsg.txfields ('41').VALUE     := 100;
            --42    MATCHDATE         C
            l_txmsg.txfields ('42').defname   := 'MATCHDATE';
            l_txmsg.txfields ('42').TYPE      := 'C';
            l_txmsg.txfields ('42').VALUE     := rec.txdate;
            --88    CUSTODYCD    C
            l_txmsg.txfields ('88').defname   := 'CUSTODYCD';
            l_txmsg.txfields ('88').TYPE      := 'C';
            l_txmsg.txfields ('88').VALUE     := rec.CUSTODYCD;
            --89    ACTYPE    C
            l_txmsg.txfields ('89').defname   := 'ACTYPE';
            l_txmsg.txfields ('89').TYPE      := 'C';
            l_txmsg.txfields ('89').VALUE     := rec.ACTYPE;
            --90    CUSTNAME    C
            l_txmsg.txfields ('90').defname   := 'CUSTNAME';
            l_txmsg.txfields ('90').TYPE      := 'C';
            l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;
            --91    ADDRESS     C
            l_txmsg.txfields ('91').defname   := 'ADDRESS';
            l_txmsg.txfields ('91').TYPE      := 'C';
            l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;
            --92    LICENSE     C
            l_txmsg.txfields ('92').defname   := 'LICENSE';
            l_txmsg.txfields ('92').TYPE      := 'C';
            l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

            --93    BANKACCT    C
            l_txmsg.txfields ('93').defname   := 'BANKACCT';
            l_txmsg.txfields ('93').TYPE      := 'C';
            l_txmsg.txfields ('93').VALUE     := rec.BANKACCT;
            --94    COREBANK     C
            l_txmsg.txfields ('94').defname   := 'COREBANK';
            l_txmsg.txfields ('94').TYPE      := 'C';
            l_txmsg.txfields ('94').VALUE     := rec.COREBANK;
            --95    BANKCODE     C
            l_txmsg.txfields ('95').defname   := 'BANKCODE';
            l_txmsg.txfields ('95').TYPE      := 'C';
            l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

            --96    IDDATE     C
            l_txmsg.txfields ('96').defname   := 'IDDATE';
            l_txmsg.txfields ('96').TYPE      := 'C';
            l_txmsg.txfields ('96').VALUE     := rec.txdate;

            --97    IDPLACE     C
            l_txmsg.txfields ('97').defname   := 'IDPLACE';
            l_txmsg.txfields ('97').TYPE      := 'C';
            l_txmsg.txfields ('97').VALUE     := '';

            --23    PAIDADVTYPE     C
            l_txmsg.txfields ('23').defname   := 'PAIDADVTYPE';
            l_txmsg.txfields ('23').TYPE      := 'C';
            l_txmsg.txfields ('23').VALUE     := 'B';

            BEGIN
                IF txpks_#1153.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 1153: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
        l_dblbalance:=l_dblbalance - l_dblamount; --l_dbladvamount;
        END IF;
        l_remaingpamt:=floor(greatest(0, l_remaingpamt - least(l_remaingpamt,(round(rec.maxavlamt,0) - greatest(l_dbladvamount,0))* (1 - greatest(rec.DAYS*rec.AINTRATE/100/360,rec.ADVMINFEE)))));

        --l_remaingpamt:= greatest(l_remaingpamt - greatest(l_dbladvamount - l_remaingpamt,0) ,0);
        v_lastacctno:=rec.acctno;
    end loop;

    -- End of DucNV



    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_CIAutoAdvance');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on release pr_CIAutoAdvance');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CIAutoAdvance');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_CIAutoAdvance;
  -- Ham UTTB sau khi da cat tien mua de tra  no trong han
  PROCEDURE pr_CIAutoAdvanceAFSM(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      l_dblamount number(20,0);
      l_dblbalance number(20,0);
      l_dblcmpfee number(20,0);
      l_dblbnkfee number(20,0);
      l_dbladvamount number(20,0);
      l_ADTXNUM      VARCHAR2(10);
      v_lastacctno varchar2(10);
      v_gpamt number(20,0);
      l_remaingpamt number(20,0);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CIAutoAdvanceAFSM');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  CIMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='1153';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='1153';
    plog.debug(pkgctx, 'Begin loop');
    /* DucNV sua : Doi voi nhung tk dc mien phi UTTB thi
            buoc 1 : chi Ung de tra no , co tinh phi binh thuong
            buoc 2 : ung de tra tien mua trong ngay : duoc mien phi ung

    */
    v_lastacctno:= 'zzzzzz';
    l_dblamount:=0;
    l_dblbalance:=0;
    for rec in
    (
        select sts.*, aft.adtype,AD.VATRATE, AD.ADVRATE AINTRATE,
            AD.ADVMINAMT AMINBAL,AD.ADVMINBANK AMINBANK, AD.ADVBANKRATE AFEEBANK,0 ADVMINFEE,0 AMINFEEBANK,
            'Ung truoc tien lenh ban ngay:' || sts.txdate DES,
            CF.address, cf.idcode license, ad.ADVMAXFEE,CASE WHEN STS.ISVSD = 'N' THEN 0 ELSE 1 END ISVSDFAKE,
            nvl(nl.gpamt, 0) gpamt, nvl(nl.remaingpamt,0) remaingpamt
        FROM vw_advanceschedule sts, afmast af,
            (select * from ln_gp_log where log_date = to_date(v_strCURRDATE,systemnums.c_date_format))nl,
            (select * from (select a.*, rownum id from cimast a)) ci,
            cfmast cf, aftype aft, adtype ad
        where sts.acctno =af.acctno and af.custid=cf.custid
            and ci.afacctno=af.acctno and ci.balance - nvl(nl.gpamt,0)<0
            and af.actype = aft.actype  and aft.adtype = ad.actype
            AND sts.isvsd <> 'Y' -- HaiLT them de chan UT doi voi lenh ban cam co VSD
            --and substr(sts.custodycd ,1,3) = (select varvalue from sysvar where grname ='SYSTEM' and varname ='COMPANYCD')
            AND af.autoadv='Y'
            and af.acctno = nl.acctno(+)

        order by sts.acctno, sts.days
    )
    loop
        if rec.acctno <> v_lastacctno then
            l_remaingpamt:= rec.remaingpamt ;
        end if;

        l_dbladvamount:=round(rec.maxavlamt,0);
        select round(ci.balance,0) - REC.GPAMT into l_dblbalance from cimast CI where CI.acctno =rec.acctno; --chaunh -rec.gpamt
        l_dblbalance:=-l_dblbalance ;

         l_dblbalance:= ceil(greatest (
            l_dblbalance + rec.ADVMINFEE ,
            l_dblbalance/(1- rec.DAYS*rec.AINTRATE/100/360)
        )); --Ung truoc tu dong khong tinh phi Min
        --chaunh: chua lai tien tra no BL
        --l_dbladvamount:= round(least(l_dbladvamount ,l_dblbalance ),0);
        l_dbladvamount:= round(least(l_dbladvamount
                                    -  l_remaingpamt /(1 - greatest(rec.DAYS*rec.AINTRATE/100/360,rec.ADVMINFEE) )
                                    ,l_dblbalance)
                                ,0);


        l_dblcmpfee:= ceil(greatest(l_dbladvamount*rec.DAYS*rec.AINTRATE/100/360,rec.ADVMINFEE));
        l_dblbnkfee:= ceil(greatest(l_dbladvamount*rec.DAYS*rec.AFEEBANK/100/360,rec.AMINFEEBANK));
        --l_dblamount:= round(l_dbladvamount-l_dblcmpfee-l_dblbnkfee,0);
        l_dblamount:= round(l_dbladvamount-l_dblcmpfee,0);

        --Ung truoc tu dong khong ting gia tri Ung Min
        IF l_dblamount>0 then --AND l_dbladvamount >= ROUND(REC.AMINBAL+REC.AMINBANK,0) THEN
            --Set txnum
            plog.debug(pkgctx, 'Loop for account:' || rec.ACCTNO || ' ngay' || to_char(rec.cleardate));
            SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
            l_txmsg.brid        := substr(rec.ACCTNO,1,4);
            --Set cac field giao dich
            l_txmsg.txfields ('60').defname   := 'ISVSD';
            l_txmsg.txfields ('60').TYPE      := 'C';
            l_txmsg.txfields ('60').VALUE     := rec.ISVSDFAKE;

            --03   ACCTNO       C
            l_txmsg.txfields ('03').defname   := 'ACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;
            --06    ADTYPE      C
            l_txmsg.txfields ('06').defname   := 'ADTYPE';
            l_txmsg.txfields ('06').TYPE      := 'C';
            l_txmsg.txfields ('06').VALUE     := rec.adtype;
            --08    DUEDATE      C
            l_txmsg.txfields ('08').defname   := 'DUEDATE';
            l_txmsg.txfields ('08').TYPE      := 'C';
            l_txmsg.txfields ('08').VALUE     := to_char(rec.CLEARDATE,'DD/MM/RRRR');
             --09   ADVAMT          N
            l_txmsg.txfields ('09').defname   := 'ADVAMT';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := l_dblamount + l_dblcmpfee + l_dblbnkfee;
            --10    AMT         N
            l_txmsg.txfields ('10').defname   := 'AMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := l_dblamount;
            --11    FEEAMT      N
            l_txmsg.txfields ('11').defname   := 'FEEAMT';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := l_dblcmpfee;

            --12    INTRATE     N
            l_txmsg.txfields ('12').defname   := 'INTRATE';
            l_txmsg.txfields ('12').TYPE      := 'N';
            l_txmsg.txfields ('12').VALUE     := rec.AINTRATE;
            --13    DAYS        N
            l_txmsg.txfields ('13').defname   := 'DAYS';
            l_txmsg.txfields ('13').TYPE      := 'N';
            l_txmsg.txfields ('13').VALUE     := rec.DAYS;
            --14    BNKFEEAMT   N
            l_txmsg.txfields ('14').defname   := 'BNKFEEAMT';
            l_txmsg.txfields ('14').TYPE      := 'N';
            l_txmsg.txfields ('14').VALUE     := l_dblbnkfee;
            --15    BNKRATE     N
            l_txmsg.txfields ('15').defname   := 'BNKRATE';
            l_txmsg.txfields ('15').TYPE      := 'N';
            l_txmsg.txfields ('15').VALUE     := rec.AFEEBANK;
            --16    CMPMINBAL   N
            l_txmsg.txfields ('16').defname   := 'CMPMINBAL';
            l_txmsg.txfields ('16').TYPE      := 'N';
            l_txmsg.txfields ('16').VALUE     := rec.ADVMINFEE;
            --17    BNKMINBAL   N
            l_txmsg.txfields ('17').defname   := 'BNKMINBAL';
            l_txmsg.txfields ('17').TYPE      := 'N';
            l_txmsg.txfields ('17').VALUE     := rec.AMINFEEBANK;
            --18    VATAMT  N
            l_txmsg.txfields ('18').defname   := 'VATAMT';
            l_txmsg.txfields ('18').TYPE      := 'N';
            l_txmsg.txfields ('18').VALUE     := rec.VATRATE * (l_dblcmpfee+l_dblbnkfee)/100;
            --19    VAT     N
            l_txmsg.txfields ('19').defname   := 'VAT';
            l_txmsg.txfields ('19').TYPE      := 'N';
            l_txmsg.txfields ('19').VALUE     := rec.VATRATE;
            --20    MAXAMT      N
            l_txmsg.txfields ('20').defname   := 'MAXAMT';
            l_txmsg.txfields ('20').TYPE      := 'N';
            l_txmsg.txfields ('20').VALUE     := round(rec.MAXAVLAMT,0);
            --21    AMINBAL      N
            l_txmsg.txfields ('21').defname   := 'AMINBAL';
            l_txmsg.txfields ('21').TYPE      := 'N';
            l_txmsg.txfields ('21').VALUE     := 0;
            --22   ADVMAXFEE         N
            l_txmsg.txfields ('22').defname   := 'ADVMAXFEE';
            l_txmsg.txfields ('22').TYPE      := 'N';
            l_txmsg.txfields ('22').VALUE     := rec.ADVMAXFEE;
            --30    DESC        C
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := rec.DES;
            --40    3600        C
            l_txmsg.txfields ('40').defname   := '3600';
            l_txmsg.txfields ('40').TYPE      := 'C';
            l_txmsg.txfields ('40').VALUE     := 36000;
            --41    100         C
            l_txmsg.txfields ('41').defname   := '100';
            l_txmsg.txfields ('41').TYPE      := 'C';
            l_txmsg.txfields ('41').VALUE     := 100;
            --42    MATCHDATE         C
            l_txmsg.txfields ('42').defname   := 'MATCHDATE';
            l_txmsg.txfields ('42').TYPE      := 'C';
            l_txmsg.txfields ('42').VALUE     := rec.txdate;
            --88    CUSTODYCD    C
            l_txmsg.txfields ('88').defname   := 'CUSTODYCD';
            l_txmsg.txfields ('88').TYPE      := 'C';
            l_txmsg.txfields ('88').VALUE     := rec.CUSTODYCD;
            --89    ACTYPE    C
            l_txmsg.txfields ('89').defname   := 'ACTYPE';
            l_txmsg.txfields ('89').TYPE      := 'C';
            l_txmsg.txfields ('89').VALUE     := rec.ACTYPE;
            --90    CUSTNAME    C
            l_txmsg.txfields ('90').defname   := 'CUSTNAME';
            l_txmsg.txfields ('90').TYPE      := 'C';
            l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;
            --91    ADDRESS     C
            l_txmsg.txfields ('91').defname   := 'ADDRESS';
            l_txmsg.txfields ('91').TYPE      := 'C';
            l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;
            --92    LICENSE     C
            l_txmsg.txfields ('92').defname   := 'LICENSE';
            l_txmsg.txfields ('92').TYPE      := 'C';
            l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

            --93    BANKACCT    C
            l_txmsg.txfields ('93').defname   := 'BANKACCT';
            l_txmsg.txfields ('93').TYPE      := 'C';
            l_txmsg.txfields ('93').VALUE     := rec.BANKACCT;
            --94    COREBANK     C
            l_txmsg.txfields ('94').defname   := 'COREBANK';
            l_txmsg.txfields ('94').TYPE      := 'C';
            l_txmsg.txfields ('94').VALUE     := rec.COREBANK;
            --95    BANKCODE     C
            l_txmsg.txfields ('95').defname   := 'BANKCODE';
            l_txmsg.txfields ('95').TYPE      := 'C';
            l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

            --96    IDDATE     C
            l_txmsg.txfields ('96').defname   := 'IDDATE';
            l_txmsg.txfields ('96').TYPE      := 'C';
            l_txmsg.txfields ('96').VALUE     := rec.txdate;

            --97    IDPLACE     C
            l_txmsg.txfields ('97').defname   := 'IDPLACE';
            l_txmsg.txfields ('97').TYPE      := 'C';
            l_txmsg.txfields ('97').VALUE     := '';

             --23    PAIDADVTYPE     C
            l_txmsg.txfields ('23').defname   := 'PAIDADVTYPE';
            l_txmsg.txfields ('23').TYPE      := 'C';
            l_txmsg.txfields ('23').VALUE     := 'N';

            BEGIN
                IF txpks_#1153.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 1153: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;

        END IF;
        --l_remaingpamt:= greatest(l_remaingpamt - (l_dbladvamount - l_remaingpamt) ,0);
        l_remaingpamt:=floor(greatest(0, l_remaingpamt - least(l_remaingpamt,(round(rec.maxavlamt,0) - greatest(l_dbladvamount,0))* (1 - greatest(rec.DAYS*rec.AINTRATE/100/360,rec.ADVMINFEE)))));
        v_lastacctno:=rec.acctno;

    end loop;



    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_CIAutoAdvanceAFSM');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on release pr_CIAutoAdvanceAFSM');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CIAutoAdvanceAFSM');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_CIAutoAdvanceAFSM;

  ---------------------------------pr_CIDebtAutoPayment------------------------------------------------
  PROCEDURE pr_CIDebtAutoPayment(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);

      l_dblamount number;
      v_avlpaid number;

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CIDebtAutoPayment');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  CIMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='1116';

    SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='1116';
    plog.debug(pkgctx, 'Begin loop');
    l_dblamount:=0;

    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    for rec in
    (
        select cf.custodycd,cf.fullname, cf.address, cf.idcode, ci.acctno, ci.dfdebtamt
        from (SELECT * FROM (SELECT A.*, ROWNUM ID FROM CIMAST A) WHERE ID BETWEEN p_FromRow AND p_ToRow)  ci, cfmast cf
        where ci.dfdebtamt>0 and cf.custid= ci.custid and ci.status in ('A','N','T')
    )
    loop
        l_dblamount :=round(rec.dfdebtamt,0);

        /*SELECT nvl(adv.avladvance,0) + balance - odamt  - ramt - nvl(b.execbuyamt,0)
               INTO v_avlpaid
                from cimast inner join afmast af on cimast.acctno=af.acctno
                left join (select * from v_getbuyorderinfo where afacctno = rec.ACCTNO) b
                on cimast.acctno = b.afacctno
                left join
                (select sum(depoamt) avladvance,afacctno
                    from v_getAccountAvlAdvance where afacctno = rec.ACCTNO group by afacctno) adv
                on adv.afacctno=cimast.acctno
                WHERE cimast.acctno = rec.ACCTNO;*/
        SELECT round(least(nvl(adv.avladvance,0) + balance,nvl(adv.avladvance,0) + balance+af.advanceline -nvl(b.execbuyamt,0)),0)
               INTO v_avlpaid
                from cimast inner join afmast af on cimast.acctno=af.acctno
                left join (select * from v_getbuyorderinfo where afacctno = rec.ACCTNO) b
                on cimast.acctno = b.afacctno
                left join
                (select sum(advamt) avladvance,afacctno
                    from v_getAccountAvlAdvance where afacctno = rec.ACCTNO group by afacctno) adv
                on adv.afacctno=cimast.acctno
                WHERE cimast.acctno = rec.ACCTNO;

        v_avlpaid:=round(nvl(v_avlpaid,0),0);
        l_dblamount:= greatest(least(l_dblamount,v_avlpaid),0);
        IF l_dblamount>0 THEN
            --Set txnum
            plog.debug(pkgctx, 'Loop for account:' || rec.ACCTNO || ' ngay' || to_char(v_strCURRDATE));
            SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
            l_txmsg.brid        := substr(rec.ACCTNO,1,4);
            --Set cac field giao dich
            --03  ACCTNO      C
            l_txmsg.txfields ('03').defname   := 'ACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;
            --10  AMT         N
            l_txmsg.txfields ('10').defname   := 'AMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := l_dblamount;
            --11  FAMT         N
            l_txmsg.txfields ('11').defname   := 'FAMT';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := 0;
            --12  FRATE         N
            l_txmsg.txfields ('12').defname   := 'FRATE';
            l_txmsg.txfields ('12').TYPE      := 'N';
            l_txmsg.txfields ('12').VALUE     := 0;
            --89  AVLCASH     N
            l_txmsg.txfields ('89').defname   := 'AVLCASH';
            l_txmsg.txfields ('89').TYPE      := 'N';
            l_txmsg.txfields ('89').VALUE     := round(v_avlpaid+rec.dfdebtamt,0);
            --30  DESC        C
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := v_strDesc;
            --88  CUSTODYCD   C
            l_txmsg.txfields ('88').defname   := 'CUSTODYCD';
            l_txmsg.txfields ('88').TYPE      := 'C';
            l_txmsg.txfields ('88').VALUE     := rec.CUSTODYCD;
            --90    CUSTNAME    C
            l_txmsg.txfields ('90').defname   := 'CUSTNAME';
            l_txmsg.txfields ('90').TYPE      := 'C';
            l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;
            --91    ADDRESS     C
            l_txmsg.txfields ('91').defname   := 'ADDRESS';
            l_txmsg.txfields ('91').TYPE      := 'C';
            l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;
            --92    LICENSE     C
            l_txmsg.txfields ('92').defname   := 'LICENSE';
            l_txmsg.txfields ('92').TYPE      := 'C';
            l_txmsg.txfields ('92').VALUE     := rec.idcode;

            BEGIN
                IF txpks_#1116.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 1116: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;

        END IF;

    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_CIDebtAutoPayment');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on pr_CIDebtAutoPayment');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CIDebtAutoPayment');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_CIDebtAutoPayment;

  ---------------------------------pr_TransferSellFee------------------------------------------------
  PROCEDURE pr_TransferSellFee(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_strORGORDERID varchar2(100);
      v_blnVietnamese BOOLEAN;
      v_dblProfit number(20,0);
      v_dblLoss number(20,0);
      v_dblAVLRCVAMT  number(20,0);
      v_dblVATRATE number(20,0);
      v_dblAVLFEEAMT number(20,0);
      v_dblFeeTemp number(20,0);
      v_dblFEEAMT number(20,0);
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_TransferSellFee');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8856';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8856';
    v_strORGORDERID:='orderid';
    v_dblAVLFEEAMT:=0;
    v_dblProfit:=0;
    v_dblLoss:=0;
    for rec in
    (
        SELECT SUBSTR(MAX(CUSTODYCD),4,1) CUSTODYCD,MAX(COSTPRICE) COSTPRICE , CLR2.SBDATE, TO_DATE(v_strCURRDATE,systemnums.c_date_format) CURRDATE,
            SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 0 ELSE 1 END) WITHHOLIDAY,
            SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 1 ELSE 1 END) WITHOUTHOLIDAY,
            CASE WHEN CI.COREBANK='Y' THEN 1 ELSE 0 END COREBANK,
            MST.AUTOID, MST.AFACCTNO,MAX(ODMST.ORDERQTTY) ORGORDERQTTY,MAX(ODMST.EXECTYPE) EXECTYPE,MAX(ODMST.QUOTEPRICE) ORGQUOTEPRICE, MST.ACCTNO, MIN(MST.DUETYPE) DUETYPE, MIN(MST.TXDATE) TXDATE, MIN(MST.ORGORDERID) ORGORDERID, MIN(MST.CLEARCD) CLEARCD, MIN(MST.CLEARDAY) CLEARDAY,
            MIN(SEC.CODEID) CODEID, MIN(SEC.SYMBOL) SYMBOL, MIN(SEC.PARVALUE) PARVALUE, MIN(TYP.VATRATE) VATRATE, MIN(ODMST.FEEACR-ODMST.FEEAMT) AVLFEEAMT,
            MIN(MST.AMT) AMT, MIN(MST.AAMT) AAMT, MIN(MST.FAMT) FAMT, MIN(MST.QTTY) QTTY,MIN(ODMST.EXECQTTY) SQTTY , MIN(MST.AQTTY) AQTTY, ROUND(MIN(MST.AMT/MST.QTTY),4) MATCHPRICE,
            UTF8NUMS.c_const_TLTX_TXDESC_8856 ||' '||MIN(ODMST.EXECQTTY)||' '||MIN(SEC.SYMBOL)||' ' || UTF8NUMS.C_CONST_DATE_VI ||' ' || to_char(MAX(ODMST.TXDATE),systemnums.c_date_format)  txdesc
            FROM SBCLDR CLR1, SBCLDR CLR2, (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST, ODMAST ODMST,AFMAST AF,CFMAST CF,CIMAST CI, ODTYPE TYP, SBSECURITIES SEC
            WHERE ODMST.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND CLR1.SBDATE>=MST.TXDATE AND CLR1.SBDATE<CLR2.SBDATE AND CLR2.SBDATE>=MST.TXDATE
            AND CLR1.CLDRTYPE=SEC.TRADEPLACE AND CLR2.CLDRTYPE=SEC.TRADEPLACE AND AF.ACCTNO=CI.AFACCTNO
            --GianhVG add khong thu phi tai khoan ben ngoai
            AND CF.CUSTATCOM='Y'
            --End GianhVG
            AND ODMST.ACTYPE=TYP.ACTYPE AND MST.ORGORDERID=ODMST.ORDERID AND MST.CODEID=SEC.CODEID AND SEC.TRADEPLACE <> '003'
            AND CLR2.SBDATE=TO_DATE(v_strCURRDATE,systemnums.c_date_format) AND ODMST.FEEACR>ODMST.FEEAMT AND MST.DELTD<>'Y'
            AND (MST.DUETYPE='RM')
            GROUP BY MST.AUTOID, CLR2.SBDATE, MST.AFACCTNO, MST.ACCTNO,CI.COREBANK
            HAVING MIN(MST.CLEARDAY)<=
            (CASE WHEN MIN(MST.CLEARCD)='B' THEN SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 0 ELSE 1 END) ELSE SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 1 ELSE 1 END) END)
            ORDER BY ORGORDERID
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
        IF rec.custodycd='F' then
            v_blnVietnamese:= false;
        else
            v_blnVietnamese:= true;
        end if;
        If v_strORGORDERID <> rec.ORGORDERID Then
            v_strORGORDERID := rec.ORGORDERID;
            v_dblAVLFEEAMT := rec.AVLFEEAMT;
        End If;
        v_dblAVLRCVAMT := rec.AMT;
        v_dblVATRATE := rec.VATRATE;
        If v_dblAVLFEEAMT <= v_dblAVLRCVAMT Then
            v_dblFeeTemp := v_dblAVLFEEAMT;
        Else
            v_dblFeeTemp := v_dblAVLRCVAMT;
        End If;
        If v_dblFeeTemp > 0 Then
            --Set cac field giao dich

            --01   N   AUTOID
            l_txmsg.txfields ('01').defname   := 'AUTOID';
            l_txmsg.txfields ('01').TYPE      := 'N';
            l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

            --03   C   ORGORDERID
            l_txmsg.txfields ('03').defname   := 'ORGORDERID';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ORGORDERID;
            --04   C   AFACCTNO
            l_txmsg.txfields ('04').defname   := 'AFACCTNO';
            l_txmsg.txfields ('04').TYPE      := 'C';
            l_txmsg.txfields ('04').VALUE     := rec.AFACCTNO;
            --05   C   CIACCTNO
            l_txmsg.txfields ('05').defname   := 'CIACCTNO';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.ACCTNO;
            --06   C   SEACCTNO
            l_txmsg.txfields ('06').defname   := 'SEACCTNO';
            l_txmsg.txfields ('06').TYPE      := 'C';
            l_txmsg.txfields ('06').VALUE     := rec.AFACCTNO || rec.CODEID;
            --07   C   SYMBOL
            l_txmsg.txfields ('07').defname   := 'SYMBOL';
            l_txmsg.txfields ('07').TYPE      := 'C';
            l_txmsg.txfields ('07').VALUE     := rec.SYMBOL;
            --08   N   AMT
            l_txmsg.txfields ('08').defname   := 'AMT';
            l_txmsg.txfields ('08').TYPE      := 'N';
            l_txmsg.txfields ('08').VALUE     := 0;
            --09   N   QTTY
            l_txmsg.txfields ('09').defname   := 'QTTY';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := rec.QTTY;
            --10   N   RAMT
            l_txmsg.txfields ('10').defname   := 'RAMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := 0;
            --11   N   AAMT
            l_txmsg.txfields ('11').defname   := 'AAMT';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := 0;
            --12   N   FEEAMT
            l_txmsg.txfields ('12').defname   := 'FEEAMT';
            l_txmsg.txfields ('12').TYPE      := 'N';
            If v_dblAVLFEEAMT <= v_dblAVLRCVAMT Then
                v_dblFEEAMT := v_dblAVLFEEAMT;
                v_dblAVLFEEAMT := 0;
            Else
                v_dblFEEAMT := v_dblAVLRCVAMT;
                v_dblAVLFEEAMT := v_dblAVLFEEAMT - v_dblAVLRCVAMT;
            End If;
            l_txmsg.txfields ('12').VALUE     := round(v_dblFEEAMT,0);

            --13   N   VAT
            l_txmsg.txfields ('13').defname   := 'VAT';
            l_txmsg.txfields ('13').TYPE      := 'N';
            l_txmsg.txfields ('13').VALUE     := round(v_dblVATRATE * v_dblFEEAMT,0);
            --14   N   PROFITAMT
            l_txmsg.txfields ('14').defname   := 'PROFITAMT';
            l_txmsg.txfields ('14').TYPE      := 'N';
            l_txmsg.txfields ('14').VALUE     := v_dblProfit;
            --15   N   LOSSAMT
            l_txmsg.txfields ('15').defname   := 'LOSSAMT';
            l_txmsg.txfields ('15').TYPE      := 'N';
            l_txmsg.txfields ('15').VALUE     := v_dblLoss;
            --16   N   COSTPRICE
            l_txmsg.txfields ('16').defname   := 'COSTPRICE';
            l_txmsg.txfields ('16').TYPE      := 'N';
            l_txmsg.txfields ('16').VALUE     := rec.COSTPRICE;
            --30   C   DESC
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := rec.txdesc;
            /*If v_blnVietnamese = True Then
                l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
            Else
                l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
            End If;*/
            --44   N   PARVALUE
            l_txmsg.txfields ('44').defname   := 'PARVALUE';
            l_txmsg.txfields ('44').TYPE      := 'N';
            l_txmsg.txfields ('44').VALUE     := rec.PARVALUE;

            --53   N   MICD
            l_txmsg.txfields ('53').defname   := 'MICD';
            l_txmsg.txfields ('53').TYPE      := 'C';
            l_txmsg.txfields ('53').VALUE     := '';

            --60   N   ISMORTAGE
            l_txmsg.txfields ('60').defname   := 'ISMORTAGE';
            l_txmsg.txfields ('60').TYPE      := 'N';
            l_txmsg.txfields ('60').VALUE     := (case when rec.EXECTYPE='MS' then 1 else 0 end);

            --31   N   COREBANK
            l_txmsg.txfields ('31').defname   := 'COREBANK';
            l_txmsg.txfields ('31').TYPE      := 'N';
            l_txmsg.txfields ('31').VALUE     := rec.COREBANK;

            BEGIN
                IF txpks_#8856.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 8856: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
        end if;

    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_TransferSellFee');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on transfer sell money');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_TransferSellFee');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_TransferSellFee;

--T2_HoangND add pr_TransferSellFee_temp
  ---------------------------------pr_TransferSellFee_temp------------------------------------------------
  PROCEDURE pr_TransferSellFee_temp(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_strORGORDERID varchar2(100);
      v_blnVietnamese BOOLEAN;
      v_dblProfit number(20,0);
      v_dblLoss number(20,0);
      v_dblAVLRCVAMT  number(20,0);
      v_dblVATRATE number(20,0);
      v_dblAVLFEEAMT number(20,0);
      v_dblFeeTemp number(20,0);
      v_dblFEEAMT number(20,0);
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      l_CHGBCHORDERSTARTDATE date;
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_TransferSellFee_temp');

    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'OD' and varname='CHGBCHORDERSTARTDATE';

    SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8856';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8856';
    v_strORGORDERID:='orderid';
    v_dblAVLFEEAMT:=0;
    v_dblProfit:=0;
    v_dblLoss:=0;
    for rec in
    (
        SELECT SUBSTR(MAX(CUSTODYCD),4,1) CUSTODYCD,MAX(COSTPRICE) COSTPRICE , CLR2.SBDATE, TO_DATE(v_strCURRDATE,systemnums.c_date_format) CURRDATE,
            SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 0 ELSE 1 END) WITHHOLIDAY,
            SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 1 ELSE 1 END) WITHOUTHOLIDAY,
            CASE WHEN CI.COREBANK='Y' THEN 1 ELSE 0 END COREBANK,
            MST.AUTOID, MST.AFACCTNO,MAX(ODMST.ORDERQTTY) ORGORDERQTTY,MAX(ODMST.EXECTYPE) EXECTYPE,MAX(ODMST.QUOTEPRICE) ORGQUOTEPRICE, MST.ACCTNO, MIN(MST.DUETYPE) DUETYPE, MIN(MST.TXDATE) TXDATE, MIN(MST.ORGORDERID) ORGORDERID, MIN(MST.CLEARCD) CLEARCD, MIN(MST.CLEARDAY) CLEARDAY,
            MIN(SEC.CODEID) CODEID, MIN(SEC.SYMBOL) SYMBOL, MIN(SEC.PARVALUE) PARVALUE, MIN(TYP.VATRATE) VATRATE, MIN(ODMST.FEEACR-ODMST.FEEAMT) AVLFEEAMT,
            MIN(MST.AMT) AMT, MIN(MST.AAMT) AAMT, MIN(MST.FAMT) FAMT, MIN(MST.QTTY) QTTY,MIN(ODMST.EXECQTTY) SQTTY , MIN(MST.AQTTY) AQTTY, ROUND(MIN(MST.AMT/MST.QTTY),4) MATCHPRICE,
            UTF8NUMS.c_const_TLTX_TXDESC_8856 ||' '||MIN(ODMST.EXECQTTY)||' '||MIN(SEC.SYMBOL)||' ' || UTF8NUMS.C_CONST_DATE_VI ||' ' || to_char(MAX(ODMST.TXDATE),systemnums.c_date_format)  txdesc
            FROM SBCLDR CLR1, SBCLDR CLR2, (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST, ODMAST ODMST,AFMAST AF,CFMAST CF,CIMAST CI, ODTYPE TYP, SBSECURITIES SEC
            WHERE ODMST.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND CLR1.SBDATE>=MST.TXDATE AND CLR1.SBDATE<CLR2.SBDATE AND CLR2.SBDATE>=MST.TXDATE
            AND CLR1.CLDRTYPE=SEC.TRADEPLACE AND CLR2.CLDRTYPE=SEC.TRADEPLACE AND AF.ACCTNO=CI.AFACCTNO
            --GianhVG add khong thu phi tai khoan ben ngoai
            AND CF.CUSTATCOM='Y'
            --End GianhVG
            and ODMST.TXDATE < l_CHGBCHORDERSTARTDATE --T2_HoangND
            AND ODMST.ACTYPE=TYP.ACTYPE AND MST.ORGORDERID=ODMST.ORDERID AND MST.CODEID=SEC.CODEID AND SEC.TRADEPLACE <> '003'
            AND CLR2.SBDATE=TO_DATE(v_strCURRDATE,systemnums.c_date_format) AND ODMST.FEEACR>ODMST.FEEAMT AND MST.DELTD<>'Y'
            AND (MST.DUETYPE='RM')
            GROUP BY MST.AUTOID, CLR2.SBDATE, MST.AFACCTNO, MST.ACCTNO,CI.COREBANK
            HAVING MIN(MST.CLEARDAY)<=
            (CASE WHEN MIN(MST.CLEARCD)='B' THEN SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 0 ELSE 1 END) ELSE SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 1 ELSE 1 END) END)
            ORDER BY ORGORDERID
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
        IF rec.custodycd='F' then
            v_blnVietnamese:= false;
        else
            v_blnVietnamese:= true;
        end if;
        If v_strORGORDERID <> rec.ORGORDERID Then
            v_strORGORDERID := rec.ORGORDERID;
            v_dblAVLFEEAMT := rec.AVLFEEAMT;
        End If;
        v_dblAVLRCVAMT := rec.AMT;
        v_dblVATRATE := rec.VATRATE;
        If v_dblAVLFEEAMT <= v_dblAVLRCVAMT Then
            v_dblFeeTemp := v_dblAVLFEEAMT;
        Else
            v_dblFeeTemp := v_dblAVLRCVAMT;
        End If;
        If v_dblFeeTemp > 0 Then
            --Set cac field giao dich

            --01   N   AUTOID
            l_txmsg.txfields ('01').defname   := 'AUTOID';
            l_txmsg.txfields ('01').TYPE      := 'N';
            l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

            --03   C   ORGORDERID
            l_txmsg.txfields ('03').defname   := 'ORGORDERID';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.ORGORDERID;
            --04   C   AFACCTNO
            l_txmsg.txfields ('04').defname   := 'AFACCTNO';
            l_txmsg.txfields ('04').TYPE      := 'C';
            l_txmsg.txfields ('04').VALUE     := rec.AFACCTNO;
            --05   C   CIACCTNO
            l_txmsg.txfields ('05').defname   := 'CIACCTNO';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.ACCTNO;
            --06   C   SEACCTNO
            l_txmsg.txfields ('06').defname   := 'SEACCTNO';
            l_txmsg.txfields ('06').TYPE      := 'C';
            l_txmsg.txfields ('06').VALUE     := rec.AFACCTNO || rec.CODEID;
            --07   C   SYMBOL
            l_txmsg.txfields ('07').defname   := 'SYMBOL';
            l_txmsg.txfields ('07').TYPE      := 'C';
            l_txmsg.txfields ('07').VALUE     := rec.SYMBOL;
            --08   N   AMT
            l_txmsg.txfields ('08').defname   := 'AMT';
            l_txmsg.txfields ('08').TYPE      := 'N';
            l_txmsg.txfields ('08').VALUE     := 0;
            --09   N   QTTY
            l_txmsg.txfields ('09').defname   := 'QTTY';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := rec.QTTY;
            --10   N   RAMT
            l_txmsg.txfields ('10').defname   := 'RAMT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := 0;
            --11   N   AAMT
            l_txmsg.txfields ('11').defname   := 'AAMT';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := 0;
            --12   N   FEEAMT
            l_txmsg.txfields ('12').defname   := 'FEEAMT';
            l_txmsg.txfields ('12').TYPE      := 'N';
            If v_dblAVLFEEAMT <= v_dblAVLRCVAMT Then
                v_dblFEEAMT := v_dblAVLFEEAMT;
                v_dblAVLFEEAMT := 0;
            Else
                v_dblFEEAMT := v_dblAVLRCVAMT;
                v_dblAVLFEEAMT := v_dblAVLFEEAMT - v_dblAVLRCVAMT;
            End If;
            l_txmsg.txfields ('12').VALUE     := round(v_dblFEEAMT,0);

            --13   N   VAT
            l_txmsg.txfields ('13').defname   := 'VAT';
            l_txmsg.txfields ('13').TYPE      := 'N';
            l_txmsg.txfields ('13').VALUE     := round(v_dblVATRATE * v_dblFEEAMT,0);
            --14   N   PROFITAMT
            l_txmsg.txfields ('14').defname   := 'PROFITAMT';
            l_txmsg.txfields ('14').TYPE      := 'N';
            l_txmsg.txfields ('14').VALUE     := v_dblProfit;
            --15   N   LOSSAMT
            l_txmsg.txfields ('15').defname   := 'LOSSAMT';
            l_txmsg.txfields ('15').TYPE      := 'N';
            l_txmsg.txfields ('15').VALUE     := v_dblLoss;
            --16   N   COSTPRICE
            l_txmsg.txfields ('16').defname   := 'COSTPRICE';
            l_txmsg.txfields ('16').TYPE      := 'N';
            l_txmsg.txfields ('16').VALUE     := rec.COSTPRICE;
            --30   C   DESC
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := rec.txdesc;
            /*If v_blnVietnamese = True Then
                l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
            Else
                l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
            End If;*/
            --44   N   PARVALUE
            l_txmsg.txfields ('44').defname   := 'PARVALUE';
            l_txmsg.txfields ('44').TYPE      := 'N';
            l_txmsg.txfields ('44').VALUE     := rec.PARVALUE;

            --53   N   MICD
            l_txmsg.txfields ('53').defname   := 'MICD';
            l_txmsg.txfields ('53').TYPE      := 'C';
            l_txmsg.txfields ('53').VALUE     := '';

            --60   N   ISMORTAGE
            l_txmsg.txfields ('60').defname   := 'ISMORTAGE';
            l_txmsg.txfields ('60').TYPE      := 'N';
            l_txmsg.txfields ('60').VALUE     := (case when rec.EXECTYPE='MS' then 1 else 0 end);

            --31   N   COREBANK
            l_txmsg.txfields ('31').defname   := 'COREBANK';
            l_txmsg.txfields ('31').TYPE      := 'N';
            l_txmsg.txfields ('31').VALUE     := rec.COREBANK;

            BEGIN
                IF txpks_#8856.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 8856: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
        end if;

    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_TransferSellFee_temp');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on transfer sell money');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_TransferSellFee_temp');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_TransferSellFee_temp;
--End T2_HoangND add pr_TransferSellFee_temp

---------------------------------pr_ODSettlementtransferMoney------------------------------------------------
  PROCEDURE pr_ODSettlementtransferMoney(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      v_COMPANYCD VARCHAR2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ODSettlementtransferMoney');


    v_COMPANYCD:=cspks_system.fn_get_sysvar ('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8865';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8865';
    for rec in
    (
        SELECT SUBSTR(CUSTODYCD,4,1) CUSTODYCD, MST.AUTOID, MST.DUETYPE, MST.TXDATE, MST.ORGORDERID, MST.CLEARCD, MST.CLEARDAY,
            MST.AFACCTNO, MST.ACCTNO, CI.ACCTNO CIACCTNO, ROUND(CI.BALANCE,4) CIBALANCE, ROUND(CI.BAMT,4) CIBAMT,
            OD.FEEAMT, OD.ORDERQTTY ORGORDERQTTY, OD.QUOTEPRICE ORGQUOTEPRICE, OD.FEEACR, TYP.FEERATE, TYP.VATRATE, SEC.PARVALUE, SEC.CODEID,
            OD.SECUREDAMT, OD.RLSSECURED, SEC.SYMBOL, MST.AMT, MST.AAMT, MST.FAMT, MST.QTTY ,OD.EXECQTTY SQTTY , MST.AQTTY,MST.TRFBUYEXT,MST.TRFBUYRATE,MST.TRFBUYDT
            FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST, SBSECURITIES SEC, AFMAST AF, CIMAST CI,CFMAST CF, ODMAST OD, ODTYPE TYP
            WHERE AF.CUSTID=CF.CUSTID AND MST.CODEID=SEC.CODEID AND SEC.TRADEPLACE  <> '003'
            AND MST.DUETYPE='SM' AND MST.STATUS='N' AND MST.DELTD<>'Y'
            AND CF.CUSTATCOM ='Y'
            AND MST.AFACCTNO=AF.ACCTNO AND AF.ACCTNO=CI.ACCTNO AND MST.ORGORDERID=OD.ORDERID AND OD.ACTYPE=TYP.ACTYPE
            ORDER BY CIACCTNO, ORGORDERID, DUETYPE
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
        IF rec.custodycd='F' then
            v_blnVietnamese:= false;
        else
            v_blnVietnamese:= true;
        end if;

        --Set cac field giao dich
        --01   AUTOID       N
        l_txmsg.txfields ('01').defname   := 'AUTOID';
        l_txmsg.txfields ('01').TYPE      := 'N';
        l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

        --03   C   ORGORDERID
        l_txmsg.txfields ('03').defname   := 'ORGORDERID';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ORGORDERID;
        --05   C   CIACCTNO
        l_txmsg.txfields ('05').defname   := 'CIACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.CIACCTNO;
        --06   C   SEACCTNO
        l_txmsg.txfields ('06').defname   := 'SEACCTNO';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.AFACCTNO || rec.CODEID;
        --07   C   SYMBOL
        l_txmsg.txfields ('07').defname   := 'SYMBOL';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.SYMBOL;
        --09   N   QTTY
        l_txmsg.txfields ('09').defname   := 'QTTY';
        l_txmsg.txfields ('09').TYPE      := 'N';
        l_txmsg.txfields ('09').VALUE     := rec.QTTY;
        --11   TRFAMT       N
        l_txmsg.txfields ('11').defname   := 'TRFAMT';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := round(rec.AMT,0);
        --12   TRFFEE       N
        l_txmsg.txfields ('12').defname   := 'TRFFEE';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := round(rec.FEEACR,0);
        --13   LATE       N
        l_txmsg.txfields ('13').defname   := 'LATE';
        l_txmsg.txfields ('13').TYPE      := 'N';
        IF rec.TRFBUYDT > rec.TXDATE THEN
            l_txmsg.txfields ('13').VALUE     := 1;
        ELSE
            l_txmsg.txfields ('13').VALUE     := 0;
        END IF;
        --14   TRFBUYRATE       N
        l_txmsg.txfields ('14').defname   := 'LATE';
        l_txmsg.txfields ('14').TYPE      := 'N';
        IF rec.TRFBUYDT > rec.TXDATE THEN
            l_txmsg.txfields ('14').VALUE     := rec.TRFBUYRATE/100;
        ELSE
            l_txmsg.txfields ('14').VALUE     := 0;
        END IF;
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := UTF8NUMS.c_const_TLTX_TXDESC_8865 ||' ' || trim(to_char(rec.SQTTY,'999,999,999,999,999')) || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' ' || to_char(rec.txdate, 'DD/MM/RRRR');
        /*If v_blnVietnamese = True Then
            l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        Else
            l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        End If;*/
        --44   N   PARVALUE
        l_txmsg.txfields ('44').defname   := 'PARVALUE';
        l_txmsg.txfields ('44').TYPE      := 'N';
        l_txmsg.txfields ('44').VALUE     := rec.PARVALUE;

        BEGIN
            IF txpks_#8865.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 8865: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ODSettlementtransferMoney');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on transfer money');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ODSettlementtransferMoney');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ODSettlementtransferMoney;

  --TungNT modified - for modify beforebatch
  ---------------------------------pr_ODSettlementtransferMoney------------------------------------------------
   PROCEDURE pr_ODSettlementtransferMoneyCB(p_err_code  OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      v_COMPANYCD VARCHAR2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ODSettlementtransferMoneyCB');


    v_COMPANYCD:=cspks_system.fn_get_sysvar ('SYSTEM', 'COMPANYCD');

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8865';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := 'ODTRFM';
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8865';
    for rec in
    (
        SELECT SUBSTR(CUSTODYCD,4,1) CUSTODYCD, MST.AUTOID, MST.DUETYPE, MST.TXDATE, MST.ORGORDERID, MST.CLEARCD, MST.CLEARDAY,
            MST.AFACCTNO, MST.ACCTNO, CI.ACCTNO CIACCTNO, ROUND(CI.BALANCE,4) CIBALANCE, ROUND(CI.BAMT,4) CIBAMT,
            OD.FEEAMT, OD.ORDERQTTY ORGORDERQTTY, OD.QUOTEPRICE ORGQUOTEPRICE, OD.FEEACR, TYP.FEERATE, TYP.VATRATE, SEC.PARVALUE, SEC.CODEID,
            OD.SECUREDAMT, OD.RLSSECURED, SEC.SYMBOL, MST.AMT, MST.AAMT, MST.FAMT, MST.QTTY ,OD.EXECQTTY SQTTY , MST.AQTTY,MST.TRFBUYEXT,MST.TRFBUYRATE,MST.TRFBUYDT
            FROM STSCHD MST, SBSECURITIES SEC, AFMAST AF, CIMAST CI,CFMAST CF, ODMAST OD, ODTYPE TYP
            WHERE AF.CUSTID=CF.CUSTID AND MST.CODEID=SEC.CODEID AND SEC.TRADEPLACE  <> '003'
            AND MST.DUETYPE='SM' AND MST.STATUS='N' AND MST.DELTD<>'Y'
            AND CF.CUSTATCOM ='Y' AND CI.COREBANK='Y'
            AND MST.AFACCTNO=AF.ACCTNO AND AF.ACCTNO=CI.ACCTNO AND MST.ORGORDERID=OD.ORDERID AND OD.ACTYPE=TYP.ACTYPE
            ORDER BY CIACCTNO, ORGORDERID, DUETYPE
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
        IF rec.custodycd='F' then
            v_blnVietnamese:= false;
        else
            v_blnVietnamese:= true;
        end if;

        --Set cac field giao dich
        --01   AUTOID       N
        l_txmsg.txfields ('01').defname   := 'AUTOID';
        l_txmsg.txfields ('01').TYPE      := 'N';
        l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

        --03   C   ORGORDERID
        l_txmsg.txfields ('03').defname   := 'ORGORDERID';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ORGORDERID;
        --05   C   CIACCTNO
        l_txmsg.txfields ('05').defname   := 'CIACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.CIACCTNO;
        --06   C   SEACCTNO
        l_txmsg.txfields ('06').defname   := 'SEACCTNO';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.AFACCTNO || rec.CODEID;
        --07   C   SYMBOL
        l_txmsg.txfields ('07').defname   := 'SYMBOL';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.SYMBOL;
        --09   N   QTTY
        l_txmsg.txfields ('09').defname   := 'QTTY';
        l_txmsg.txfields ('09').TYPE      := 'N';
        l_txmsg.txfields ('09').VALUE     := rec.QTTY;
        --11   TRFAMT       N
        l_txmsg.txfields ('11').defname   := 'TRFAMT';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := round(rec.AMT,0);
        --12   TRFFEE       N
        l_txmsg.txfields ('12').defname   := 'TRFFEE';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := round(rec.FEEACR,0);
        --13   LATE       N
        l_txmsg.txfields ('13').defname   := 'LATE';
        l_txmsg.txfields ('13').TYPE      := 'N';
        IF rec.TRFBUYDT > rec.TXDATE THEN
            l_txmsg.txfields ('13').VALUE     := 1;
        ELSE
            l_txmsg.txfields ('13').VALUE     := 0;
        END IF;
        --14   TRFBUYRATE       N
        l_txmsg.txfields ('14').defname   := 'LATE';
        l_txmsg.txfields ('14').TYPE      := 'N';
        IF rec.TRFBUYDT > rec.TXDATE THEN
            l_txmsg.txfields ('14').VALUE     := rec.TRFBUYRATE/100;
        ELSE
            l_txmsg.txfields ('14').VALUE     := 0;
        END IF;
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_8865 ||' ' || rec.SQTTY || ' ' || rec.SYMBOL;
        /*If v_blnVietnamese = True Then
            l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        Else
            l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        End If;*/
        --44   N   PARVALUE
        l_txmsg.txfields ('44').defname   := 'PARVALUE';
        l_txmsg.txfields ('44').TYPE      := 'N';
        l_txmsg.txfields ('44').VALUE     := rec.PARVALUE;

        BEGIN
            IF txpks_#8865.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 8865: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ODSettlementtransferMoneyCB');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on transfer money');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ODSettlementtransferMoneyCB');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ODSettlementtransferMoneyCB;
  --End

/*---------------------------------pr_DFDealDrawndown------------------------------------------------
OCEDURE pr_DFDealDrawndown(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      v_strDFACCTNO varchar2(50);
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      v_dblRemainLimit NUMBER(20,4);
      v_dblDFAmt NUMBER(20,4);
      v_dblDFQtty NUMBER(20);
      v_dblDFRATE NUMBER;
      v_dblDFPRICE NUMBER(20,4);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_DFDealDrawndown');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='2670';
     SELECT varvalue
         INTO v_strCURRDATE
         FROM sysvar
         WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='2670';
    for rec in
    (
        select mst.*, nvl(bsk.refprice,0) refprice, nvl(bsk.dfprice,0) dfprice, nvl(bsk.triggerprice,0) triggerprice, nvl(bsk.dfrate,0) dfrate, nvl(bsk.irate,0) irate, nvl(bsk.mrate,0) mrate,
        nvl(bsk.lrate,0) lrate, nvl(bsk.calltype,'P') calltype
        from (
        select cf.custodycd,cf.fullname, cf.address, cf.idcode,dft.actype dftype,dft.basketid,sts.afacctno, sts.codeid,
        qtty-aqtty qtty, round(amt/qtty*(qtty-aqtty),0) amt,
        round(amt/qtty,0) price,sts.autoid,
        (case when dft.RRTYPE='O' then 1 else 0 end ) CIDRAWNDOWN,
        (case when dft.RRTYPE='B' then 1 else 0 end ) BANKDRAWNDOWN,
        (case when dft.RRTYPE='C' then 1 else 0 end ) CMPDRAWNDOWN,
        (case when dft.LIMITCHK='Y' then 1 else 0 end ) LIMITCHECK,
        (case when dft.RRTYPE='C' then ''
              when dft.RRTYPE='O' then dft.ciacctno
              when dft.RRTYPE='B' then dft.custbank
              else '' end) RRID
        from stschd sts, afmast af, aftype aft, dftype dft, mrtype mrt, cfmast cf
        where sts.afacctno = af.acctno and af.actype = aft.actype
        and af.custid= cf.custid
        and aft.dftype = dft.actype
        and aft.mrtype = mrt.actype and sts.deltd <> 'Y'
        and mrt.mrtype ='L' and sts.duetype='RS' and sts.txdate =to_date(v_strCURRDATE,systemnums.c_date_format)
        and qtty-aqtty>0
        ) mst, (select df.*, sb.codeid from dfbasket df, sbsecurities sb where df.symbol = sb.symbol) bsk
        where mst.basketid = bsk.basketid  and mst.codeid = bsk.codeid  and bsk.dfrate>0

    )
    loop
        -- AnhVT Added
        v_dblDFRATE:=round(least(rec.dfrate,rec.dfprice/rec.PRICE*100),4);
        v_dblDFPRICE:=least(round(rec.PRICE * rec.dfrate/100,4),rec.dfprice);
        v_dblDFQtty:=rec.qtty;
        select      round(greatest(least(AF.mrcrlimitmax - dfodamt,
                    AF.mrcrlimitmax - dfodamt + af.advanceline -odamt),0),0) deallimit
        into        v_dblRemainLimit
        from        afmast af, cimast ci
        where       af.acctno = ci.afacctno
                    and af.acctno = rec.afacctno;

        --if v_dblRemainLimit < rec.amt then
        --    v_dblDFAmt := v_dblRemainLimit;
        --    v_dblDFQtty := floor(v_dblDFAmt/least(rec.dfprice, rec.price*rec.dfrate/100));
        --else
        --    v_dblDFAmt := rec.amt;
        --    v_dblDFQtty := rec.qtty;
        --end if;
        if v_dblRemainLimit < round(v_dblDFPRICE * v_dblDFQtty,0) then
            v_dblDFAmt := v_dblRemainLimit;
            v_dblDFQtty := case when v_dblDFPRICE<=0 then 0 else ceil(v_dblDFAmt/v_dblDFPRICE) end;
            v_dblDFPRICE:= case when v_dblDFQtty<=0 then 0 else round(v_dblDFAmt/v_dblDFQtty,4) end;
            v_dblDFAmt:=round(v_dblDFPRICE*v_dblDFQtty,0);
        else
            v_dblDFAmt := round(v_dblDFPRICE * v_dblDFQtty,0);
        end if;
        -- AnhVT Ended
        if v_dblDFAmt>0 then
        --Neu co giai Ngan thi fill vao giao dich thuc hien giai ngan.
            --Set txnum
            SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
            l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
            --Xac dinh tai khoan DF
            SELECT SEQ_DFMAST.NEXTVAL DFACCTNO
                into v_strDFACCTNO
            FROM DUAL;
            v_strDFACCTNO:=substr('000000' || v_strDFACCTNO,length('000000' || v_strDFACCTNO)-5,6);
            v_strDFACCTNO:=l_txmsg.brid || substr(to_char(l_txmsg.txdate,systemnums.c_date_format),1,2)
                                      || substr(to_char(l_txmsg.txdate,systemnums.c_date_format),4,2)
                                      || substr(to_char(l_txmsg.txdate,systemnums.c_date_format),9,2)
                                      || v_strDFACCTNO;
            --Set cac field giao dich
            --01   CODEID         C
            l_txmsg.txfields ('01').defname   := 'CODEID';
            l_txmsg.txfields ('01').TYPE      := 'C';
            l_txmsg.txfields ('01').VALUE     := rec.CODEID;
            --02    ACCTNO      C
            l_txmsg.txfields ('02').defname   := 'ACCTNO';
            l_txmsg.txfields ('02').TYPE      := 'C';
            l_txmsg.txfields ('02').VALUE     := v_strDFACCTNO;
            --03   AFACCTNO       C
            l_txmsg.txfields ('03').defname   := 'AFACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;
            --04   ACTYPE         C
            l_txmsg.txfields ('04').defname   := 'ACTYPE';
            l_txmsg.txfields ('04').TYPE      := 'C';
            l_txmsg.txfields ('04').VALUE     := rec.DFTYPE;
            --05   SEACCTNO       C
            l_txmsg.txfields ('05').defname   := 'SEACCTNO';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO || rec.CODEID;
            --06   PRICE          N
            l_txmsg.txfields ('06').defname   := 'PRICE';
            l_txmsg.txfields ('06').TYPE      := 'N';
            l_txmsg.txfields ('06').VALUE     := rec.PRICE;
            --07   DFRATE         N
            l_txmsg.txfields ('07').defname   := 'DFRATE';
            l_txmsg.txfields ('07').TYPE      := 'N';
            l_txmsg.txfields ('07').VALUE     := v_dblDFRATE;
            --08   MRATE          N
            l_txmsg.txfields ('08').defname   := 'MRATE';
            l_txmsg.txfields ('08').TYPE      := 'N';
            l_txmsg.txfields ('08').VALUE     := rec.MRATE;
            --09   LRATE          N
            l_txmsg.txfields ('09').defname   := 'LRATE';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := rec.LRATE;
            --10   DFPRICE        N
            l_txmsg.txfields ('10').defname   := 'DFPRICE';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := v_dblDFPRICE;
            --11   TRIGGERPRICE   N
            l_txmsg.txfields ('11').defname   := 'TRIGGERPRICE';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := case when rec.TRIGGERPRICE>0 then rec.TRIGGERPRICE else round(rec.PRICE * rec.lrate/100,4) end;
            --12   AVLQTTY        N
            l_txmsg.txfields ('12').defname   := 'AVLQTTY';
            l_txmsg.txfields ('12').TYPE      := 'N';
            l_txmsg.txfields ('12').VALUE     := 0;
            --13   RCVQTTY        N
            l_txmsg.txfields ('13').defname   := 'RCVQTTY';
            l_txmsg.txfields ('13').TYPE      := 'N';
            l_txmsg.txfields ('13').VALUE     := v_dblDFQtty;
            --18   RLSAMT        N
            l_txmsg.txfields ('18').defname   := 'RLSAMT';
            l_txmsg.txfields ('18').TYPE      := 'N';
            l_txmsg.txfields ('18').VALUE     := v_dblDFAmt;
            --22   BLOCKQTTY      N
            l_txmsg.txfields ('22').defname   := 'BLOCKQTTY';
            l_txmsg.txfields ('22').TYPE      := 'N';
            l_txmsg.txfields ('22').VALUE     := 0;
            --23   CARCVQTTY      N
            l_txmsg.txfields ('23').defname   := 'CARCVQTTY';
            l_txmsg.txfields ('23').TYPE      := 'N';
            l_txmsg.txfields ('23').VALUE     := 0;
            --14   IRATE          N
            l_txmsg.txfields ('14').defname   := 'IRATE';
            l_txmsg.txfields ('14').TYPE      := 'N';
            l_txmsg.txfields ('14').VALUE     := rec.IRATE;
            --15   CALLTYPE       C
            l_txmsg.txfields ('15').defname   := 'CALLTYPE';
            l_txmsg.txfields ('15').TYPE      := 'C';
            l_txmsg.txfields ('15').VALUE     := rec.CALLTYPE;
            --16   AUTODRAWNDOWN       C
            l_txmsg.txfields ('16').defname   := 'AUTODRAWNDOWN';
            l_txmsg.txfields ('16').TYPE      := 'C';
            l_txmsg.txfields ('16').VALUE     := 1;
            --25   REFPRICETYPE       C
            l_txmsg.txfields ('25').defname   := 'REFPRICETYPE';
            l_txmsg.txfields ('25').TYPE      := 'C';
            l_txmsg.txfields ('25').VALUE     := 'MP';
            --29   REF            C
            l_txmsg.txfields ('29').defname   := 'REF';
            l_txmsg.txfields ('29').TYPE      := 'C';
            l_txmsg.txfields ('29').VALUE     := rec.autoid;
            --30   C   DESC
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE := 'Giai ngan vay ML ' || v_strDFACCTNO;

            --40    QTTY            N
            l_txmsg.txfields ('40').defname   := 'QTTY';
            l_txmsg.txfields ('40').TYPE      := 'N';
            l_txmsg.txfields ('40').VALUE     := v_dblDFQtty;

            --41    AMT             N
            l_txmsg.txfields ('41').defname   := 'AMT';
            l_txmsg.txfields ('41').TYPE      := 'N';
            l_txmsg.txfields ('41').VALUE     := v_dblDFAmt;
            --50    RRID            C
            l_txmsg.txfields ('50').defname   := 'RRID';
            l_txmsg.txfields ('50').TYPE      := 'C';
            l_txmsg.txfields ('50').VALUE     := rec.RRID;
            --51    CIDRAWNDOWN     C
            l_txmsg.txfields ('51').defname   := 'CIDRAWNDOWN';
            l_txmsg.txfields ('51').TYPE      := 'C';
            l_txmsg.txfields ('51').VALUE     := rec.CIDRAWNDOWN;
            --52    BANKDRAWNDOWN   C
            l_txmsg.txfields ('52').defname   := 'BANKDRAWNDOWN';
            l_txmsg.txfields ('52').TYPE      := 'C';
            l_txmsg.txfields ('52').VALUE     := rec.BANKDRAWNDOWN;
            --53    CMPDRAWNDOWN    C
            l_txmsg.txfields ('53').defname   := 'CMPDRAWNDOWN';
            l_txmsg.txfields ('53').TYPE      := 'C';
            l_txmsg.txfields ('53').VALUE     := rec.CMPDRAWNDOWN;
            --99    LIMITCHECK    C
            l_txmsg.txfields ('99').defname   := 'LIMITCHECK';
            l_txmsg.txfields ('99').TYPE      := 'C';
            l_txmsg.txfields ('99').VALUE     := rec.LIMITCHECK;
            --57    CUSTNAME        C
            l_txmsg.txfields ('57').defname   := 'CUSTNAME';
            l_txmsg.txfields ('57').TYPE      := 'C';
            l_txmsg.txfields ('57').VALUE     := rec.FULLNAME;
            --58    ADDRESS         C
            l_txmsg.txfields ('58').defname   := 'ADDRESS';
            l_txmsg.txfields ('58').TYPE      := 'C';
            l_txmsg.txfields ('58').VALUE     := rec.ADDRESS;
            --59    LICENSE         C
            l_txmsg.txfields ('59').defname   := 'LICENSE';
            l_txmsg.txfields ('59').TYPE      := 'C';
            l_txmsg.txfields ('59').VALUE     := rec.IDCODE;
            --86    CONTRACTCHK         C
            l_txmsg.txfields ('86').defname   := 'CONTRACTCHK';
            l_txmsg.txfields ('86').TYPE      := 'C';
            l_txmsg.txfields ('86').VALUE     := 'N';
            --88    CUSTODYCD         C
            l_txmsg.txfields ('88').defname   := 'CUSTODYCD';
            l_txmsg.txfields ('88').TYPE      := 'C';
            l_txmsg.txfields ('88').VALUE     := rec.custodycd;

            BEGIN
                IF txpks_#2670.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.debug (pkgctx,
                               'got error 2670: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
        end if;

    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_DFDealDrawndown');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on transfer money');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_DFDealDrawndown');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_DFDealDrawndown;*/


  ---------------------------------pr_DFDealDrawndown------------------------------------------------
  PROCEDURE pr_DFDealDrawndown(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      v_strDFACCTNO varchar2(50);
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      v_dblRemainLimit NUMBER(20,4);
      v_dblDFAmt NUMBER(20,4);
      v_dblDFQtty NUMBER(20);
      v_dblDFRATE NUMBER;
      v_dblDFPRICE NUMBER(20,4);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_DFDealDrawndown');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='2670';
     SELECT varvalue
         INTO v_strCURRDATE
         FROM sysvar
         WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='2670';
    for rec in
    (
        select mst.*, nvl(bsk.refprice,0) refprice, nvl(bsk.dfprice,0) dfprice, nvl(bsk.triggerprice,0) triggerprice, nvl(bsk.dfrate,0) dfrate, nvl(bsk.irate,0) irate, nvl(bsk.mrate,0) mrate,
        nvl(bsk.lrate,0) lrate, nvl(bsk.calltype,'P') calltype
        from (
        select cf.custodycd,cf.contractchk, cf.fullname, cf.address, cf.idcode,dft.actype dftype,dft.basketid,sts.afacctno, sts.codeid,sts.clearday,
        qtty-aqtty qtty, round(amt/qtty*(qtty-aqtty),0) amt,
        round(amt/qtty,0) price,sts.autoid,
        (case when dft.RRTYPE='O' then 1 else 0 end ) CIDRAWNDOWN,
        (case when dft.RRTYPE='B' then 1 else 0 end ) BANKDRAWNDOWN,
        (case when dft.RRTYPE='C' then 1 else 0 end ) CMPDRAWNDOWN,
        (case when dft.LIMITCHK='Y' then 1 else 0 end ) LIMITCHECK,
        (case when dft.RRTYPE='C' then ''
              when dft.RRTYPE='O' then dft.ciacctno
              when dft.RRTYPE='B' then dft.custbank
              else '' end) RRID
        from vw_stschd_dealgroup sts, afmast af, aftype aft, dftype dft, mrtype mrt, cfmast cf
        where sts.afacctno = af.acctno and af.actype = aft.actype
        and af.custid= cf.custid
        and aft.dftype = dft.actype
        and aft.mrtype = mrt.actype --and sts.deltd <> 'Y'
        and mrt.mrtype ='L' and sts.duetype='RS' and sts.txdate =to_date(v_strCURRDATE,systemnums.c_date_format)
        and qtty-aqtty>0
        ) mst, (select df.*, sb.codeid from dfbasket df, sbsecurities sb where df.symbol = sb.symbol) bsk
        where mst.basketid = bsk.basketid  and mst.codeid = bsk.codeid  and bsk.dfrate>0

    )
    loop
        -- AnhVT Added
        v_dblDFRATE:=round(least(rec.dfrate,rec.dfprice/rec.PRICE*100),4);
        v_dblDFPRICE:=least(round(rec.PRICE * rec.dfrate/100,4),rec.dfprice);
        v_dblDFQtty:=rec.qtty;
        select      round(greatest(least(AF.mrcrlimitmax - dfodamt,
                    AF.mrcrlimitmax - dfodamt + af.advanceline -odamt),0),0) deallimit
        into        v_dblRemainLimit
        from        afmast af, cimast ci
        where       af.acctno = ci.afacctno
                    and af.acctno = rec.afacctno;

        --if v_dblRemainLimit < rec.amt then
        --    v_dblDFAmt := v_dblRemainLimit;
        --    v_dblDFQtty := floor(v_dblDFAmt/least(rec.dfprice, rec.price*rec.dfrate/100));
        --else
        --    v_dblDFAmt := rec.amt;
        --    v_dblDFQtty := rec.qtty;
        --end if;
        if v_dblRemainLimit < round(v_dblDFPRICE * v_dblDFQtty,0) then
            v_dblDFAmt := v_dblRemainLimit;
            v_dblDFQtty := case when v_dblDFPRICE<=0 then 0 else ceil(v_dblDFAmt/v_dblDFPRICE) end;
            v_dblDFPRICE:= case when v_dblDFQtty<=0 then 0 else round(v_dblDFAmt/v_dblDFQtty,4) end;
            v_dblDFAmt:=round(v_dblDFPRICE*v_dblDFQtty,0);
        else
            v_dblDFAmt := round(v_dblDFPRICE * v_dblDFQtty,0);
        end if;
        -- AnhVT Ended
        if v_dblDFAmt>0 then
        --Neu co giai Ngan thi fill vao giao dich thuc hien giai ngan.
            --Set txnum
            SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
            l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
            --Xac dinh tai khoan DF
            SELECT SEQ_DFMAST.NEXTVAL DFACCTNO
                into v_strDFACCTNO
            FROM DUAL;
            v_strDFACCTNO:=substr('000000' || v_strDFACCTNO,length('000000' || v_strDFACCTNO)-5,6);
            v_strDFACCTNO:=l_txmsg.brid || substr(to_char(l_txmsg.txdate,systemnums.c_date_format),1,2)
                                      || substr(to_char(l_txmsg.txdate,systemnums.c_date_format),4,2)
                                      || substr(to_char(l_txmsg.txdate,systemnums.c_date_format),9,2)
                                      || v_strDFACCTNO;
            --Set cac field giao dich
            --01   CODEID         C
            l_txmsg.txfields ('01').defname   := 'CODEID';
            l_txmsg.txfields ('01').TYPE      := 'C';
            l_txmsg.txfields ('01').VALUE     := rec.CODEID;
            --02    ACCTNO      C
            l_txmsg.txfields ('02').defname   := 'ACCTNO';
            l_txmsg.txfields ('02').TYPE      := 'C';
            l_txmsg.txfields ('02').VALUE     := v_strDFACCTNO;
            --03   AFACCTNO       C
            l_txmsg.txfields ('03').defname   := 'AFACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;
            --04   ACTYPE         C
            l_txmsg.txfields ('04').defname   := 'ACTYPE';
            l_txmsg.txfields ('04').TYPE      := 'C';
            l_txmsg.txfields ('04').VALUE     := rec.DFTYPE;
            --05   SEACCTNO       C
            l_txmsg.txfields ('05').defname   := 'SEACCTNO';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO || rec.CODEID;
            --06   PRICE          N
            l_txmsg.txfields ('06').defname   := 'PRICE';
            l_txmsg.txfields ('06').TYPE      := 'N';
            l_txmsg.txfields ('06').VALUE     := rec.PRICE;
            --07   DFRATE         N
            l_txmsg.txfields ('07').defname   := 'DFRATE';
            l_txmsg.txfields ('07').TYPE      := 'N';
            l_txmsg.txfields ('07').VALUE     := v_dblDFRATE;
            --08   MRATE          N
            l_txmsg.txfields ('08').defname   := 'MRATE';
            l_txmsg.txfields ('08').TYPE      := 'N';
            l_txmsg.txfields ('08').VALUE     := rec.MRATE;
            --09   LRATE          N
            l_txmsg.txfields ('09').defname   := 'LRATE';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := rec.LRATE;
            --10   DFPRICE        N
            l_txmsg.txfields ('10').defname   := 'DFPRICE';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := v_dblDFPRICE;
            --11   TRIGGERPRICE   N
            l_txmsg.txfields ('11').defname   := 'TRIGGERPRICE';
            l_txmsg.txfields ('11').TYPE      := 'N';
            l_txmsg.txfields ('11').VALUE     := case when rec.TRIGGERPRICE>0 then rec.TRIGGERPRICE else round(rec.PRICE * rec.lrate/100,4) end;
            --12   AVLQTTY        N
            l_txmsg.txfields ('12').defname   := 'AVLQTTY';
            l_txmsg.txfields ('12').TYPE      := 'N';
            l_txmsg.txfields ('12').VALUE     := 0;
            --13   RCVQTTY        N
            l_txmsg.txfields ('13').defname   := 'RCVQTTY';
            l_txmsg.txfields ('13').TYPE      := 'N';
            l_txmsg.txfields ('13').VALUE     := v_dblDFQtty;
            --14   IRATE          N
            l_txmsg.txfields ('14').defname   := 'IRATE';
            l_txmsg.txfields ('14').TYPE      := 'N';
            l_txmsg.txfields ('14').VALUE     := rec.IRATE;
            --15   CALLTYPE       C
            l_txmsg.txfields ('15').defname   := 'CALLTYPE';
            l_txmsg.txfields ('15').TYPE      := 'C';
            l_txmsg.txfields ('15').VALUE     := rec.CALLTYPE;
            --16   AUTODRAWNDOWN       C
            l_txmsg.txfields ('16').defname   := 'AUTODRAWNDOWN';
            l_txmsg.txfields ('16').TYPE      := 'C';
            l_txmsg.txfields ('16').VALUE     := 1;
            --18   RLSAMT        N
            l_txmsg.txfields ('18').defname   := 'RLSAMT';
            l_txmsg.txfields ('18').TYPE      := 'N';
            l_txmsg.txfields ('18').VALUE     := v_dblDFAmt;
            --22   BLOCKQTTY      N
            l_txmsg.txfields ('22').defname   := 'BLOCKQTTY';
            l_txmsg.txfields ('22').TYPE      := 'N';
            l_txmsg.txfields ('22').VALUE     := 0;
            --23   CARCVQTTY      N
            l_txmsg.txfields ('23').defname   := 'CARCVQTTY';
            l_txmsg.txfields ('23').TYPE      := 'N';
            l_txmsg.txfields ('23').VALUE     := 0;
            --25   REFPRICETYPE      C
            l_txmsg.txfields ('25').defname   := 'REFPRICETYPE';
            l_txmsg.txfields ('25').TYPE      := 'C';
            l_txmsg.txfields ('25').VALUE     := 'BP';
            --29   REF            C
            l_txmsg.txfields ('29').defname   := 'REF';
            l_txmsg.txfields ('29').TYPE      := 'C';
            l_txmsg.txfields ('29').VALUE     := v_strCURRDATE || rec.afacctno || rec.codeid || rec.clearday;--rec.autoid;
            --30   C   DESC
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE := 'Giai ngan vay ML ' || v_strDFACCTNO;

            --40    QTTY            N
            l_txmsg.txfields ('40').defname   := 'QTTY';
            l_txmsg.txfields ('40').TYPE      := 'N';
            l_txmsg.txfields ('40').VALUE     := v_dblDFQtty;

            --41    AMT             N
            l_txmsg.txfields ('41').defname   := 'AMT';
            l_txmsg.txfields ('41').TYPE      := 'N';
            l_txmsg.txfields ('41').VALUE     := v_dblDFAmt;
            --50    RRID            C
            l_txmsg.txfields ('50').defname   := 'RRID';
            l_txmsg.txfields ('50').TYPE      := 'C';
            l_txmsg.txfields ('50').VALUE     := rec.RRID;
            --51    CIDRAWNDOWN     C
            l_txmsg.txfields ('51').defname   := 'CIDRAWNDOWN';
            l_txmsg.txfields ('51').TYPE      := 'C';
            l_txmsg.txfields ('51').VALUE     := rec.CIDRAWNDOWN;
            --52    BANKDRAWNDOWN   C
            l_txmsg.txfields ('52').defname   := 'BANKDRAWNDOWN';
            l_txmsg.txfields ('52').TYPE      := 'C';
            l_txmsg.txfields ('52').VALUE     := rec.BANKDRAWNDOWN;
            --53    CMPDRAWNDOWN    C
            l_txmsg.txfields ('53').defname   := 'CMPDRAWNDOWN';
            l_txmsg.txfields ('53').TYPE      := 'C';
            l_txmsg.txfields ('53').VALUE     := rec.CMPDRAWNDOWN;
            --57    CUSTNAME        C
            l_txmsg.txfields ('57').defname   := 'CUSTNAME';
            l_txmsg.txfields ('57').TYPE      := 'C';
            l_txmsg.txfields ('57').VALUE     := rec.FULLNAME;
            --58    ADDRESS         C
            l_txmsg.txfields ('58').defname   := 'ADDRESS';
            l_txmsg.txfields ('58').TYPE      := 'C';
            l_txmsg.txfields ('58').VALUE     := rec.ADDRESS;
            --59    LICENSE         C
            l_txmsg.txfields ('59').defname   := 'LICENSE';
            l_txmsg.txfields ('59').TYPE      := 'C';
            l_txmsg.txfields ('59').VALUE     := rec.IDCODE;
            --86    CONTRACTCHK         C
            l_txmsg.txfields ('86').defname   := 'CONTRACTCHK';
            l_txmsg.txfields ('86').TYPE      := 'C';
            l_txmsg.txfields ('86').VALUE     := rec.CONTRACTCHK;
            --88    CUSTODYCD         C
            l_txmsg.txfields ('88').defname   := 'CUSTODYCD';
            l_txmsg.txfields ('88').TYPE      := 'C';
            l_txmsg.txfields ('88').VALUE     := rec.CUSTODYCD;
            --99    LIMITCHECK    C
            l_txmsg.txfields ('99').defname   := 'LIMITCHECK';
            l_txmsg.txfields ('99').TYPE      := 'C';
            l_txmsg.txfields ('99').VALUE     := rec.LIMITCHECK;

            BEGIN
                IF txpks_#2670.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 2670: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
        end if;

    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_DFDealDrawndown');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on transfer money');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_DFDealDrawndown');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_DFDealDrawndown;


---------------------------------pr_DFPayment------------------------------------------------
  PROCEDURE pr_DFPayment(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      v_dblPPRINOVD number(20,4);
      v_dblPPRINNML number(20,4);
      v_dblPINTNMLOVD number(20,4);
      v_dblPINTOVDACR number(20,4);
      v_dblPINTDUE number(20,4);
      v_dblPINTNMLACR number(20,4);
      v_dblPFEEPAID number(20,4);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_DFPayment');
    p_lastRun:='Y';
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='2660';
     SELECT varvalue
         INTO v_strCURRDATE
         FROM sysvar
         WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='2660';
    for rec in
    (
        select sts.autoid,df.FULLNAME, df.ADDRESS,df.IDCODE,df.RRID, df.CIDRAWNDOWN,df.BANKDRAWNDOWN,df.CMPDRAWNDOWN,df.LIMITCHECK,
            df.acctno,df.bqtty ,df.lnacctno,df.afacctno,df.LNTYPE,sts.qtty-sts.aqtty qtty,df.odamt,
            df.PRINOVD,df.PRINNML,df.INTNMLOVD,df.INTOVDACR,df.INTDUE,df.INTNMLACR,df.AVLFEEAMT FEEPAID,
            round((sts.qtty-sts.aqtty + df.rlsqtty) * df.amt/(df.remainqtty + df.rlsqtty)
                          -df.rlsamt + df.dealfee,4) paidamt,
            utf8nums.c_const_TLTX_TXDESC_2660|| ' ' || df.description des
        from stschd sts ,odmast od ,v_getDealInfo df
        where df.bqtty>0 and sts.orgorderid = od.orderid and sts.qtty-sts.aqtty>0
        and od.dfacctno =df.acctno and sts.status='C' and sts.duetype ='RM' and sts.deltd <> 'Y'
        and od.exectype ='MS'
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh cac gia tri tra no
        --1.Uu tien tra lai qua han
        v_dblPINTNMLOVD:= round(greatest(least (rec.paidamt,rec.INTNMLOVD),0),0);
        --2.Tra lai cong don qua han
        v_dblPINTOVDACR:= round(greatest(least (rec.paidamt-v_dblPINTNMLOVD,rec.INTOVDACR),0),0);
        --3.Tra lai den han
        v_dblPINTDUE:= round(greatest(least (rec.paidamt-v_dblPINTNMLOVD-v_dblPINTOVDACR,rec.INTDUE),0),0);
        --4.Tra lai cong don
        v_dblPINTNMLACR:= round(greatest(least (rec.paidamt-v_dblPINTNMLOVD-v_dblPINTOVDACR-v_dblPINTDUE,rec.INTNMLACR),0),0);
        --5.Tra goc qua han
        v_dblPPRINOVD:= round(greatest(least (rec.paidamt-v_dblPINTNMLOVD-v_dblPINTOVDACR-v_dblPINTDUE-v_dblPINTNMLACR,rec.PRINOVD),0),0);
        --6.Tra goc trong han
        v_dblPPRINNML:= round(greatest(least (rec.paidamt-v_dblPINTNMLOVD-v_dblPINTOVDACR-v_dblPINTDUE-v_dblPINTNMLACR-v_dblPPRINOVD,rec.PRINNML),0),0);
        --7.Tra phi
        v_dblPFEEPAID:= round(greatest(least (rec.paidamt-v_dblPINTNMLOVD-v_dblPINTOVDACR-v_dblPINTDUE-v_dblPINTNMLACR-v_dblPPRINOVD-v_dblPPRINNML,rec.PRINNML),0),0);
        --Set cac field giao dich
        --01   AUTOID       N
        l_txmsg.txfields ('01').defname   := 'AUTOID';
        l_txmsg.txfields ('01').TYPE      := 'N';
        l_txmsg.txfields ('01').VALUE     := rec.AUTOID;
        --02   ACCTNO       C
        l_txmsg.txfields ('02').defname   := 'ACCTNO';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.ACCTNO;
        --03   LNACCTNO     C
        l_txmsg.txfields ('03').defname   := 'LNACCTNO';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.lnacctno;
        --05   AFACCTNO     C
        l_txmsg.txfields ('05').defname   := 'AFACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;
        --07   LNTYPE       C
        l_txmsg.txfields ('07').defname   := 'LNTYPE';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.LNTYPE;
        --10   QTTY       N
        l_txmsg.txfields ('10').defname   := 'QTTY';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.QTTY;
        --41   ODAMT          N
        l_txmsg.txfields ('41').defname   := 'ODAMT';
        l_txmsg.txfields ('41').TYPE      := 'N';
        l_txmsg.txfields ('41').VALUE     := round(rec.ODAMT,0);
        --45   AMT          N
        l_txmsg.txfields ('45').defname   := 'AMT';
        l_txmsg.txfields ('45').TYPE      := 'N';
        l_txmsg.txfields ('45').VALUE     := round(rec.paidamt,0);
        --63   PPRINOVD     N
        l_txmsg.txfields ('63').defname   := 'PPRINOVD';
        l_txmsg.txfields ('63').TYPE      := 'N';
        l_txmsg.txfields ('63').VALUE     := v_dblPPRINOVD;
        --65   PPRINNML     N
        l_txmsg.txfields ('65').defname   := 'PPRINNML';
        l_txmsg.txfields ('65').TYPE      := 'N';
        l_txmsg.txfields ('65').VALUE     := v_dblPPRINNML;
        --72   PINTNMLOVD   N
        l_txmsg.txfields ('72').defname   := 'PINTNMLOVD';
        l_txmsg.txfields ('72').TYPE      := 'N';
        l_txmsg.txfields ('72').VALUE     := v_dblPINTNMLOVD;
        --74   PINTOVDACR   N
        l_txmsg.txfields ('74').defname   := 'PINTOVDACR';
        l_txmsg.txfields ('74').TYPE      := 'N';
        l_txmsg.txfields ('74').VALUE     := v_dblPINTOVDACR;
        --77   PINTDUE      N
        l_txmsg.txfields ('77').defname   := 'PINTDUE';
        l_txmsg.txfields ('77').TYPE      := 'N';
        l_txmsg.txfields ('77').VALUE     := v_dblPINTDUE;
        --80   PINTNMLACR   N
        l_txmsg.txfields ('80').defname   := 'PINTNMLACR';
        l_txmsg.txfields ('80').TYPE      := 'N';
        l_txmsg.txfields ('80').VALUE     := v_dblPINTNMLACR;
        --90   PFEEPAID     N
        l_txmsg.txfields ('90').defname   := 'PFEEPAID';
        l_txmsg.txfields ('90').TYPE      := 'N';
        l_txmsg.txfields ('90').VALUE     := v_dblPFEEPAID;
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := rec.des;
        --95    RRID            C
        l_txmsg.txfields ('95').defname   := 'RRID';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE := rec.RRID;
        --96    CIDRAWNDOWN     C
        l_txmsg.txfields ('96').defname   := 'CIDRAWNDOWN';
        l_txmsg.txfields ('96').TYPE      := 'C';
        l_txmsg.txfields ('96').VALUE := rec.CIDRAWNDOWN;
        --97    BANKDRAWNDOWN   C
        l_txmsg.txfields ('97').defname   := 'BANKDRAWNDOWN';
        l_txmsg.txfields ('97').TYPE      := 'C';
        l_txmsg.txfields ('97').VALUE := rec.BANKDRAWNDOWN;
        --98    CMPDRAWNDOWN    C
        l_txmsg.txfields ('98').defname   := 'CMPDRAWNDOWN';
        l_txmsg.txfields ('98').TYPE      := 'C';
        l_txmsg.txfields ('98').VALUE := rec.CMPDRAWNDOWN;
        --98    LIMITCHECK    C
        l_txmsg.txfields ('99').defname   := 'LIMITCHECK';
        l_txmsg.txfields ('99').TYPE      := 'C';
        l_txmsg.txfields ('99').VALUE := rec.LIMITCHECK;

        BEGIN
            IF txpks_#2660.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 2660: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_DFPayment');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on transfer money');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_DFPayment');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_DFPayment;

---------------------------------pr_DFDueAutoPayment------------------------------------------------
  PROCEDURE pr_DFDueAutoPayment(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      l_dblPPRINOVD         NUMBER(20,4);
      l_dblPPRINNML         NUMBER(20,4);
      l_dblPINTNMLOVD       NUMBER(20,4);
      l_dblPINTOVDACR       NUMBER(20,4);
      l_dblPINTDUE          NUMBER(20,4);
      l_dblPINTNMLACR       NUMBER(20,4);
      l_dblPFEEPAID         NUMBER(20,4);
      l_dblPDFQTTY          NUMBER(20,4);
      l_dblPRCVQTTY         NUMBER(20,4);
      l_dblPCARCVQTTY       NUMBER(20,4);
      l_dblPBLOCKQTTY       NUMBER(20,4);
      l_dblQTTY             NUMBER(20,4);
      l_dblRlsqtty             NUMBER(20,4);
      l_dblamount           NUMBER;
      l_dblprinamount       NUMBER;
      l_dblintamount        NUMBER;
      v_dblcibal            NUMBER;

      l_cimastcheck_arr txpks_check.cimastcheck_arrtype;
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_DFDueAutoPayment');
    p_lastRun:='Y';
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  LNMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='2642';
     SELECT varvalue
         INTO v_strCURRDATE
         FROM sysvar
         WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='2642';
    for rec in
    (
        select sb.tradelot,to_char(df.RLSDATE,'DD/MM/YYYY') RLSDATE,df.DEALPRINAMT,DF.TXDATE,df.acctno,df.CODEID,df.LNACCTNO,df.AFACCTNO,df.LNTYPE,df.PRINOVD,df.PRINNML,df.INTNMLOVD,
        df.INTOVDACR,df.DFREF,chd.overduedate,df.INTDUE,df.INTNMLACR,df.AVLFEEAMT,df.dfqtty DFTRADING,df.RCVQTTY,
        df.CARCVQTTY,df.BLOCKQTTY,df.ODAMT,df.BQTTY,0 SECURED,df.REMAINQTTY,df.RLSQTTY,
        df.RLSAMT,df.DEALAMT,df.DEALFEE,df.FULLNAME,df.ADDRESS,df.IDCODE,df.CUSTODYCD,df.RRID,
        df.CIDRAWNDOWN,df.BANKDRAWNDOWN,df.CMPDRAWNDOWN,
        round(df.intnmlacr+ df.intnmlovd + df.intovdacr + df.intdue + df.prinovd + df.prinnml + df.avlfeeamt,0) amount,
        df.prinnml + df.prinovd prinamount,
        df.intnmlacr+ df.intnmlovd + df.intovdacr + df.intdue + df.AVLFEEAMT intamount from
        (SELECT v.*, nvl(NML,0) DUEAMT FROM v_getdealinfo v,
        (SELECT S.ACCTNO, SUM(NML) NML, M.TRFACCTNO FROM LNSCHD S,
                (SELECT * FROM (SELECT A.*, ROWNUM ID FROM LNMAST A) WHERE ID BETWEEN p_FromRow AND p_ToRow) M
                WHERE S.OVERDUEDATE = TO_DATE((select varvalue from sysvar where grname ='SYSTEM' and varname ='CURRDATE'),'DD/MM/YYYY') AND S.NML > 0 AND S.REFTYPE IN ('P')
                    AND S.ACCTNO = M.ACCTNO AND M.STATUS NOT IN ('P','R','C')
                GROUP BY S.ACCTNO, M.TRFACCTNO
                ORDER BY S.ACCTNO) sts
        where v.lnacctno = sts.acctno (+)
        ) df, cimast ci,securities_info sb, lnschd chd,
        (select sum(advamt) avladvance,afacctno
                    from v_getAccountAvlAdvance group by afacctno) adv
         WHERE (df.prinovd + df.oprinovd + df.dueamt>0 or sb.basicprice<=df.triggerprice or df.FLAGTRIGGER='T')
        --AND DF.TXDATE>=TO_DATE('31/05/2010','DD/MM/YYYY') --CHI XU LY CHO DU LIEU SAU CONVERT
        and df.afacctno = ci.acctno and ci.balance+nvl(adv.avladvance,0)>0
        and df.intnmlacr+ df.intnmlovd + df.intovdacr + df.intdue + df.prinovd + df.prinnml + df.avlfeeamt>0
        and df.codeid= sb.codeid
        and df.lnacctno = chd.acctno and chd.reftype in ('P','GP')
        and ci.acctno=adv.afacctno(+)
        order by
            ( case when (sb.basicprice<=df.triggerprice or df.FLAGTRIGGER='T') then 0 else 1 end), --Neu trigger thi nam dau tien
            greatest((df.triggerprice-sb.basicprice)/greatest(sb.basicprice,1) * 100,0) desc, --Neu trigger thi uu tien order theo GAP gia
            chd.overduedate, -- Theo ngay den han tang dan
            df.prinnml + df.prinovd -- Theo gia tri goc phai tra giam dan


    )
    loop
        v_dblcibal:=0;
        /*select ci.balance+nvl(adv.avladvance,0) into v_dblcibal from cimast ci,
                    (select sum(depoamt) avladvance,afacctno
                        from v_getAccountAvlAdvance group by afacctno) adv
        where ci.acctno=adv.afacctno(+) and ci.acctno = rec.afacctno;*/
        --l_CIMASTcheck_arr := txpks_check.fn_CIMASTcheck(rec.AFACCTNO,'CIMAST','ACCTNO');
        --v_dblcibal := least(l_CIMASTcheck_arr(0).BALDEFOVD,l_CIMASTcheck_arr(0).PP);

        SELECT round(nvl(adv.avladvance,0) + balance - odamt
                - dfdebtamt - dfintdebtamt - nvl(b.execbuyamt,0),0)
               INTO v_dblcibal
                from cimast inner join afmast af on cimast.acctno=af.acctno
                left join (select * from v_getbuyorderinfo where afacctno = rec.AFACCTNO) b
                on cimast.acctno = b.afacctno
                left join
                (select sum(advamt) avladvance,afacctno
                    from v_getAccountAvlAdvance where afacctno = rec.AFACCTNO group by afacctno) adv
                on adv.afacctno=cimast.acctno
                WHERE cimast.acctno = rec.AFACCTNO;

        if v_dblcibal>0 and rec.Amount>0 and rec.prinamount>0 then
            l_dblamount:=least(v_dblcibal,rec.Amount);
            l_dblprinamount:=l_dblamount * rec.prinamount/rec.Amount ;
            l_dblintamount:=l_dblamount - l_dblamount * rec.prinamount/rec.Amount ;
            --Set txnum
            SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
            l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
            --Cac dinh cac gia tri tra no
                        --63  45--72--74--77--80--90                              13
            l_dblPPRINOVD:= round(greatest(least(l_dblamount,rec.PRINOVD*l_dblprinamount/rec.prinamount),0),0);
            --65  45--72--74--77--80--90--63                          15
            l_dblPPRINNML:= round(greatest(least(l_dblamount-l_dblPPRINOVD,rec.PRINNML*l_dblprinamount/rec.prinamount),0),0);
            --72  45                                                  23**16//14
            l_dblPINTNMLOVD:= round(greatest(least(l_dblamount-l_dblPPRINOVD-l_dblPPRINNML,rec.INTNMLOVD*l_dblprinamount/rec.prinamount),0),0);
            --74  45--72                                              26**16//14
            l_dblPINTOVDACR:= round(greatest(least(l_dblamount-l_dblPPRINOVD-l_dblPPRINNML-l_dblPINTNMLOVD,rec.INTOVDACR*l_dblprinamount/rec.prinamount),0),0);
            --77  45--72--74                                          31**16//14
            l_dblPINTDUE:= round(greatest(least(l_dblamount-l_dblPPRINOVD-l_dblPPRINNML-l_dblPINTNMLOVD-l_dblPINTOVDACR,rec.INTDUE*l_dblprinamount/rec.prinamount),0),0);
            --80  45--72--74--77                                      35**16//14
            l_dblPINTNMLACR:= round(greatest(least (l_dblamount-l_dblPPRINOVD-l_dblPPRINNML-l_dblPINTNMLOVD-l_dblPINTOVDACR-l_dblPINTDUE,rec.INTNMLACR*l_dblprinamount/rec.prinamount),0),0);
            --90  45--72--74--77--80                                  36**16//14
            l_dblPFEEPAID:= round(greatest(least(l_dblamount-l_dblPPRINOVD-l_dblPPRINNML-l_dblPINTNMLOVD-l_dblPINTOVDACR-l_dblPINTDUE-l_dblPINTNMLACR,rec.AVLFEEAMT*l_dblprinamount/rec.prinamount),0),0);
            --48  ((51++16))//52**((43++37++38++39++40++50++42))--50  37++38++39++40
            --l_dblQTTY:=round(greatest(least((rec.RLSAMT + l_dblamount - rec.DEALFEE)/rec.DEALAMT * (rec.SECURED+rec.DFTRADING+rec.RCVQTTY+rec.CARCVQTTY+rec.BLOCKQTTY+rec.RLSQTTY+rec.BQTTY),rec.DFTRADING+rec.RCVQTTY+rec.CARCVQTTY+rec.BLOCKQTTY),0));
            l_dblQTTY:=round(greatest(least((rec.RLSAMT + l_dblPPRINOVD + l_dblPPRINNML)/rec.DEALAMT * (rec.SECURED+rec.DFTRADING+rec.RCVQTTY+rec.CARCVQTTY+rec.BLOCKQTTY+rec.RLSQTTY+rec.BQTTY)-rec.RLSQTTY,rec.DFTRADING+rec.RCVQTTY+rec.CARCVQTTY+rec.BLOCKQTTY),0));

            if rec.DFTRADING+rec.RCVQTTY+rec.CARCVQTTY+rec.BLOCKQTTY> l_dblQTTY then
                l_dblRlsqtty:=floor(l_dblQTTY/rec.tradelot)*rec.tradelot;
            else
                l_dblRlsqtty:=l_dblQTTY;
            end if;
            --91  46                                                  37
            l_dblPDFQTTY:=greatest(least(l_dblRlsqtty,rec.DFTRADING),0);
            --92  46--91                                              38
            l_dblPRCVQTTY:=greatest(least(l_dblRlsqtty-l_dblPDFQTTY,rec.RCVQTTY),0);
            --93  46--91--92                                          39
            l_dblPCARCVQTTY:=greatest(least(l_dblRlsqtty-l_dblPDFQTTY-l_dblPRCVQTTY,rec.CARCVQTTY),0);
            --94  46--91--92--93                                      40
            l_dblPBLOCKQTTY:=greatest(least(l_dblRlsqtty-l_dblPDFQTTY-l_dblPRCVQTTY-l_dblPCARCVQTTY,rec.BLOCKQTTY),0);

            --01    CODEID          C
            l_txmsg.txfields ('01').defname   := 'CODEID';
            l_txmsg.txfields ('01').TYPE      := 'C';
            l_txmsg.txfields ('01').VALUE     := rec.codeid;
            --02    ACCTNO          C
            l_txmsg.txfields ('02').defname   := 'ACCTNO';
            l_txmsg.txfields ('02').TYPE      := 'C';
            l_txmsg.txfields ('02').VALUE     := rec.ACCTNO;
            --03   LNACCTNO     C
            l_txmsg.txfields ('03').defname   := 'LNACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.lnacctno;
            --05   AFACCTNO     C
            l_txmsg.txfields ('05').defname   := 'AFACCTNO';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;
            --06   SEACCTNO     C
            l_txmsg.txfields ('06').defname   := 'AFACCTNO';
            l_txmsg.txfields ('06').TYPE      := 'C';
            l_txmsg.txfields ('06').VALUE     := rec.AFACCTNO || rec.codeid;
            --07   LNTYPE       C
            l_txmsg.txfields ('07').defname   := 'LNTYPE';
            l_txmsg.txfields ('07').TYPE      := 'C';
            l_txmsg.txfields ('07').VALUE     := rec.LNTYPE;
            --08   GLMAST       C
            l_txmsg.txfields ('08').defname   := 'GLMAST';
            l_txmsg.txfields ('08').TYPE      := 'C';
            l_txmsg.txfields ('08').VALUE     := '';
            --13    PRINOVD         N   02PRINOVD
            l_txmsg.txfields ('13').defname   := 'PRINOVD';
            l_txmsg.txfields ('13').TYPE      := 'N';
            l_txmsg.txfields ('13').VALUE     := round(rec.PRINOVD,0);

            --14  DEALPRINAMT N
            l_txmsg.txfields ('14').defname   := 'DEALPRINAMT';
            l_txmsg.txfields ('14').TYPE      := 'N';
            l_txmsg.txfields ('14').VALUE     := round(rec.DEALPRINAMT,0);


            --15    PRINNML         N   02PRINNML
            l_txmsg.txfields ('15').defname   := 'PRINNML';
            l_txmsg.txfields ('15').TYPE      := 'N';
            l_txmsg.txfields ('15').VALUE     := round(rec.PRINNML,0);

            --16  PRINPAIDAMT N
            l_txmsg.txfields ('16').defname   := 'PRINPAIDAMT';
            l_txmsg.txfields ('16').TYPE      := 'N';
            l_txmsg.txfields ('16').VALUE     := round(l_dblPPRINOVD + l_dblPPRINNML,0);
            --18  DEALFEE         N
            l_txmsg.txfields ('18').defname   := 'DEALFEE';
            l_txmsg.txfields ('18').TYPE      := 'N';
            l_txmsg.txfields ('18').VALUE     := round(rec.DEALFEE,0);

            --19  DEALINTPAIDAMT  N
            l_txmsg.txfields ('19').defname   := 'DEALINTPAIDAMT';
            l_txmsg.txfields ('19').TYPE      := 'N';
            l_txmsg.txfields ('19').VALUE     := case when rec.DEALPRINAMT=0 then 0 else round(rec.DEALFEE * (l_dblPPRINOVD + l_dblPPRINNML) /rec.DEALPRINAMT,0) end;

            --23    INTNMLOVD       N   02INTNMLOVD
            l_txmsg.txfields ('23').defname   := 'INTNMLOVD';
            l_txmsg.txfields ('23').TYPE      := 'N';
            l_txmsg.txfields ('23').VALUE     := round(rec.INTNMLOVD,0);
            --26    INTOVDACR       N   02INTOVDACR
            l_txmsg.txfields ('26').defname   := 'INTOVDACR';
            l_txmsg.txfields ('26').TYPE      := 'N';
            l_txmsg.txfields ('26').VALUE     := round(rec.INTOVDACR,0);
            --29    DFREF           C   02DFREF
            l_txmsg.txfields ('29').defname   := 'DFREF';
            l_txmsg.txfields ('29').TYPE      := 'C';
            l_txmsg.txfields ('29').VALUE     := rec.DFREF;
            --30   C   DESC
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE := v_strDesc;
            --31    INTDUE          N   02INTDUE
            l_txmsg.txfields ('31').defname   := 'INTDUE';
            l_txmsg.txfields ('31').TYPE      := 'N';
            l_txmsg.txfields ('31').VALUE     := round(rec.INTDUE,0);

            --35    INTNMLACR       N   02INTNMLACR
            l_txmsg.txfields ('35').defname   := 'INTNMLACR';
            l_txmsg.txfields ('35').TYPE      := 'N';
            l_txmsg.txfields ('35').VALUE     := round(rec.INTNMLACR,0);

            --36    FEEPAID         N   02AVLFEEAMT
            l_txmsg.txfields ('36').defname   := 'FEEPAID';
            l_txmsg.txfields ('36').TYPE      := 'N';
            l_txmsg.txfields ('36').VALUE     := round(rec.AVLFEEAMT,0);

            --37    DFQTTY          N   02DFTRADING
            l_txmsg.txfields ('37').defname   := 'DFQTTY';
            l_txmsg.txfields ('37').TYPE      := 'N';
            l_txmsg.txfields ('37').VALUE     := rec.DFTRADING;

            --38    RCVQTTY         N   02RCVQTTY
            l_txmsg.txfields ('38').defname   := 'RCVQTTY';
            l_txmsg.txfields ('38').TYPE      := 'N';
            l_txmsg.txfields ('38').VALUE     := rec.RCVQTTY;

            --39    CARCVQTTY       N   02CARCVQTTY
            l_txmsg.txfields ('39').defname   := 'CARCVQTTY';
            l_txmsg.txfields ('39').TYPE      := 'N';
            l_txmsg.txfields ('39').VALUE     := rec.CARCVQTTY;

            --40    BLOCKQTTY       N   02BLOCKQTTY
            l_txmsg.txfields ('40').defname   := 'BLOCKQTTY';
            l_txmsg.txfields ('40').TYPE      := 'N';
            l_txmsg.txfields ('40').VALUE     := rec.BLOCKQTTY;

            --41    ODAMT           N   02ODAMT
            l_txmsg.txfields ('41').defname   := 'ODAMT';
            l_txmsg.txfields ('41').TYPE      := 'N';
            l_txmsg.txfields ('41').VALUE     := round(rec.ODAMT,0);

            --42    BQTTY           N   02BQTTY
            l_txmsg.txfields ('42').defname   := 'BQTTY';
            l_txmsg.txfields ('42').TYPE      := 'N';
            l_txmsg.txfields ('42').VALUE     := rec.BQTTY;
            --43    SECURED         N   02SECURED
            l_txmsg.txfields ('43').defname   := 'SECURED';
            l_txmsg.txfields ('43').TYPE      := 'N';
            l_txmsg.txfields ('43').VALUE     := rec.SECURED;
            --45    AMT             N   02ODAMT
            l_txmsg.txfields ('45').defname   := 'AMT';
            l_txmsg.txfields ('45').TYPE      := 'N';
            l_txmsg.txfields ('45').VALUE     := round(l_dblamount,0);
            --46    QTTY            N   02REMAINQTTY
            l_txmsg.txfields ('46').defname   := 'QTTY';
            l_txmsg.txfields ('46').TYPE      := 'N';
            l_txmsg.txfields ('46').VALUE     := l_dblRlsqtty;

            --47  TRADELOT    N
            l_txmsg.txfields ('47').defname   := 'TRADELOT';
            l_txmsg.txfields ('47').TYPE      := 'N';
            l_txmsg.txfields ('47').VALUE     := rec.TRADELOT;
            --48  MAXQTTY     N
            l_txmsg.txfields ('48').defname   := 'MAXQTTY';
            l_txmsg.txfields ('48').TYPE      := 'N';
            l_txmsg.txfields ('48').VALUE     := l_dblQTTY;
            --49  RLSDATE C
            l_txmsg.txfields ('49').defname   := 'RLSDATE';
            l_txmsg.txfields ('49').TYPE      := 'C';
            l_txmsg.txfields ('49').VALUE     := rec.RLSDATE;

            --50    RLSQTTY         N   02RLSQTTY
            l_txmsg.txfields ('50').defname   := 'RLSQTTY';
            l_txmsg.txfields ('50').TYPE      := 'N';
            l_txmsg.txfields ('50').VALUE     := rec.RLSQTTY;
            --51    RLSAMT          N   02RLSAMT
            l_txmsg.txfields ('51').defname   := 'RLSAMT';
            l_txmsg.txfields ('51').TYPE      := 'N';
            l_txmsg.txfields ('51').VALUE     := round(rec.RLSAMT,0);
            --52    DEALAMT         N   02DEALAMT
            l_txmsg.txfields ('52').defname   := 'DEALAMT';
            l_txmsg.txfields ('52').TYPE      := 'N';
            l_txmsg.txfields ('52').VALUE     := round(rec.DEALAMT,0);

            --53    DEALFEE         N   02DEALFEE
            l_txmsg.txfields ('53').defname   := 'DEALFEE';
            l_txmsg.txfields ('53').TYPE      := 'N';
            l_txmsg.txfields ('53').VALUE     := round(rec.DEALFEE,0);
            --57    CUSTNAME        C   02FULLNAME
            l_txmsg.txfields ('57').defname   := 'CUSTNAME';
            l_txmsg.txfields ('57').TYPE      := 'C';
            l_txmsg.txfields ('57').VALUE     := rec.FULLNAME;
            --58    ADDRESS         C   02ADDRESS
            l_txmsg.txfields ('58').defname   := 'ADDRESS';
            l_txmsg.txfields ('58').TYPE      := 'C';
            l_txmsg.txfields ('58').VALUE     := rec.ADDRESS;
            --59    LICENSE         C   02IDCODE
            l_txmsg.txfields ('59').defname   := 'LICENSE';
            l_txmsg.txfields ('59').TYPE      := 'C';
            l_txmsg.txfields ('59').VALUE     := rec.IDCODE;

            --88    CUSTODYCD       C   02CUSTODYCD
            l_txmsg.txfields ('88').defname   := 'CUSTODYCD';
            l_txmsg.txfields ('88').TYPE      := 'C';
            l_txmsg.txfields ('88').VALUE     := rec.CUSTODYCD;
            --95    RRID            C   02RRID
            l_txmsg.txfields ('95').defname   := 'RRID';
            l_txmsg.txfields ('95').TYPE      := 'C';
            l_txmsg.txfields ('95').VALUE     := rec.RRID;
            --96    CIDRAWNDOWN     C   02CIDRAWNDOWN
            l_txmsg.txfields ('96').defname   := 'CIDRAWNDOWN';
            l_txmsg.txfields ('96').TYPE      := 'C';
            l_txmsg.txfields ('96').VALUE     := rec.CIDRAWNDOWN;
            --97    BANKDRAWNDOWN   C   02BANKDRAWNDOWN
            l_txmsg.txfields ('97').defname   := 'BANKDRAWNDOWN';
            l_txmsg.txfields ('97').TYPE      := 'C';
            l_txmsg.txfields ('97').VALUE     := rec.BANKDRAWNDOWN;
            --98    CMPDRAWNDOWN    C   02CMPDRAWNDOWN
            l_txmsg.txfields ('98').defname   := 'CMPDRAWNDOWN';
            l_txmsg.txfields ('98').TYPE      := 'C';
            l_txmsg.txfields ('98').VALUE     := rec.CMPDRAWNDOWN;
            --99    LIMITCHECK  C
            l_txmsg.txfields ('99').defname   := 'LIMITCHECK';
            l_txmsg.txfields ('99').TYPE      := 'C';
            l_txmsg.txfields ('99').VALUE     := '1';
            --63    PPRINOVD        N
            l_txmsg.txfields ('63').defname   := 'PPRINOVD';
            l_txmsg.txfields ('63').TYPE      := 'N';
            l_txmsg.txfields ('63').VALUE     := round(l_dblPPRINOVD,0);

            --65    PPRINNML        N
            l_txmsg.txfields ('65').defname   := 'PPRINNML';
            l_txmsg.txfields ('65').TYPE      := 'N';
            l_txmsg.txfields ('65').VALUE     := round(l_dblPPRINNML,0);
            --72    PINTNMLOVD      N
            l_txmsg.txfields ('72').defname   := 'PINTNMLOVD';
            l_txmsg.txfields ('72').TYPE      := 'N';
            l_txmsg.txfields ('72').VALUE     := round(l_dblPINTNMLOVD,0);

            --74    PINTOVDACR      N
            l_txmsg.txfields ('74').defname   := 'PINTOVDACR';
            l_txmsg.txfields ('74').TYPE      := 'N';
            l_txmsg.txfields ('74').VALUE     := round(l_dblPINTOVDACR,0);

            --77    PINTDUE         N
            l_txmsg.txfields ('77').defname   := 'PINTDUE';
            l_txmsg.txfields ('77').TYPE      := 'N';
            l_txmsg.txfields ('77').VALUE     := round(l_dblPINTDUE,0);
            --80    PINTNMLACR      N
            l_txmsg.txfields ('80').defname   := 'PINTNMLACR';
            l_txmsg.txfields ('80').TYPE      := 'N';
            l_txmsg.txfields ('80').VALUE     := round(l_dblPINTNMLACR,0);

            --90    PFEEPAID        N
            l_txmsg.txfields ('90').defname   := 'PFEEPAID';
            l_txmsg.txfields ('90').TYPE      := 'N';
            l_txmsg.txfields ('90').VALUE     := round(l_dblPFEEPAID,0);

            --91    PDFQTTY         N
            l_txmsg.txfields ('91').defname   := 'PDFQTTY';
            l_txmsg.txfields ('91').TYPE      := 'N';
            l_txmsg.txfields ('91').VALUE     := l_dblPDFQTTY;

            --92    PRCVQTTY        N
            l_txmsg.txfields ('92').defname   := 'PRCVQTTY';
            l_txmsg.txfields ('92').TYPE      := 'N';
            l_txmsg.txfields ('92').VALUE     := l_dblPRCVQTTY;
            --93    PCARCVQTTY      N
            l_txmsg.txfields ('93').defname   := 'PCARCVQTTY';
            l_txmsg.txfields ('93').TYPE      := 'N';
            l_txmsg.txfields ('93').VALUE     := l_dblPCARCVQTTY;
            --94    PBLOCKQTTY      N
            l_txmsg.txfields ('94').defname   := 'PBLOCKQTTY';
            l_txmsg.txfields ('94').TYPE      := 'N';
            l_txmsg.txfields ('94').VALUE     := l_dblPBLOCKQTTY;

            BEGIN
                IF txpks_#2642.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 2642: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
        end if;

    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_DFDueAutoPayment');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on pr_DFDueAutoPayment');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_DFDueAutoPayment');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_DFDueAutoPayment;
---------------------------------pr_DFCleanDeal------------------------------------------------
  PROCEDURE pr_DFCleanDeal(p_err_code  OUT varchar2)
  IS

  BEGIN
    plog.setendsection(pkgctx, 'pr_DFCleanDeal');
    UPDATE DFMAST SET PSTATUS =PSTATUS || STATUS, STATUS ='C'
    WHERE DFQTTY + RCVQTTY + CARCVQTTY + BLOCKQTTY + CACASHQTTY<=0 and STATUS = 'A'
       AND NOT EXISTS (SELECT ACCTNO FROM LNMAST WHERE ACCTNO =DFMAST.LNACCTNO);
    INSERT INTO DFMASTHIST
       SELECT * FROM DFMAST
       WHERE DFQTTY + RCVQTTY + CARCVQTTY + BLOCKQTTY + CACASHQTTY<=0
       and STATUS IN ('C','R')
       AND NOT EXISTS (SELECT ACCTNO FROM LNMAST WHERE ACCTNO =DFMAST.LNACCTNO);
    DELETE DFMAST
       WHERE DFQTTY + RCVQTTY + CARCVQTTY + BLOCKQTTY + CACASHQTTY<=0
       and STATUS IN ('C','R')
       AND NOT EXISTS (SELECT ACCTNO FROM LNMAST WHERE ACCTNO =DFMAST.LNACCTNO);
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_DFCleanDeal');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_DFCleanDeal');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_DFCleanDeal;

---------------------------------pr_ODSurelyStstransferMoney------------------------------------------------
  PROCEDURE pr_ODSurelyStstransferMoney(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      v_COMPANYCD VARCHAR2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ODSurelyStstransferMoney');

    v_COMPANYCD:=cspks_system.fn_get_sysvar ('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8827';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8827';
    for rec in
    (
        SELECT SUBSTR(CUSTODYCD,4,1) CUSTODYCD, MST.AUTOID, MST.DUETYPE, MST.TXDATE, MST.ORGORDERID, MST.CLEARCD, MST.CLEARDAY,
           MST.AFACCTNO, MST.ACCTNO, MST.AFACCTNO CIACCTNO,
           OD.FEEAMT, OD.ORDERQTTY ORGORDERQTTY, OD.QUOTEPRICE ORGQUOTEPRICE, OD.FEEACR, TYP.FEERATE, TYP.VATRATE, SEC.PARVALUE, SEC.CODEID,
           OD.SECUREDAMT, OD.RLSSECURED, SEC.SYMBOL, MST.AMT, MST.AAMT, MST.FAMT, MST.QTTY ,OD.EXECQTTY SQTTY , MST.AQTTY
           FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST, SBSECURITIES SEC, AFMAST AF, CFMAST CF, ODMAST OD, ODTYPE TYP
           WHERE AF.CUSTID=CF.CUSTID AND MST.CODEID=SEC.CODEID AND SEC.TRADEPLACE  <> '003'
           AND MST.DUETYPE='SM' AND MST.AAMT<MST.AMT AND MST.DELTD<>'Y'
           AND  CF.CUSTATCOM ='Y'
           --and getduedate  (mst.TXDATE,mst.clearcd,sec.tradeplace ,mst.clearday)<=to_date(v_strCURRDATE,systemnums.c_date_format)
           and
           (
               mst.cleardate<=to_date(v_strCURRDATE,systemnums.c_date_format)
               or
               --mst.cleardate>=getduedate (od.TXDATE,od.clearcd,sec.tradeplace ,od.clearday)-1
               to_date(v_strCURRDATE,systemnums.c_date_format)>=getduedate (od.TXDATE,od.clearcd,sec.tradeplace ,od.clearday)-1
           )
           AND MST.AFACCTNO=AF.ACCTNO AND MST.ORGORDERID=OD.ORDERID AND OD.ACTYPE=TYP.ACTYPE
           ORDER BY CIACCTNO, ORGORDERID, DUETYPE
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
        IF rec.custodycd='F' then
            v_blnVietnamese:= false;
        else
            v_blnVietnamese:= true;
        end if;

        --Set cac field giao dich
        --01   AUTOID       N
        l_txmsg.txfields ('01').defname   := 'AUTOID';
        l_txmsg.txfields ('01').TYPE      := 'N';
        l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

        --03   C   ORGORDERID
        l_txmsg.txfields ('03').defname   := 'ORGORDERID';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ORGORDERID;
        --05   C   CIACCTNO
        l_txmsg.txfields ('05').defname   := 'CIACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.CIACCTNO;
        --11   TRFAMT       N
        l_txmsg.txfields ('11').defname   := 'TRFAMT';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := round(rec.AMT,0);
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        If v_blnVietnamese = True Then
            l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        Else
            l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        End If;
        BEGIN
            IF txpks_#8827.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 8827: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ODSurelyStstransferMoney');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on transfer money');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ODSurelyStstransferMoney');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ODSurelyStstransferMoney;

---------------------------------pr_ODSettlementtransferMoney------------------------------------------------
  PROCEDURE pr_TransferBuyFee(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_TransferBuyFee');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  ODMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8855';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8855';
    for rec in
    (
        SELECT SUBSTR(CF.CUSTODYCD,4,1) CUSTODYCD, MST.TXDATE, MST.ORDERID ORGORDERID,MST.AFACCTNO, CI.ACCTNO CIACCTNO,STS.CLEARDATE,STS.TRFBUYDT,
               STS.TRFBUYEXT,STS.TRFBUYRATE,MST.FEEAMT, MST.ORDERQTTY ORGORDERQTTY, MST.QUOTEPRICE ORGQUOTEPRICE, MST.FEEACR, TYP.FEERATE, TYP.VATRATE, SEC.PARVALUE, SEC.CODEID,
               MST.SECUREDAMT, MST.RLSSECURED, SEC.SYMBOL,MST.EXECQTTY SQTTY,
               UTF8NUMS.c_const_TLTX_TXDESC_8855 ||' ' ||trim(to_char(MST.EXECQTTY,'999,999,999,999,999')) ||' '||SEC.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' ' || to_char(mst.txdate,systemnums.c_date_format) txdesc
               FROM
               (SELECT * FROM (SELECT A.*, ROWNUM ID FROM ODMAST A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST,
               SBSECURITIES SEC, AFMAST AF,CFMAST CF, CIMAST CI,  ODTYPE TYP,STSCHD STS
               WHERE AF.CUSTID=CF.CUSTID AND MST.CODEID=SEC.CODEID AND SEC.TRADEPLACE <> '003'
               AND MST.FEEACR>MST.FEEAMT AND MST.DELTD<>'Y'
               --GianhVG add khong thu phi tai khoan ben ngoai
               AND CF.CUSTATCOM='Y'
               --End GianhVG
               AND STS.DUETYPE='SM' AND STS.ACCTNO=MST.AFACCTNO AND STS.TXDATE=MST.TXDATE AND STS.ORGORDERID=MST.ORDERID AND STS.DELTD<>'Y'
               AND MST.AFACCTNO=AF.ACCTNO AND AF.ACCTNO=CI.ACCTNO AND MST.ACTYPE=TYP.ACTYPE AND FEEACR>FEEAMT AND MST.EXECTYPE IN ('NB','BC')
               AND STS.TRFBUYDT<=(SELECT TO_DATE(VARVALUE,'DD/MM/RRRR') FROM SYSVAR WHERE VARNAME='CURRDATE')
               --AND GETDUEDATE(MST.TXDATE,MST.CLEARCD,'000',AF.TRFBUYEXT) <=(SELECT TO_DATE(VARVALUE,'DD/MM/RRRR') FROM SYSVAR WHERE VARNAME='CURRDATE')
               AND NOT EXISTS (
                    SELECT LF.CVALUE FROM TLLOG TL,TLLOGFLD LF
                    WHERE TL.TLTXCD='8855' AND TL.TXNUM=LF.TXNUM
                    AND TL.TXDATE=LF.TXDATE AND LF.FLDCD='03'
                    AND LF.CVALUE=MST.ORDERID
                )
               ORDER BY CIACCTNO, MST.ORDERID
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
        IF rec.custodycd='F' then
            v_blnVietnamese:= false;
        else
            v_blnVietnamese:= true;
        end if;

        --Set cac field giao dich
        --03   C   ORGORDERID
        l_txmsg.txfields ('03').defname   := 'ORGORDERID';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ORGORDERID;
        --04   C   AFACCTNO
        l_txmsg.txfields ('04').defname   := 'AFACCTNO';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.AFACCTNO;
        --05   C   CIACCTNO
        l_txmsg.txfields ('05').defname   := 'CIACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.CIACCTNO;
        --06   C   SEACCTNO
        l_txmsg.txfields ('06').defname   := 'SEACCTNO';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.AFACCTNO || rec.CODEID;
        --07   C   SYMBOL
        l_txmsg.txfields ('07').defname   := 'SYMBOL';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.SYMBOL;
        --12   FEEAMT       N
        l_txmsg.txfields ('12').defname   := 'FEEAMT';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := round(greatest(rec.FEEACR - rec.FEEAMT,0),0);
        --13   VATAMT       N
        l_txmsg.txfields ('13').defname   := 'VATAMT';
        l_txmsg.txfields ('13').TYPE      := 'N';
        l_txmsg.txfields ('13').VALUE     := round(rec.VATRATE / 100 * greatest(rec.FEEACR - rec.FEEAMT,0),0);
        --14   LATE       N
        l_txmsg.txfields ('14').defname   := 'LATE';
        l_txmsg.txfields ('14').TYPE      := 'N';
        IF rec.TRFBUYDT>rec.TXDATE THEN
            l_txmsg.txfields ('14').VALUE     := 1;
        ELSE
            l_txmsg.txfields ('14').VALUE     := 0;
        END IF;
        --15   TRFBUYRATE       N
        l_txmsg.txfields ('15').defname   := 'TRFBUYRATE';
        l_txmsg.txfields ('15').TYPE      := 'N';
        IF rec.TRFBUYDT>rec.TXDATE THEN
            l_txmsg.txfields ('15').VALUE     := REC.TRFBUYRATE/100;
        ELSE
            l_txmsg.txfields ('15').VALUE     := 0;
        END IF;
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE     := rec.txdesc;
        /*If v_blnVietnamese = True Then
            l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        Else
            l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        End If;*/
        --44   N   PARVALUE
        l_txmsg.txfields ('44').defname   := 'PARVALUE';
        l_txmsg.txfields ('44').TYPE      := 'N';
        l_txmsg.txfields ('44').VALUE     := rec.PARVALUE;

        BEGIN
            IF txpks_#8855.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 8855: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_TransferBuyFee');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on transfer buy fee');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_TransferBuyFee');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_TransferBuyFee;

--TungNT added - for modify beforebatch
---------------------------------pr_TransferBuyFeeCB------------------------------------------------
  PROCEDURE pr_TransferBuyFeeCB(p_err_code  OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_TransferBuyFeeCB');

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8855';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := 'ODPAIDBF';
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8855';
    for rec in
    (
        SELECT SUBSTR(CF.CUSTODYCD,4,1) CUSTODYCD, MST.TXDATE, MST.ORDERID ORGORDERID,MST.AFACCTNO, CI.ACCTNO CIACCTNO,STS.CLEARDATE,STS.TRFBUYDT,
               STS.TRFBUYEXT,STS.TRFBUYRATE,MST.FEEAMT, MST.ORDERQTTY ORGORDERQTTY, MST.QUOTEPRICE ORGQUOTEPRICE, MST.FEEACR, TYP.FEERATE, TYP.VATRATE, SEC.PARVALUE, SEC.CODEID,
               MST.SECUREDAMT, MST.RLSSECURED, SEC.SYMBOL,MST.EXECQTTY SQTTY,'Tra phi mua ' ||MST.EXECQTTY||' '||SEC.SYMBOL||' '|| to_char(mst.txdate,systemnums.c_date_format) txdesc
               FROM
               ODMAST MST,
               SBSECURITIES SEC, AFMAST AF,CFMAST CF, CIMAST CI,  ODTYPE TYP,STSCHD STS
               WHERE AF.CUSTID=CF.CUSTID AND MST.CODEID=SEC.CODEID AND SEC.TRADEPLACE <> '003'
               AND MST.FEEACR>MST.FEEAMT AND MST.DELTD<>'Y' AND CI.COREBANK='Y'
               AND STS.DUETYPE='SM' AND STS.ACCTNO=MST.AFACCTNO AND STS.TXDATE=MST.TXDATE AND STS.ORGORDERID=MST.ORDERID AND STS.DELTD<>'Y'
               AND MST.AFACCTNO=AF.ACCTNO AND AF.ACCTNO=CI.ACCTNO AND MST.ACTYPE=TYP.ACTYPE AND FEEACR>FEEAMT AND MST.EXECTYPE IN ('NB','BC')
               AND STS.TRFBUYDT<=(SELECT TO_DATE(VARVALUE,'DD/MM/RRRR') FROM SYSVAR WHERE VARNAME='CURRDATE')
               --AND GETDUEDATE(MST.TXDATE,MST.CLEARCD,'000',AF.TRFBUYEXT) <=(SELECT TO_DATE(VARVALUE,'DD/MM/RRRR') FROM SYSVAR WHERE VARNAME='CURRDATE')
               AND NOT EXISTS (
                    SELECT LF.CVALUE FROM TLLOG TL,TLLOGFLD LF
                    WHERE TL.TLTXCD='8855' AND TL.TXNUM=LF.TXNUM
                    AND TL.TXDATE=LF.TXDATE AND LF.FLDCD='03'
                    AND LF.CVALUE=MST.ORDERID
                )
               ORDER BY CIACCTNO, MST.ORDERID
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
        IF rec.custodycd='F' then
            v_blnVietnamese:= false;
        else
            v_blnVietnamese:= true;
        end if;

        --Set cac field giao dich
        --03   C   ORGORDERID
        l_txmsg.txfields ('03').defname   := 'ORGORDERID';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ORGORDERID;
        --04   C   AFACCTNO
        l_txmsg.txfields ('04').defname   := 'AFACCTNO';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.AFACCTNO;
        --05   C   CIACCTNO
        l_txmsg.txfields ('05').defname   := 'CIACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.CIACCTNO;
        --06   C   SEACCTNO
        l_txmsg.txfields ('06').defname   := 'SEACCTNO';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.AFACCTNO || rec.CODEID;
        --07   C   SYMBOL
        l_txmsg.txfields ('07').defname   := 'SYMBOL';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.SYMBOL;
        --12   FEEAMT       N
        l_txmsg.txfields ('12').defname   := 'FEEAMT';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := round(greatest(rec.FEEACR - rec.FEEAMT,0),0);
        --13   VATAMT       N
        l_txmsg.txfields ('13').defname   := 'VATAMT';
        l_txmsg.txfields ('13').TYPE      := 'N';
        l_txmsg.txfields ('13').VALUE     := round(rec.VATRATE / 100 * greatest(rec.FEEACR - rec.FEEAMT,0),0);
        --14   LATE       N
        l_txmsg.txfields ('14').defname   := 'LATE';
        l_txmsg.txfields ('14').TYPE      := 'N';
        IF rec.TRFBUYDT>rec.TXDATE THEN
            l_txmsg.txfields ('14').VALUE     := 1;
        ELSE
            l_txmsg.txfields ('14').VALUE     := 0;
        END IF;
        --15   TRFBUYRATE       N
        l_txmsg.txfields ('15').defname   := 'TRFBUYRATE';
        l_txmsg.txfields ('15').TYPE      := 'N';
        IF rec.TRFBUYDT>rec.TXDATE THEN
            l_txmsg.txfields ('15').VALUE     := REC.TRFBUYRATE/100;
        ELSE
            l_txmsg.txfields ('15').VALUE     := 0;
        END IF;
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE     := rec.txdesc;
        /*If v_blnVietnamese = True Then
            l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        Else
            l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || rec.SQTTY || ' ' || rec.SYMBOL || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        End If;*/
        --44   N   PARVALUE
        l_txmsg.txfields ('44').defname   := 'PARVALUE';
        l_txmsg.txfields ('44').TYPE      := 'N';
        l_txmsg.txfields ('44').VALUE     := rec.PARVALUE;

        BEGIN
            IF txpks_#8855.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 8855: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_TransferBuyFeeCB');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on transfer buy fee');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_TransferBuyFeeCB');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_TransferBuyFeeCB;
--End

---------------------------------pr_ODSettlementtransferSec------------------------------------------------
  PROCEDURE pr_ODSettlementtransferSec(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      v_COMPANYCD VARCHAR2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ODSettlementtransferSec');

    v_COMPANYCD:=cspks_system.fn_get_sysvar ('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8867';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8867';
    for rec in
    (
        SELECT SUBSTR(CF.CUSTODYCD,4,1) CUSTODYCD, MST.AUTOID, MST.DUETYPE, MST.TXDATE, MST.ORGORDERID, MST.CLEARCD, MST.CLEARDAY,
            MST.AFACCTNO, OD.ORDERQTTY ORGORDERQTTY, OD.QUOTEPRICE ORGQUOTEPRICE, MST.ACCTNO, SEC.PARVALUE, SEC.SYMBOL, SEC.CODEID, MST.AMT, MST.AAMT, MST.FAMT, MST.QTTY,OD.EXECQTTY SQTTY,OD.EXECTYPE, MST.AQTTY
            FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST, SBSECURITIES SEC,ODMAST OD, AFMAST AF, CFMAST CF
            WHERE OD.AFACCTNO =AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND MST.CODEID=SEC.CODEID AND MST.ORGORDERID=OD.ORDERID AND SEC.TRADEPLACE <> '003'
            AND MST.DUETYPE='SS' AND MST.STATUS='N' AND MST.DELTD<>'Y'
            AND  CF.CUSTATCOM ='Y'
            ORDER BY ORGORDERID, DUETYPE
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
        IF rec.custodycd='F' then
            v_blnVietnamese:= false;
        else
            v_blnVietnamese:= true;
        end if;



        --Set cac field giao dich
        --01   AUTOID       N
        l_txmsg.txfields ('01').defname   := 'AUTOID';
        l_txmsg.txfields ('01').TYPE      := 'N';
        l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

        --03   C   ORGORDERID
        l_txmsg.txfields ('03').defname   := 'ORGORDERID';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ORGORDERID;
        --04   C   AFACCTNO
        l_txmsg.txfields ('04').defname   := 'AFACCTNO';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.AFACCTNO;
        --05   C   CIACCTNO
        l_txmsg.txfields ('05').defname   := 'CIACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;
        --06   C   SEACCTNO
        l_txmsg.txfields ('06').defname   := 'SEACCTNO';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.AFACCTNO || rec.CODEID;
        --07   C   SYMBOL
        l_txmsg.txfields ('07').defname   := 'SYMBOL';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.SYMBOL;
        --08   AMT          N
        l_txmsg.txfields ('08').defname   := 'AMT';
        l_txmsg.txfields ('08').TYPE      := 'N';
        l_txmsg.txfields ('08').VALUE     := round(rec.AMT,0);
        --09   QTTY         N
        l_txmsg.txfields ('09').defname   := 'QTTY';
        l_txmsg.txfields ('09').TYPE      := 'N';
        l_txmsg.txfields ('09').VALUE     := rec.QTTY;
        --10   N   PARVALUE
        l_txmsg.txfields ('10').defname   := 'PARVALUE';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.PARVALUE;
        --11   TRFQTTY      N
        l_txmsg.txfields ('11').defname   := 'TRFQTTY';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := rec.QTTY;
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        If v_blnVietnamese = True Then
            l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' ||  trim(to_char(rec.SQTTY,'999,999,999,999,999,999,999'))  || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        Else
            l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || trim(to_char(rec.SQTTY,'999,999,999,999,999,999,999')) || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' ' || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        End If;
        --60   N   ISMORTAGE
        l_txmsg.txfields ('60').defname   := 'ISMORTAGE';
        l_txmsg.txfields ('60').TYPE      := 'N';
        l_txmsg.txfields ('60').VALUE     := (case when rec.EXECTYPE='MS' then 1 else 0 end);

        BEGIN
            IF txpks_#8867.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 8867: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ODSettlementtransferSec');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on transfer securities');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ODSettlementtransferSec');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ODSettlementtransferSec;


---------------------------------pr_ODDealAllocate------------------------------------------------
  PROCEDURE pr_ODDealAllocate(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      v_overdfqtty number(20,0);
      v_dfqtty number(20,0);
      v_dfrlsqtty   number(20,0);
      v_totalpaidamt number(20,4);
      v_paidamt number(20,4);
      v_advamt number(20,4);
      v_oldseacctno varchar2(20);
      v_curr_dfqtty number(20,0);
      v_curr_overdfqtty number(20,0);
      v_curr_dftrading number(20,0);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ODDealAllocate');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    v_overdfqtty:=0;
    v_dfqtty:=0;
    l_txmsg.tlid:= systemnums.c_system_userid;
    l_txmsg.txnum:='0000000000';
    v_oldseacctno:='XXX';
    for rec in
    (
        select b.orderid,c.autoid,a.afacctno, a.codeid,a.trade-nvl(vse.SECUREAMT,0) trading,
            c.qtty orderqtty,
            nvl(vdf.overdftrading,0) overdfqtty,
            nvl(vdf.dftrading,0)    dfqtty
        from semast a, odmast b,
            (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) c,
            v_getsellorderinfo vse,
            (
                select v.afacctno,v.codeid,
                sum(case when overamt>0 or (v.basicprice<=v.triggerprice or v.FLAGTRIGGER='T') then v.dftrading else 0 end) overdftrading,
                sum(case when overamt>0 or (v.basicprice<=v.triggerprice or v.FLAGTRIGGER='T') then 0 else v.dftrading end) dftrading  from
                (SELECT v.*, nvl(NML,0) DUEAMT,v.prinovd + v.oprinovd + nvl(NML,0) overamt
                FROM v_getdealinfo v,
                (SELECT S.ACCTNO, SUM(NML) NML, M.TRFACCTNO FROM LNSCHD S, LNMAST M
                        WHERE S.OVERDUEDATE <= v_strCURRDATE
                            AND S.NML > 0 AND S.REFTYPE IN ('P')
                            AND S.ACCTNO = M.ACCTNO AND M.STATUS NOT IN ('P','R','C')
                        GROUP BY S.ACCTNO, M.TRFACCTNO
                        ORDER BY S.ACCTNO) sts
                where v.lnacctno = sts.acctno (+)
                ) v WHERE v.status='A'
                group by v.afacctno,v.codeid
            ) vdf
        where a.acctno = b.seacctno and b.orderid = c.orgorderid
        and b.via ='W'   --Lenh quan ETS
        --and a.acctno='0021085668000103'
        and c.duetype='RM' and c.status='N' and c.deltd<>'Y'
        and a.acctno = vse.seacctno(+)
        and b.txdate = v_strCURRDATE
        and a.afacctno = vdf.afacctno
        and a.codeid= vdf.codeid
        and vdf.overdftrading + dftrading>0
        order by a.afacctno, a.codeid,substr(b.orderid,11,6)
    )
    loop
        if v_oldseacctno <> rec.afacctno || rec.codeid then
            v_oldseacctno := rec.afacctno || rec.codeid;
            v_curr_dfqtty:=rec.dfqtty;
            v_curr_overdfqtty:=rec.overdfqtty;
            v_curr_dftrading:=rec.trading;
        end if;
        --v_overdfqtty:=least(rec.orderqtty,rec.overdfqtty);
        v_overdfqtty:=least(rec.orderqtty,v_curr_overdfqtty);
        plog.debug (pkgctx,'v_overdfqtty ' || v_overdfqtty);
        --v_dfqtty:=least(rec.orderqtty-v_overdfqtty,rec.dfqtty,-v_overdfqtty-rec.trading);
        v_dfqtty:=least(rec.orderqtty-v_overdfqtty,v_curr_dfqtty,-v_overdfqtty-v_curr_dftrading);
        plog.debug (pkgctx,'v_dfqtty ' || v_dfqtty);
        v_totalpaidamt:=0;
        --1.Tra no cho cac deal den va qua han
        if v_overdfqtty>0 then
            for rec1 in
            (
                select v.*
                FROM v_getdealinfo v,LNSCHD S, LNMAST M
                where v.lnacctno = m.acctno and m.acctno = s.acctno and s.REFTYPE IN ('P')
                and (S.OVERDUEDATE <= TO_DATE((select varvalue from sysvar where grname ='SYSTEM' and varname ='CURRDATE'),'DD/MM/YYYY')
                    or v.prinovd + v.oprinovd>0 or (v.basicprice<=v.triggerprice or v.FLAGTRIGGER='T'))
                and v.afacctno =rec.afacctno and v.codeid = rec.codeid
                order by (case when (v.basicprice<=v.triggerprice or v.FLAGTRIGGER='T')
                                    then (v.triggerprice-v.basicprice)/greatest(v.basicprice ,1)
                                    else 0 end
                          ) desc,S.OVERDUEDATE,v.txdate,substr(v.acctno,5,6)
            )
            loop
                if v_overdfqtty> rec1.dftrading then
                    v_dfrlsqtty:=rec1.dftrading;
                else
                    v_dfrlsqtty:=v_overdfqtty;
                end if;
                cspks_dfproc.pr_DealAutoPayment(l_txmsg,rec1.acctno,rec.autoid ,v_dfrlsqtty,1,v_paidamt ,p_err_code);
                plog.debug (pkgctx,'v_paidamt ' || v_paidamt);
                v_totalpaidamt:=v_totalpaidamt+v_paidamt;

                v_overdfqtty:=v_overdfqtty-v_dfrlsqtty;
                v_curr_overdfqtty:=v_curr_overdfqtty-v_dfrlsqtty;
                v_curr_dftrading:=v_curr_dftrading+v_dfrlsqtty;
                exit when v_overdfqtty<=0;
            end loop;
        end if;
        --2.Tra no cho cac deal trong han
        if v_dfqtty>0 then
            for rec1 in
            (
                select v.*
                FROM v_getdealinfo v,LNSCHD S, LNMAST M
                where v.lnacctno = m.acctno and m.acctno = s.acctno and s.REFTYPE IN ('P')
                and S.OVERDUEDATE > TO_DATE((select varvalue from sysvar where grname ='SYSTEM' and varname ='CURRDATE'),'DD/MM/YYYY')
                and v.prinovd + v.oprinovd<=0
                and v.afacctno =rec.afacctno and v.codeid = rec.codeid
                order by S.OVERDUEDATE, txdate,substr(v.acctno,5,6)
            )
            loop
                if v_dfqtty> rec1.dftrading then
                    v_dfrlsqtty:=rec1.dftrading;
                else
                    v_dfrlsqtty:=v_dfqtty;
                end if;
                cspks_dfproc.pr_DealAutoPayment(l_txmsg,rec1.acctno,rec.autoid ,v_dfrlsqtty,1,v_paidamt ,p_err_code);
                plog.debug (pkgctx,'v_paidamt ' || v_paidamt);
                v_totalpaidamt:=v_totalpaidamt+v_paidamt;

                v_dfqtty:=v_dfqtty-v_dfrlsqtty;
                v_curr_dfqtty:=v_curr_dfqtty-v_dfrlsqtty;
                v_curr_dftrading:=v_curr_dftrading+v_dfrlsqtty;
                exit when v_dfqtty<=0;
            end loop;
        end if;
        --Thuc hien ung truoc gop, khong thuc hien ung truoc theo deal nua
        /*--3.Ung truoc tien ban bu cho cac deal
        if v_totalpaidamt>0 then
            plog.debug (pkgctx,'v_totalpaidamt ' || v_totalpaidamt);
            cspks_ciproc.pr_CIAutoAdvance(l_txmsg,rec.orderid,v_totalpaidamt,v_advamt,p_err_code);
            plog.debug (pkgctx,'advance amount ' || v_advamt);
        end if;*/
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ODDealAllocate');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on transfer securities');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ODDealAllocate');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ODDealAllocate;

 ---------------------------------pr_DFAutoAdvToPayment------------------------------------------------
  PROCEDURE pr_DFAutoAdvToPayment(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strAFACCTNOTmp varchar2(20);
      v_strGROUPIDTmp varchar2(20);
      v_strCODEIDTmp  varchar2(20);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      v_totalpaidamt NUMBER(20,0);
      v_pqtty   number(20,0);
      v_paidamt  number(20,0);
      v_advamt   number(20,0);
      l_DFBLOCKAMT number;
      l_VNDSELLDF number;
      l_amtpaid NUMBER;
      l_tmpAMT number;
      l_DayDue number;
      l_34paid NUMBER;
      l_35paid number;
      l_36paid number;
      l_ovd number;
      l_nml number;
      l_paid number;
      l_INTOVD number;
      l_INTPAID number;
      l_FEEINTNMLOVD number;
      l_FEEINTOVDACR number;
      l_INTOVDPRIN number;
      l_feeintpaid number;
      v_strINTPAIDMETHOD varchar2(1);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_DFAutoAdvToPayment');
    plog.debug(pkgctx, 'Begin run');
    /*SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='2648';

    SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    v_pqtty:=0;
    v_totalpaidamt:=0;

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.BUSDATE:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='2648';


    plog.debug(pkgctx, 'Begin loop');
    for rec in
    (
        /*
        SELECT v.*, cf.custodycd, cf.fullname, cf.idcode, cf.ADDRESS , df.orgamt, df.rlsamt+df.dfamt dfpaidamt, df.lrate,
                ROUND(fn_getamt4grpdeal(A.GROUPID,0,5)) sumamt, LEAST (ROUND(fn_getamt4grpdeal(A.GROUPID,0,5)),df.dfblockamt) dfblockamt_least, df.dfblockamt DFBLOCKORG,
            greatest(getavlciwithdraw (v.afacctno, 'N'),0) CIAVLWITHDRAW, ROUND(ROUND(fn_getamt4grpdeal(A.GROUPID,0,5)) - LEAST (ROUND(fn_getamt4grpdeal(A.GROUPID,0,5)),df.dfblockamt)) CIPAID
        FROM v_getgrpdealformular v, afmast af, cfmast cf, dfgroup df
        where af.custid=cf.custid and v.afacctno=af.acctno and v.groupid=df.groupid AND v.VNDSELLDF >0
        */
        select a.* , LEAST (a.sumamt,a.DFBLOCKORG) dfblockamt_least, ROUND(a.sumamt - LEAST (a.sumamt,a.dfblockamt)) CIPAID
            from (
              SELECT v.*, cf.custodycd, cf.fullname, cf.idcode, cf.ADDRESS , df.orgamt, df.rlsamt+df.dfamt dfpaidamt,
                            ROUND(fn_getamt4grpdeal(v.GROUPID,0,5)) sumamt, df.dfblockamt DFBLOCKORG,
                        greatest(getavlciwithdraw (v.afacctno, 'N'),0) CIAVLWITHDRAW
                    FROM v_getgrpdealformular v, afmast af, cfmast cf, dfgroup df, DFTYPE DFT
                    where af.custid=cf.custid and v.afacctno=af.acctno and v.groupid=df.groupid
                          AND DF.ACTYPE = DFT.ACTYPE AND DFT.ISVSD <> 'Y'
                    AND v.VNDSELLDF >0
              ) a
    )
    loop
        -- v_pqtty:=rec.pqtty;
        --plog.debug (pkgctx,'Paid qtty ' || v_pqtty);
        v_totalpaidamt:=0;
        --1.Tra no cho cac phan deal ban ma chua thanh toan het nghia vu tra no
        --sts.Aqtty: Phan da thanh toan nghia vu tra no
        --sts.qtty: Phan ban khop cua deal
        --sts.qtty-sts.aqtty: Phan chung khoan ban ma  chau thuc hien nghia vu tra no.
        --GIAO DICH 2643

        /*
        HaiLT bo doan nay
        cspks_dfproc.pr_DealAutoPayment(l_txmsg,rec.acctno,rec.autoid ,v_pqtty,0,v_paidamt ,p_err_code);
        plog.debug (pkgctx,'v_paidamt ' || v_paidamt);
        */

        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;

       -- update cimast set balance = balance - rec.VNDSELLDF where acctno = rec.afacctno;

       -- SELECT INTPAIDMETHOD into v_strINTPAIDMETHOD FROM LNMAST WHERE ACCTNO IN (SELECT LNACCTNO FROM DFGROUP WHERE GROUPID=rec.GROUPID);

        -- Neu tra lai thu vao ky tra goc cuoi cung thi treo khoan tra no vao` trong DFGROUP roi lam = tay
        if nvl(instr('L', rec.INTPAIDMETHOD),0) >0 and (rec.CURAMT <= (rec.VNDSELLDF + rec.DFBLOCKORG)) and  (rec.VNDSELLDF+ rec.DFBLOCKORG <  rec.sumamt)   then


            --update cimast set balance = balance - rec.VNDSELLDF where acctno = rec.afacctno;

            --INSERT INTO CITRAN (TXNUM,TXDATE,ACCTNO,TXCD,NAMT,CAMT,REF,DELTD,ACCTREF,AUTOID,TLTXCD,BKDATE,TRDESC)
            --VALUES(l_txmsg.txnum,TO_DATE(v_strCURRDATE,'DD/MM/RRRR'),rec.afacctno,'0011',0,NULL,NULL,'N',NULL,rec.VNDSELLDF,'',TO_DATE(v_strCURRDATE,'DD/MM/RRRR'),NULL);

           SELECT  TO_DATE((SELECT VARVALUE FROM SYSVAR WHERE VARNAME='CURRDATE'),'DD/MM/RRRR') - TO_DATE(OVERDUEDATE,'DD/MM/RRRR') into l_DayDue
                         FROM LNSCHD WHERE ACCTNO  = rec.LNACCTNO AND REFTYPE='P';

            -- Neu qua han
            if l_DayDue >= 0 then
                l_amtpaid:= rec.VNDSELLDF + rec.DFBLOCKORG;

                   SELECT least(ovd, l_amtpaid) l_ovd, least(l_amtpaid, greatest(l_amtpaid-ovd,0),NML) l_nml,
                    GREATEST(least(ovd, l_amtpaid), least(l_amtpaid, greatest(l_amtpaid-ovd,0),NML)) l_paid,
                    least(l_amtpaid, greatest(l_amtpaid-ovd - nml,0),INTOVD) l_INTOVD,
                    least(l_amtpaid, greatest(l_amtpaid-ovd - nml - INTOVD,0), INTOVDPRIN) l_INTOVDPRIN,
                    least(l_amtpaid, greatest(l_amtpaid-ovd - nml,0),INTOVD) + least(l_amtpaid, greatest(l_amtpaid-ovd - nml - INTOVD,0), INTOVDPRIN) l_INTPAID,
                    least(l_amtpaid, greatest(l_amtpaid-ovd - nml - INTOVD - INTOVDPRIN,0),FEEINTNMLOVD) l_FEEINTNMLOVD,
                    least(l_amtpaid, greatest(l_amtpaid-ovd - nml - INTOVD - INTOVDPRIN - FEEINTNMLOVD,0),FEEINTOVDACR) l_FEEINTOVDACR,
                    least(l_amtpaid, greatest(l_amtpaid-ovd - nml - INTOVD - INTOVDPRIN,0),FEEINTNMLOVD) + least(l_amtpaid, greatest(l_amtpaid-ovd - nml - INTOVD - INTOVDPRIN - FEEINTNMLOVD,0),FEEINTOVDACR) l_feeintpaid
                INTO l_ovd, l_nml, l_paid, l_INTOVD, l_INTOVDPRIN, l_INTPAID, l_FEEINTNMLOVD, l_FEEINTOVDACR, l_feeintpaid
                FROM lnschd
                where reftype='P' and ACCTNO  = rec.LNACCTNO;


                -- Tao giao dich 2636
                l_txmsg.tltxcd:='2636';
                --03  AFACCTNO        C
                l_txmsg.txfields ('03').defname   := 'AFACCTNO';
                l_txmsg.txfields ('03').TYPE      := 'C';
                l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

                --05  LNACCTNO         C
                l_txmsg.txfields ('05').defname   := 'LNACCTNO';
                l_txmsg.txfields ('05').TYPE      := 'C';
                l_txmsg.txfields ('05').VALUE     := rec.LNACCTNO;

                --10  PRINOVD         S? ti?n g?c qu??n
                l_txmsg.txfields ('10').defname   := 'PRINOVD';
                l_txmsg.txfields ('10').TYPE      := 'N';
                l_txmsg.txfields ('10').VALUE     :=  l_ovd;

                --11  PRINNML         S? ti?n g?c trong h?n
                l_txmsg.txfields ('11').defname   := 'PRINNML';
                l_txmsg.txfields ('11').TYPE      := 'N';
                l_txmsg.txfields ('11').VALUE     :=  l_nml;

                --12  PRINPAID        S? ti?n g?c tr?
                l_txmsg.txfields ('12').defname   := 'PRINPAID';
                l_txmsg.txfields ('12').TYPE      := 'N';
                l_txmsg.txfields ('12').VALUE     :=  l_paid;

                --13  INTNMLOVD       S? ti?n l?qu??n
                l_txmsg.txfields ('13').defname   := 'INTNMLOVD';
                l_txmsg.txfields ('13').TYPE      := 'N';
                l_txmsg.txfields ('13').VALUE     :=  l_INTOVD;

                --18    INTOVDACR
                l_txmsg.txfields ('18').defname   := 'INTOVDACR';
                l_txmsg.txfields ('18').TYPE      := 'N';
                l_txmsg.txfields ('18').VALUE     :=  l_INTOVDPRIN;


                --14  INTPAID         S? ti?n l?tr?
                l_txmsg.txfields ('14').defname   := 'INTPAID';
                l_txmsg.txfields ('14').TYPE      := 'N';
                l_txmsg.txfields ('14').VALUE     :=  l_INTPAID;

                --15  FEEINTNMLOVD    S? ti?n ph?u??n
                l_txmsg.txfields ('15').defname   := 'FEEINTNMLOVD';
                l_txmsg.txfields ('15').TYPE      := 'N';
                l_txmsg.txfields ('15').VALUE     :=  l_FEEINTNMLOVD;

                --19    l_FEEINTOVDACR
                l_txmsg.txfields ('19').defname   := 'FEEINTOVDACR';
                l_txmsg.txfields ('19').TYPE      := 'N';
                l_txmsg.txfields ('19').VALUE     :=  l_FEEINTOVDACR;

                --16  FEEINTPAID      S? ti?n ph?r?
                l_txmsg.txfields ('16').defname   := 'FEEINTPAID';
                l_txmsg.txfields ('16').TYPE      := 'N';
                l_txmsg.txfields ('16').VALUE     :=  l_feeintpaid;

                SELECT TXDESC into v_strDesc FROM  TLTX WHERE TLTXCD='2636';

                --30  DESC            Di?n gi?i
                l_txmsg.txfields ('30').defname   := 'DESC';
                l_txmsg.txfields ('30').TYPE      := 'C';
                l_txmsg.txfields ('30').VALUE     := v_strDesc;

                BEGIN
                    IF txpks_#2636.fn_batchtxprocess (l_txmsg,
                                                     p_err_code,
                                                     l_err_param
                       ) <> systemnums.c_success
                    THEN
                       plog.error (pkgctx,
                                   'got error 2636: ' || p_err_code
                       );
                       ROLLBACK;
                       RETURN;
                    END IF;
                END;


                update lnschd set ovd= ovd - least(ovd, l_amtpaid), nml=nml-least(l_amtpaid, greatest(l_amtpaid-ovd,0),NML),
                    paid=paid+ GREATEST(least(ovd, l_amtpaid), least(l_amtpaid, greatest(l_amtpaid-ovd,0),NML)),
                    INTOVD = INTOVD - least(l_amtpaid, greatest(l_amtpaid-ovd - nml,0),INTOVD),
                    INTPAID=INTPAID + least(l_amtpaid, greatest(l_amtpaid-ovd - nml,0),INTOVD),
                    FEEINTNMLOVD = FEEINTNMLOVD - least(l_amtpaid, greatest(l_amtpaid-ovd - nml - INTOVD,0),FEEINTNMLOVD),
                    feeintpaid =  feeintpaid + least(l_amtpaid, greatest(l_amtpaid-ovd - nml - INTOVD,0),FEEINTNMLOVD)
                where reftype='P' and ACCTNO  = rec.LNACCTNO;

                INSERT INTO LNSCHDLOG (AUTOID, TXNUM, TXDATE, OVD, NML, PAID,INTOVD,INTPAID,FEEINTOVD,feeintpaid)
                    SELECT AUTOID, l_txmsg.txnum, TO_DATE(l_txmsg.txdate,'DD/MM/RRRR'), -l_ovd, -l_nml, l_paid, -l_INTOVD, l_INTPAID, -l_FEEINTNMLOVD, l_feeintpaid
                        from lnschd
                    where reftype='P' and ACCTNO  = rec.LNACCTNO;


            else

               -- UPDATE DFGROUP SET DFBLOCKAMT = DFBLOCKAMT + rec.VNDSELLDF WHERE GROUPID = rec.GROUPID;
               -- INSERT INTO DFTRAN(TXNUM,TXDATE,ACCTNO,TXCD,NAMT,CAMT,ACCTREF,DELTD,R,AUTOID,TLTXCD,BKDATE,TRDESC)
               --     VALUES (l_txmsg.txnum, TO_DATE (v_strCURRDATE, 'DD/MM/RRRR'),rec.GROUPID,'0080',rec.VNDSELLDF,EFNULL,'','N','',seq_DFTRAN.NEXTVAL,l_txmsg.tltxcd,TO_DATE(v_strCURRDATE,'DD/MM/RRRR'),'');

               -- Tao giao dich 2635
               l_txmsg.tltxcd:='2635';
                --03  AFACCTNO        C
                l_txmsg.txfields ('03').defname   := 'AFACCTNO';
                l_txmsg.txfields ('03').TYPE      := 'C';
                l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

                --20  GROUPID         C
                l_txmsg.txfields ('20').defname   := 'GROUPID';
                l_txmsg.txfields ('20').TYPE      := 'C';
                l_txmsg.txfields ('20').VALUE     := rec.GROUPID;

                --34  DFBLOCKAMT      N
                l_txmsg.txfields ('34').defname   := 'DFBLOCKAMT';
                l_txmsg.txfields ('34').TYPE      := 'N';
                l_txmsg.txfields ('34').VALUE     :=  rec.VNDSELLDF;

                SELECT TXDESC into v_strDesc FROM  TLTX WHERE TLTXCD='2635';

                --30  DESCRIPTION C
                l_txmsg.txfields ('30').defname   := 'DESCRIPTION';
                l_txmsg.txfields ('30').TYPE      := 'C';
                l_txmsg.txfields ('30').VALUE     := v_strDesc;

                BEGIN
                    IF txpks_#2635.fn_batchtxprocess (l_txmsg,
                                                     p_err_code,
                                                     l_err_param
                       ) <> systemnums.c_success
                    THEN
                       plog.error (pkgctx,
                                   'got error 2635: ' || p_err_code
                       );
                       ROLLBACK;
                       RETURN;
                    END IF;
                END;


            end if;

        ELSE

            l_txmsg.tltxcd:='2648';
            --02  CUSTODYCD       C
            l_txmsg.txfields ('02').defname   := 'CUSTODYCD';
            l_txmsg.txfields ('02').TYPE      := 'C';
            l_txmsg.txfields ('02').VALUE     := rec.CUSTODYCD;

            --03  AFACCTNO        C
            l_txmsg.txfields ('03').defname   := 'AFACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

            --57  CUSTNAME        C
            l_txmsg.txfields ('57').defname   := 'CUSTNAME';
            l_txmsg.txfields ('57').TYPE      := 'C';
            l_txmsg.txfields ('57').VALUE     := rec.fullname;

            --58  ADDRESS         C
            l_txmsg.txfields ('58').defname   := 'ADDRESS';
            l_txmsg.txfields ('58').TYPE      := 'C';
            l_txmsg.txfields ('58').VALUE     := rec.ADDRESS;

            --59  LICENSE         C
            l_txmsg.txfields ('59').defname   := 'LICENSE';
            l_txmsg.txfields ('59').TYPE      := 'C';
            l_txmsg.txfields ('59').VALUE     := rec.idcode;

            --05  GROUPID         C
            l_txmsg.txfields ('05').defname   := 'GROUPID';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.GROUPID;

            --06  ORGAMT          N
            l_txmsg.txfields ('06').defname   := 'ORGAMT';
            l_txmsg.txfields ('06').TYPE      := 'N';
            l_txmsg.txfields ('06').VALUE     := rec.ORGAMT;

            --07  DFPAIDAMT       N
            l_txmsg.txfields ('07').defname   := 'DFPAIDAMT';
            l_txmsg.txfields ('07').TYPE      := 'N';
            l_txmsg.txfields ('07').VALUE     := rec.DFPAIDAMT;

            --08  CURAMT          N
            l_txmsg.txfields ('08').defname   := 'CURAMT';
            l_txmsg.txfields ('08').TYPE      := 'N';
            l_txmsg.txfields ('08').VALUE     := round(rec.CURAMT);

            --09  CURINT          N
            l_txmsg.txfields ('09').defname   := 'CURINT';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := round(rec.CURINT);

            --20  INTMIN          N
            l_txmsg.txfields ('20').defname   := 'INTMIN';
            l_txmsg.txfields ('20').TYPE      := 'N';
            l_txmsg.txfields ('20').VALUE     := round(rec.INTMIN);

            --10  CURFEE          N
            l_txmsg.txfields ('10').defname   := 'CURFEE';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := round(rec.CURFEE);

            --21  FEEMIN          N
            l_txmsg.txfields ('21').defname   := 'FEEMIN';
            l_txmsg.txfields ('21').TYPE      := 'N';
            l_txmsg.txfields ('21').VALUE     := round(rec.FEEMIN);

            --12  TADF            N
            l_txmsg.txfields ('12').defname   := 'TADF';
            l_txmsg.txfields ('12').TYPE      := 'N';
            l_txmsg.txfields ('12').VALUE     := rec.TADF;

            --13  IRATE           N
            l_txmsg.txfields ('13').defname   := 'IRATE';
            l_txmsg.txfields ('13').TYPE      := 'N';
            l_txmsg.txfields ('13').VALUE     := rec.IRATE;

            --14  MRATE           N
            l_txmsg.txfields ('14').defname   := 'MRATE';
            l_txmsg.txfields ('14').TYPE      := 'N';
            l_txmsg.txfields ('14').VALUE     := rec.MRATE;

            --15  LRATE           N
            l_txmsg.txfields ('15').defname   := 'LRATE';
            l_txmsg.txfields ('15').TYPE      := 'N';
            l_txmsg.txfields ('15').VALUE     := rec.LRATE;

            --22  SUMAMT          N
            l_txmsg.txfields ('22').defname   := 'SUMAMT';
            l_txmsg.txfields ('22').TYPE      := 'N';
            l_txmsg.txfields ('22').VALUE     := rec.SUMAMT;

            --16  RTTDF           N
            l_txmsg.txfields ('16').defname   := 'RTTDF';
            l_txmsg.txfields ('16').TYPE      := 'N';
            l_txmsg.txfields ('16').VALUE     := rec.RTTDF;

            --23  DFBLOCKORG      N
            l_txmsg.txfields ('23').defname   := 'DFBLOCKORG';
            l_txmsg.txfields ('23').TYPE      := 'N';
            l_txmsg.txfields ('23').VALUE     := rec.DFBLOCKORG;

            --17  DFBLOCKAMT      N
            l_txmsg.txfields ('17').defname   := 'DFBLOCKAMT';
            l_txmsg.txfields ('17').TYPE      := 'N';
            l_txmsg.txfields ('17').VALUE     := rec.dfblockamt_least;

            --18  CIAVLWITHDRAW   N
            l_txmsg.txfields ('18').defname   := 'CIAVLWITHDRAW';
            l_txmsg.txfields ('18').TYPE      := 'N';
            l_txmsg.txfields ('18').VALUE     := rec.CIAVLWITHDRAW;

            --19  CIPAID      N
            l_txmsg.txfields ('19').defname   := 'CIPAID';
            l_txmsg.txfields ('19').TYPE      := 'N';
            l_txmsg.txfields ('19').VALUE     :=  least(rec.SUMAMT - rec.DFBLOCKAMT, rec.VNDSELLDF);

            --- 25  2648    DEFAMT
            l_txmsg.txfields ('25').defname   := 'DEFAMT';
            l_txmsg.txfields ('25').TYPE      := 'N';
            l_txmsg.txfields ('25').VALUE     := rec.SUMAMT - rec.DFBLOCKAMT;

            --- 26  2648    SUMPAID S? ti?n n?p
            l_txmsg.txfields ('26').defname   := 'SUMPAID';
            l_txmsg.txfields ('26').TYPE      := 'N';
            l_txmsg.txfields ('26').VALUE     := least(rec.DFBLOCKAMT + rec.VNDSELLDF, rec.SUMAMT) ;

            --- 34  2648    AMTPAID Tr? g?c
            l_txmsg.txfields ('34').defname   := 'AMTPAID';
            l_txmsg.txfields ('34').TYPE      := 'N';
            l_txmsg.txfields ('34').VALUE     := round(fn_getamt4grpdeal(rec.GROUPID,least(rec.DFBLOCKAMT + rec.VNDSELLDF, rec.SUMAMT),0));

            --- 35  2648    INTPAID Tr? l?
            l_txmsg.txfields ('35').defname   := 'INTPAID';
            l_txmsg.txfields ('35').TYPE      := 'N';
            l_txmsg.txfields ('35').VALUE     := round(fn_getamt4grpdeal(rec.GROUPID,least(rec.DFBLOCKAMT + rec.VNDSELLDF, rec.SUMAMT),1));

            --- 36  2648    FEEPAID Tr? ph?
            l_txmsg.txfields ('36').defname   := 'FEEPAID';
            l_txmsg.txfields ('36').TYPE      := 'N';
            l_txmsg.txfields ('36').VALUE     := round(fn_getamt4grpdeal(rec.GROUPID,least(rec.DFBLOCKAMT + rec.VNDSELLDF, rec.SUMAMT),2));

            SELECT TXDESC into v_strDesc FROM  TLTX WHERE TLTXCD='2648';

            --30  DESCRIPTION C
            l_txmsg.txfields ('30').defname   := 'DESCRIPTION';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE     := v_strDesc;


            BEGIN
                IF txpks_#2648.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 2648: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;


        END IF;


     /*   if rec.VNDSELLDF > 0  then

            cspks_ciproc.pr_DFAutoAdvance(rec.GROUPID,rec.VNDSELLDF,p_err_code);

        end if;
*/
        --Nhom UTTB vao thanh 1  giao dich nen khong thuc hien UTTB theo tung deal de tra nua.
        /*v_totalpaidamt:=v_totalpaidamt+v_paidamt;
        --2.Ung truoc tien ban bu cho cac deal
        --Phan tien se lay o phan ung truoc. Va ung toi da bang kha nang ung cua lenh ban
        --Neu ung het cua lenh ban ma khong du tra cho deal thi se khau tru tu CI.Balance
        --GIAO DICH 1143
        if v_totalpaidamt>0 then
            plog.debug (pkgctx,'v_totalpaidamt ' || v_totalpaidamt);
            cspks_ciproc.pr_CIAutoAdvance(l_txmsg,rec.orderid,v_totalpaidamt,v_advamt,p_err_code);
            plog.debug (pkgctx,'advance amount ' || v_advamt);
        end if;*/
    end loop;

 --- cap nhap giam DFQTTY trong DFMAST doi voi cac lenh ban cam co
    l_txmsg.tltxcd:='2684';

    SELECT TXDESC into v_strDesc FROM  TLTX WHERE TLTXCD='2684';

    --for rec1 in ( SELECT * FROM ODMAPEXT WHERE DELTD<>'Y' AND STATUS <> 'Y' AND EXECQTTY>0 AND REFID in (SELECT ACCTNO FROM DFMAST WHERE GROUPID = rec.GROUPID)  )
    for rec1 in ( SELECT * FROM ODMAPEXT WHERE DELTD<>'Y' AND EXECQTTY>0 AND TYPE = 'D' )
    loop

        SELECT systemnums.C_BATCH_PREFIXED
                     || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
              INTO l_txmsg.txnum
              FROM DUAL;

        SELECT AFACCTNO, GROUPID, CODEID INTO v_strAFACCTNOTmp, v_strGROUPIDTmp, v_strCODEIDTmp from dfmast where acctno = rec1.REFID;

        --20  GROUPID     C
        l_txmsg.txfields ('20').defname   := 'GROUPID';
        l_txmsg.txfields ('20').TYPE      := 'C';
        l_txmsg.txfields ('20').VALUE     := v_strGROUPIDTmp;

        --05  ACCTNO      C
        l_txmsg.txfields ('05').defname   := 'ACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec1.REFID;

        --08  ACCTNO      C
        l_txmsg.txfields ('08').defname   := 'ACCTNO';
        l_txmsg.txfields ('08').TYPE      := 'C';
        l_txmsg.txfields ('08').VALUE     := rec1.ORDERID;

        --03  AFACCTNO    C
        l_txmsg.txfields ('03').defname   := 'AFACCTNO';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := v_strAFACCTNOTmp;

        --01  CODEID      C
        l_txmsg.txfields ('01').defname   := 'CODEID';
        l_txmsg.txfields ('01').TYPE      := 'C';
        l_txmsg.txfields ('01').VALUE     := v_strCODEIDTmp;

        --75  QTTY        N
        l_txmsg.txfields ('75').defname   := 'CODEID';
        l_txmsg.txfields ('75').TYPE      := 'N';
        l_txmsg.txfields ('75').VALUE     := rec1.EXECQTTY;

        --55  DEALTYPE    C
        l_txmsg.txfields ('55').defname   := 'CODEID';
        l_txmsg.txfields ('55').TYPE      := 'C';
        l_txmsg.txfields ('55').VALUE     := 'N';

        --30  DESC        C
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE     := v_strDesc;

        BEGIN
            IF txpks_#2684.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 2684: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;

    /*
        UPDATE DFMAST SET DFQTTY = DFQTTY - rec1.EXECQTTY, RLSQTTY = RLSQTTY + rec1.EXECQTTY WHERE ACCTNO = rec1.REFID;

        update securities_info
        set syroomused = nvl(syroomused,0) - rec1.EXECQTTY
        where codeid = (select codeid from odmast where orderid = rec1.ORDERID);

        SELECT AFACCTNO, GROUPID INTO v_strAFACCTNOTmp, v_strGROUPIDTmp from dfmast where acctno = rec1.REFID;

        INSERT INTO DFTRAN(TXNUM,TXDATE,ACCTNO,TXCD,NAMT,CAMT,ACCTREF,DELTD,REF,AUTOID,TLTXCD,BKDATE,TRDESC)
        VALUES (l_txmsg.txnum, TO_DATE (l_txmsg.txdate, systemnums.C_DATE_FORMAT),v_strGROUPIDTmp,'0011',rec1.EXECQTTY,NULL,v_strAFACCTNOTmp,l_txmsg.deltd,v_strAFACCTNOTmp,seq_DFTRAN.NEXTVAL,l_txmsg.tltxcd,l_txmsg.busdate,'' || '' || '');

        INSERT INTO DFTRAN(TXNUM,TXDATE,ACCTNO,TXCD,NAMT,CAMT,ACCTREF,DELTD,REF,AUTOID,TLTXCD,BKDATE,TRDESC)
        VALUES (l_txmsg.txnum, TO_DATE (l_txmsg.txdate, systemnums.C_DATE_FORMAT),v_strGROUPIDTmp,'0016',rec1.EXECQTTY,NULL,v_strAFACCTNOTmp,l_txmsg.deltd,v_strAFACCTNOTmp,seq_DFTRAN.NEXTVAL,l_txmsg.tltxcd,l_txmsg.busdate,'' || '' || '');

        UPDATE ODMAPEXT SET STATUS = 'Y', DELTD = 'Y' WHERE  DELTD<>'Y' AND EXECQTTY= rec1.EXECQTTY AND ORDERID = rec1.ORDERID AND REFID = rec1.REFID;
*/
    end loop;


   -- Giai toa chung khoan neu tra het no
    l_txmsg.tltxcd:='2649';

    for rec2649 in (SELECT a.acctno, a.afacctno, a.lnacctno, a.txdate, a.txnum, a.txtime,
                          a.actype, a.rrtype, a.dftype, a.custbank, a.lntype, a.fee,
                          a.feemin, a.tax, a.amtmin, a.codeid, a.refprice, a.dfprice,
                          a.triggerprice, a.dfrate, a.irate, a.mrate, a.lrate, a.calltype,
                          a.dfqtty , a.rcvqtty, a.blockqtty, a.carcvqtty, a.bqtty,
                          a.rlsqtty, a.dfamt, a.rlsamt, a.amt, a.intamtacr, a.feeamt,
                          a.rlsfeeamt, a.status, a.dfref, a.description, a.pstatus,
                          a.ciacctno, a.last_change, a.limitchk, a.flagtrigger, a.orgamt,
                          a.autopaid, a.triggerdate, a.tlid, a.cisvrfee, a.groupid,
                          a.dealtype, a.grpordamt, a.cacashqtty, a.caqtty, ROUND(fn_getamt4grpdeal(a.GROUPID,0,5)) sumamt
                    FROM DFMAST a, DFTYPE B WHERE
                        A.ACTYPE = B.ACTYPE AND B.ISVSD='N'
                        AND ROUND(fn_getamt4grpdeal(a.GROUPID,0,5)) = 0   )
    loop
     SELECT systemnums.C_BATCH_PREFIXED
         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
          INTO l_txmsg.txnum
          FROM DUAL;

        plog.debug (pkgctx,'2649 ' || rec2649.GROUPID);
        --20  GROUPID     C
        l_txmsg.txfields ('20').defname   := 'GROUPID';
        l_txmsg.txfields ('20').TYPE      := 'C';
        l_txmsg.txfields ('20').VALUE     := rec2649.GROUPID;

        --25  DFACCTNO    C
        l_txmsg.txfields ('25').defname   := 'DFACCTNO';
        l_txmsg.txfields ('25').TYPE      := 'C';
        l_txmsg.txfields ('25').VALUE     := rec2649.ACCTNO;

        --05  ACCTNO      C
        l_txmsg.txfields ('05').defname   := 'DFACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec2649.AFACCTNO || rec2649.CODEID;

        --88  CUSTODYCD   C
        l_txmsg.txfields ('88').defname   := 'CUSTODYCD';
        l_txmsg.txfields ('88').TYPE      := 'C';
        l_txmsg.txfields ('88').VALUE     := '';

        --03  AFACCTNO    C
        l_txmsg.txfields ('03').defname   := 'AFACCTNO';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec2649.AFACCTNO;

        --01  CODEID      C
        l_txmsg.txfields ('01').defname   := 'CODEID';
        l_txmsg.txfields ('01').TYPE      := 'C';
        l_txmsg.txfields ('01').VALUE     := rec2649.CODEID;

        --41  DFQTTY      N
        l_txmsg.txfields ('41').defname   := 'DFQTTY';
        l_txmsg.txfields ('41').TYPE      := 'N';
        l_txmsg.txfields ('41').VALUE     := rec2649.DFQTTY;

        --45  CACASHQTTY  N
        l_txmsg.txfields ('45').defname   := 'CACASHQTTY';
        l_txmsg.txfields ('45').TYPE      := 'N';
        l_txmsg.txfields ('45').VALUE     := rec2649.CACASHQTTY;

        --44  BLOCKQTTY   N
        l_txmsg.txfields ('44').defname   := 'BLOCKQTTY';
        l_txmsg.txfields ('44').TYPE      := 'N';
        l_txmsg.txfields ('44').VALUE     := rec2649.BLOCKQTTY;

        --42  RCVQTTY     N
        l_txmsg.txfields ('42').defname   := 'RCVQTTY';
        l_txmsg.txfields ('42').TYPE      := 'N';
        l_txmsg.txfields ('42').VALUE     := rec2649.RCVQTTY;

        --43  CARCVQTTY   N
        l_txmsg.txfields ('43').defname   := 'CARCVQTTY';
        l_txmsg.txfields ('43').TYPE      := 'N';
        l_txmsg.txfields ('43').VALUE     := rec2649.CARCVQTTY;

        --55  DEALTYPE    C
        l_txmsg.txfields ('55').defname   := 'DEALTYPE';
        l_txmsg.txfields ('55').TYPE      := 'C';
        l_txmsg.txfields ('55').VALUE     := rec2649.DEALTYPE;

        --99  LIMITCHECK  C
        l_txmsg.txfields ('99').defname   := 'LIMITCHECK';
        l_txmsg.txfields ('99').TYPE      := 'C';
        l_txmsg.txfields ('99').VALUE     := '';

        SELECT TXDESC into v_strDesc FROM  TLTX WHERE TLTXCD='2649';

        --30  DESC        C
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE     := v_strDesc;

        BEGIN
            IF txpks_#2649.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 2649: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;

    end loop;

/*
    -- Chuyen tien vao DFBLOCKAMT doi voi truong hop cam co VSD
    l_txmsg.tltxcd:='2635';
    for recVSD in ( SELECT C.GROUPID, A.AFACCTNO,
                          FLOOR(SUM(GREATEST(ROUND(A.AMT/A.QTTY*B.QTTY *(100-A.DEFFEERATE-A.SECDUTY)/100),0))  * (1-FEERATE*DAYS/100/360))  maxdepoamt
                     FROM (

                       SELECT  1 ISMORTAGE,STSCHD.AFACCTNO,AMT,QTTY,CFMAST.FULLNAME,CFMAST.ADDRESS,CFMAST.idcode LICENSE,FAMT,
                                 CUSTODYCD,STSCHD.SYMBOL,AAMT,ORGORDERID,PAIDAMT,PAIDFEEAMT,
                                 --SYSVAR1.VARVALUE FEERATE,
                                 ADT.ADVRATE FEERATE,
                                 SYSVAR2.VARVALUE MINBAL,STSCHD.TXDATE,
                                STSCHD.CLEARDATE,STSCHD.SECDUTY,ODTYPE.DEFFEERATE,
                             (CASE WHEN CLEARDATE -(CASE WHEN LENGTH(SYSVAR.VARVALUE)=10 THEN TO_DATE(SYSVAR.VARVALUE,'DD/MM/YYYY') ELSE CLEARDATE END)=0 THEN 1 ELSE   CLEARDATE -(CASE WHEN LENGTH(SYSVAR.VARVALUE)=10 THEN TO_DATE(SYSVAR.VARVALUE,'DD/MM/YYYY') ELSE CLEARDATE END)END) DAYS

                         FROM
                         (SELECT STS.ORGORDERID,STS.TXDATE,STS.AFACCTNO, STS.CODEID CODEID,
                                 STS.CLEARDAY ,STS.CLEARCD,STS.AMT ,
                                 STS.QTTY,STS.FAMT,STS.AAMT,STS.PAIDAMT,
                                 STS.PAIDFEEAMT ,MST.actype ,MST.EXECTYPE ,
                                 AF.custid ,sts.CLEARDATE ,SEC.SYMBOL,
                                (CASE WHEN TYP.VAT='Y' THEN TO_NUMBER(SYS.VARVALUE) ELSE 0 END) SECDUTY
                             FROM STSCHD STS,ODMAST MST,AFMAST AF,SBSECURITIES SEC, AFTYPE TYP, SYSVAR SYS
                             WHERE STS.codeid=SEC.codeid AND STS.orgorderid=MST.orderid and mst.afacctno=af.acctno
                             AND STS.DELTD <> 'Y' AND STS.STATUS='N' AND STS.DUETYPE='RM'
                                 AND AF.ACTYPE=TYP.ACTYPE AND SYS.VARNAME='ADVSELLDUTY' AND SYS.GRNAME='SYSTEM'
                          ) STSCHD,SYSVAR,SYSVAR SYSVAR1,SYSVAR SYSVAR2,ODTYPE,CFMAST, AFMAST AFM, AFTYPE AFT, ADTYPE ADT
                         WHERE AMT>0
                         AND STSCHD.AFACCTNO=AFM.ACCTNO AND AFM.ACTYPE=AFT.ACTYPE AND AFT.ADTYPE=ADT.ACTYPE
                         AND SYSVAR.VARNAME='CURRDATE' AND SYSVAR.GRNAME='SYSTEM'
                         AND SYSVAR1.VARNAME='AINTRATE' AND SYSVAR1.GRNAME='SYSTEM'
                         AND SYSVAR2.VARNAME='AMINBAL' AND SYSVAR2.GRNAME='SYSTEM'
                         AND STSCHD.CUSTID=CFMAST.CUSTID
                         AND STSCHD.ACTYPE=ODTYPE.ACTYPE
                         AND STSCHD.txdate=to_date((SELECT VARVALUE FROM SYSVAR WHERE VARNAME='CURRDATE'),'DD/MM/YYYY')

                     ) A ,
                     (SELECT ORDERID, REFID, EXECQTTY QTTY FROM odmapext WHERE DELTD<>'Y' AND STATUS <> 'Y' AND EXECQTTY>0) B,
                     DFMAST C, DFGROUP DF, DFTYPE DFT

                     WHERE A.DAYS>0 AND GREATEST(ROUND(A.AMT*(100-A.DEFFEERATE-A.SECDUTY)/100 - FAMT),0) >0
                         AND B.ORDERID=A.ORGORDERID AND B.REFID=C.ACCTNO AND C.GROUPID=DF.GROUPID AND DF.ACTYPE=DFT.ACTYPE AND DFT.ISVSD = 'Y'
                     GROUP BY C.GROUPID, A.AFACCTNO,(1-FEERATE*DAYS/100/360)
                 )
    loop
        SELECT systemnums.C_BATCH_PREFIXED
             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
              INTO l_txmsg.txnum
              FROM DUAL;
        --03  AFACCTNO        C
        l_txmsg.txfields ('03').defname   := 'AFACCTNO';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := recVSD.AFACCTNO;

        --20  GROUPID         C
        l_txmsg.txfields ('20').defname   := 'GROUPID';
        l_txmsg.txfields ('20').TYPE      := 'C';
        l_txmsg.txfields ('20').VALUE     := recVSD.GROUPID;

        --34  DFBLOCKAMT      N
        l_txmsg.txfields ('34').defname   := 'DFBLOCKAMT';
        l_txmsg.txfields ('34').TYPE      := 'N';
        l_txmsg.txfields ('34').VALUE     :=  recVSD.maxdepoamt;

        SELECT TXDESC into v_strDesc FROM  TLTX WHERE TLTXCD='2635';

        --30  DESCRIPTION C
        l_txmsg.txfields ('30').defname   := 'DESCRIPTION';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE     := v_strDesc;

        BEGIN
            IF txpks_#2635.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 2635: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;


    -- Phong toa cam co VSD
    l_txmsg.tltxcd:='2620';
    FOR recVSD IN
        (
          SELECT DISTINCT DFG.GROUPID,  CF.CUSTODYCD, DFG.AFACCTNO, CF.FULLNAME, CF.ADDRESS, CF.IDCODE
          FROM DFGROUP DFG, DFTYPE DFT, CFMAST CF, AFMAST AF
          WHERE DFG.ACTYPE = DFT.ACTYPE AND DFT.ISVSD='Y'
              AND DFG.AFACCTNO = AF.ACCTNO AND AF.CUSTID = CF.CUSTID
              AND DFG.ISVSD='N'
        )
    LOOP
        SELECT systemnums.C_BATCH_PREFIXED
             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
              INTO l_txmsg.txnum
              FROM DUAL;

        --05  GROUPID         C
        l_txmsg.txfields ('05').defname   := 'GROUPID';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := recVSD.GROUPID;

        --02  CUSTODYCD        C
        l_txmsg.txfields ('02').defname   := 'CUSTODYCD';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := recVSD.CUSTODYCD;

        --03  AFACCTNO        C
        l_txmsg.txfields ('03').defname   := 'AFACCTNO';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := recVSD.AFACCTNO;

        --57  CUSTNAME        C
        l_txmsg.txfields ('57').defname   := 'CUSTNAME';
        l_txmsg.txfields ('57').TYPE      := 'C';
        l_txmsg.txfields ('57').VALUE     := recVSD.FULLNAME;

        --58  ADDRESS        C
        l_txmsg.txfields ('58').defname   := 'ADDRESS';
        l_txmsg.txfields ('58').TYPE      := 'C';
        l_txmsg.txfields ('58').VALUE     := recVSD.ADDRESS;

        --59  LICENSE        C
        l_txmsg.txfields ('59').defname   := 'LICENSE';
        l_txmsg.txfields ('59').TYPE      := 'C';
        l_txmsg.txfields ('59').VALUE     := recVSD.IDCODE;

        SELECT TXDESC into v_strDesc FROM  TLTX WHERE TLTXCD='2620';

        --30  DESCRIPTION C
        l_txmsg.txfields ('30').defname   := 'DESCRIPTION';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE     := v_strDesc;

        BEGIN
            IF txpks_#2620.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 2620: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    END LOOP;
*/

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_DFAutoAdvToPayment');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on pr_DFAutoAdvToPayment');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.debug(pkgctx,'pr_DFAutoAdvToPayment: ' || dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_DFAutoAdvToPayment');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_DFAutoAdvToPayment;

---------------------------------pr_DFDealTransferSec------------------------------------------------
  PROCEDURE pr_DFDealTransferSec(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_DFDealTransferSec');
    p_lastRun:='Y';


    /*SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='2662';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='2662';
    for rec in
    (
        SELECT MST.AUTOID, LEAST(MST.QTTY-MST.AQTTY,DF.DFQTTY) RCVQTTY,DF.ACCTNO, MST.AFACCTNO, MST.CODEID
            FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST,
            SBSECURITIES SEC,ODMAST OD, DFMAST DF
            WHERE MST.CODEID=SEC.CODEID AND MST.ORGORDERID=OD.ORDERID
            AND MST.DUETYPE='SS' AND MST.STATUS='C' AND MST.DELTD<>'Y' AND OD.DFACCTNO = DF.ACCTNO
            AND OD.EXECTYPE='MS' AND OD.DELTD <> 'Y' AND MST.QTTY-MST.AQTTY>0
            ORDER BY ORGORDERID, DUETYPE
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai

        --Set cac field giao dich
        --01   AUTOID       N
        l_txmsg.txfields ('01').defname   := 'AUTOID';
        l_txmsg.txfields ('01').TYPE      := 'N';
        l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

        --02    ACCTNO      C
        l_txmsg.txfields ('02').defname   := 'ACCTNO';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.ACCTNO;

        --05   C   AFACCTNO
        l_txmsg.txfields ('05').defname   := 'AFACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;
        --06   C   SEACCTNO
        l_txmsg.txfields ('06').defname   := 'SEACCTNO';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.AFACCTNO || rec.CODEID;

        --10   RCVQTTY         N
        l_txmsg.txfields ('10').defname   := 'RCVQTTY';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.RCVQTTY;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := v_strDesc;

        BEGIN
            IF txpks_#2662.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 2662: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;*/
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_DFDealTransferSec');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on pr_DFDealTransferSec');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_DFDealTransferSec');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_DFDealTransferSec;

---------------------------------pr_ODSettlementReceiveSec------------------------------------------------
  PROCEDURE pr_ODSettlementReceiveSec(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      v_COMPANYCD VARCHAR2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ODSettlementReceiveSec');

    v_COMPANYCD:=cspks_system.fn_get_sysvar ('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8868';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8868';
    for rec in
    (
        SELECT SUBSTR(MAX(CUSTODYCD),4,1) CUSTODYCD,MAX(COSTPRICE) COSTPRICE ,CLR2.SBDATE, TO_DATE( v_strCURRDATE,systemnums.c_date_format) CURRDATE,
            SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 0 ELSE 1 END) WITHHOLIDAY,
            SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 1 ELSE 1 END) WITHOUTHOLIDAY,
            MST.AUTOID, MST.AFACCTNO,MAX(ODMST.ORDERQTTY) ORGORDERQTTY,MAX(ODMST.EXECTYPE) EXECTYPE,MAX(ODMST.QUOTEPRICE) ORGQUOTEPRICE, MST.ACCTNO, MIN(MST.DUETYPE) DUETYPE, MIN(MST.TXDATE) TXDATE, MIN(MST.ORGORDERID) ORGORDERID, MIN(MST.CLEARCD) CLEARCD, MIN(MST.CLEARDAY) CLEARDAY,
            MIN(SEC.CODEID) CODEID, MIN(SEC.SYMBOL) SYMBOL, MIN(SEC.PARVALUE) PARVALUE, MIN(TYP.VATRATE) VATRATE, MIN(ODMST.FEEACR-ODMST.FEEAMT) AVLFEEAMT, MIN(ODMST.FEEACR) FEEACR,
            MIN(MST.AMT) AMT, MIN(MST.AAMT) AAMT, MIN(MST.FAMT) FAMT, MIN(MST.QTTY) QTTY,MIN(ODMST.EXECQTTY) SQTTY , MIN(MST.AQTTY) AQTTY, ROUND(MIN(MST.AMT/MST.QTTY),4) MATCHPRICE
            FROM SBCLDR CLR1, SBCLDR CLR2, (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST, ODMAST ODMST,AFMAST AF,CFMAST CF, ODTYPE TYP, SBSECURITIES SEC
            WHERE ODMST.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND  CLR1.SBDATE>=MST.TXDATE AND CLR1.SBDATE<CLR2.SBDATE AND CLR2.SBDATE>=MST.TXDATE
            AND CLR1.CLDRTYPE=SEC.TRADEPLACE AND CLR2.CLDRTYPE=SEC.TRADEPLACE
            AND ODMST.ACTYPE=TYP.ACTYPE AND MST.ORGORDERID=ODMST.ORDERID AND MST.CODEID=SEC.CODEID AND SEC.TRADEPLACE <> '003'
            AND CLR2.SBDATE=TO_DATE( v_strCURRDATE,systemnums.c_date_format) AND MST.STATUS='N' AND MST.DELTD<>'Y'
            AND (MST.DUETYPE='RS' )
            AND  CF.CUSTATCOM ='Y'
            AND SEC.SECTYPE NOT IN ('003','006')
            GROUP BY MST.AUTOID, CLR2.SBDATE, MST.AFACCTNO, MST.ACCTNO
            HAVING MIN(MST.CLEARDAY)<=
            (CASE WHEN MIN(MST.CLEARCD)='B' THEN SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 0 ELSE 1 END) ELSE SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 1 ELSE 1 END) END)
            ORDER BY ORGORDERID
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
        IF rec.custodycd='F' then
            v_blnVietnamese:= false;
        else
            v_blnVietnamese:= true;
        end if;

        --Set cac field giao dich
        --01   N   AUTOID
        l_txmsg.txfields ('01').defname   := 'AUTOID';
        l_txmsg.txfields ('01').TYPE      := 'N';
        l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

        --03   C   ORGORDERID
        l_txmsg.txfields ('03').defname   := 'ORGORDERID';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ORGORDERID;
        --04   C   AFACCTNO
        l_txmsg.txfields ('04').defname   := 'AFACCTNO';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.AFACCTNO;
        --05   C   CIACCTNO
        l_txmsg.txfields ('05').defname   := 'CIACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;
        --06   C   SEACCTNO
        l_txmsg.txfields ('06').defname   := 'SEACCTNO';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.ACCTNO;
        --07   C   SYMBOL
        l_txmsg.txfields ('07').defname   := 'SYMBOL';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.SYMBOL;
        --17   C   CODEID
        l_txmsg.txfields ('17').defname   := 'CODEID';
        l_txmsg.txfields ('17').TYPE      := 'C';
        l_txmsg.txfields ('17').VALUE     := rec.CODEID;
        --08   N   AMT
        l_txmsg.txfields ('08').defname   := 'AMT';
        l_txmsg.txfields ('08').TYPE      := 'N';
        l_txmsg.txfields ('08').VALUE     := round(rec.AMT,0);
        --09   N   QTTY
        l_txmsg.txfields ('09').defname   := 'QTTY';
        l_txmsg.txfields ('09').TYPE      := 'N';
        l_txmsg.txfields ('09').VALUE     := rec.QTTY;
        --10   N   MATCHPRICE
        l_txmsg.txfields ('10').defname   := 'MATCHPRICE';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.MATCHPRICE;
        --11   N   RCVQTTY
        l_txmsg.txfields ('11').defname   := 'RCVQTTY';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := rec.QTTY;
        --12   N   PARVALUE
        l_txmsg.txfields ('12').defname   := 'PARVALUE';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := rec.PARVALUE;
        --13   N   FEEACR
        l_txmsg.txfields ('13').defname   := 'FEEACR';
        l_txmsg.txfields ('13').TYPE      := 'N';
        l_txmsg.txfields ('13').VALUE     := rec.FEEACR;
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        If v_blnVietnamese = True Then
            l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' || trim(to_char(rec.SQTTY,'999,999,999,999,999,999,999')) || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' '  || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        Else
            l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || trim(to_char(rec.SQTTY,'999,999,999,999,999,999,999')) || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' '  || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        End If;
        BEGIN
            IF txpks_#8868.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 8868: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ODSettlementReceiveSec');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on receive securities');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ODSettlementReceiveSec');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ODSettlementReceiveSec;

--T2_HoangND add pr_ODSettlementReceiveSec_temp
---------------------------------pr_ODSettlementReceiveSec_temp------------------------------------------------
  PROCEDURE pr_ODSettlementReceiveSec_temp(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      v_COMPANYCD VARCHAR2(10);
      l_CHGBCHORDERSTARTDATE date;
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ODSettlementReceiveSec_temp');

    v_COMPANYCD:=cspks_system.fn_get_sysvar ('SYSTEM', 'COMPANYCD');

    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'OD' and varname='CHGBCHORDERSTARTDATE';

    SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8868';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8868';
    for rec in
    (
        SELECT SUBSTR(MAX(CUSTODYCD),4,1) CUSTODYCD,MAX(COSTPRICE) COSTPRICE ,CLR2.SBDATE, TO_DATE( v_strCURRDATE,systemnums.c_date_format) CURRDATE,
            SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 0 ELSE 1 END) WITHHOLIDAY,
            SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 1 ELSE 1 END) WITHOUTHOLIDAY,
            MST.AUTOID, MST.AFACCTNO,MAX(ODMST.ORDERQTTY) ORGORDERQTTY,MAX(ODMST.EXECTYPE) EXECTYPE,MAX(ODMST.QUOTEPRICE) ORGQUOTEPRICE, MST.ACCTNO, MIN(MST.DUETYPE) DUETYPE, MIN(MST.TXDATE) TXDATE, MIN(MST.ORGORDERID) ORGORDERID, MIN(MST.CLEARCD) CLEARCD, MIN(MST.CLEARDAY) CLEARDAY,
            MIN(SEC.CODEID) CODEID, MIN(SEC.SYMBOL) SYMBOL, MIN(SEC.PARVALUE) PARVALUE, MIN(TYP.VATRATE) VATRATE, MIN(ODMST.FEEACR-ODMST.FEEAMT) AVLFEEAMT, MIN(ODMST.FEEACR) FEEACR,
            MIN(MST.AMT) AMT, MIN(MST.AAMT) AAMT, MIN(MST.FAMT) FAMT, MIN(MST.QTTY) QTTY,MIN(ODMST.EXECQTTY) SQTTY , MIN(MST.AQTTY) AQTTY, ROUND(MIN(MST.AMT/MST.QTTY),4) MATCHPRICE
            FROM SBCLDR CLR1, SBCLDR CLR2, (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST, ODMAST ODMST,AFMAST AF,CFMAST CF, ODTYPE TYP, SBSECURITIES SEC
            WHERE ODMST.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND  CLR1.SBDATE>=MST.TXDATE AND CLR1.SBDATE<CLR2.SBDATE AND CLR2.SBDATE>=MST.TXDATE
            AND CLR1.CLDRTYPE=SEC.TRADEPLACE AND CLR2.CLDRTYPE=SEC.TRADEPLACE
            AND ODMST.ACTYPE=TYP.ACTYPE AND MST.ORGORDERID=ODMST.ORDERID AND MST.CODEID=SEC.CODEID AND SEC.TRADEPLACE <> '003'
            AND CLR2.SBDATE=TO_DATE( v_strCURRDATE,systemnums.c_date_format) AND MST.STATUS='N' AND MST.DELTD<>'Y'
            AND (MST.DUETYPE='RS' )
            AND  CF.CUSTATCOM ='Y'
            and odmst.txdate < l_CHGBCHORDERSTARTDATE --T2_HoangND
            AND SEC.SECTYPE NOT IN ('003','006')
            GROUP BY MST.AUTOID, CLR2.SBDATE, MST.AFACCTNO, MST.ACCTNO
            HAVING MIN(MST.CLEARDAY)<=
            (CASE WHEN MIN(MST.CLEARCD)='B' THEN SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 0 ELSE 1 END) ELSE SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 1 ELSE 1 END) END)
            ORDER BY ORGORDERID
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
        IF rec.custodycd='F' then
            v_blnVietnamese:= false;
        else
            v_blnVietnamese:= true;
        end if;

        --Set cac field giao dich
        --01   N   AUTOID
        l_txmsg.txfields ('01').defname   := 'AUTOID';
        l_txmsg.txfields ('01').TYPE      := 'N';
        l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

        --03   C   ORGORDERID
        l_txmsg.txfields ('03').defname   := 'ORGORDERID';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ORGORDERID;
        --04   C   AFACCTNO
        l_txmsg.txfields ('04').defname   := 'AFACCTNO';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.AFACCTNO;
        --05   C   CIACCTNO
        l_txmsg.txfields ('05').defname   := 'CIACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;
        --06   C   SEACCTNO
        l_txmsg.txfields ('06').defname   := 'SEACCTNO';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.ACCTNO;
        --07   C   SYMBOL
        l_txmsg.txfields ('07').defname   := 'SYMBOL';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.SYMBOL;
        --08   N   AMT
        l_txmsg.txfields ('08').defname   := 'AMT';
        l_txmsg.txfields ('08').TYPE      := 'N';
        l_txmsg.txfields ('08').VALUE     := round(rec.AMT,0);
        --09   N   QTTY
        l_txmsg.txfields ('09').defname   := 'QTTY';
        l_txmsg.txfields ('09').TYPE      := 'N';
        l_txmsg.txfields ('09').VALUE     := rec.QTTY;
        --10   N   MATCHPRICE
        l_txmsg.txfields ('10').defname   := 'MATCHPRICE';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.MATCHPRICE;
        --11   N   RCVQTTY
        l_txmsg.txfields ('11').defname   := 'RCVQTTY';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := rec.QTTY;
        --12   N   PARVALUE
        l_txmsg.txfields ('12').defname   := 'PARVALUE';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := rec.PARVALUE;
        --13   N   FEEACR
        l_txmsg.txfields ('13').defname   := 'FEEACR';
        l_txmsg.txfields ('13').TYPE      := 'N';
        l_txmsg.txfields ('13').VALUE     := rec.FEEACR;
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        If v_blnVietnamese = True Then
            l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' || trim(to_char(rec.SQTTY,'999,999,999,999,999,999,999')) || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' '  || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        Else
            l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || trim(to_char(rec.SQTTY,'999,999,999,999,999,999,999')) || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' '  || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        End If;
        BEGIN
            IF txpks_#8868.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 8868: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ODSettlementReceiveSec_temp');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on receive securities');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ODSettlementReceiveSec_temp');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ODSettlementReceiveSec_temp;
--End T2_HoangND add pr_ODSettlementReceiveSec_temp

PROCEDURE pr_ODSettlementReceiveSec_TP(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      v_COMPANYCD VARCHAR2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ODSettlementReceiveSec_TP');

    v_COMPANYCD:=cspks_system.fn_get_sysvar ('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='8868';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='8868';
    for rec in
    (
        SELECT SUBSTR(MAX(CUSTODYCD),4,1) CUSTODYCD,MAX(COSTPRICE) COSTPRICE ,CLR2.SBDATE, TO_DATE( v_strCURRDATE,systemnums.c_date_format) CURRDATE,
            SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 0 ELSE 1 END) WITHHOLIDAY,
            SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 1 ELSE 1 END) WITHOUTHOLIDAY,
            MST.AUTOID, MST.AFACCTNO,MAX(ODMST.ORDERQTTY) ORGORDERQTTY,MAX(ODMST.EXECTYPE) EXECTYPE,MAX(ODMST.QUOTEPRICE) ORGQUOTEPRICE, MST.ACCTNO, MIN(MST.DUETYPE) DUETYPE, MIN(MST.TXDATE) TXDATE, MIN(MST.ORGORDERID) ORGORDERID, MIN(MST.CLEARCD) CLEARCD, MIN(MST.CLEARDAY) CLEARDAY,
            MIN(SEC.CODEID) CODEID, MIN(SEC.SYMBOL) SYMBOL, MIN(SEC.PARVALUE) PARVALUE, MIN(TYP.VATRATE) VATRATE, MIN(ODMST.FEEACR-ODMST.FEEAMT) AVLFEEAMT, MIN(ODMST.FEEACR) FEEACR,
            MIN(MST.AMT) AMT, MIN(MST.AAMT) AAMT, MIN(MST.FAMT) FAMT, MIN(MST.QTTY) QTTY,MIN(ODMST.EXECQTTY) SQTTY , MIN(MST.AQTTY) AQTTY, ROUND(MIN(MST.AMT/MST.QTTY),4) MATCHPRICE
            FROM SBCLDR CLR1, SBCLDR CLR2, (SELECT * FROM (SELECT A.*, ROWNUM ID FROM STSCHD A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST, ODMAST ODMST,AFMAST AF,CFMAST CF, ODTYPE TYP, SBSECURITIES SEC
            WHERE ODMST.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND  CLR1.SBDATE>=MST.TXDATE AND CLR1.SBDATE<CLR2.SBDATE AND CLR2.SBDATE>=MST.TXDATE
            AND CLR1.CLDRTYPE=SEC.TRADEPLACE AND CLR2.CLDRTYPE=SEC.TRADEPLACE
            AND ODMST.ACTYPE=TYP.ACTYPE AND MST.ORGORDERID=ODMST.ORDERID AND MST.CODEID=SEC.CODEID AND SEC.TRADEPLACE <> '003'
            AND CLR2.SBDATE=TO_DATE( v_strCURRDATE,systemnums.c_date_format) AND MST.STATUS='N' AND MST.DELTD<>'Y'
            AND (MST.DUETYPE='RS' )
            AND  CF.CUSTATCOM ='Y'
            AND SEC.SECTYPE IN ('003','006')
            GROUP BY MST.AUTOID, CLR2.SBDATE, MST.AFACCTNO, MST.ACCTNO
            HAVING MIN(MST.CLEARDAY)<=
            (CASE WHEN MIN(MST.CLEARCD)='B' THEN SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 0 ELSE 1 END) ELSE SUM(CASE WHEN CLR1.HOLIDAY='Y' THEN 1 ELSE 1 END) END)
            ORDER BY ORGORDERID
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai
        IF rec.custodycd='F' then
            v_blnVietnamese:= false;
        else
            v_blnVietnamese:= true;
        end if;

        --Set cac field giao dich
        --01   N   AUTOID
        l_txmsg.txfields ('01').defname   := 'AUTOID';
        l_txmsg.txfields ('01').TYPE      := 'N';
        l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

        --03   C   ORGORDERID
        l_txmsg.txfields ('03').defname   := 'ORGORDERID';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ORGORDERID;
        --04   C   AFACCTNO
        l_txmsg.txfields ('04').defname   := 'AFACCTNO';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.AFACCTNO;
        --05   C   CIACCTNO
        l_txmsg.txfields ('05').defname   := 'CIACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;
        --06   C   SEACCTNO
        l_txmsg.txfields ('06').defname   := 'SEACCTNO';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.ACCTNO;
        --07   C   SYMBOL
        l_txmsg.txfields ('07').defname   := 'SYMBOL';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.SYMBOL;
        --08   N   AMT
        l_txmsg.txfields ('08').defname   := 'AMT';
        l_txmsg.txfields ('08').TYPE      := 'N';
        l_txmsg.txfields ('08').VALUE     := round(rec.AMT,0);
        --17   C   CODEID
        l_txmsg.txfields ('17').defname   := 'CODEID';
        l_txmsg.txfields ('17').TYPE      := 'C';
        l_txmsg.txfields ('17').VALUE     := rec.CODEID;
        --09   N   QTTY
        l_txmsg.txfields ('09').defname   := 'QTTY';
        l_txmsg.txfields ('09').TYPE      := 'N';
        l_txmsg.txfields ('09').VALUE     := rec.QTTY;
        --10   N   MATCHPRICE
        l_txmsg.txfields ('10').defname   := 'MATCHPRICE';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.MATCHPRICE;
        --11   N   RCVQTTY
        l_txmsg.txfields ('11').defname   := 'RCVQTTY';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := rec.QTTY;
        --12   N   PARVALUE
        l_txmsg.txfields ('12').defname   := 'PARVALUE';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := rec.PARVALUE;
        --13   N   FEEACR
        l_txmsg.txfields ('13').defname   := 'FEEACR';
        l_txmsg.txfields ('13').TYPE      := 'N';
        l_txmsg.txfields ('13').VALUE     := rec.FEEACR;
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        If v_blnVietnamese = True Then
            l_txmsg.txfields ('30').VALUE := v_strDesc || ' ' || trim(to_char(rec.SQTTY,'999,999,999,999,999,999,999')) || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' '  || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        Else
            l_txmsg.txfields ('30').VALUE := v_strEN_Desc || ' ' || trim(to_char(rec.SQTTY,'999,999,999,999,999,999,999')) || ' ' || rec.SYMBOL || ' ' || UTF8NUMS.C_CONST_DATE_VI || ' '  || substr(rec.ORGORDERID, 5, 2) || '/' || substr(rec.ORGORDERID, 7, 2) || '/' || substr(rec.ORGORDERID, 9, 2);
        End If;
        BEGIN
            IF txpks_#8868.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 8868: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ODSettlementReceiveSec_TP');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on receive securities');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ODSettlementReceiveSec_TP');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ODSettlementReceiveSec_TP;

---------------------------------pr_DealReceive------------------------------------------------
  PROCEDURE pr_DealReceive(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_DealReceive');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
/*    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='2661';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='2661';
    for rec in
    (
       select df.acctno,sts.autoid,df.rcvqtty,least(sts.aqtty,m.adfqtty,df.rcvqtty) aqtty,sts.acctno seacctno,df.afacctno
        from stschd sts ,v_getDealInfo df, stdfmap m, sbsecurities sb
        where df.rcvqtty>0 and sts.aqtty>0 and sts.codeid= sb.codeid and sb.sectype not in ('003','006')
        and sts.autoid =m.stschdid AND m.dfacctno = df.acctno and sts.status='C' and duetype ='RS'
        and not exists(select 1 from tllog where batchname = p_bchmdl and tllog.msgacct = df.acctno and deltd <>'Y') --T2_HoangND add
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai

        --Set cac field giao dich
        --01   N   AUTOID
        l_txmsg.txfields ('01').defname   := 'AUTOID';
        l_txmsg.txfields ('01').TYPE      := 'N';
        l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

        --02   ACCTNO     C
        l_txmsg.txfields ('02').defname   := 'ACCTNO';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.ACCTNO;
        --05   AFACCTNO   C
        l_txmsg.txfields ('05').defname   := 'AFACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;
        --06   C   SEACCTNO
        l_txmsg.txfields ('06').defname   := 'SEACCTNO';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.SEACCTNO;
        --10   RCVQTTY    N
        l_txmsg.txfields ('10').defname   := 'RCVQTTY';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AQTTY;
        --11   CARCVQTTY    N
        l_txmsg.txfields ('11').defname   := 'CARCVQTTY';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := 0;
        --12   BLOCKQTTY    N
        l_txmsg.txfields ('12').defname   := 'BLOCKQTTY';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := 0;
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := v_strDesc;

        BEGIN
            IF txpks_#2661.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 2661: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_DealReceive');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on pr_DealReceive');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_DealReceive');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_DealReceive;

--T2_HoangND add pr_DealReceive_temp
---------------------------------pr_DealReceive_temp------------------------------------------------
  PROCEDURE pr_DealReceive_temp(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      l_CHGBCHORDERSTARTDATE date;
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_DealReceive_temp');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
/*    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/
    select to_date(varvalue,'DD/MM/RRRR') into l_CHGBCHORDERSTARTDATE
    from sysvar
    where grname like 'OD' and varname='CHGBCHORDERSTARTDATE';

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='2661';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='2661';
    for rec in
    (
       select df.acctno,sts.autoid,df.rcvqtty,least(sts.aqtty,m.adfqtty,df.rcvqtty) aqtty,sts.acctno seacctno,df.afacctno
        from stschd sts ,v_getDealInfo df, stdfmap m, sbsecurities sb
        where df.rcvqtty>0 and sts.aqtty>0 and sts.codeid= sb.codeid and sb.sectype not in ('003','006')
        and sts.txdate < l_CHGBCHORDERSTARTDATE
        and sts.autoid =m.stschdid AND m.dfacctno = df.acctno and sts.status='C' and duetype ='RS'
        and not exists(select 1 from tllog where batchname = p_bchmdl and tllog.msgacct = df.acctno and deltd <>'Y') --T2_HoangND add
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai

        --Set cac field giao dich
        --01   N   AUTOID
        l_txmsg.txfields ('01').defname   := 'AUTOID';
        l_txmsg.txfields ('01').TYPE      := 'N';
        l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

        --02   ACCTNO     C
        l_txmsg.txfields ('02').defname   := 'ACCTNO';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.ACCTNO;
        --05   AFACCTNO   C
        l_txmsg.txfields ('05').defname   := 'AFACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;
        --06   C   SEACCTNO
        l_txmsg.txfields ('06').defname   := 'SEACCTNO';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.SEACCTNO;
        --10   RCVQTTY    N
        l_txmsg.txfields ('10').defname   := 'RCVQTTY';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AQTTY;
        --11   CARCVQTTY    N
        l_txmsg.txfields ('11').defname   := 'CARCVQTTY';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := 0;
        --12   BLOCKQTTY    N
        l_txmsg.txfields ('12').defname   := 'BLOCKQTTY';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := 0;
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := v_strDesc;

        BEGIN
            IF txpks_#2661.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 2661: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_DealReceive_temp');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on pr_DealReceive_temp');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_DealReceive_temp');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_DealReceive_temp;
--End T2_HoangND add pr_DealReceive_temp

---------------------------------pr_DealReceive_TP------------------------------------------------
  PROCEDURE pr_DealReceive_TP(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_DealReceive_TP');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  STSCHD;
/*    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='2661';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='2661';
    for rec in
    (
       select df.acctno,sts.autoid,df.rcvqtty,least(sts.aqtty,m.adfqtty,df.rcvqtty) aqtty,sts.acctno seacctno,df.afacctno
        from stschd sts ,v_getDealInfo df, stdfmap m, sbsecurities sb
        where df.rcvqtty>0 and sts.aqtty>0 and sts.codeid= sb.codeid and sb.sectype in ('003','006')
        and sts.autoid =m.stschdid AND m.dfacctno = df.acctno and sts.status='C' and duetype ='RS'
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        --Xac dinh xem nha day tu trong nuoc hay nuoc ngoai

        --Set cac field giao dich
        --01   N   AUTOID
        l_txmsg.txfields ('01').defname   := 'AUTOID';
        l_txmsg.txfields ('01').TYPE      := 'N';
        l_txmsg.txfields ('01').VALUE     := rec.AUTOID;

        --02   ACCTNO     C
        l_txmsg.txfields ('02').defname   := 'ACCTNO';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.ACCTNO;
        --05   AFACCTNO   C
        l_txmsg.txfields ('05').defname   := 'AFACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;
        --06   C   SEACCTNO
        l_txmsg.txfields ('06').defname   := 'SEACCTNO';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.SEACCTNO;
        --10   RCVQTTY    N
        l_txmsg.txfields ('10').defname   := 'RCVQTTY';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AQTTY;
        --11   CARCVQTTY    N
        l_txmsg.txfields ('11').defname   := 'CARCVQTTY';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := 0;
        --12   BLOCKQTTY    N
        l_txmsg.txfields ('12').defname   := 'BLOCKQTTY';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := 0;
        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := v_strDesc;

        BEGIN
            IF txpks_#2661.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 2661: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_DealReceive_TP');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on pr_DealReceive_TP');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_DealReceive_TP');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_DealReceive_TP;

 ---------------------------------fn_SettlementOrder------------------------------------------------
FUNCTION fn_SettlementOrder(p_txmsg in tx.msg_rectype,p_err_code out varchar2)
RETURN NUMBER
IS
v_blnREVERSAL boolean;
l_lngErrCode    number(20,0);
v_afacctno varchar2(30);
v_codeid varchar2(30);
v_status varchar2(30);
v_duetype varchar2(30);
v_orderid varchar2(30);
v_dblCostprice number(20,0);
BEGIN
    plog.setbeginsection (pkgctx, 'fn_SettlementOrder');
    plog.debug (pkgctx, '<<BEGIN OF fn_SettlementOrder');
   /***************************************************************************************************
    ** PUT YOUR SPECIFIC AFTER PROCESS HERE. DO NOT COMMIT/ROLLBACK HERE, THE SYSTEM WILL DO IT
    ***************************************************************************************************/
    v_blnREVERSAL:=case when p_txmsg.deltd ='Y' then true else false end;
    l_lngErrCode:= errnums.C_BIZ_RULE_INVALID;
    p_err_code:=0;
    if not v_blnREVERSAL then
        --CHieu lam thuan giao dich
        begin
            plog.debug (pkgctx,'tltxcd:' || p_txmsg.tltxcd);
            if p_txmsg.tltxcd = '8827' then
                UPDATE STSCHD SET AAMT=AMT WHERE AUTOID=p_txmsg.txfields('01').value;
            else
                plog.debug (pkgctx,'autoid:' || p_txmsg.txfields('01').value);

                SELECT STATUS,AFACCTNO,CODEID,DUETYPE,ORGORDERID
                into v_status,v_afacctno,v_codeid,v_duetype,v_orderid
                FROM STSCHD WHERE AUTOID = p_txmsg.txfields('01').value;
                plog.debug (pkgctx,'v_codeid:' || v_codeid);
                plog.debug (pkgctx,'v_afacctno:' || v_afacctno);
                plog.debug (pkgctx,'v_duetype:' || v_duetype);

                BEGIN
                    SELECT COSTPRICE into v_dblCostprice FROM SEMAST
                    WHERE  ACCTNO=v_afacctno || v_codeid;
                EXCEPTION WHEN OTHERS THEN
                    v_dblCostprice:=0;
                END;

                plog.debug (pkgctx,'seacctno:' || v_afacctno || v_codeid);
                If v_status= 'C' Then
                --Lenh da thanh toan roi
                    plog.error(pkgctx,'l_lngErrCode: ' || errnums.C_OD_STSCHD_IS_CLOSED);
                    p_err_code :=errnums.C_OD_STSCHD_IS_CLOSED;
                    return l_lngErrCode;
                else
                    If v_duetype= 'SS' Then
                    UPDATE STSCHD SET COSTPRICE=v_dblCostprice
                    WHERE orgorderid =v_orderid;
                    End If;

                    UPDATE STSCHD SET STATUS='C' WHERE STATUS<>'C' AND AUTOID=p_txmsg.txfields('01').value;
                end if;
            end if;

        EXCEPTION
        WHEN no_data_found
           THEN
              plog.error(pkgctx,'l_lngErrCode: ' || errnums.C_OD_STSCHD_NOTFOUND);
              p_err_code :=errnums.C_OD_STSCHD_NOTFOUND;
              return l_lngErrCode;
        end;

    else
        --Chieu revert giao dich
        begin
            SELECT STATUS into v_status FROM STSCHD WHERE AUTOID=p_txmsg.txfields('01').value;
            If v_status = 'N' Then
                plog.error(pkgctx,'l_lngErrCode: ' || errnums.C_OD_STSCHD_STATUSINVALID);
                p_err_code :=errnums.C_OD_STSCHD_STATUSINVALID;
                return l_lngErrCode;
            else
                if p_txmsg.tltxcd <> '8827' then
                    Update stschd set STATUS='N' where STATUS='C' AND AUTOID=p_txmsg.txfields('01').value;
                else
                    UPDATE STSCHD SET AAMT=0 WHERE AUTOID=p_txmsg.txfields('01').value;
                end if;
            end if;
        EXCEPTION
        WHEN no_data_found
           THEN
              plog.error(pkgctx,'l_lngErrCode: ' || errnums.C_OD_STSCHD_NOTFOUND);
              p_err_code :=errnums.C_OD_STSCHD_NOTFOUND;
              return l_lngErrCode;
        end;

    end if;
    plog.debug (pkgctx, '<<END OF fn_SettlementOrder');
    plog.setendsection (pkgctx, 'fn_SettlementOrder');
    RETURN systemnums.C_SUCCESS;
EXCEPTION
WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
       plog.setendsection (pkgctx, 'fn_SettlementOrder');
      RAISE errnums.E_SYSTEM_ERROR;
END fn_SettlementOrder;

 ---------------------------------fn_AdjustPaymentSchedule------------------------------------------------
FUNCTION fn_AdjustPaymentSchedule(p_txmsg in tx.msg_rectype,p_err_code out varchar2)
RETURN NUMBER
IS
v_blnREVERSAL boolean;
l_lngErrCode    number(20,0);
v_dblINTAMT number(20,4);
v_strREFTYPE    varchar2(10);
v_dblFEEINTAMT number(20,4);
BEGIN
    plog.setbeginsection (pkgctx, 'fn_AdjustPaymentSchedule');
    plog.debug (pkgctx, '<<BEGIN OF fn_AdjustPaymentSchedule');
   /***************************************************************************************************
    ** PUT YOUR SPECIFIC AFTER PROCESS HERE. DO NOT COMMIT/ROLLBACK HERE, THE SYSTEM WILL DO IT
    ***************************************************************************************************/
    l_lngErrCode:= errnums.C_BIZ_RULE_INVALID;
    p_err_code:=0;
    v_blnREVERSAL:=case when p_txmsg.deltd ='Y' then true else false end;
    v_dblINTAMT:=0;
    v_dblFEEINTAMT:=0;
    begin
        v_dblINTAMT:=greatest(TO_NUMBER(p_txmsg.txfields('10').value),v_dblINTAMT);
    exception when others then
        v_dblINTAMT:=v_dblINTAMT;
    end;
    begin
        v_dblINTAMT:=greatest(TO_NUMBER(p_txmsg.txfields('11').value),v_dblINTAMT);
    exception when others then
        v_dblINTAMT:=v_dblINTAMT;
    end;
    begin
        v_dblINTAMT:=greatest(TO_NUMBER(p_txmsg.txfields('12').value),v_dblINTAMT);
    exception when others then
        v_dblINTAMT:=v_dblINTAMT;
    end;
    begin
        v_dblFEEINTAMT:=greatest(TO_NUMBER(p_txmsg.txfields('09').value),v_dblFEEINTAMT);
    exception when others then
        v_dblFEEINTAMT:=v_dblFEEINTAMT;
    end;
    v_dblINTAMT:=round(v_dblINTAMT,0);
    v_dblFEEINTAMT:=round(v_dblFEEINTAMT,0);
    if p_txmsg.tltxcd IN ('5533','5565','5534') then
        v_strREFTYPE:='I';
    elsif p_txmsg.tltxcd IN ('5523','5564','5524') then
        v_strREFTYPE:='P';
    end if;
    --'Update data
    if p_txmsg.tltxcd in ('5533','5523','5565','5564') then
        --Chuyen qua han
        If Not v_blnReversal Then
            UPDATE LNSCHD SET NML=NML- (v_dblINTAMT) , OVD=OVD+ v_dblINTAMT ,
                          NMLFEEINT=NMLFEEINT-(v_dblFEEINTAMT),OVDFEEINT=OVDFEEINT+v_dblFEEINTAMT,
                   PDUESTS=PDUESTS || DUESTS, DUESTS=p_txmsg.txfields('06').value, OVDACRDATE=TO_DATE(p_txmsg.txdate,systemnums.c_date_format) WHERE AUTOID=p_txmsg.txfields('05').value;
        INSERT INTO LNSCHDLOG
          (AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE,
           INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID,NMLFEEINT,OVDFEEINT)
        VALUES
          (p_txmsg.txfields('05').value, p_txmsg.txnum,
           TO_DATE(p_txmsg.txdate, systemnums.c_date_format),
           - (v_dblINTAMT), v_dblINTAMT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, - (v_dblFEEINTAMT), v_dblFEEINTAMT);
        ELSE
            UPDATE LNSCHD
               SET NML     = NML + v_dblINTAMT,
                   OVD     = OVD - (v_dblINTAMT),
                   NMLFEEINT     = NMLFEEINT + v_dblFEEINTAMT,
                   OVDFEEINT     = OVDFEEINT - (v_dblFEEINTAMT),
                   DUESTS  = SUBSTR(PDUESTS, LENGTH(PDUESTS), 1),
                   PDUESTS = SUBSTR(PDUESTS, 1, LENGTH(PDUESTS) - 1)
             WHERE AUTOID = p_txmsg.txfields('05').value;
            DELETE LNSCHDLOG
             WHERE TXNUM = p_txmsg.txnum
               AND TXDATE =
                   TO_DATE(p_txmsg.txdate, systemnums.c_date_format);
        end if;
    elsif p_txmsg.tltxcd in ('5534','5524') then
        If Not v_blnReversal Then
            UPDATE LNSCHD SET NML=NML+ v_dblINTAMT , OVD=OVD-( v_dblINTAMT ), PDUESTS=PDUESTS || DUESTS, DUESTS=p_txmsg.txfields('06').value WHERE AUTOID=p_txmsg.txfields('05').value;
            INSERT INTO LNSCHDLOG(AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID)
                   VALUES(p_txmsg.txfields('05').value, p_txmsg.txnum, TO_DATE(p_txmsg.txdate,systemnums.c_date_format),  v_dblINTAMT , -(v_dblINTAMT), 0, 0 , 0, 0, 0, 0, 0, 0, 0 , 0);
        else
            UPDATE LNSCHD SET NML=NML-( v_dblINTAMT ), OVD=OVD+( v_dblINTAMT ), DUESTS=SUBSTR(PDUESTS,LENGTH(PDUESTS),1),PDUESTS=SUBSTR(PDUESTS,1,LENGTH(PDUESTS)-1) WHERE AUTOID=p_txmsg.txfields('05').value;
            DELETE LNSCHDLOG WHERE TXNUM = p_txmsg.txnum AND TXDATE = TO_DATE(p_txmsg.txdate,systemnums.c_date_format);
        end if;
    end if;

    plog.debug (pkgctx, '<<END OF fn_AdjustPaymentSchedule');
    plog.setendsection (pkgctx, 'fn_AdjustPaymentSchedule');
    RETURN systemnums.C_SUCCESS;
EXCEPTION
WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
       plog.setendsection (pkgctx, 'fn_AdjustPaymentSchedule');
      RAISE errnums.E_SYSTEM_ERROR;
END fn_AdjustPaymentSchedule;



 ---------------------------------fn_LoanPaymentScheduleAllocate------------------------------------------------
FUNCTION fn_LoanPaymentScheduleAllocate(p_txmsg in tx.msg_rectype,p_err_code out varchar2)
RETURN NUMBER
IS
v_blnREVERSAL boolean;
l_lngErrCode    number(20,0);
v_dblINTAMT number(20,4);
v_strREFTYPE    varchar2(10);
v_dblDFQTTY number(20,4);
v_dblRCVQTTY number(20,4);
v_strDFAcctno varchar2(30);
v_strDFREF varchar2(30);
v_dblExecRCVQTTY number(20,4);
v_dblRemainRCVQTTY number(20,4);
v_dblCARCVQTTY number(20,4);
v_dblBLOCKQTTY number(20,4);
v_strRlsQtty number(20,4);
v_strTXNUM varchar2(30);
BEGIN
    plog.setbeginsection (pkgctx, 'fn_LoanPaymentScheduleAllocate');
    plog.debug (pkgctx, '<<BEGIN OF fn_LoanPaymentScheduleAllocate');

    l_lngErrCode:= errnums.C_BIZ_RULE_INVALID;
    p_err_code:=0;
    v_blnREVERSAL:=case when p_txmsg.deltd ='Y' then true else false end;
    If Not v_blnReversal Then
        plog.debug (pkgctx, 'fn_Loanpaymentschd');
        if p_txmsg.tltxcd ='2660' then

            p_err_code:=CSPKS_LNPROC.fn_Loanpaymentschd(
                                p_txmsg.txnum,
                                p_txmsg.txdate,
                                p_txmsg.txfields('03').value,
                                0,
                                0,
                                p_txmsg.txfields('63').value,
                                p_txmsg.txfields('65').value,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                p_txmsg.txfields('72').value,
                                p_txmsg.txfields('74').value,
                                p_txmsg.txfields('77').value,
                                p_txmsg.txfields('80').value,
                                0,
                                0,
                                'N',
                                0,0,0,0,
                                0,0,0,0);

        elsif p_txmsg.tltxcd in('2642','2647') THEN
                plog.debug(pkgctx, 'HaiLT 1 ' || p_txmsg.txfields('03').value);
                v_strTXNUM:=p_txmsg.txnum;
                v_strDFAcctno:=p_txmsg.txfields('02').value;
                v_strRlsQtty:=p_txmsg.txfields('46').value;
                v_strDFREF:=p_txmsg.txfields('29').value;
                v_dblDFQTTY:=p_txmsg.txfields('91').value;
                v_dblRCVQTTY:=p_txmsg.txfields('92').value;
                v_dblCARCVQTTY:=p_txmsg.txfields('93').value;
                v_dblBLOCKQTTY:=p_txmsg.txfields('94').value;


            p_err_code:=CSPKS_LNPROC.fn_Loanpaymentschd(
                                p_txmsg.txnum,
                                p_txmsg.txdate,
                                p_txmsg.txfields('03').value,
                                0,
                                0,
                                p_txmsg.txfields('63').value,
                                p_txmsg.txfields('65').value,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                p_txmsg.txfields('72').value,
                                p_txmsg.txfields('74').value,
                                p_txmsg.txfields('77').value,
                                p_txmsg.txfields('80').value,
                                0,0,
                                'N',
                                0,0,0,0,0,0,0,0);

            IF v_dblRCVQTTY > 0 THEN
                v_dblExecRCVQTTY:= 0;
                v_dblRemainRCVQTTY:= v_dblRCVQTTY;
                FOR rec IN
                (
                    SELECT m.stschdid, m.dfacctno, m.dfqtty, m.adfqtty, s.orgorderid, s.aqtty
                    FROM stschd s, dfmast d, stdfmap m
                    WHERE s.autoid = m.stschdid
                        and s.aqtty > 0
                        AND m.dfacctno = d.acctno
                        and (to_char(s.txdate,'DD/MM/RRRR') || s.afacctno || s.codeid || to_char(s.clearday)) = v_strDFREF
                        and m.dfacctno = v_strDFAcctno
                    order BY autoid
                )
                LOOP
                    v_dblExecRCVQTTY:= least(v_dblRemainRCVQTTY, rec.ADFQTTY , rec.AQTTY);

                    UPDATE ODMAST
                    SET DFQTTY= DFQTTY - v_dblExecRCVQTTY,LAST_CHANGE = SYSTIMESTAMP WHERE ORDERID=rec.ORGORDERID;

                    UPDATE STSCHD
                    SET AQTTY= AQTTY - v_dblExecRCVQTTY WHERE AUTOID=rec.STSCHDID;

                    UPDATE STDFMAP
                    SET ADFQTTY= ADFQTTY - v_dblExecRCVQTTY
                    WHERE STSCHDID= rec.STSCHDID and DFACCTNO = rec.DFACCTNO;

                    v_dblRemainRCVQTTY:= v_dblRemainRCVQTTY - v_dblExecRCVQTTY;
                    IF v_dblRemainRCVQTTY = 0 THEN
                        EXIT;
                    END IF;
                END LOOP;

               End IF;
               If v_dblCARCVQTTY > 0 Then
                   UPDATE CASCHD SET DFQTTY= DFQTTY - v_dblCARCVQTTY WHERE AUTOID= v_strDFREF;
               End IF;
               If v_dblBLOCKQTTY > 0 Then
                   UPDATE SEMASTDTL SET DFQTTY= DFQTTY - v_dblBLOCKQTTY WHERE TXNUM || to_char(TXDATE,'DD/MM/RRRR')= v_strDFREF;
               End IF;

               INSERT INTO DFSENDVSDDTL VALUES (v_strTXNUM,v_strDFAcctno, v_strRlsQtty,0,sysdate);

        elsif p_txmsg.tltxcd in('5567') THEN
            p_err_code:=CSPKS_LNPROC.fn_loanpaymentschd_by_autoid(
                                p_txmsg.txnum,
                                p_txmsg.txdate,
                                p_txmsg.txfields('03').value,
                                p_txmsg.txfields('60').value,
                                p_txmsg.txfields('61').value + p_txmsg.txfields('62').value,
                                p_txmsg.txfields('63').value,
                                p_txmsg.txfields('64').value + p_txmsg.txfields('65').value,
                                p_txmsg.txfields('70').value,
                                p_txmsg.txfields('75').value,
                                p_txmsg.txfields('78').value,
                                p_txmsg.txfields('71').value,
                                p_txmsg.txfields('73').value,
                                p_txmsg.txfields('76').value,
                                p_txmsg.txfields('79').value,
                                p_txmsg.txfields('72').value,
                                p_txmsg.txfields('74').value,
                                p_txmsg.txfields('77').value,
                                p_txmsg.txfields('80').value,
                                p_txmsg.txfields('47').value,
                                p_txmsg.txfields('82').value,
                                'Y',
                                p_txmsg.txfields('50').value,
                                p_txmsg.txfields('54').value,
                                p_txmsg.txfields('52').value,
                                p_txmsg.txfields('57').value,
                                0,0,0,0,
                                p_txmsg.txfields('86').value,
                                p_txmsg.txfields('01').value
                                );

        else
            p_err_code:=CSPKS_LNPROC.fn_Loanpaymentschd(
                                p_txmsg.txnum,
                                p_txmsg.txdate,
                                p_txmsg.txfields('03').value,
                                p_txmsg.txfields('60').value,
                                p_txmsg.txfields('61').value + p_txmsg.txfields('62').value,
                                p_txmsg.txfields('63').value,
                                p_txmsg.txfields('64').value + p_txmsg.txfields('65').value,
                                p_txmsg.txfields('70').value,
                                p_txmsg.txfields('75').value,
                                p_txmsg.txfields('78').value,
                                p_txmsg.txfields('71').value,
                                p_txmsg.txfields('73').value,
                                p_txmsg.txfields('76').value,
                                p_txmsg.txfields('79').value,
                                p_txmsg.txfields('72').value,
                                p_txmsg.txfields('74').value,
                                p_txmsg.txfields('77').value,
                                p_txmsg.txfields('80').value,
                                p_txmsg.txfields('47').value,
                                p_txmsg.txfields('82').value,
                                'Y',
                                p_txmsg.txfields('50').value,
                                p_txmsg.txfields('54').value,
                                p_txmsg.txfields('52').value,
                                p_txmsg.txfields('57').value,
                                0,0,0,0);
        end if;


    ELSE
      --begin MSBS-2589
        /*for rec in (
            SELECT * FROM
                  (SELECT AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID, FEEPAID2,
                   FEEINTNMLACR,FEEINTDUE,FEEINTOVD,FEEINTOVDPRIN
                   FROM LNSCHDLOG
                  UNION ALL
                  SELECT AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID, FEEPAID2,
                  FEEINTNMLACR,FEEINTDUE,FEEINTOVD,FEEINTOVDPRIN
                   FROM LNSCHDLOGHIST)
                  WHERE TXNUM = p_txmsg.txnum AND TXDATE = TO_DATE(p_txmsg.txdate,systemnums.c_date_format)
        )
        loop
            UPDATE LNSCHD
                SET NML = NML - rec.NML,
                    OVD=OVD - rec.OVD,
                    PAID=PAID - rec.PAID,
                    INTNMLACR=INTNMLACR - rec.INTNMLACR,
                    FEE=FEE - rec.FEE   ,
                    INTDUE=INTDUE - rec.INTDUE,
                    INTOVD=INTOVD - rec.INTOVD,
                    INTOVDPRIN=INTOVDPRIN - rec.INTOVDPRIN,
                    FEEDUE=FEEDUE - rec.FEEDUE,
                    FEEOVD=FEEOVD - rec.FEEOVD,
                    INTPAID=INTPAID - rec.INTPAID,
                    FEEPAID=FEEPAID - rec.FEEPAID,
                    FEEPAID2=FEEPAID2 - rec.FEEPAID2,
                    FEEINTNMLACR=FEEINTNMLACR-rec.FEEINTNMLACR,
                    FEEINTDUE=FEEINTDUE-rec.FEEINTDUE,
                    FEEINTOVDACR=FEEINTOVDACR-rec.FEEINTOVD,

                    FEEINTNMLOVD=FEEINTNMLOVD-rec.FEEINTOVDPRIN
                WHERE AUTOID =rec.AUTOID;
        end loop;*/

        MERGE INTO lnschd lns
        USING (SELECT * FROM
                  (SELECT AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID, FEEPAID2,
                   FEEINTNMLACR,FEEINTDUE,FEEINTOVD,FEEINTOVDPRIN
                   FROM LNSCHDLOG
                  UNION ALL
                  SELECT AUTOID, TXNUM, TXDATE, NML, OVD, PAID, INTNMLACR, FEE, INTDUE, INTOVD, INTOVDPRIN, FEEDUE, FEEOVD, INTPAID, FEEPAID, FEEPAID2,
                  FEEINTNMLACR,FEEINTDUE,FEEINTOVD,FEEINTOVDPRIN
                   FROM LNSCHDLOGHIST)
                  WHERE TXNUM = p_txmsg.txnum AND TXDATE = TO_DATE(p_txmsg.txdate,systemnums.c_date_format)) ln
        ON (ln.autoid = lns.autoid)
        WHEN MATCHED THEN
          UPDATE SET NML = NML - ln.NML,
                    OVD=OVD - ln.OVD,
                    PAID=PAID - ln.PAID,
                    INTNMLACR=INTNMLACR - ln.INTNMLACR,
                    FEE=FEE - ln.FEE   ,
                    INTDUE=INTDUE - ln.INTDUE,
                    INTOVD=INTOVD - ln.INTOVD,
                    INTOVDPRIN=INTOVDPRIN - ln.INTOVDPRIN,
                    FEEDUE=FEEDUE - ln.FEEDUE,
                    FEEOVD=FEEOVD - ln.FEEOVD,
                    INTPAID=INTPAID - ln.INTPAID,
                    FEEPAID=FEEPAID - ln.FEEPAID,
                    FEEPAID2=FEEPAID2 - ln.FEEPAID2,
                    FEEINTNMLACR=FEEINTNMLACR-ln.FEEINTNMLACR,
                    FEEINTDUE=FEEINTDUE-ln.FEEINTDUE,
                    FEEINTOVDACR=FEEINTOVDACR-ln.FEEINTOVD,

                    FEEINTNMLOVD=FEEINTNMLOVD-ln.FEEINTOVDPRIN;
        --end MSBS-2589
        DELETE LNSCHDLOG WHERE TXNUM = p_txmsg.txnum AND TXDATE = TO_DATE(p_txmsg.txdate,systemnums.c_date_format);
        DELETE LNSCHDLOGHIST WHERE TXNUM = p_txmsg.txnum AND TXDATE =  TO_DATE(p_txmsg.txdate,systemnums.c_date_format);
    end if;
    plog.debug (pkgctx, '<<END OF fn_LoanPaymentScheduleAllocate');
    plog.setendsection (pkgctx, 'fn_LoanPaymentScheduleAllocate');
    RETURN systemnums.C_SUCCESS;
EXCEPTION
WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
       plog.setendsection (pkgctx, 'fn_LoanPaymentScheduleAllocate');
      RAISE errnums.E_SYSTEM_ERROR;
END fn_LoanPaymentScheduleAllocate;

 ---------------------------------fn_DrawndownProcess------------------------------------------------
---------------------------------fn_DrawndownProcess------------------------------------------------
FUNCTION fn_DrawndownProcess(p_txmsg in tx.msg_rectype,p_err_code out varchar2)
RETURN NUMBER
IS
    v_blnREVERSAL boolean;
    l_lngErrCode    number(20,0);
    v_dblINTAMT number(20,4);
    v_strREFTYPE    varchar2(10);
    v_strTRFACCTNO varchar2(100);
    v_strLNTYPE varchar2(100);
    v_dblLNRLSAMT   number(20,4);
    v_strLNCLDR varchar2(100);
    v_strNINTCD varchar2(100);
    v_lngPRINFRQ    number(20,4);
    v_lngPRINPERIOD number(20,4);
    v_lngOPRINFRQ   number(20,4);
    v_lngOPRINPERIOD    number(20,4);
    v_strDUEDATE varchar2(20);
    v_strOVERDUEDATE    varchar2(20);
    v_intWITHHOLIDAY    number(20,0);
    v_intWITHOUTHOLIDAY number(20,0);
    v_intDueno number(20,0);
    i number(20,0);
    v_COMPANYCD VARCHAR2(10);
    v_strCURRDATE varchar2(20);
    v_ACCTNO_LIST_NOT_DRAWDOWN VARCHAR2(1000);
    l_isrun varchar2(1);
    v_dblrate1 NUMBER(20,4);
    v_dblrate2 NUMBER(20,4);
    v_dblrate3 NUMBER(20,4);
    v_dblcfrate1 NUMBER(20,4);
    v_dblcfrate2 NUMBER(20,4);
    v_dblcfrate3 NUMBER(20,4);
    v_intPRINTFRQ3 number(20,4);
    v_lnAutoid NUMBER(20);
     v_ispaybank varchar2(20);
    v_minterm number(10);
    v_mintermdate varchar2(20);
    v_orate1 NUMBER;
    v_drate VARCHAR2(10);
    v_strYEAR varchar2(4);
    v_dblDRATE NUMBER;
    v_intnmlpbl NUMBER;
    v_intdays number(20);

    l_isMAS10   VARCHAR2(10);
BEGIN
    plog.setbeginsection (pkgctx, 'fn_DrawndownProcess');
    plog.debug (pkgctx, '<<BEGIN OF fn_DrawndownProcess');
   /***************************************************************************************************
    ** PUT YOUR SPECIFIC AFTER PROCESS HERE. DO NOT COMMIT/ROLLBACK HERE, THE SYSTEM WILL DO IT
    ***************************************************************************************************/
    l_lngErrCode:= errnums.C_BIZ_RULE_INVALID;
    p_err_code:=0;
    v_blnREVERSAL:=case when p_txmsg.deltd ='Y' then true else false end;
    v_COMPANYCD:=cspks_system.fn_get_sysvar ('SYSTEM', 'COMPANYCD');
    v_strCURRDATE:=cspks_system.fn_get_sysvar ('SYSTEM', 'CURRDATE');
    v_ACCTNO_LIST_NOT_DRAWDOWN:=cspks_system.fn_get_sysvar ('SYSTEM', 'ACCTNO_LIST_NOT_DRAWDOWN');
    If Not v_blnReversal Then
        /*
        Giai Ngan vay Margin
        */
        l_isrun:=1;
        begin
            SELECT MST.TRFACCTNO, MST.LNTYPE, round(MST.RLSAMT+MST.ORLSAMT,0) RLSAMT, MST.LNCLDR, MST.PRINFRQ, MST.PRINPERIOD, MST.OPRINFRQ, MST.OPRINPERIOD,
                   mst.rate1,mst.rate2,mst.rate3,mst.cfrate1,mst.cfrate2,mst.cfrate3, mst.PRINTFRQ3, mst.NINTCD,mst.ispaybank, mst.minterm
            into v_strTRFACCTNO,v_strLNTYPE,v_dblLNRLSAMT,v_strLNCLDR,v_lngPRINFRQ,v_lngPRINPERIOD,v_lngOPRINFRQ,v_lngOPRINPERIOD,
                 v_dblrate1,v_dblrate2,v_dblrate3,v_dblcfrate1,v_dblcfrate2,v_dblcfrate3, v_intPRINTFRQ3, v_strNINTCD,v_ispaybank, v_miNterm
            FROM LNMAST MST, CIMAST CI, CFMAST CF, AFMAST AF, AFTYPE AFT
            WHERE MST.ACCTNO = p_txmsg.txfields('03').value
                  and af.actype = aft.actype AND CF.CUSTID=AF.CUSTID AND AF.ACCTNO=CI.AFACCTNO
                  AND  CF.CUSTATCOM ='Y'
                  AND instr(v_ACCTNO_LIST_NOT_DRAWDOWN,af.acctno) = 0
                  AND CI.ACCTNO = MST.TRFACCTNO;
        exception
        when others then
            l_isrun:=0;
        end;
        If v_dblLNRLSAMT = 0 Then   --Lan giai ngan dau tien
            UPDATE LNMAST SET RLSDATE = TO_DATE(p_txmsg.busdate,systemnums.c_date_format) WHERE ACCTNO = p_txmsg.txfields('03').value;
            DELETE LNSCHD WHERE ACCTNO = p_txmsg.txfields('03').value;
        end if;
        If l_isrun = 1 and p_txmsg.txfields('10').value > 0 Then --Giai ngan vay margin
          --1.5.7.3|MSBS-1932 --> Check s/d T10 va sbType = 'N'
          l_isMAS10 := fn_checkMAS10Regist (v_strTRFACCTNO, 'Y');
          IF l_isMAS10 = 'Y' THEN
            IF v_strNINTCD='001' THEN -- 000: Cong Don; 001: Bac Thang
                --   v_strDUEDATE:=to_char(TO_DATE(v_strCURRDATE,systemnums.c_date_format) + v_intPRINTFRQ3,systemnums.c_date_format);
                v_strDUEDATE:=to_char( getduedate( TO_DATE(v_strCURRDATE,systemnums.c_date_format) ,'N','000', v_intPRINTFRQ3 ) ,systemnums.c_date_format);
                v_strOVERDUEDATE:=to_char(TO_DATE(v_strCURRDATE,systemnums.c_date_format) + v_intPRINTFRQ3,systemnums.c_date_format);
            ELSE
                --   v_strDUEDATE:=to_char(TO_DATE(v_strCURRDATE,systemnums.c_date_format) + v_lngPRINFRQ,systemnums.c_date_format);
                v_strDUEDATE:=to_char( getduedate( TO_DATE(v_strCURRDATE,systemnums.c_date_format) ,'N','000', v_lngPRINFRQ ) ,systemnums.c_date_format);
                v_strOVERDUEDATE:=to_char(TO_DATE(v_strCURRDATE,systemnums.c_date_format) + v_lngPRINPERIOD,systemnums.c_date_format);
            END IF;
            begin
              SELECT NVL(TO_CHAR(max(SBDATE),systemnums.c_date_format),v_strOVERDUEDATE) into v_strOVERDUEDATE
              FROM SBCLDR
              WHERE CLDRTYPE='000'
              AND SBDATE <= TO_DATE(v_strOVERDUEDATE,systemnums.c_date_format)
              and SBDATE >= TO_DATE(v_strCURRDATE,systemnums.c_date_format) AND HOLIDAY = 'N';
            exception
              when others then
                p_err_code:=0;--Ko bat exception
            end;
          -- End 1.5.7.3|MSBS-1932
          ELSE
            If v_strLNCLDR = 'N' Then
                --Lich tra no theo lich he thong
                /*v_strDUEDATE:=to_char(TO_DATE(p_txmsg.busdate,systemnums.c_date_format) + v_lngPRINFRQ,systemnums.c_date_format);
                v_strOVERDUEDATE:=to_char(TO_DATE(p_txmsg.busdate,systemnums.c_date_format) + v_lngPRINPERIOD,systemnums.c_date_format);
                begin
                    SELECT NVL(TO_CHAR(MIN(SBDATE),systemnums.c_date_format),v_strDUEDATE) into v_strDUEDATE FROM SBCLDR WHERE CLDRTYPE='000' AND SBDATE >= TO_DATE(v_strDUEDATE,systemnums.c_date_format) AND HOLIDAY = 'N';
                    SELECT NVL(TO_CHAR(MIN(SBDATE),systemnums.c_date_format),v_strOVERDUEDATE) into v_strOVERDUEDATE FROM SBCLDR WHERE CLDRTYPE='000' AND SBDATE >= TO_DATE(v_strOVERDUEDATE,systemnums.c_date_format) AND HOLIDAY = 'N';
                exception
                when others then
                    p_err_code:=0;--Ko bat exception
                end;*/
                IF v_strNINTCD='001' THEN -- 000: Cong Don; 001: Bac Thang
                 --   v_strDUEDATE:=to_char(TO_DATE(v_strCURRDATE,systemnums.c_date_format) + v_intPRINTFRQ3,systemnums.c_date_format);
                    v_strDUEDATE:=to_char( getduedate( TO_DATE(v_strCURRDATE,systemnums.c_date_format) ,'B','000', v_intPRINTFRQ3 ) ,systemnums.c_date_format);
                    v_strOVERDUEDATE:=to_char(TO_DATE(v_strCURRDATE,systemnums.c_date_format) + v_intPRINTFRQ3,systemnums.c_date_format);
                ELSE
                 --   v_strDUEDATE:=to_char(TO_DATE(v_strCURRDATE,systemnums.c_date_format) + v_lngPRINFRQ,systemnums.c_date_format);
                     v_strDUEDATE:=to_char( getduedate( TO_DATE(v_strCURRDATE,systemnums.c_date_format) ,'B','000', v_lngPRINFRQ ) ,systemnums.c_date_format);
                    v_strOVERDUEDATE:=to_char(TO_DATE(v_strCURRDATE,systemnums.c_date_format) + v_lngPRINPERIOD,systemnums.c_date_format);
                END IF;
                begin
                    SELECT NVL(TO_CHAR(max(SBDATE),systemnums.c_date_format),v_strDUEDATE) into v_strDUEDATE
                        FROM SBCLDR
                        WHERE CLDRTYPE='000'
                        AND SBDATE <= TO_DATE(v_strDUEDATE,systemnums.c_date_format)
                        and SBDATE >= TO_DATE(v_strCURRDATE,systemnums.c_date_format) AND HOLIDAY = 'N';
                    SELECT NVL(TO_CHAR(max(SBDATE),systemnums.c_date_format),v_strOVERDUEDATE) into v_strOVERDUEDATE
                        FROM SBCLDR
                        WHERE CLDRTYPE='000'
                        AND SBDATE <= TO_DATE(v_strOVERDUEDATE,systemnums.c_date_format)
                        and SBDATE >= TO_DATE(v_strCURRDATE,systemnums.c_date_format) AND HOLIDAY = 'N';
                exception
                when others then
                    p_err_code:=0;--Ko bat exception
                end;

            ElsIf v_strLNCLDR = 'B' Then   --Lich tra no tinh theo lich thanh toan
                /*i := v_lngPRINFRQ;
                v_strDUEDATE := p_txmsg.BUSDATE;
                v_intWITHHOLIDAY := 0;
                v_intWITHOUTHOLIDAY := 0;
                WHILE i > 0 LOOP
                    begin
                        SELECT SUM(CASE WHEN CLR1.HOLIDAY='N' THEN 1 ELSE 0 END) WITHOUTHOLIDAY,TO_CHAR(MAX(SBDATE),systemnums.c_date_format) SBDATE
                                into v_intWITHOUTHOLIDAY,v_strDUEDATE
                        FROM SBCLDR CLR1 WHERE CLR1.CLDRTYPE='000' AND CLR1.SBDATE > TO_DATE(v_strDUEDATE ,systemnums.c_date_format) AND CLR1.SBDATE <= TO_DATE(v_strDUEDATE ,systemnums.c_date_format) +  i;
                    exception
                    when others then
                        p_err_code:=0;--Ko bat exception
                    end;
                    v_intWITHHOLIDAY:=i - v_intWITHOUTHOLIDAY;
                    i := v_intWITHHOLIDAY;
                END LOOP;
                If v_lngPRINPERIOD > 365 Then
                    v_strOVERDUEDATE:=to_char(TO_DATE(p_txmsg.busdate,systemnums.c_date_format) + v_lngPRINPERIOD,systemnums.c_date_format);
                    begin
                        SELECT NVL(TO_CHAR(MIN(SBDATE),systemnums.c_date_format),v_strOVERDUEDATE) DUEDATE
                        into v_strOVERDUEDATE
                        FROM SBCLDR WHERE CLDRTYPE='000' AND SBDATE >= TO_DATE(v_strOVERDUEDATE ,systemnums.c_date_format) AND HOLIDAY = 'N';
                        exception
                    when others then
                        p_err_code:=0;--Ko bat exception
                    end;
                else
                    i := v_lngPRINPERIOD - v_lngPRINFRQ;
                    v_strOVERDUEDATE := v_strDUEDATE;
                    v_intWITHHOLIDAY := 0;
                    v_intWITHOUTHOLIDAY := 0;
                    WHILE i > 0 LOOP
                        begin
                            SELECT SUM(CASE WHEN CLR1.HOLIDAY='N' THEN 1 ELSE 0 END) WITHOUTHOLIDAY,TO_CHAR(MAX(SBDATE),systemnums.c_date_format) SBDATE
                            into v_intWITHOUTHOLIDAY,v_strOVERDUEDATE
                            FROM SBCLDR CLR1 WHERE CLR1.CLDRTYPE='000' AND CLR1.SBDATE > TO_DATE(v_strOVERDUEDATE ,systemnums.c_date_format) AND CLR1.SBDATE <= TO_DATE( v_strOVERDUEDATE ,systemnums.c_date_format) +  i;
                            v_intWITHHOLIDAY := i - v_intWITHOUTHOLIDAY;
                        exception
                        when others then
                            p_err_code:=0;--Ko bat exception
                        end;
                        i := v_intWITHHOLIDAY;
                    end loop;
                end if;*/

                IF v_strNINTCD='001' THEN -- 000: Cong Don; 001: Bac Thang
                    if v_intPRINTFRQ3 = 0 then
                        v_strDUEDATE:= v_strCURRDATE;
                        v_strOVERDUEDATE:= v_strCURRDATE;
                    else
                        select to_char(sbdate,systemnums.c_date_format) into v_strDUEDATE
                        from (
                            select sbdate, rownum rn from (
                                select sbdate from SBCLDR where holiday = 'N' and CLDRTYPE='000' and sbdate > to_date(v_strCURRDATE,systemnums.c_date_format) order by sbdate
                            )
                        )
                        where rn = v_intPRINTFRQ3;

                        select to_char(sbdate,systemnums.c_date_format) into v_strOVERDUEDATE
                        from (
                            select sbdate, rownum rn from (
                                select sbdate from SBCLDR where holiday = 'N' and CLDRTYPE='000' and sbdate > to_date(v_strCURRDATE,systemnums.c_date_format) order by sbdate
                            )
                        )
                        where rn = v_intPRINTFRQ3;
                    end if;
                else
                    if v_lngPRINFRQ = 0 then
                        v_strDUEDATE:= v_strCURRDATE;
                    else
                    select to_char(sbdate,systemnums.c_date_format) into v_strDUEDATE
                    from (
                        select sbdate, rownum rn from (
                            select sbdate from SBCLDR where holiday = 'N' and CLDRTYPE='000' and sbdate > to_date(v_strCURRDATE,systemnums.c_date_format) order by sbdate
                        )
                    )
                    where rn = v_lngPRINFRQ;
                    end if;

                    if v_lngPRINPERIOD = 0 then
                        v_strOVERDUEDATE:= v_strCURRDATE;
                    else
                        select to_char(sbdate,systemnums.c_date_format) into v_strOVERDUEDATE
                        from (
                            select sbdate, rownum rn from (
                                select sbdate from SBCLDR where holiday = 'N' and CLDRTYPE='000' and sbdate > to_date(v_strCURRDATE,systemnums.c_date_format) order by sbdate
                            )
                        )
                        where rn = v_lngPRINPERIOD;
                    end if;

                end if;
            end if;
          END IF;
            --Moi lan giai ngan sinh mot dong lich
            begin
                SELECT NVL(MAX(DUENO),0) DUENO
                into v_intDueno
                FROM LNSCHD WHERE ACCTNO = p_txmsg.txfields('03').value AND REFTYPE = 'GP';
            exception
            when others then
                v_intDueno:=1;
            end;

            if  TO_DATE(v_strDUEDATE , systemnums.c_date_format)>  TO_DATE(v_strOVERDUEDATE ,systemnums.c_date_format)then
                v_strDUEDATE := v_strOVERDUEDATE;
            end if ;
             -- DucNV xac dinh ngay tra no som nhat
                v_mintermdate:=v_strCURRDATE;
                BEGIN

                    Select   TO_CHAR(SBDATE,systemnums.c_date_format) INTO v_mintermdate
                    From sbcurrdate
                    Where numday=v_minterm and sbtype='B';
                Exception
                when others then
                    p_err_code:=0;
                End;
                -- End of DucNV
            v_lnAutoid:=SEQ_LNSCHD.NEXTVAL;
            INSERT INTO LNSCHD
              (AUTOID, ACCTNO, DUENO, RLSDATE, DUEDATE, OVERDUEDATE,
               ACRDATE, OVDACRDATE, REFTYPE, NML, OVD, PAID, DUESTS, PDUESTS,
               INTNMLACR, FEE, DUE, rate1, rate2, rate3, cfrate1, cfrate2,
               cfrate3,ispaybank, REFOPNAUTOID,mintermdate)
            VALUES
              (v_lnAutoid, p_txmsg.txfields('03').value, v_intDueno,
               TO_DATE(p_txmsg.BUSDATE, systemnums.c_date_format),
               TO_DATE(v_strDUEDATE, systemnums.c_date_format),
               TO_DATE(v_strOVERDUEDATE, systemnums.c_date_format),
               TO_DATE(p_txmsg.BUSDATE, systemnums.c_date_format),
               TO_DATE(p_txmsg.BUSDATE, systemnums.c_date_format), 'P',
               p_txmsg.txfields('10').value, 0, 0, 'N', NULL, 0, 0, 'N',
               v_dblrate1,v_dblrate2,v_dblrate3,v_dblcfrate1,v_dblcfrate2,v_dblcfrate3,v_ispaybank, p_txmsg.txfields('35').value,
               least(TO_DATE(v_mintermdate, systemnums.c_date_format),TO_DATE(v_strOVERDUEDATE, systemnums.c_date_format))
               );

               -- PhuongHT add
             -- insert vao lnschdlog
              INSERT INTO LNSCHDLOG(AUTOID,TXNUM, TXDATE, NML)
              VALUES(v_lnAutoid,p_txmsg.txnum, TO_DATE(p_txmsg.txdate,'DD/MM/RRRR'), to_number(p_txmsg.txfields ('10').VALUE));
             --end of PhuongHT add

        end if;

        /*
        Giai Ngan vay T0
        */
        l_isrun:=1;
        begin
            SELECT MST.TRFACCTNO, MST.LNTYPE, round(MST.RLSAMT+MST.ORLSAMT,0) RLSAMT, MST.LNCLDR, MST.PRINFRQ, MST.PRINPERIOD, MST.OPRINFRQ, MST.OPRINPERIOD, mst.NINTCD, mst.PRINTFRQ3, mst.minterm, MST.ORATE1, MST.DRATE
            into v_strTRFACCTNO,v_strLNTYPE,v_dblLNRLSAMT,v_strLNCLDR,v_lngPRINFRQ,v_lngPRINPERIOD,v_lngOPRINFRQ,v_lngOPRINPERIOD, v_strNINTCD, v_intPRINTFRQ3,v_minterm, v_orate1, v_drate
            FROM LNMAST MST, CIMAST CI, CFMAST CF, AFMAST AF, AFTYPE AFT
            WHERE MST.ACCTNO = p_txmsg.txfields('03').value
                  and af.actype = aft.actype and aft.t0lntype = mst.actype
                  AND CF.CUSTID=AF.CUSTID AND AF.ACCTNO=CI.AFACCTNO
                  AND  CF.CUSTATCOM ='Y'
                  AND instr(v_ACCTNO_LIST_NOT_DRAWDOWN,af.acctno) = 0
                  AND CI.ACCTNO = MST.TRFACCTNO;
        exception
        when others then
            l_isrun:=0;
        end;
        If v_dblLNRLSAMT = 0 Then   --Lan giai ngan dau tien
            UPDATE LNMAST SET RLSDATE = TO_DATE(p_txmsg.busdate,systemnums.c_date_format) WHERE ACCTNO = p_txmsg.txfields('03').value;
            DELETE LNSCHD WHERE ACCTNO = p_txmsg.txfields('03').value;
        end if;
        If l_isrun = 1 and p_txmsg.txfields('11').value > 0 Then --T0odamt
            --Giai ngan vay T0
            If v_strLNCLDR = 'N' Then   --Lich tra no theo lich he thong
/*                v_strDUEDATE:=to_char(TO_DATE(p_txmsg.busdate,systemnums.c_date_format) + v_lngOPRINFRQ,systemnums.c_date_format);
                v_strOVERDUEDATE:=to_char(TO_DATE(p_txmsg.busdate,systemnums.c_date_format) + v_lngOPRINPERIOD,systemnums.c_date_format);
                begin
                    SELECT NVL(TO_CHAR(MIN(SBDATE),systemnums.c_date_format),v_strDUEDATE) into v_strDUEDATE FROM SBCLDR WHERE CLDRTYPE='000' AND SBDATE >= TO_DATE(v_strDUEDATE,systemnums.c_date_format) AND HOLIDAY = 'N';
                    SELECT NVL(TO_CHAR(MIN(SBDATE),systemnums.c_date_format),v_strOVERDUEDATE) into v_strOVERDUEDATE FROM SBCLDR WHERE CLDRTYPE='000' AND SBDATE >= TO_DATE(v_strOVERDUEDATE,systemnums.c_date_format) AND HOLIDAY = 'N';
                exception
                when others then
                    p_err_code:=0;--Ko bat exception
                end;*/
                IF v_strNINTCD='001' THEN -- 000: Cong Don; 001: Bac Thang
                    --v_strDUEDATE:=to_char(TO_DATE(v_strCURRDATE,systemnums.c_date_format) + v_intPRINTFRQ3,systemnums.c_date_format);
                    v_strDUEDATE:=to_char( getduedate( TO_DATE(v_strCURRDATE,systemnums.c_date_format) ,'B','000', v_intPRINTFRQ3 ) ,systemnums.c_date_format);
                    v_strOVERDUEDATE:=to_char(TO_DATE(v_strCURRDATE,systemnums.c_date_format) + v_intPRINTFRQ3,systemnums.c_date_format);
                ELSE
                    --v_strDUEDATE:=to_char(TO_DATE(v_strCURRDATE,systemnums.c_date_format) + v_lngPRINFRQ,systemnums.c_date_format);
                    -- DUcnv suwa v_lngOPRINPERIOD v_lngOPRINFRQ
                    v_strDUEDATE:=to_char( getduedate( TO_DATE(v_strCURRDATE,systemnums.c_date_format) ,'B','000', v_lngOPRINFRQ ) ,systemnums.c_date_format);
                    v_strOVERDUEDATE:=to_char(TO_DATE(v_strCURRDATE,systemnums.c_date_format) + v_lngOPRINPERIOD,systemnums.c_date_format);
                END IF;
                begin
                    SELECT NVL(TO_CHAR(max(SBDATE),systemnums.c_date_format),v_strDUEDATE) into v_strDUEDATE
                        FROM SBCLDR
                        WHERE CLDRTYPE='000'
                        AND SBDATE <= TO_DATE(v_strDUEDATE,systemnums.c_date_format)
                        and SBDATE >= TO_DATE(v_strCURRDATE,systemnums.c_date_format) AND HOLIDAY = 'N';
                    SELECT NVL(TO_CHAR(max(SBDATE),systemnums.c_date_format),v_strOVERDUEDATE) into v_strOVERDUEDATE
                        FROM SBCLDR
                        WHERE CLDRTYPE='000'
                        AND SBDATE <= TO_DATE(v_strOVERDUEDATE,systemnums.c_date_format)
                        and SBDATE >= TO_DATE(v_strCURRDATE,systemnums.c_date_format) AND HOLIDAY = 'N';
                exception
                when others then
                    p_err_code:=0;--Ko bat exception
                end;
            ElsIf v_strLNCLDR = 'B' Then   --Lich tra no tinh theo lich thanh toan

                IF v_strNINTCD='001' THEN -- 000: Cong Don; 001: Bac Thang
                    if v_intPRINTFRQ3 = 0 then
                        v_strDUEDATE:= v_strCURRDATE;
                        v_strOVERDUEDATE:= v_strCURRDATE;
                    else
                        select to_char(sbdate,systemnums.c_date_format) into v_strDUEDATE
                        from (
                            select sbdate, rownum rn from (
                                select sbdate from SBCLDR where holiday = 'N' and CLDRTYPE='000' and sbdate > to_date(v_strCURRDATE,systemnums.c_date_format) order by sbdate
                            )
                        )
                        where rn = v_intPRINTFRQ3;

                        select to_char(sbdate,systemnums.c_date_format) into v_strOVERDUEDATE
                        from (
                            select sbdate, rownum rn from (
                                select sbdate from SBCLDR where holiday = 'N' and CLDRTYPE='000' and sbdate > to_date(v_strCURRDATE,systemnums.c_date_format) order by sbdate
                            )
                        )
                        where rn = v_intPRINTFRQ3;
                    end if;
                else
                    if v_lngOPRINFRQ = 0 then-- DucNV
                        v_strDUEDATE:= v_strCURRDATE;
                    else
                        select to_char(sbdate,systemnums.c_date_format) into v_strDUEDATE
                        from (
                            select sbdate, rownum rn from (
                                select sbdate from SBCLDR where holiday = 'N' and CLDRTYPE='000' and sbdate > to_date(v_strCURRDATE,systemnums.c_date_format) order by sbdate
                            )
                        )
                        where rn = v_lngOPRINFRQ;-- DucNV

                    end if;

                    if v_lngOPRINPERIOD = 0 then
                        v_strOVERDUEDATE:= v_strCURRDATE;
                    else
                        select to_char(sbdate,systemnums.c_date_format) into v_strOVERDUEDATE
                        from (
                            select sbdate, rownum rn from (
                                select sbdate from SBCLDR where holiday = 'N' and CLDRTYPE='000' and sbdate > to_date(v_strCURRDATE,systemnums.c_date_format) order by sbdate
                            )
                        )
                        where rn = v_lngOPRINPERIOD; -- DucNV
                    end if;

                end if;
                /*i := v_lngOPRINFRQ;
                v_strDUEDATE := p_txmsg.BUSDATE;
                v_intWITHHOLIDAY := 0;
                v_intWITHOUTHOLIDAY := 0;
                WHILE i > 0 LOOP
                    begin
                        SELECT SUM(CASE WHEN CLR1.HOLIDAY='N' THEN 1 ELSE 0 END) WITHOUTHOLIDAY,TO_CHAR(MAX(SBDATE),systemnums.c_date_format) SBDATE
                                into v_intWITHOUTHOLIDAY,v_strDUEDATE
                        FROM SBCLDR CLR1 WHERE CLR1.CLDRTYPE='000' AND CLR1.SBDATE > TO_DATE(v_strDUEDATE ,systemnums.c_date_format) AND CLR1.SBDATE <= TO_DATE(v_strDUEDATE ,systemnums.c_date_format) +  i;
                    exception
                    when others then
                        p_err_code:=0;--Ko bat exception
                    end;
                    v_intWITHHOLIDAY:=i - v_intWITHOUTHOLIDAY;
                    i := v_intWITHHOLIDAY;
                END LOOP;
                If v_lngOPRINPERIOD > 365 Then
                    v_strOVERDUEDATE:=to_char(TO_DATE(p_txmsg.busdate,systemnums.c_date_format) + v_lngOPRINPERIOD,systemnums.c_date_format);
                    begin
                        SELECT NVL(TO_CHAR(MIN(SBDATE),systemnums.c_date_format),v_strOVERDUEDATE) DUEDATE
                        into v_strOVERDUEDATE
                        FROM SBCLDR WHERE CLDRTYPE='000' AND SBDATE >= TO_DATE(v_strOVERDUEDATE ,systemnums.c_date_format) AND HOLIDAY = 'N';
                        exception
                    when others then
                        p_err_code:=0;--Ko bat exception
                    end;
                else
                    i := v_lngOPRINPERIOD - v_lngOPRINFRQ;
                    v_strOVERDUEDATE := v_strDUEDATE;
                    v_intWITHHOLIDAY := 0;
                    v_intWITHOUTHOLIDAY := 0;
                    WHILE i > 0 LOOP
                        begin
                            SELECT SUM(CASE WHEN CLR1.HOLIDAY='N' THEN 1 ELSE 0 END) WITHOUTHOLIDAY,TO_CHAR(MAX(SBDATE),systemnums.c_date_format) SBDATE
                            into v_intWITHOUTHOLIDAY,v_strOVERDUEDATE
                            FROM SBCLDR CLR1 WHERE CLR1.CLDRTYPE='000' AND CLR1.SBDATE > TO_DATE(v_strOVERDUEDATE ,systemnums.c_date_format) AND CLR1.SBDATE <= TO_DATE( v_strOVERDUEDATE ,systemnums.c_date_format) +  i;
                            v_intWITHHOLIDAY := i - v_intWITHOUTHOLIDAY;
                        exception
                        when others then
                        p_err_code:=0;--Ko bat exception
                        end;
                        i := v_intWITHHOLIDAY;
                    end loop;
                end if;*/
            end if;
            --'Moi lan giai ngan sinh mot dong lich
            begin
                SELECT NVL(MAX(DUENO),0) DUENO
                into v_intDueno
                FROM LNSCHD WHERE ACCTNO = p_txmsg.txfields('03').value AND REFTYPE = 'GP';
            exception
            when others then
                v_intDueno:=1;
            end;

            if  TO_DATE(v_strDUEDATE , systemnums.c_date_format)>  TO_DATE(v_strOVERDUEDATE ,systemnums.c_date_format)then
                v_strDUEDATE := v_strOVERDUEDATE;
            end if ;
             -- DucNV xac dinh ngay tra no som nhat
                v_mintermdate:=v_strCURRDATE;
                BEGIN

                    Select   TO_CHAR(SBDATE,systemnums.c_date_format) INTO v_mintermdate
                    From sbcurrdate
                    Where numday=v_minterm and sbtype='B';
                Exception
                when others then
                    p_err_code:=0;
                End;
                -- End of DucNV
            v_lnAutoid:=SEQ_LNSCHD.NEXTVAL;
            INSERT INTO LNSCHD(AUTOID, ACCTNO, DUENO, RLSDATE, DUEDATE, OVERDUEDATE, ACRDATE, OVDACRDATE, PAIDDATE, REFTYPE, NML, OVD, PAID, DUESTS, PDUESTS,
            INTNMLACR,FEE,DUE,rate1,rate2,rate3,cfrate1,cfrate2,cfrate3, REFOPNAUTOID,ispaybank,mintermdate)
                   VALUES (v_lnAutoid, p_txmsg.txfields('03').value,v_intDueno ,
                   TO_DATE(p_txmsg.BUSDATE , systemnums.c_date_format),
                   TO_DATE(v_strDUEDATE , systemnums.c_date_format),
                   TO_DATE(v_strOVERDUEDATE ,systemnums.c_date_format),
                   TO_DATE(p_txmsg.BUSDATE ,systemnums.c_date_format),
                   TO_DATE(p_txmsg.BUSDATE , systemnums.c_date_format),
                   NULL,'GP',round(p_txmsg.txfields('11').value,0) ,0,0,'N',NULL,0,0,'N',
                  v_dblrate1,v_dblrate2,v_dblrate3,v_dblcfrate1,v_dblcfrate2,v_dblcfrate3, nvl(p_txmsg.txfields('35').value,''),
                  v_ispaybank,
                   least(TO_DATE(v_mintermdate, systemnums.c_date_format),TO_DATE(v_strOVERDUEDATE, systemnums.c_date_format))
                  );

               -- PhuongHT add
             -- insert vao lnschdlog
              INSERT INTO LNSCHDLOG(AUTOID,TXNUM, TXDATE, NML)
              VALUES(v_lnAutoid,p_txmsg.txnum, TO_DATE(p_txmsg.txdate,'DD/MM/RRRR'), to_number(p_txmsg.txfields ('11').VALUE));
             --end of PhuongHT add

            --Thuc hien tinh du tru lai cho BL
            Case
                When v_drate= 'D1' then v_dblDRATE:= 30;
                When v_drate= 'D2' then v_dblDRATE:= TO_NUMBER(TO_CHAR(LAST_DAY(TO_DATE(v_strCURRDATE,'dd/mm/rrrr')),'dd'));
                When v_drate= 'Y1' then v_dblDRATE:= 360;
                When v_drate= 'Y2' then
                    v_strYEAR:= SUBSTR(v_strCURRDATE,7);
                    v_dblDRATE:= TO_DATE(CONCAT('31/12/',v_strYEAR),'dd/mm/rrrr') - TO_DATE(CONCAT('01/01/',v_strYEAR),'dd/mm/rrrr') + 1;
            End case;

            v_intdays := TO_DATE(v_mintermdate,systemnums.c_date_format) - TO_DATE(p_txmsg.BUSDATE ,systemnums.c_date_format);
            v_intnmlpbl:= ROUND(round(p_txmsg.txfields('11').value,0) * v_orate1 / 100 * v_intdays / v_dblDRATE,4);

            UPDATE lnmast SET intnmlpbl = intnmlpbl + v_intnmlpbl WHERE acctno = p_txmsg.txfields('03').value;
            --End thuc hien tinh du tru lai cho BL

        end if;
    end if;

    plog.debug (pkgctx, '<<END OF fn_DrawndownProcess');
    plog.setendsection (pkgctx, 'fn_DrawndownProcess');
    RETURN systemnums.C_SUCCESS;
EXCEPTION
WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.error (pkgctx, 'Dong:' || dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'fn_DrawndownProcess');
      RAISE errnums.E_SYSTEM_ERROR;
END fn_DrawndownProcess;
 ---------------------------------pr_OrderFinish------------------------------------------------
  PROCEDURE pr_OrderFinish(p_err_code  OUT varchar2)
  IS
      indate varchar2(20);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_OrderFinish');
    select varvalue into indate from sysvar where grname ='SYSTEM' and varname ='CURRDATE';
    update odmast set orstatus=nvl(
    (select odstatus from
        (SELECT ORDERID,
            (CASE WHEN (REMAINQTTY = 0 AND (SELECT COUNT (ORGORDERID) FROM STSCHD WHERE STSCHD.ORGORDERID = ORDERID AND STSCHD.STATUS <> 'C' AND STSCHD.DELTD<>'Y') = 0
                                       AND (SELECT COUNT (ORGORDERID) FROM STSCHD WHERE STSCHD.ORGORDERID = ORDERID AND STSCHD.DELTD<>'Y') > 0)THEN '7'
                  WHEN ((EXECQTTY > 0 AND EXECQTTY <= ORDERQTTY)
                                       AND (SELECT COUNT (ORGORDERID) FROM STSCHD WHERE STSCHD.ORGORDERID = ORDERID) > 0)THEN '4'
                  ELSE '5' END) ODSTATUS
        FROM ODMAST
        WHERE ORSTATUS <> '5' AND ORSTATUS <> '7' AND (EXPDATE < TO_DATE(indate,'DD/MM/YYYY'))
             OR (REMAINQTTY = 0 AND (SELECT COUNT (ORGORDERID) FROM STSCHD WHERE STSCHD.ORGORDERID = ORDERID AND STSCHD.STATUS <> 'C' AND STSCHD.DELTD<>'Y') =0)
    ) A
    where a.orderid=odmast.orderid),odmast.orstatus
  );
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_OrderFinish');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_OrderFinish');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_OrderFinish;

   ---------------------------------pr_OrderCleanUp------------------------------------------------
  PROCEDURE pr_OrderCleanUp(p_err_code  OUT varchar2)
  IS
      v_CURRDATE date;
      l_LOGDATE varchar2(10);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_OrderCleanUp');

    SELECT TO_DATE (varvalue, systemnums.c_date_format), varvalue
    INTO v_CURRDATE, l_LOGDATE
    FROM sysvar
    WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
--MSBS-2589
    /*FOR REC IN
        (SELECT MST.ORDERID, MST.AFACCTNO FROM ODMAST MST,SBSECURITIES SB  WHERE MST.REMAINQTTY>0 AND MST.ORSTATUS IN ('1','2','4','8','9')
            AND MST.CODEID=SB.CODEID AND SB.TRADEPLACE IN ('001','002','005')
            AND MST.EXECTYPE NOT IN ('AS', 'AB', 'CS', 'CB')
        )
    LOOP
    --CAP NHAT LAI TRANG THAI CHO CAC LENH CON DU.
        UPDATE ODMAST SET ORSTATUS='1', PORSTATUS=PORSTATUS || '1',REMAINQTTY=0,ADJUSTQTTY=0,MATCHAMT=0,EXPRICE=0,EXQTTY=0,CANCELQTTY=0,REJECTQTTY=0
        where orderid=rec.orderid;
\*
    --DANH DAU LAI ROOM CHO CAC TK GIAI TOA LENH
        pr_eventslog(l_LOGDATE || ' >> pr_OrderCleanUp', 0, '    >> Begin Remark fn_markedafpralloc');
        if fn_markedafpralloc(rec.AFACCTNO,
                        null,
                        'A',
                        'T',
                        null,
                        'N',
                        'N',
                        v_CURRDATE,
                        null,
                        p_err_code) <> systemnums.C_SUCCESS then

            plog.debug (pkgctx, 'got error fn_markedafpralloc inside pr_OrderCleanUp: ' || p_err_code );
            ROLLBACK;
            RETURN;
        end if;
        pr_eventslog(l_LOGDATE || ' >> pr_OrderCleanUp', 0, '    >> End Remark fn_markedafpralloc');
*\
    END LOOP;*/

    MERGE INTO odmast od
    USING (SELECT MST.ORDERID, MST.AFACCTNO FROM ODMAST MST,SBSECURITIES SB  WHERE MST.REMAINQTTY>0 AND MST.ORSTATUS IN ('1','2','4','8','9')
            AND MST.CODEID=SB.CODEID AND SB.TRADEPLACE IN ('001','002','005')
            AND MST.EXECTYPE NOT IN ('AS', 'AB', 'CS', 'CB')) mst
    ON (od.orderid = mst.orderid)
    WHEN MATCHED THEN
      UPDATE SET ORSTATUS='1', PORSTATUS=PORSTATUS || '1',REMAINQTTY=0,ADJUSTQTTY=0,MATCHAMT=0,EXPRICE=0,EXQTTY=0,CANCELQTTY=0,REJECTQTTY=0;

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_OrderCleanUp');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_OrderCleanUp');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_OrderCleanUp;


-----------------------------------pr_CICalcFeeDepositSecurities------------------------------------------------
PROCEDURE pr_CICalcFeeDepositSecurities(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      v_CURRDATE date;
      v_NEXTDATE date;
      l_icrate number(10,4);
      l_numday number;
      l_isRate number;
      l_currmonth VARCHAR2(10);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CICalcFeeDepositSecurities');

          l_isRate := 0;

          SELECT TO_DATE (varvalue, systemnums.c_date_format)
                 INTO v_CURRDATE
          FROM sysvar
          WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

          SELECT TO_DATE (varvalue, systemnums.c_date_format)
                 INTO v_NEXTDATE
          FROM sysvar
          WHERE grname = 'SYSTEM' AND varname = 'NEXTDATE';

          plog.debug(pkgctx, 'Before set l_currmonth ');
          l_currmonth := to_char(to_date(v_NEXTDATE, 'dd/MM/rrrr'),'RRRRMM');
          plog.debug(pkgctx, 'End set l_currmonth ' || l_currmonth);

          l_numday := v_NEXTDATE - v_CURRDATE;
    --Lay bieu phi tu bang ICCFTYPEDEF
    for rec in (SELECT actype FROM ICCFTYPEDEF WHERE EVENTCODE='FEEDEPOSITSE')
      loop

       SELECT ICFLAT INTO l_icrate FROM ICCFTYPEDEF WHERE EVENTCODE='FEEDEPOSITSE' and actype = rec.actype;
        plog.debug(pkgctx, 'Bat dau tinh phi CK ngay ' || to_char(v_CURRDATE));

        --Bat dau tinh phi luu ky chung khoan cho tat ca cac tieu khoan
       for rec2 in
       (
            select af.acctno, round((nvl(sum(se.trade + se.margin + se.mortage + se.blocked + se.secured + se.repo + se.netting + se.dtoclose + se.withdraw),0)*l_icrate*l_numday)/30,4) cidepofee,
            sum(se.trade + se.margin + se.mortage + se.blocked + se.secured + se.repo + se.netting + se.dtoclose + se.withdraw) depoqtty
               from cfmast cf, afmast af, cimast ci, semast se, sbsecurities sb
               where cf.custid = af.custid and af.acctno = se.afacctno
                    and se.codeid = sb.codeid and af.acctno = ci.acctno and ci.actype = rec.actype
                    and sb.sectype in ('001','002','008','011')
                    and sb.tradeplace in ('001','002','005')
                    AND cf.custatcom='Y'
                    and af.status not in ('N','C')
               group by af.acctno
               having sum(se.trade + se.margin + se.mortage + se.blocked + se.secured + se.repo + se.netting + se.dtoclose + se.withdraw) >0
       )
       loop
            update cimast ci
                  set ci.cidepofeeacr = ci.cidepofeeacr + rec2.cidepofee
            where ci.afacctno = rec2.acctno;

               --Ghi vao CIDEPOFEETRAN
            INSERT INTO cidepofeetran(autoid, afacctno, frdate, todate, depoqtty, deporate, depotype, cidepofeeacr, status, tltxcd, txdesc, MONTH)
            values (seq_cidepofeetran.nextval, rec2.acctno, v_CURRDATE, v_NEXTDATE,
                      rec2.depoqtty, l_icrate, 'C', round(rec2.cidepofee,4),
                      'P' , 'CIFEEDEPOSITSE' , 'Tinh phi luu ky co phieu, chung chi quy theo ngay ' || v_CURRDATE , l_currmonth);

       end loop;
       commit;


      end loop;

    p_err_code:=0;

    plog.setendsection(pkgctx, 'pr_CICalcFeeDepositSecurities');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on pr_CICalcFeeDepositSecurities');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CICalcFeeDepositSecurities');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_CICalcFeeDepositSecurities;


-----------------------------------pr_CIInterestToPrincipal------------------------------------------------
PROCEDURE pr_CIInterestToPrincipal(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE date;
      v_strNEXTDATE date;
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      v_COMPANYCD VARCHAR2(10);
      v_lastday number;
      l_ftodate VARCHAR2(20);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CIInterestToPrincipal');


    v_COMPANYCD:=cspks_system.fn_get_sysvar ('SYSTEM', 'COMPANYCD');

    SELECT COUNT(*) MAXROW into l_MaxRow FROM  cimast;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;
    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='1162';
    SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strNEXTDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'NEXTDATE';
    SELECT to_Char(v_strCURRDATE,'MM/RRRR') INTO l_ftodate FROM dual;

    --Xac dinh ngay cuoi cung cua thang
    select to_number(to_char(max(sbdate),'DD')) into v_lastday from sbcldr where  to_char(sbdate,'MM/YYYY')= to_char(v_strCURRDATE,'MM/YYYY') and cldrtype ='000';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=v_strCURRDATE;
    l_txmsg.busdate:=v_strCURRDATE;
    l_txmsg.tltxcd:='1162';
    for rec in
    (
        select mst.* from (SELECT * FROM (SELECT A.*, ROWNUM ID FROM CIMAST A) WHERE ID BETWEEN p_FromRow AND p_ToRow) MST,iccftypedef ic
        where mst.actype =ic.actype and ic.eventcode ='CRINTPRN' and ic.deltd <> 'Y' and ic.modcode ='CI'
        and MST.corebank <> 'Y'
        and ((ic.period ='M' and to_char(v_strCURRDATE,'MM') <> to_char(v_strNEXTDATE,'MM')) --Monthly, Ngay cuoi thang
            or (ic.period ='S'
                and to_date((case when periodday>v_lastday or periodday<1 then v_lastday else periodday end)  || '/' || to_char(v_strCURRDATE,'MM/RRRR'), 'DD/MM/RRRR')>=v_strCURRDATE
                and to_date((case when periodday>v_lastday or periodday<1 then v_lastday else periodday end) || '/' || to_char(v_strCURRDATE,'MM/RRRR'), 'DD/MM/RRRR')<v_strNEXTDATE
                ) --Ngay hien tai la ngay lam viec gan ngay thu lai co dinh nhat
            )
    )
    loop
        --Set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.ACCTNO,1,4);

        --Set cac field giao dich
        --03  ACCTNO      C
        l_txmsg.txfields ('03').defname   := 'ACCTNO';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;
        --10  CRINTACR    N
        l_txmsg.txfields ('10').defname   := 'CRINTACR';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.CRINTACR;
        --16  TASKCD      C
        l_txmsg.txfields ('16').defname   := 'TASKCD';
        l_txmsg.txfields ('16').TYPE      := 'C';
        l_txmsg.txfields ('16').VALUE     := '';
        --17  MICODE      C
        l_txmsg.txfields ('17').defname   := 'MICODE';
        l_txmsg.txfields ('17').TYPE      := 'C';
        l_txmsg.txfields ('17').VALUE     := '';
        --30  DESC        C
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE     := v_strDesc || errnums.C_CONST_MONTH_VI || l_ftodate;

        BEGIN
            IF txpks_#1162.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 1162: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_CIInterestToPrincipal');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on pr_CIInterestToPrincipal');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CIInterestToPrincipal');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_CIInterestToPrincipal;

-----------------------------------pr_CICalcFeeDepositBond------------------------------------------------
PROCEDURE pr_CICalcFeeDepositBond(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      v_CURRDATE date;
      v_NEXTDATE date;
      l_icrate number(10,4);
      l_numday number;
      l_isRate number;
      l_currmonth VARCHAR2(10);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CICalcFeeDepositBond');

          l_isRate := 0;

          SELECT TO_DATE (varvalue, systemnums.c_date_format)
                 INTO v_CURRDATE
          FROM sysvar
          WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
          SELECT TO_DATE (varvalue, systemnums.c_date_format)
                 INTO v_NEXTDATE
          FROM sysvar
          WHERE grname = 'SYSTEM' AND varname = 'NEXTDATE';


          plog.debug(pkgctx, 'Before set l_currmonth ');
          l_currmonth := to_char(to_date(v_NEXTDATE, 'dd/MM/rrrr'),'RRRRMM');
          plog.debug(pkgctx, 'End set l_currmonth ' || l_currmonth);

          l_numday := v_NEXTDATE - v_CURRDATE;
    --Lay bieu phi tu bang ICCFTYPEDEF
    --SELECT count(1) INTO l_isRate FROM ICCFTYPEDEF WHERE EVENTCODE='FEEDEPOSITBO';
    for rec in (SELECT actype FROM ICCFTYPEDEF WHERE EVENTCODE='FEEDEPOSITBO')
      loop

       SELECT ICFLAT INTO l_icrate FROM ICCFTYPEDEF WHERE EVENTCODE='FEEDEPOSITBO' and actype = rec.actype;
        plog.debug(pkgctx, 'Bat dau tinh phi Trai phieu ngay ' || to_char(v_CURRDATE));
        --Bat dau tinh phi luu ky chung khoan cho tat ca cac tieu khoan
               update cimast ci
                  set ci.cidepofeeacr = ci.cidepofeeacr + nvl((select round(mst.cidepofee,4) from (select af.acctno, (nvl(sum(se.trade + se.margin + se.mortage + se.blocked + se.secured + se.repo + se.netting + se.dtoclose + se.withdraw),0)*l_icrate*l_numday)/30 cidepofee
               from cfmast cf, afmast af,  semast se, sbsecurities sb
               where cf.custid = af.custid and af.acctno = se.afacctno
                    and se.codeid = sb.codeid
                    and sb.sectype in ('003','006')
                    and sb.tradeplace in ('001','002','005')
                    and cf.custatcom='Y'
                    and af.status not in ('N','C')
               group by af.acctno
               having sum(se.trade + se.margin + se.mortage + se.blocked + se.secured + se.repo + se.netting + se.dtoclose + se.withdraw) >0) mst where ci.afacctno = mst.acctno and ci.actype = rec.actype ),0);

               --Ghi vao CIDEPOFEETRAN
               INSERT INTO cidepofeetran(autoid, afacctno, frdate, todate, depoqtty, deporate, depotype, cidepofeeacr, status, tltxcd, txdesc, month)
               select seq_cidepofeetran.nextval autoid, mt.acctno afacctno, v_CURRDATE frdate, v_NEXTDATE todate,
                      mt.depoqtty, l_icrate deporate, 'T' depotype, round((mt.depoqtty*l_icrate*l_numday)/30,4) cidepofeeacr,
                      'P' status, 'CIFEEDEPOSITBO' tltxcd, 'Tinh phi trai phieu theo ngay ' || v_CURRDATE txdesc, l_currmonth MONTH
               from (select af.acctno, nvl(sum(se.trade + se.margin + se.mortage + se.blocked + se.secured + se.repo + se.netting + se.dtoclose + se.withdraw),0) depoqtty
                         from cfmast cf, afmast af,  semast se, sbsecurities sb, cimast ci
                         where cf.custid = af.custid and af.acctno = se.afacctno and ci.afacctno = af.acctno and ci.actype = rec.actype
                              and se.codeid = sb.codeid
                              and sb.sectype in ('003','006')
                              and sb.tradeplace in ('001','002','005')
                              and cf.custatcom='Y'
                              and af.status not in ('N','C')
                         group by af.acctno
                         having sum(se.trade + se.margin + se.mortage + se.blocked + se.secured + se.repo + se.netting + se.dtoclose + se.withdraw) >0) mt;
               commit;


        end loop;

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_CICalcFeeDepositBond');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on pr_CICalcFeeDepositBond');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CICalcFeeDepositBond');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_CICalcFeeDepositBond;
  -- -----------------------------------pr_CICalcFeeDeposit------------------------------------------------
PROCEDURE pr_CICalcFeeDeposit(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      v_CURRDATE date;
      v_NEXTDATE date;
      l_icrate number(10,4);
      l_numday number;
      l_isRate number;
      l_currmonth VARCHAR2(10);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CICalcFeeDeposit');
    p_err_code:=0;
     plog.debug (pkgctx, 'before call pr_CICalcFeeDeposit ');
    SP_PROCESS_CIFEESCHD_COMMON;
    plog.debug (pkgctx, 'after call pr_CICalcFeeDeposit ');
    plog.setendsection(pkgctx, 'pr_CICalcFeeDeposit');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on pr_CICalcFeeDeposit');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CICalcFeeDeposit');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_CICalcFeeDeposit;

/*-----------------------------------pr_CIPayFeeDepositSeBo------------------------------------------------
PROCEDURE pr_CIPayFeeDepositSeBo(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc     varchar2(1000);
      v_strEN_Desc  varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param   varchar2(300);
      l_MaxRow      NUMBER(20,0);
      v_strDay      varchar2(2);
      l_cimastcheck_arr txpks_check.cimastcheck_arrtype;
      l_baldefovd apprules.field%TYPE;
      l_feeamt      number(20,4);
      l_isRate      number;
      v_currmonth   varchar2(6);
      v_nextmonth   varchar2(6);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CIPayFeeDepositSeBo');
    l_isRate := 0;

    SELECT COUNT(*) MAXROW into l_MaxRow FROM  AFMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='1182';
     SELECT varvalue INTO v_strCURRDATE
     FROM sysvar
     WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

     SELECT varvalue INTO v_strNEXTDATE
     FROM sysvar
     WHERE grname = 'SYSTEM' AND varname = 'NEXTDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='1182';
    plog.debug(pkgctx, 'Begin loop');
    --SELECT count(1) INTO l_isRate FROM ICCFTYPEDEF WHERE EVENTCODE='FEEDEPOSIT';


    -- TruongLD sua lai theo yeu cau cua BVS
    -- 1. Thu phi vao ngay cuoi thang
    -- 2. Neu du tien thi moi thu con ko thi ko thu
    -- 3. Neu KH no phi nhieu thang thi thi thang xa nhat truoc
    v_currmonth := to_char(to_date(v_strCURRDATE,'DD/MM/RRRR'),'RRRRMM');
    v_nextmonth := to_char(to_date(v_strNEXTDATE,'DD/MM/RRRR'),'RRRRMM');

    for recRoot in (SELECT actype FROM ICCFTYPEDEF WHERE EVENTCODE='FEEDEPOSIT')
      loop
        \*
        -- Hien tai dang thu vao 1 ngay co dinh trong thang
        select lpad(periodday,2,'0') into v_strDay
        from iccftypedef where eventcode  = 'FEEDEPOSIT' and actype = recRoot.Actype;
        *\

        \*
        if to_date(v_strDay || substr(v_strCURRDATE, 3, 8),systemnums.c_date_format) >= to_date(v_strCURRDATE,systemnums.c_date_format) and
           to_date(v_strDay || substr(v_strCURRDATE, 3, 8),systemnums.c_date_format) < to_date(v_strNEXTDATE,systemnums.c_date_format) then
        *\

        -- Thu phi luu ky vao dau ngay cuoi thang
        if v_nextmonth <>  v_currmonth then
        --Neu dung la ngay thu phi thi bat dau thu phi cho tung tieu khoan
           for rec in
            (
                select * from (select mst.* from (
                               select af.acctno, tr.month, tr.cidepofeeacr, rownum rn
                               from cfmast cf, afmast af,  cimast ci,
                                    (
                                        -- TruongLD Add
                                        -- Chi lay nhung TK chua thu phi
                                        select ci.afacctno, ci.month, sum(ci.cidepofeeacr) cidepofeeacr
                                        from cidepofeetran ci
                                        Where ci.status ='P'
                                        group by ci.afacctno, ci.month
                                    )tr
                               where cf.custid = af.custid and af.acctno = ci.afacctno
                                     and cf.custatcom='Y'
                                     and af.status not in ('N','C')
                                     And tr.afacctno = af.acctno
                                     and ci.actype = recRoot.Actype
                               order by af.acctno, tr.month desc) mst
                               order by mst.rn) mt
                 where mt.rn BETWEEN p_FromRow AND p_ToRow
            )
            loop
                 --Chi tinh thu phi voi nhung tai khoan nao co phi.
                 if nvl(rec.cidepofeeacr,0) > 0 then
                    l_CIMASTcheck_arr := txpks_check.fn_CIMASTcheck(rec.acctno,'CIMAST','ACCTNO');
                    -- Do BALDEFOVD da tru fee luu ky
                    -- Khi thi khong tru nua --> chuyen qua check = field  BALDEFOVD_RELEASED_DEPOFEE
                    l_BALDEFOVD := l_CIMASTcheck_arr(0).BALDEFOVD_RELEASED_DEPOFEE;

                    -- TruongLD sua theo yeu cau cua BVS
                    -- So du khong du de tra phi luu ky --> ko tra
                    \*
                    select case when to_number(l_BALDEFOVD) <= 0 then 0
                                when to_number(l_BALDEFOVD) > rec.cidepofeeacr then rec.cidepofeeacr
                                else floor(to_number(l_BALDEFOVD)) end into l_feeamt
                    from dual;
                    *\
                    select case when to_number(l_BALDEFOVD) <= 0 then 0
                                when to_number(l_BALDEFOVD) >= rec.cidepofeeacr then rec.cidepofeeacr
                                else 0 end into l_feeamt
                    from dual;
                    --End TruongLD/>
                     --Chi thu phi voi nhung tai khoan co tien de thu.
                    if  l_feeamt > 0 then
                        plog.debug(pkgctx, 'Loop for account:' || rec.acctno || ' ngay' || to_char(v_strCURRDATE));
                        SELECT systemnums.C_BATCH_PREFIXED
                                                 || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                                          INTO l_txmsg.txnum
                                          FROM DUAL;
                                l_txmsg.brid        := substr(rec.ACCTNO,1,4);

                                --Set cac field giao dich
                                --03  ACCTNO      C
                                l_txmsg.txfields ('03').defname   := 'ACCTNO';
                                l_txmsg.txfields ('03').TYPE      := 'C';
                                l_txmsg.txfields ('03').VALUE     := rec.acctno;
                                --10  INTAMT      N
                                l_txmsg.txfields ('10').defname   := 'FEEAMT';
                                l_txmsg.txfields ('10').TYPE      := 'N';
                                l_txmsg.txfields ('10').VALUE     := l_feeamt;
                                --30    DESC        C
                                l_txmsg.txfields ('30').defname   := 'DESC';
                                l_txmsg.txfields ('30').TYPE      := 'C';
                                l_txmsg.txfields ('30').VALUE     := v_strDesc || ' cua tieu khoan ' || rec.acctno;

                                BEGIN
                                    IF txpks_#1182.fn_batchtxprocess (l_txmsg,
                                                                     p_err_code,
                                                                     l_err_param
                                       ) <> systemnums.c_success
                                    THEN
                                       plog.debug (pkgctx,
                                                              'got error 1182: ' || p_err_code
                                       );
                                       ROLLBACK;
                                       RETURN;
                                    END IF;
                                END;

                                --</ Cap nhat l?i tran thai -- dat thu phi LK
                                Update cidepofeetran set status ='C' Where afacctno = rec.acctno And month = rec.month;
                                --/>
                     end if;
                 end if;
            end loop;
        end if;

        end loop;


    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_CIPayFeeDepositSeBo');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on pr_CIPayFeeDepositSeBo');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_CIPayFeeDepositSeBo');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_CIPayFeeDepositSeBo;
*/
-----------------------------------pr_CIPayFeeDepositSeBo------------------------------------------------
PROCEDURE pr_CIPayFeeDepositSeBo(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc     varchar2(1000);
      v_strEN_Desc  varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param   varchar2(300);
      l_MaxRow      NUMBER(20,0);
      v_strDay      varchar2(2);
      l_cimastcheck_arr txpks_check.cimastcheck_arrtype;
      l_baldefovd apprules.field%TYPE;
      l_feeamt      number(20,4);
      l_isRate      number;
      v_currmonth   varchar2(6);
      v_nextmonth   varchar2(6);
      v_afacctno_temp   VARCHAR2(20);
      v_tmpregafacctno  varchar2(20);
      v_ftodate         VARCHAR2(20);
      v_todate      date;
      v_currdate    date;
      v_nexttodate  date;
      v_desc        varchar2(200);
      v_WARAMT      NUMBER(20,0);
      v_SMSAMT      NUMBER(20,0);
      v_tmpWARAMT      NUMBER(20,0);
      v_tmpSMSAMT      NUMBER(20,0);
      v_amt         NUMBER(20,0);
      v_avlbal      NUMBER(20,0);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CIPayFeeDepositSeBo');
    l_isRate := 0;

   -- SELECT COUNT(*) MAXROW into l_MaxRow FROM  AFMAST;
/*    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;*/
    p_lastRun:='Y';

    SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='1182';
     SELECT varvalue INTO v_strCURRDATE
     FROM sysvar
     WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

     SELECT varvalue INTO v_strNEXTDATE
     FROM sysvar
     WHERE grname = 'SYSTEM' AND varname = 'NEXTDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='1182';
    plog.debug(pkgctx, 'Begin loop');

                       v_afacctno_temp:='0';

    -- xet xem co khoan phi luu ky nao den han
    for rec IN (SELECT * FROM  (SELECT AFACCTNO ACCTNO, TODATE, SUM(NMLAMT)-SUM(PAIDAMT)-SUM(FLOATAMT) AVL
                     FROM CIFEESCHD WHERE DELTD<>'Y'  GROUP BY AFACCTNO, TODATE) mst
                     WHERE avl>0 ORDER BY acctno,todate )
      loop


     -- neu tk co du tien moi thu
     --l_CIMASTcheck_arr := txpks_check.fn_CIMASTcheck(rec.ACCTNO,'CIMAST','ACCTNO');
      -- Do BALDEFOVD da tru fee luu ky
                    -- Khi thi khong tru nua --> chuyen qua check = field  BALDEFOVD_RELEASED_DEPOFEE
                    -- v_afacctno_temp: TK ko du tien cho thang truoc nen ko tra cho cac thang sau
       --l_BALDEFOVD := to_number(l_CIMASTcheck_arr(0).balance) + to_number(l_CIMASTcheck_arr(0).avladvance);
       --MSBS-2589 Tunning bach
       --Do l_BALDEFOVD = tien mat - ky quy mua + ưng truoc nen k can lay trong txpks_check.fn_CIMASTcheck
       SELECT ci.balance - nvl(b.secureamt,0) + nvl(adv.avladvance,0)
              INTO l_BALDEFOVD
       FROM cimast ci,(SELECT * FROM v_getbuyorderinfo WHERE afacctno = rec.ACCTNO) b,
           (select sum(depoamt) avladvance,afacctno
            from v_getAccountAvlAdvance where afacctno = rec.ACCTNO group by afacctno) adv
       WHERE ci.acctno = b.afacctno(+) AND ci.acctno = adv.afacctno(+) AND ci.acctno = rec.ACCTNO;
       --end MSBS-2589

               select case when to_number(l_BALDEFOVD) <= 0 then 0
               when (to_number(l_BALDEFOVD) >= rec.AVL AND rec.acctno <> v_afacctno_temp )then rec.AVL
               else 0 end into l_feeamt from dual;

               IF (l_BALDEFOVD<rec.AVL)
               THEN v_afacctno_temp := rec.acctno ;
               END IF;
              -- lay ra truong to_Date theo format de len bao cao
              SELECT to_Char(rec.todate,'MM/RRRR') INTO v_ftodate FROM dual;
                 --Chi tinh thu phi voi nhung tai khoan nao co phi.

                    if  l_feeamt > 0 then
                        plog.debug(pkgctx, 'Loop for account:' || rec.acctno || ' ngay' || v_strCURRDATE);
                        SELECT systemnums.C_BATCH_PREFIXED
                                                 || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                                          INTO l_txmsg.txnum
                                          FROM DUAL;
                                l_txmsg.brid        := substr(rec.ACCTNO,1,4);

                                --Set cac field giao dich
                                --03  ACCTNO      C
                                l_txmsg.txfields ('03').defname   := 'ACCTNO';
                                l_txmsg.txfields ('03').TYPE      := 'C';
                                l_txmsg.txfields ('03').VALUE     := rec.acctno;
                                --10  INTAMT      N
                                l_txmsg.txfields ('10').defname   := 'FEEAMT';
                                l_txmsg.txfields ('10').TYPE      := 'N';
                                l_txmsg.txfields ('10').VALUE     := l_feeamt;
                                   --07  FTODATE      N
                                l_txmsg.txfields ('07').defname   := 'FTODATE';
                                l_txmsg.txfields ('07').TYPE      := 'C';
                                l_txmsg.txfields ('07').VALUE     := v_ftodate;
                                --30    DESC        C
                                l_txmsg.txfields ('30').defname   := 'DESC';
                                l_txmsg.txfields ('30').TYPE      := 'C';
                                l_txmsg.txfields ('30').VALUE     := v_strDesc || ' ' ||to_char( rec.TODATE,'MM/RRRR');

                                BEGIN
                                    IF txpks_#1182.fn_batchtxprocess (l_txmsg,
                                                                     p_err_code,
                                                                     l_err_param
                                       ) <> systemnums.c_success
                                    THEN
                                       plog.error (pkgctx,
                                                              'got error 1182: ' || p_err_code
                                       );
                                       ROLLBACK;
                                       RETURN;
                                    END IF;
                                END;

                                --</ Cap nhat l?i tran thai -- dat thu phi LK
                              UPDATE CIFEESCHD SET PAIDAMT=NMLAMT, PAIDTXNUM=l_txmsg.txnum, paidtxdate=l_txmsg.txdate
                              WHERE DELTD<>'Y' AND AFACCTNO=rec.acctno AND TODATE=rec.TODATE;
                                --/>
                     end if;




        end loop;


    --- HaiLT them thu phi dang ky va gui tin nhan canh bao
    v_currdate:= to_date(v_strCURRDATE,'DD/MM/RRRR');

    plog.debug(pkgctx, 'kIEM TRA CUOI THANG KO DE LAM 1113');

    select max(sbdate) into v_todate from sbcldr where to_char(sbdate,'MM/RRRR') = to_char(v_currdate,'MM/RRRR') and cldrtype = '000' and holiday='N';
  if v_todate = v_currdate  then

        plog.debug(pkgctx, 'Begin Thu tien phi hang thang 1113');

        --SELECT to_number(VARVALUE) INTO v_WARAMT from sysvar where VARNAME = 'WEBWARAMT';
        --SELECT to_number(VARVALUE) INTO v_SMSAMT from sysvar where VARNAME = 'WEBSMSAMT';

        v_WARAMT:= to_number(cspks_system.fn_get_sysvar('SYSTEM','WEBWARAMT'));
        v_SMSAMT:= to_number(cspks_system.fn_get_sysvar('SYSTEM','WEBSMSAMT'));

        plog.debug(pkgctx, 'Begin tinh phi hang thang 1113');

        select to_date(max(sbdate),systemnums.c_date_format) into v_nexttodate from sbcldr where to_char(sbdate,'MM/RRRR') = to_char(to_date(v_strNEXTDATE,'DD/MM/RRRR') ,'MM/RRRR') and cldrtype = '000';

        plog.debug(pkgctx, 'Begin tinh ngay cuoi cung cua thang');

        l_txmsg.msgtype:='T';
        l_txmsg.local:='N';
        l_txmsg.tlid        := systemnums.c_system_userid;
        SELECT SYS_CONTEXT ('USERENV', 'HOST'),
              SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
        INTO l_txmsg.wsname, l_txmsg.ipaddress
        FROM DUAL;
        l_txmsg.off_line    := 'N';
        l_txmsg.deltd       := txnums.c_deltd_txnormal;
        l_txmsg.txstatus    := txstatusnums.c_txcompleted;
        l_txmsg.msgsts      := '0';
        l_txmsg.ovrsts      := '0';
        l_txmsg.batchname   := 'DAY';
        l_txmsg.txdate:=v_currdate;
        l_txmsg.busdate:=v_currdate;
        l_txmsg.tltxcd:='1113';

        SELECT TXDESC INTO v_desc FROM TLTX WHERE TLTXCD = '1113';

        plog.debug(pkgctx, 'Begin loop 1113');

        for recREGALERT in ( SELECT a.autoid, a.vendor, a.regaccttyp, a.registerid, a.regdate, a.opndate, a.frdate, a.todate, a.paiddate,
                                a.status, a.regsms, a.afacctno, CF.CUSTODYCD, CF.FULLNAME CUSTNAME, CF.FULLNAME, CF.ADDRESS, CF.IDCODE,
                                CF.IDDATE, CF.IDPLACE
                             FROM cfregalert a, CFMAST CF WHERE A.REGISTERID=CF.CUSTID AND A.STATUS = 'A'
                            )
        loop

            if recREGALERT.regsms <> 'N' then
                v_tmpSMSAMT:= v_SMSAMT;
            else
                v_tmpSMSAMT:=0 ;
            end if;

            v_amt := v_WARAMT + v_tmpSMSAMT;

           /* select max(getbaldefovd(recREGALERT.afacctno)) into v_avlbal
                from cimast where custid = recREGALERT.registerid and status = 'A' ;*/

         select acctno , avlbal into v_tmpregafacctno,  v_avlbal from
            (
                select afacctno, acctno , getbaldefovd(afacctno) avlbal
               -- into v_afaccount, v_ciaccount, v_avlbal
                from cimast where custid = recREGALERT.registerid AND STATUS = 'A'
                order by getbaldefovd(afacctno) desc
            ) where rownum=1;


            if v_avlbal >= v_amt then

                --Set txnum
                SELECT systemnums.C_BATCH_PREFIXED
                                 || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                          INTO l_txmsg.txnum
                          FROM DUAL;

                 l_txmsg.brid        := substr(recREGALERT.AFACCTNO ,1,4);

                 --88  C   CUSTODYCD
                l_txmsg.txfields ('88').defname   := 'CUSTODYCD';
                l_txmsg.txfields ('88').TYPE      := 'C';
                l_txmsg.txfields ('88').VALUE     := recREGALERT.custodycd;

                --03  C   ACCTNO
                l_txmsg.txfields ('03').defname   := 'ACCTNO';
                l_txmsg.txfields ('03').TYPE      := 'C';
                l_txmsg.txfields ('03').VALUE     := v_tmpregafacctno;

                --90  C   CUSTNAME
                l_txmsg.txfields ('90').defname   := 'CUSTNAME';
                l_txmsg.txfields ('90').TYPE      := 'C';
                l_txmsg.txfields ('90').VALUE     := recREGALERT.custname;

                --95  C   FULLNAME
                l_txmsg.txfields ('95').defname   := 'FULLNAME';
                l_txmsg.txfields ('95').TYPE      := 'C';
                l_txmsg.txfields ('95').VALUE     := recREGALERT.FULLNAME;

                --91  C   ADDRESS
                l_txmsg.txfields ('91').defname   := 'ADDRESS';
                l_txmsg.txfields ('91').TYPE      := 'C';
                l_txmsg.txfields ('91').VALUE     := recREGALERT.ADDRESS;

                --92  C   LICENSE
                l_txmsg.txfields ('92').defname   := 'LICENSE';
                l_txmsg.txfields ('92').TYPE      := 'C';
                l_txmsg.txfields ('92').VALUE     := recREGALERT.IDCODE;

                --98  C   IDDATE
                l_txmsg.txfields ('98').defname   := 'IDDATE';
                l_txmsg.txfields ('98').TYPE      := 'C';
                l_txmsg.txfields ('98').VALUE     := recREGALERT.IDDATE;

                --99  C   IDPLACE
                l_txmsg.txfields ('99').defname   := 'IDPLACE';
                l_txmsg.txfields ('99').TYPE      := 'C';
                l_txmsg.txfields ('99').VALUE     := recREGALERT.IDPLACE;

                --66  C   VOUCHERTYPE
                l_txmsg.txfields ('66').defname   := 'VOUCHERTYPE';
                l_txmsg.txfields ('66').TYPE      := 'C';
                l_txmsg.txfields ('66').VALUE     := '';

                --89  N   AVLCASH
                l_txmsg.txfields ('89').defname   := 'AVLCASH';
                l_txmsg.txfields ('89').TYPE      := 'N';
                l_txmsg.txfields ('89').VALUE     := v_avlbal;

                --12  N   SMSAMT
                l_txmsg.txfields ('12').defname   := 'SMSAMT';
                l_txmsg.txfields ('12').TYPE      := 'N';
                l_txmsg.txfields ('12').VALUE     := v_tmpSMSAMT;

                --11  N   WARAMT
                l_txmsg.txfields ('11').defname   := 'WARAMT';
                l_txmsg.txfields ('11').TYPE      := 'N';
                l_txmsg.txfields ('11').VALUE     := v_WARAMT;

                --10  N   AMT
                l_txmsg.txfields ('10').defname   := 'AMT';
                l_txmsg.txfields ('10').TYPE      := 'N';
                l_txmsg.txfields ('10').VALUE     := v_amt;

                --79  C   REFID
                l_txmsg.txfields ('79').defname   := 'REFID';
                l_txmsg.txfields ('79').TYPE      := 'C';
                l_txmsg.txfields ('79').VALUE     := '';

                --30  C   DESC
                l_txmsg.txfields ('30').defname   := 'DESC';
                l_txmsg.txfields ('30').TYPE      := 'C';
                l_txmsg.txfields ('30').VALUE     := v_desc;


                BEGIN
                    IF txpks_#1113.fn_autotxprocess (l_txmsg,
                                                     p_err_code,
                                                     l_err_param
                       ) <> systemnums.c_success
                    THEN
                       plog.error (pkgctx,
                                   'got error 1113: ' || p_err_code
                       );
                       ROLLBACK;

                       RETURN;
                    END IF;
                END;
                update cfregalert set todate = v_nexttodate, afacctno = v_tmpregafacctno where registerid = recREGALERT.registerid;

            else
                update cfregalert set status = 'C',  CLSDATE= v_currdate where registerid = recREGALERT.registerid;
            END IF;

        end loop;

    end if;
    --- End of HaiLT them thu phi dang ky canh bao va gui tin nhan canh bao


    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_CIPayFeeDepositSeBo');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on pr_CIPayFeeDepositSeBo');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CIPayFeeDepositSeBo');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_CIPayFeeDepositSeBo;

---------------------------------pr_CalcFeeOnOdtype------------------------------------------------
PROCEDURE pr_CalcFeeOnOdtype(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      v_DATE                date;
      l_MaxRow NUMBER(20,0);
      l_icrate number;
      v_delta   number;
      l_ruletype varchar2(10);
      l_iccfbal number;
      l_amount number;
      l_order number;
      l_feeamt number;

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CalcFeeOnOdtype');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM ODMAST where txdate = v_Date;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_DATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    plog.debug(pkgctx, 'Begin loop');
    l_icrate:=0;
    v_delta:=0;
    for rec in
    (
        select mt.* from
            (select mst.*, rownum rn from
               (select od.afacctno, od.actype, sum(od.execamt) totalexec, ictd.icrate, ictd.ruletype, count(od.orderid) totalorder
                from odmast od, iccftypedef ictd
                where od.deltd <> 'Y' and od.execqtty > 0
                      and od.exectype in ('NB','BC','SS','NS','MS')
                      and od.actype = ictd.actype
                      and ictd.modcode = 'OD'
                      and ictd.eventcode = 'ODTYPEFEE'
                      and ictd.iccfstatus = 'A'
                      and od.feeacr = 0
                      and od.txdate = v_DATE
                group by od.afacctno, od.actype, ictd.icrate, ictd.ruletype
                order by od.afacctno, od.actype) mst
             ) mt
         where mt.rn between p_FromRow and p_ToRow
    )
    loop
        l_iccfbal:=rec.totalexec;
        l_icrate:=rec.icrate;
        l_ruletype:=rec.ruletype;
        l_order:=rec.totalorder;
        if l_iccfbal>0 then
            if l_ruletype<>'C' then
                --Luat tinh theo fixed hoac tier
                --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                begin
                --Xac dinh tier
                    if l_ruletype ='T' then
                        select delta into v_delta from iccftier
                        where actype =rec.actype and modcode ='OD'
                        and eventcode='ODTYPEFEE' and deltd <> 'Y'
                        and framt < l_iccfbal and toamt >= l_iccfbal;
                    else
                        v_delta:=0;
                    end if;
                    l_icrate:=l_icrate+v_delta;
                exception when others then
                    l_icrate:=l_icrate;
                end;
                l_amount:=l_iccfbal;

                --Cap nhat fee cho tung lenh
                UPDATE ODMAST SET FEEACR = round((l_icrate/100)*EXECAMT, 0)
                WHERE AFACCTNO = rec.afacctno AND ACTYPE = rec.actype AND TXDATE = v_DATE;

                --Them vao bang log ODFEEODTYPETRAN
                INSERT INTO ODFEEODTYPETRAN
                       SELECT seq_odfeeodtypetran.nextval AUTOID, TXDATE, AFACCTNO, ACTYPE ODTYPE, l_ruletype ICCFTYPE, ORDERID, EXECAMT, l_icrate ICCFRATE, round((l_icrate/100)*EXECAMT, 0) FEEAMT
                       FROM ODMAST WHERE AFACCTNO = rec.afacctno AND ACTYPE = rec.actype AND TXDATE = v_DATE;
            else
                --Luat tinh theo cluster
                --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                l_feeamt:=0;
                for rec_tier in
                (
                    select delta, framt, toamt
                    from iccftier
                        where actype =rec.actype and modcode ='OD'
                        and eventcode='ODTYPEFEE' and deltd <> 'Y'
                        order by framt
                )
                loop
                    exit when l_iccfbal<rec_tier.framt;
                    if l_iccfbal>rec_tier.framt and l_iccfbal<rec_tier.toamt then
                        l_amount:=l_iccfbal-rec_tier.framt;
                    ELSE
                        l_amount:=rec_tier.toamt-rec_tier.framt;
                    end if;
                    l_icrate:=l_icrate+rec_tier.delta;
                    l_feeamt:=l_feeamt+round(l_amount*(l_icrate/100),0);
                end loop;
                --Cap nhat fee cho tung lenh bang cach lay trung binh
                UPDATE ODMAST SET FEEACR = round(((l_feeamt/l_iccfbal)/100)*EXECAMT, 0)
                WHERE AFACCTNO = rec.afacctno AND ACTYPE = rec.actype AND TXDATE = v_DATE;

                --Them vao bang log ODFEEODTYPETRAN
                INSERT INTO ODFEEODTYPETRAN
                       SELECT seq_odfeeodtypetran.nextval AUTOID, TXDATE, AFACCTNO, ACTYPE ODTYPE, l_ruletype ICCFTYPE, ORDERID, EXECAMT, round(l_feeamt/l_iccfbal, 4) ICCFRATE, round(((l_feeamt/l_iccfbal)/100)*EXECAMT, 0) FEEAMT
                       FROM ODMAST WHERE AFACCTNO = rec.afacctno AND ACTYPE = rec.actype AND TXDATE = v_DATE;

            end if;

        end if;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_CalcFeeOnOdtype');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on pr_CalcFeeOnOdtype');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CalcFeeOnOdtype');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_CalcFeeOnOdtype;

--TungNT modified - for mod beforebatch
---------------------------------pr_CalcFeeOnOdtypeCoreBank------------------------------------------------
PROCEDURE pr_CalcFeeOnOdtypeCoreBank(p_err_code  OUT varchar2)
  IS
      v_DATE                date;
      l_MaxRow NUMBER(20,0);
      l_icrate number;
      v_delta   number;
      l_ruletype varchar2(10);
      l_iccfbal number;
      l_amount number;
      l_order number;
      l_feeamt number;

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_CalcFeeOnOdtypeCoreBank');

     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_DATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    plog.debug(pkgctx, 'Begin loop');
    l_icrate:=0;
    v_delta:=0;
    for rec in
    (
        select mt.* from
            (select mst.*, rownum rn from
               (select od.afacctno, od.actype, sum(od.execamt) totalexec, ictd.icrate, ictd.ruletype, count(od.orderid) totalorder
                from odmast od, iccftypedef ictd
                where od.deltd <> 'Y' and od.execqtty > 0
                      and od.exectype in ('NB','BC','SS','NS','MS')
                      and od.actype = ictd.actype
                      and ictd.modcode = 'OD'
                      and ictd.eventcode = 'ODTYPEFEE'
                      and ictd.iccfstatus = 'A'
                      and od.feeacr = 0
                      and od.txdate = v_DATE
                group by od.afacctno, od.actype, ictd.icrate, ictd.ruletype
                order by od.afacctno, od.actype) mst
             ) mt
    )
    loop
        l_iccfbal:=rec.totalexec;
        l_icrate:=rec.icrate;
        l_ruletype:=rec.ruletype;
        l_order:=rec.totalorder;
        if l_iccfbal>0 then
            if l_ruletype<>'C' then
                --Luat tinh theo fixed hoac tier
                --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                begin
                --Xac dinh tier
                    if l_ruletype ='T' then
                        select delta into v_delta from iccftier
                        where actype =rec.actype and modcode ='OD'
                        and eventcode='ODTYPEFEE' and deltd <> 'Y'
                        and framt < l_iccfbal and toamt >= l_iccfbal;
                    else
                        v_delta:=0;
                    end if;
                    l_icrate:=l_icrate+v_delta;
                exception when others then
                    l_icrate:=l_icrate;
                end;
                l_amount:=l_iccfbal;

                --Cap nhat fee cho tung lenh
                UPDATE ODMAST SET FEEACR = round((l_icrate/100)*EXECAMT, 0)
                WHERE AFACCTNO = rec.afacctno AND ACTYPE = rec.actype AND TXDATE = v_DATE;

                --Them vao bang log ODFEEODTYPETRAN
                INSERT INTO ODFEEODTYPETRAN
                       SELECT seq_odfeeodtypetran.nextval AUTOID, TXDATE, AFACCTNO, ACTYPE ODTYPE, l_ruletype ICCFTYPE, ORDERID, EXECAMT, l_icrate ICCFRATE, round((l_icrate/100)*EXECAMT, 0) FEEAMT
                       FROM ODMAST WHERE AFACCTNO = rec.afacctno AND ACTYPE = rec.actype AND TXDATE = v_DATE;
            else
                --Luat tinh theo cluster
                --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                l_feeamt:=0;
                for rec_tier in
                (
                    select delta, framt, toamt
                    from iccftier
                        where actype =rec.actype and modcode ='OD'
                        and eventcode='ODTYPEFEE' and deltd <> 'Y'
                        order by framt
                )
                loop
                    exit when l_iccfbal<rec_tier.framt;
                    if l_iccfbal>rec_tier.framt and l_iccfbal<rec_tier.toamt then
                        l_amount:=l_iccfbal-rec_tier.framt;
                    ELSE
                        l_amount:=rec_tier.toamt-rec_tier.framt;
                    end if;
                    l_icrate:=l_icrate+rec_tier.delta;
                    l_feeamt:=l_feeamt+round(l_amount*(l_icrate/100),0);
                end loop;
                --Cap nhat fee cho tung lenh bang cach lay trung binh
                UPDATE ODMAST SET FEEACR = round(((l_feeamt/l_iccfbal)/100)*EXECAMT, 0)
                WHERE AFACCTNO = rec.afacctno AND ACTYPE = rec.actype AND TXDATE = v_DATE;

                --Them vao bang log ODFEEODTYPETRAN
                INSERT INTO ODFEEODTYPETRAN
                       SELECT seq_odfeeodtypetran.nextval AUTOID, TXDATE, AFACCTNO, ACTYPE ODTYPE, l_ruletype ICCFTYPE, ORDERID, EXECAMT, round(l_feeamt/l_iccfbal, 4) ICCFRATE, round(((l_feeamt/l_iccfbal)/100)*EXECAMT, 0) FEEAMT
                       FROM ODMAST WHERE AFACCTNO = rec.afacctno AND ACTYPE = rec.actype AND TXDATE = v_DATE;

            end if;

        end if;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_CalcFeeOnOdtypeCoreBank');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on pr_CalcFeeOnOdtypeCoreBank');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_CalcFeeOnOdtypeCoreBank');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_CalcFeeOnOdtypeCoreBank;
--End

  ---------------------------------pr_ODFeeCalculate------------------------------------------------
PROCEDURE pr_ODFeeCalculate(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      v_DATE                date;
      l_MaxRow NUMBER(20,0);
      l_icrate number;
      v_delta   number;
      l_ruletype varchar2(10);
      l_iccfbal number;
      l_amount number;
      l_order number;
      l_feeamt number;
	  --lenh repo
	  v_feerepo2 varchar2(2);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_ODFeeCalculate');
    p_lastRun:='Y';

    SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_DATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    plog.debug(pkgctx, 'Begin loop');
    l_icrate:=0;
    v_delta:=0;


    -- Tinh phi theo loai hinh: Cho tinh cho truong hop khai ICCF trong loai hinh va BRKFEETYPE='G': Tinh phi nhom theo loai hinh
    -- Tinh cho loai hinh khong gan truc tiep voi lenh
    for rec in
    (
        select od.afacctno, typ.actype, sum(od.execamt) totalexec, ictd.icrate, ictd.ruletype, count(od.orderid) totalorder
                from odmast od,afmast af, odtype typ,-- Ducnv ko ktra afidtype afidtype id,
                 iccftypedef ictd, sbsecurities sb
                where od.afacctno = af.acctno
                      and od.deltd <> 'Y' and od.execqtty > 0
                      and od.exectype in ('NB','BC','SS','NS','MS')
                      and od.codeid= sb.codeid
                      and od.actype = typ.actype -- HaiLT bo rao vi da xac dinh loai hinh dat lenh luc dat. lenh roi
                      --and od.actype <> typ.actype
                     /* AND (typ.via = od.via OR typ.via = 'A') --VIA
                      AND typ.clearcd = od.clearcd       --CLEARCD
                      AND (typ.exectype = od.exectype OR typ.exectype = 'AA') --EXECTYPE
                      AND (typ.timetype = od.timetype OR typ.timetype = 'A') --TIMETYPE
                      AND (typ.pricetype = od.pricetype OR typ.pricetype = 'AA') --PRICETYPE
                      AND (typ.matchtype = od.matchtype OR typ.matchtype = 'A') --MATCHTYPE
                      AND (typ.tradeplace = sb.tradeplace OR typ.tradeplace = '000')
                      AND (instr(case when sb.sectype in ('001','002','011') then sb.sectype || ',' || '111,333'
                                       when sb.sectype in ('003','006') then sb.sectype || ',' || '222,333,444'
                                       when sb.sectype in ('008') then sb.sectype || ',' || '111,444'
                                       else sb.sectype end , typ.sectype)>0 OR typ.sectype = '000')
                      AND (typ.nork = od.nork OR typ.nork = 'A') --NORK
                      AND (CASE WHEN typ.CODEID IS NULL THEN od.codeid ELSE typ.CODEID END)=od.codeid*/
                    -- Ducnv ko ktra afidtype  AND typ.actype = id.actype and id.aftype=af.actype and id.objname='OD.ODTYPE'
                      and typ.status = 'Y'
                      and to_date(typ.valdate,'DD/MM/RRRR')<=v_DATE and to_date(typ.expdate,'DD/MM/RRRR')>=v_DATE
                      --------
                      and typ.brkfeetype='G'
                      and typ.actype = ictd.actype
                      and ictd.modcode = 'OD'
                      and ictd.eventcode = 'ODTYPEFEE' --su kien Tinh phi theo loai hinh
                      and ictd.iccfstatus = 'A'
                      and od.feeacr = 0
                      and od.txdate = v_DATE
                group by od.afacctno, typ.actype, ictd.icrate, ictd.ruletype
                order by od.afacctno, typ.actype
    )
    loop
        l_iccfbal:=rec.totalexec;
        l_iccfbal:=fn_gettradingamount(rec.afacctno,rec.actype);
        l_icrate:=rec.icrate;
        l_ruletype:=rec.ruletype;
        l_order:=rec.totalorder;
        if l_iccfbal>0 then
            if l_ruletype<>'C' then
                --Luat tinh theo fixed hoac tier
                --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                begin
                --Xac dinh tier
                    if l_ruletype ='T' then
                        select delta into v_delta from iccftier
                        where actype =rec.actype and modcode ='OD'
                        and eventcode='ODTYPEFEE' and deltd <> 'Y'
                        and framt <= l_iccfbal and toamt > l_iccfbal;
                    else
                        v_delta:=0;
                    end if;
                    l_icrate:=l_icrate+v_delta;
                exception when others then
                    l_icrate:=l_icrate;
                end;
                l_amount:=l_iccfbal;

                --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
                insert into odbrkfee (orderid,txdate, eventcode,refcode, feeamt)
                select orderid, txdate, 'ODTYPEFEE', rec.actype, floor((l_icrate/100)*EXECAMT)
                from odmast od
                WHERE od.orderid in
                (
                    select od.orderid
                    from odmast od,afmast af, odtype typ,-- Ducnv ko ktra afidtype afidtype id,
                     iccftypedef ictd, sbsecurities sb
                    where od.afacctno = af.acctno
                          and od.deltd <> 'Y' and od.execqtty > 0
                          and od.exectype in ('NB','BC','SS','NS','MS')
                          and od.codeid= sb.codeid
                          and od.actype = typ.actype -- HaiLT bo rao vi da xac dinh loai hinh dat lenh luc dat. lenh roi
                          --and od.actype <> typ.actype
                        /*  AND (typ.via = od.via OR typ.via = 'A') --VIA
                          AND typ.clearcd = od.clearcd       --CLEARCD
                          AND (typ.exectype = od.exectype OR typ.exectype = 'AA') --EXECTYPE
                          AND (typ.timetype = od.timetype OR typ.timetype = 'A') --TIMETYPE
                          AND (typ.pricetype = od.pricetype OR typ.pricetype = 'AA') --PRICETYPE
                          AND (typ.matchtype = od.matchtype OR typ.matchtype = 'A') --MATCHTYPE
                          AND (typ.tradeplace = sb.tradeplace OR typ.tradeplace = '000')
                          AND (instr(case when sb.sectype in ('001','002','011') then sb.sectype || ',' || '111,333'
                                       when sb.sectype in ('003','006') then sb.sectype || ',' || '222,333,444'
                                       when sb.sectype in ('008') then sb.sectype || ',' || '111,444'
                                           else sb.sectype end , typ.sectype)>0 OR typ.sectype = '000')
                          AND (typ.nork = od.nork OR typ.nork = 'A') --NORK
                          AND (CASE WHEN typ.CODEID IS NULL THEN od.codeid ELSE typ.CODEID END)=od.codeid*/
                         -- Ducnv ko ktra afidtype  AND typ.actype = id.actype and id.aftype=af.actype and id.objname='OD.ODTYPE'
                          and typ.status = 'Y'
                          and to_date(typ.valdate,'DD/MM/RRRR')<=v_DATE and to_date(typ.expdate,'DD/MM/RRRR')>=v_DATE
                          --------
                          and typ.brkfeetype='G'
                          and typ.actype = ictd.actype
                          and ictd.modcode = 'OD'
                          and ictd.eventcode = 'ODTYPEFEE' --su kien Tinh phi theo loai hinh
                          and ictd.iccfstatus = 'A'
                          and od.feeacr = 0
                          and od.txdate = v_DATE
                          and od.afacctno = rec.afacctno and typ.actype = rec.actype
                );
            else
                --Luat tinh theo cluster
                --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                l_feeamt:=0;
                for rec_tier in
                (
                    select delta, framt, toamt
                    from iccftier
                        where actype =rec.actype and modcode ='OD'
                        and eventcode='ODTYPEFEE' and deltd <> 'Y'
                        order by framt
                )
                loop
                    exit when l_iccfbal<rec_tier.framt;
                    if l_iccfbal>rec_tier.framt and l_iccfbal<rec_tier.toamt then
                        l_amount:=l_iccfbal-rec_tier.framt;
                    ELSE
                        l_amount:=rec_tier.toamt-rec_tier.framt;
                    end if;
                    l_icrate:=rec.icrate+rec_tier.delta;
                    l_feeamt:=l_feeamt+floor(l_amount*(l_icrate/100));
                end loop;

                --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
                insert into odbrkfee (orderid,txdate, eventcode,refcode, feeamt)
                select orderid, txdate, 'ODTYPEFEE', rec.actype, floor(((l_feeamt/l_iccfbal)/100)*EXECAMT)
                from odmast od
                WHERE od.orderid in
                (
                    select od.orderid
                    from odmast od,afmast af, odtype typ, -- Ducnv ko ktra afidtype afidtype id,
                    iccftypedef ictd, sbsecurities sb
                    where od.afacctno = af.acctno
                          and od.deltd <> 'Y' and od.execqtty > 0
                          and od.exectype in ('NB','BC','SS','NS','MS')
                          and od.codeid= sb.codeid
                          and od.actype = typ.actype -- HaiLT bo rao vi da xac dinh loai hinh dat lenh luc dat. lenh roi
                          --and od.actype <> typ.actype
                        /*  AND (typ.via = od.via OR typ.via = 'A') --VIA
                          AND typ.clearcd = od.clearcd       --CLEARCD
                          AND (typ.exectype = od.exectype OR typ.exectype = 'AA') --EXECTYPE
                          AND (typ.timetype = od.timetype OR typ.timetype = 'A') --TIMETYPE
                          AND (typ.pricetype = od.pricetype OR typ.pricetype = 'AA') --PRICETYPE
                          AND (typ.matchtype = od.matchtype OR typ.matchtype = 'A') --MATCHTYPE
                          AND (typ.tradeplace = sb.tradeplace OR typ.tradeplace = '000')
                          AND (instr(case when sb.sectype in ('001','002','011') then sb.sectype || ',' || '111,333'
                                            when sb.sectype in ('003','006') then sb.sectype || ',' || '222,333,444'
                                            when sb.sectype in ('008') then sb.sectype || ',' || '111,444'
                                           else sb.sectype end , typ.sectype)>0 OR typ.sectype = '000')
                          AND (typ.nork = od.nork OR typ.nork = 'A') --NORK
                          AND (CASE WHEN typ.CODEID IS NULL THEN od.codeid ELSE typ.CODEID END)=od.codeid*/
                         -- Ducnv ko ktra afidtype AND typ.actype = id.actype and id.aftype=af.actype and id.objname='OD.ODTYPE'
                          and typ.status = 'Y'
                          and to_date(typ.valdate,'DD/MM/RRRR')<=v_DATE and to_date(typ.expdate,'DD/MM/RRRR')>=v_DATE
                          --------
                          and typ.brkfeetype='G'
                          and typ.actype = ictd.actype
                          and ictd.modcode = 'OD'
                          and ictd.eventcode = 'ODTYPEFEE' --su kien Tinh phi theo loai hinh
                          and ictd.iccfstatus = 'A'
                          and od.feeacr = 0
                          and od.txdate = v_DATE
                          and od.afacctno = rec.afacctno and typ.actype = rec.actype
                );
            end if;

        end if;
    end loop;

    -- Tinh phi theo lenh: Cho tinh cho truong hop khai ICCF trong loai hinh va BRKFEETYPE='N': Tinh phi theo tung lenh
    --TInh cho loai hinh gan voi lenh
    for rec in
    (
        select od.orderid,max(od.afacctno) afacctno, typ.actype actype, max(od.execamt) totalexec, max(ictd.icrate) icrate,
                     max(ictd.ruletype) ruletype
                from odmast od,odtype typ, iccftypedef ictd
                where od.deltd <> 'Y' and od.execqtty > 0
                      and od.exectype in ('NB','BC','SS','NS','MS')
                      and od.actype = typ.actype
                      and typ.brkfeetype='N'
                      and od.actype = ictd.actype
                      and ictd.modcode = 'OD'
                      and ictd.eventcode = 'ODTRADEFEE' --Event tinh phi theo lenh
                      and ictd.iccfstatus = 'A'
                      and od.feeacr = 0
                      and od.txdate = v_DATE
                group by od.orderid, typ.actype
                order by od.orderid
    )
    loop
        l_iccfbal:=rec.totalexec;
        l_icrate:=rec.icrate;
        l_ruletype:=rec.ruletype;
        if l_iccfbal>0 then
            if l_ruletype<>'C' then
                --Luat tinh theo fixed hoac tier
                --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                begin
                --Xac dinh tier
                    if l_ruletype ='T' then
                        select delta into v_delta from iccftier
                        where actype =rec.actype and modcode ='OD'
                        and eventcode='ODTRADEFEE' and deltd <> 'Y'
                        and framt <= l_iccfbal and toamt > l_iccfbal;
                    else
                        v_delta:=0;
                    end if;
                    l_icrate:=l_icrate+v_delta;
                exception when others then
                    l_icrate:=l_icrate;
                end;
                l_amount:=l_iccfbal;

                /*--Cap nhat fee cho tung lenh
                UPDATE ODMAST SET FEEACR = round((l_icrate/100)*EXECAMT, 0)
                WHERE orderid = rec.orderid;*/

                --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
                insert into odbrkfee (orderid,txdate, eventcode,refcode, feeamt)
                select orderid, txdate, 'ODTRADEFEE', rec.actype, floor((l_icrate/100)*EXECAMT)
                from odmast
                WHERE orderid = rec.orderid;
            else
                --Luat tinh theo cluster
                --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                l_feeamt:=0;
                for rec_tier in
                (
                    select delta, framt, toamt
                    from iccftier
                        where actype =rec.actype and modcode ='OD'
                        and eventcode='ODTRADEFEE' and deltd <> 'Y'
                        order by framt
                )
                loop
                    exit when l_iccfbal<rec_tier.framt;
                    if l_iccfbal>rec_tier.framt and l_iccfbal<rec_tier.toamt then
                        l_amount:=l_iccfbal-rec_tier.framt;
                    ELSE
                        l_amount:=rec_tier.toamt-rec_tier.framt;
                    end if;
                    l_icrate:=rec.icrate+rec_tier.delta;
                    l_feeamt:=l_feeamt+floor(l_amount*(l_icrate/100));
                end loop;
                /*--Cap nhat fee cho tung lenh bang cach lay trung binh
                UPDATE ODMAST SET FEEACR = l_feeamt
                WHERE orderid = rec.orderid;*/

                --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
                insert into odbrkfee (orderid,txdate, eventcode,refcode, feeamt)
                select orderid, txdate, 'ODTRADEFEE', rec.actype, l_feeamt
                from odmast
                WHERE orderid = rec.orderid;
            end if;
        end if;
    end loop;

    -- Tinh phi theo lenh: Cho tinh cho truong hop khai ICCF trong loai hinh va BRKFEETYPE='N': Tinh phi theo tung lenh
    --TInh theo su kien cua loai hinh lenh khong gan voi lenh ma thoa man cac tieu chi
    for rec in
    (
        select od.orderid,max(od.afacctno) afacctno, typ.actype actype, max(od.execamt) totalexec, max(ictd.icrate) icrate,
                     max(ictd.ruletype) ruletype
                from odmast od,afmast af, odtype typ, afidtype id, iccftypedef ictd, sbsecurities sb
                where od.afacctno = af.acctno
                      and od.deltd <> 'Y' and od.execqtty > 0
                      and od.codeid = sb.codeid
                      and od.exectype in ('NB','BC','SS','NS','MS')
                      --and od.actype = typ.actype
                      and od.actype <> typ.actype
                      AND (typ.via = od.via OR typ.via = 'A') --VIA
                      AND typ.clearcd = od.clearcd       --CLEARCD
                      AND (typ.exectype = od.exectype OR typ.exectype = 'AA') --EXECTYPE
                      AND (typ.timetype = od.timetype OR typ.timetype = 'A') --TIMETYPE
                      AND (typ.pricetype = od.pricetype OR typ.pricetype = 'AA') --PRICETYPE
                      AND (typ.matchtype = od.matchtype OR typ.matchtype = 'A') --MATCHTYPE
                      AND (typ.tradeplace = sb.tradeplace OR typ.tradeplace = '000')
                      AND (instr(case when sb.sectype in ('001','002','011') then sb.sectype || ',' || '111,333'
                                       when sb.sectype in ('003','006') then sb.sectype || ',' || '222,333,444'
                                       when sb.sectype in ('008') then sb.sectype || ',' || '111,444'
                                     else sb.sectype end , typ.sectype)>0 OR typ.sectype = '000')
                      AND (typ.nork = od.nork OR typ.nork = 'A') --NORK
                      AND (CASE WHEN typ.CODEID IS NULL THEN od.codeid ELSE typ.CODEID END)=od.codeid
                      AND typ.actype = id.actype and id.aftype=af.actype and id.objname='OD.ODTYPE'
                      and typ.status = 'Y'
                      and to_date(typ.valdate,'DD/MM/RRRR')<=v_DATE and to_date(typ.expdate,'DD/MM/RRRR')>=v_DATE
                      ---------------------
                      and typ.brkfeetype='N'
                      and typ.actype = ictd.actype
                      and ictd.modcode = 'OD'
                      and ictd.eventcode = 'ODTRADEFEE' --Event tinh phi theo lenh
                      and ictd.iccfstatus = 'A'
                      and od.feeacr = 0
                      and od.txdate = v_DATE
                group by od.orderid, typ.actype
                order by od.orderid
    )
    loop
        l_iccfbal:=rec.totalexec;
        l_icrate:=rec.icrate;
        l_ruletype:=rec.ruletype;
        if l_iccfbal>0 then
            if l_ruletype<>'C' then
                --Luat tinh theo fixed hoac tier
                --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                begin
                --Xac dinh tier
                    if l_ruletype ='T' then
                        select delta into v_delta from iccftier
                        where actype =rec.actype and modcode ='OD'
                        and eventcode='ODTRADEFEE' and deltd <> 'Y'
                        and framt <= l_iccfbal and toamt > l_iccfbal;
                    else
                        v_delta:=0;
                    end if;
                    l_icrate:=l_icrate+v_delta;
                exception when others then
                    l_icrate:=l_icrate;
                end;
                l_amount:=l_iccfbal;

                /*--Cap nhat fee cho tung lenh
                UPDATE ODMAST SET FEEACR = round((l_icrate/100)*EXECAMT, 0)
                WHERE orderid = rec.orderid;*/

                --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
                insert into odbrkfee (orderid,txdate, eventcode,refcode, feeamt)
                select orderid, txdate, 'ODTRADEFEE', rec.actype, floor((l_icrate/100)*EXECAMT)
                from odmast
                WHERE orderid = rec.orderid;
            else
                --Luat tinh theo cluster
                --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                l_feeamt:=0;
                for rec_tier in
                (
                    select delta, framt, toamt
                    from iccftier
                        where actype =rec.actype and modcode ='OD'
                        and eventcode='ODTRADEFEE' and deltd <> 'Y'
                        order by framt
                )
                loop
                    exit when l_iccfbal<rec_tier.framt;
                    if l_iccfbal>rec_tier.framt and l_iccfbal<rec_tier.toamt then
                        l_amount:=l_iccfbal-rec_tier.framt;
                    ELSE
                        l_amount:=rec_tier.toamt-rec_tier.framt;
                    end if;
                    l_icrate:=rec.icrate+rec_tier.delta;
                    l_feeamt:=l_feeamt+floor(l_amount*(l_icrate/100));
                end loop;
                /*--Cap nhat fee cho tung lenh bang cach lay trung binh
                UPDATE ODMAST SET FEEACR = l_feeamt
                WHERE orderid = rec.orderid;*/

                --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
                insert into odbrkfee (orderid,txdate, eventcode,refcode, feeamt)
                select orderid, txdate, 'ODTRADEFEE', rec.actype, l_feeamt
                from odmast
                WHERE orderid = rec.orderid;
            end if;
        end if;
    end loop;



    -- Tinh phi theo su kien: mien giam phi theo chinh sach trong ODPROBRKMST
    for rec in
    (
        select sum(od.execamt) totalexec,max(mst.feetype)  ruletype, max(mst.feerate) icrate, max(mst.minamt) minamt, max(mst.maxamt) maxamt,
               paf.afacctno, mst.autoid
                from ODPROBRKAF paf, ODPROBRKMST mst, odmast od
                where mst.autoid= paf.refautoid
                    and to_date(mst.valdate,'DD/MM/RRRR')<=v_DATE and to_date(mst.expdate,'DD/MM/RRRR')>=v_DATE
                    and paf.afacctno = od.afacctno
                    and od.deltd <> 'Y' and od.execqtty > 0
                    and od.exectype in ('NB','BC','SS','NS','MS')
                    and od.txdate = v_DATE
                        and mst.status in ('A')
                group by mst.autoid, paf.afacctno
    )
    loop
        l_iccfbal:=rec.totalexec;
        l_icrate:=rec.icrate;
        l_ruletype:=rec.ruletype;
        if l_iccfbal>0 then
            if l_ruletype<>'C' then
                --Luat tinh theo fixed hoac tier
                --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                begin
                --Xac dinh tier
                    if l_ruletype ='T' then
                        select valamt into v_delta from odprobrkschm
                        where refautoid = rec.autoid
                        and framt <= l_iccfbal and toamt > l_iccfbal;
                    else
                        v_delta:=0;
                    end if;
                    l_icrate:=l_icrate+v_delta;
                exception when others then
                    l_icrate:=l_icrate;
                end;
                l_amount:=l_iccfbal;
                l_feeamt:=l_icrate/100*l_iccfbal;
                l_feeamt:=least(l_feeamt, rec.maxamt);
                l_feeamt:=greatest(l_feeamt, rec.minamt);
                --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
                insert into odbrkfee (orderid,txdate, eventcode,refcode, feeamt)
                select orderid, txdate, 'ODPROBRKMST', to_char(rec.autoid), floor(l_feeamt/l_iccfbal*EXECAMT)
                from odmast od
                WHERE od.afacctno = rec.afacctno
                    and od.deltd <> 'Y' and od.execqtty > 0
                    and od.exectype in ('NB','BC','SS','NS','MS')
                    and od.txdate = v_DATE;
            else
                --Luat tinh theo cluster
                --Neu co trong loai hinh ICCF thi xac dinh rate theo loai hinh
                l_feeamt:=0;
                for rec_tier in
                (
                    select valamt delta, framt, toamt
                    from odprobrkschm
                        where refautoid = rec.autoid
                        order by framt
                )
                loop
                    exit when l_iccfbal<rec_tier.framt;
                    if l_iccfbal>rec_tier.framt and l_iccfbal<rec_tier.toamt then
                        l_amount:=l_iccfbal-rec_tier.framt;
                    ELSE
                        l_amount:=rec_tier.toamt-rec_tier.framt;
                    end if;
                    l_icrate:=rec.icrate+rec_tier.delta;
                    l_feeamt:=l_feeamt+floor(l_amount*(l_icrate/100));
                end loop;
                l_feeamt:=least(l_feeamt, rec.maxamt);
                l_feeamt:=greatest(l_feeamt, rec.minamt);
                --Them vao bang ODBRKFEE luu lai cac cach tinh phi cho lenh trong ngay
                insert into odbrkfee (orderid,txdate, eventcode,refcode, feeamt)
                select orderid, txdate, 'ODPROBRKMST', to_char(rec.autoid), floor((l_feeamt/l_iccfbal)*EXECAMT)
                from odmast od
                WHERE od.afacctno = rec.afacctno
                    and od.deltd <> 'Y' and od.execqtty > 0
                    and od.exectype in ('NB','BC','SS','NS','MS')
                    and od.txdate = v_DATE;
            end if;
        end if;
    end loop;

    --Ap muc phi toi thieu cho lenh
    SELECT varvalue INTO v_feerepo2 FROM sysvar WHERE varname = 'FEE_REPO2';
    For rec in
    (
        select orderid, min(feeamt) feeamt
        from odbrkfee
        where txdate= v_DATE
        group by orderid
    )
    loop
      --them tinh phi lenh repo
      IF v_feerepo2 = 'N' THEN
            update odmast set feeacr= CASE WHEN repotype = 2 THEN 0 ELSE rec.feeamt END
            where orderid = rec.orderid;
            /*IF l_count <>0 THEN
              select nvl(feeamt,0) into l_amt from odbrkfee where orderid=rec.orderid and eventcode='ODTRADEFEEADJ' and txdate= v_DATE;
              update odmast
              set feeacr= CASE WHEN repotype = 2 THEN 0 ELSE l_amt END
              where orderid = rec.orderid;
              END IF;*/
            pr_allocate_IOD_fee(rec.orderid); --Gianh VG moi them
        ELSE
            update odmast set feeacr= rec.feeamt
            where orderid = rec.orderid;
            pr_allocate_IOD_fee(rec.orderid); --Gianh VG moi them
        end if;
    end loop;
    -- call cal_odmast_excfeeamt proc
    cal_odmast_excfeeamt;

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_ODFeeCalculate');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on pr_ODFeeCalculate');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM || dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_ODFeeCalculate');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_ODFeeCalculate;

  --Tat toan khoan tiet kiem
  PROCEDURE pr_TDEOTD(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      l_custodycd VARCHAR2(20);
      l_cffullname VARCHAR2(100);


  BEGIN
    plog.setbeginsection(pkgctx, 'pr_TDEOTD');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  TDMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

     SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='1610';
     SELECT varvalue
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
     SELECT varvalue
               INTO v_strPREVDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'PREVDATE';


    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='1610';
    plog.debug(pkgctx, '1610 p_FromRow= ' || p_FromRow || ' p_ToRow =' || p_ToRow);
    plog.debug(pkgctx, 'Begin loop');



    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    plog.debug(pkgctx, 'pr_TDEOTD '||p_bchmdl ||' v_strCURRDATE '||v_strCURRDATE);

    for rec in
    (

        SELECT ACCTNO, AFACCTNO, BALANCE, ACTYPE, STATUS ,ORGAMT, TPR,TDTERM,
        OPNDATE,TODATE,MORTGAGE, BALANCE AMT,FRDATE,
        FN_TDMASTINTRATIO(ACCTNO,TO_DATE(v_strCURRDATE,'DD/MM/YYYY'),BALANCE) INTAVLAMT,
        BALANCE - MORTGAGE DIRECTAMT,
        decode(AUTORND,'Y',0,1) AUTORND,
        (CASE WHEN  mst.AUTORND='Y' AND mst.INTDUECD='Y' THEN 0 ELSE 1 END ) NOTINTDUECD
        FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM TDMAST A WHERE deltd <> 'Y')
        WHERE ID > p_FromRow AND  ID <= p_ToRow
              ) MST
        WHERE MST.STATUS in ('N','A')
          AND (TODATE <= TO_DATE (v_strCURRDATE, 'dd/MM/yyyy') Or BALANCE =0 )
          AND (AUTOPAID ='Y' Or BALANCE =0)
    )
    loop

        --Set txnum
        plog.debug(pkgctx, 'Loop for account:' || rec.ACCTNO || ' ngay' || to_char(v_strCURRDATE) ||' p_FromRow ='||p_FromRow || 'p_ToRow ='||p_ToRow);
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);
        -- lay du lieu de hien thi len man hinh chinh

        SELECT cf.fullname, cf.custodycd
        INTO l_cffullname, l_custodycd
        FROM cfmast cf,afmast af
        WHERE af.custid=cf.custid
        AND af.acctno=rec.afacctno;


        --Set cac field giao dich
        --03  ACCTNO      C
        l_txmsg.txfields ('03').defname   := 'ACCTNO';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;

        --05  AFACCTNO      C
        l_txmsg.txfields ('05').defname   := 'AFACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;

         --09  BALANCE     N
        l_txmsg.txfields ('09').defname   := 'BALANCE';
        l_txmsg.txfields ('09').TYPE      := 'N';
        l_txmsg.txfields ('09').VALUE     := round(REC.AMT,0);

        --10  AMT     N
        l_txmsg.txfields ('10').defname   := 'AMT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := round(REC.AMT,0);
        --11  INTAMT    N So lai
        l_txmsg.txfields ('11').defname   := 'INTAMT';
        l_txmsg.txfields ('11').TYPE      := 'N';
        l_txmsg.txfields ('11').VALUE     := round(REC.INTAVLAMT,0);
        --12  INTAVLAMT      N
        l_txmsg.txfields ('12').defname   := 'INTAVLAMT';
        l_txmsg.txfields ('12').TYPE      := 'N';
        l_txmsg.txfields ('12').VALUE     := round(REC.INTAVLAMT,0);

        --13  MORTGAGE      N
        l_txmsg.txfields ('13').defname   := 'MORTGAGE';
        l_txmsg.txfields ('13').TYPE      := 'N';
        l_txmsg.txfields ('13').VALUE     := round(REC.MORTGAGE,0);

        --15  DIRECTAMT      N
        l_txmsg.txfields ('15').defname   := 'DIRECTAMT';
        l_txmsg.txfields ('15').TYPE      := 'N';
        l_txmsg.txfields ('15').VALUE     := round(REC.DIRECTAMT,0);

        --15  AUTORND      N
        l_txmsg.txfields ('16').defname   := 'AUTORND';
        l_txmsg.txfields ('16').TYPE      := 'N';
        l_txmsg.txfields ('16').VALUE     := round(REC.AUTORND,0);
         --05  AFACCTNO      C
        l_txmsg.txfields ('17').defname   := 'ORGAMT';
        l_txmsg.txfields ('17').TYPE      := 'N';
        l_txmsg.txfields ('17').VALUE     := rec.ORGAMT;

          --05  AFACCTNO      C
        l_txmsg.txfields ('18').defname   := 'FRDATE';
        l_txmsg.txfields ('18').TYPE      := 'C';
        l_txmsg.txfields ('18').VALUE     := rec.FRDATE;
         --20  NOTINTDUECD      N
        l_txmsg.txfields ('20').defname   := 'NOTINTDUECD';
        l_txmsg.txfields ('20').TYPE      := 'N';
        l_txmsg.txfields ('20').VALUE     := round(REC.NOTINTDUECD,0);

        --30    DESC        C
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE     := v_strDesc;

        --08  ACCTNO      C
        l_txmsg.txfields ('08').defname   := 'FULLNAME';
        l_txmsg.txfields ('08').TYPE      := 'C';
        l_txmsg.txfields ('08').VALUE     := l_cffullname;

        --96  ACCTNO      C
        l_txmsg.txfields ('96').defname   := 'CUSTODYCD';
        l_txmsg.txfields ('96').TYPE      := 'C';
        l_txmsg.txfields ('96').VALUE     := l_custodycd;



        BEGIN
            IF TXPKS_#1610.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 1610: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_TDEOTD');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on release pr_TDEOTD');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_TDEOTD');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_TDEOTD;

  --Gia han tai khoan tiet kiem
  PROCEDURE pr_TDRNA(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);


  BEGIN
    plog.setbeginsection(pkgctx, 'pr_TDRNA');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  TDMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

     SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='1630';
     SELECT varvalue
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
     SELECT varvalue
               INTO v_strPREVDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'PREVDATE';


    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='1630';
    plog.debug(pkgctx, '1630 p_FromRow= ' || p_FromRow || ' p_ToRow =' || p_ToRow);
    plog.debug(pkgctx, 'Begin loop');



    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    plog.debug(pkgctx, 'pr_TDRNA '||p_bchmdl ||' v_strCURRDATE '||v_strCURRDATE);

    for rec in
    (

       SELECT MST.ACCTNO, MST.AFACCTNO,TY.ACTYPE, TY.TERMCD,TY.TDTERM,
        MST.OPNDATE,MST.TODATE TODATE,MST.FRDATE FRDATE,GREATEST(MST.TODATE,TO_DATE (v_strCURRDATE, 'dd/MM/yyyy'))  RNFRDATE ,
        DECODE(TY.TERMCD, 'D', GREATEST(MST.TODATE,TO_DATE (v_strCURRDATE, 'dd/MM/yyyy'))  +  TY.TDTERM,
                          'W', GREATEST(MST.TODATE,TO_DATE (v_strCURRDATE, 'dd/MM/yyyy'))  +  TY.TDTERM*7,
                          'M', ADD_MONTHS(GREATEST(MST.TODATE,TO_DATE (v_strCURRDATE, 'dd/MM/yyyy')) , TY.TDTERM)) RNTODATE,
        MST.BUYINGPOWER BUYINGPOWER-- PhuongHT edit: ju nguyen tham so theo hop dong cu
        FROM (SELECT * FROM (SELECT A.*, ROWNUM ID FROM TDMAST A WHERE deltd <> 'Y')
        WHERE ID > p_FromRow AND  ID <= p_ToRow
              ) MST, TDTYPE TY
        WHERE MST.STATUS in('N','A') AND MST.TODATE <= TO_DATE (v_strCURRDATE, 'dd/MM/yyyy')
           AND MST.ACTYPE =TY.ACTYPE
           AND MST.AUTORND ='Y'   AND MST.AUTOPAID ='Y'
    )
    Loop

        --Set txnum
        plog.debug(pkgctx, 'Loop for account:' || rec.ACCTNO || ' ngay' || to_char(v_strCURRDATE) ||' p_FromRow ='||p_FromRow || 'p_ToRow ='||p_ToRow);
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);




        --Set cac field giao dich
        --03  ACCTNO      C
        l_txmsg.txfields ('03').defname   := 'ACCTNO';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;

        --05  AFACCTNO      C
        l_txmsg.txfields ('05').defname   := 'AFACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;

         --06  FRDATE     D
        l_txmsg.txfields ('06').defname   := 'FRDATE';
        l_txmsg.txfields ('06').TYPE      := 'D';
        l_txmsg.txfields ('06').VALUE     := rec.RNFRDATE;

        --07  TODATE     D
        l_txmsg.txfields ('07').defname   := 'TODATE';
        l_txmsg.txfields ('07').TYPE      := 'D';
        l_txmsg.txfields ('07').VALUE     := rec.RNTODATE;

        --08    ACTYPE        C
        l_txmsg.txfields ('08').defname   := 'ACTYPE';
        l_txmsg.txfields ('08').TYPE      := 'C';
        l_txmsg.txfields ('08').VALUE     := rec.ACTYPE;


        --08    BUYINGPOWER        C
        l_txmsg.txfields ('09').defname   := 'BUYINGPOWER';
        l_txmsg.txfields ('09').TYPE      := 'C';
        l_txmsg.txfields ('09').VALUE     := rec.BUYINGPOWER;


        --30    DESC        C
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE     := v_strDesc;


        BEGIN
            IF TXPKS_#1630.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 1630: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_TDRNA');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on release pr_TDRNA');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_TDRNA');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_TDRNA;

--Tu dong rut tiet kiem
  PROCEDURE pr_TDAW(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strPREVDATE varchar2(20);
      v_strNEXTDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_blnVietnamese BOOLEAN;
      l_err_param varchar2(300);
      l_MaxRow NUMBER(20,0);
      v_dblINTAMT NUMBER;
      V_dblAMT    NUMBER;
      v_dblCIBALANCE NUMBER;
      v_strTempAFACCTNO  VARCHAR2(20);


  BEGIN
    plog.setbeginsection(pkgctx, 'pr_TDRNA');
    SELECT COUNT(*) MAXROW into l_MaxRow FROM  TDMAST;
    IF l_MaxRow>p_ToRow THEN
        p_lastRun:='N';
    ELSE
        p_lastRun:='Y';
    END IF;

     SELECT TXDESC,EN_TXDESC into v_strDesc, v_strEN_Desc FROM  TLTX WHERE TLTXCD='1600';
     SELECT varvalue
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
     SELECT varvalue
               INTO v_strPREVDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'PREVDATE';


    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='1600';
    plog.debug(pkgctx, '1600 p_FromRow= ' || p_FromRow || ' p_ToRow =' || p_ToRow);
    plog.debug(pkgctx, 'Begin loop');



    --Xac dinh xem lenh co lich ung truoc ma CI khong du thanh toan
    plog.debug(pkgctx, 'pr_TDAW '||p_bchmdl ||' v_strCURRDATE '||v_strCURRDATE);

    for rec in
    (

        SELECT MST.ACCTNO, MST.AFACCTNO, CF.CUSTODYCD, CF.FULLNAME,
            MST.ORGAMT, MST.BALANCE, MST.PRINTPAID, MST.INTNMLACR, MST.INTPAID, MST.TAXRATE, MST.BONUSRATE, MST.INTRATE, MST.TDTERM, MST.OPNDATE, MST.FRDATE, MST.TODATE,
            FN_TDMASTINTRATIO(MST.ACCTNO,TO_DATE(SYSVAR.VARVALUE,'DD/MM/YYYY'),MST.BALANCE) INTAVLAMT,
            (CASE WHEN MST.BREAKCD = 'Y' AND (TO_DATE(SYSVAR.VARVALUE,'DD/MM/YYYY') - TO_DATE(MST.FRDATE,'DD/MM/YYYY')) >= NVL(MST.MINBRTERM, 0) THEN MST.BALANCE
            ELSE 0 END) AVLWITHDRAW,
            MST.MORTGAGE,
            A0.CDCONTENT DESC_TDSRC, A1.CDCONTENT DESC_AUTOPAID, A2.CDCONTENT DESC_BREAKCD, A3.CDCONTENT DESC_SCHDTYPE, A4.CDCONTENT DESC_TERMCD, A5.CDCONTENT DESC_STATUS,
            A6.cdcontent BUYINGPOWER,
            0 DIRECTAMT,
            LEAST(-CI.BALANCE,LEAST(V.SECUREAMT,MST.MORTGAGE)) AMT
        FROM TDMAST MST, AFMAST AF, CFMAST CF, TDTYPE TYP, ALLCODE A0, ALLCODE A1, ALLCODE A2, ALLCODE A3, ALLCODE A4, ALLCODE A5, SYSVAR,
        ALLCODE A6,CIMAST CI,
        (  SELECT afacctno, SUM(EXECAMT) + SUM(FEEACR) SECUREAMT FROM ODMAST
            WHERE EXECTYPE in ('NB','BC') AND EXECQTTY <> 0
                AND TXDATE = to_date(v_strCURRDATE,'DD/MM/RRRR')
            GROUP BY AFACCTNO
        ) v
        WHERE MST.ACTYPE=TYP.ACTYPE AND MST.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND SYSVAR.VARNAME='CURRDATE'
            AND MST.DELTD<>'Y' AND MST.status in ('N','A')
            AND A0.CDTYPE='TD' AND A0.CDNAME='TDSRC' AND MST.TDSRC=A0.CDVAL
            AND A1.CDTYPE='SY' AND A1.CDNAME='YESNO' AND MST.AUTOPAID=A1.CDVAL
            AND A2.CDTYPE='SY' AND A2.CDNAME='YESNO' AND MST.BREAKCD=A2.CDVAL
            AND A4.CDTYPE='TD' AND A4.CDNAME='TERMCD' AND MST.TERMCD=A4.CDVAL
            AND A5.CDTYPE='TD' AND A5.CDNAME='STATUS' AND MST.STATUS=A5.CDVAL
            AND A3.CDTYPE='TD' AND A3.CDNAME='SCHDTYPE' AND MST.SCHDTYPE=A3.CDVAL
            AND A6.CDTYPE='SY' AND A6.CDNAME='YESNO' AND MST.BUYINGPOWER=A6.CDVAL
            AND mst.buyingpower='Y'
            AND (mst.breakcd='Y' OR (mst.breakcd='N' AND TO_date(v_strCURRDATE,'DD/MM/YYYY') > mst.todate ))
            AND MST.AFACCTNO=CI.ACCTNO
            AND CI.BALANCE <0
            and MST.AFACCTNO = V.afacctno and v.secureamt > 0
            AND mst.deltd <> 'Y'
            ORDER BY mst.afacctno,mst.TODATE DESC,mst.MORTGAGE

    )
    Loop

        --Set txnum
        plog.debug(pkgctx, 'Loop for account:' || rec.ACCTNO || ' ngay' || to_char(v_strCURRDATE) ||' p_FromRow ='||p_FromRow || 'p_ToRow ='||p_ToRow);
        SELECT systemnums.C_BATCH_PREFIXED
                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                  INTO l_txmsg.txnum
                  FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);


        SELECT balance INTO v_dblCIBALANCE
        FROM cimast
        WHERE acctno=rec.afacctno;
        IF(v_dblCIBALANCE<0 AND rec.afacctno <> nvl(v_strTempAFACCTNO,'a')) THEN
          --v_dblAMT:=least(rec.MORTGAGE,-v_dblCIBALANCE);
          v_dblAMT:=REC.AMT;
          v_dblINTAMT:=FN_TDMASTINTRATIO(rec.ACCTNO,to_date(v_strCURRDATE,'DD/MM/YYYY'),v_dblAMT);

          --Set cac field giao dich
          --03  ACCTNO      C
          l_txmsg.txfields ('03').defname   := 'ACCTNO';
          l_txmsg.txfields ('03').TYPE      := 'C';
          l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;

          --05  AFACCTNO      C
          l_txmsg.txfields ('05').defname   := 'AFACCTNO';
          l_txmsg.txfields ('05').TYPE      := 'C';
          l_txmsg.txfields ('05').VALUE     := rec.AFACCTNO;

            --09    BALANCE        D
          l_txmsg.txfields ('09').defname   := 'BALANCE';
          l_txmsg.txfields ('09').TYPE      := 'D';
          l_txmsg.txfields ('09').VALUE     := rec.BALANCE;
           --12    BUYINGPOWER        D
          l_txmsg.txfields ('12').defname   := 'INTAVLAMT';
          l_txmsg.txfields ('12').TYPE      := 'D';
          l_txmsg.txfields ('12').VALUE     := rec.INTAVLAMT;
           --13    BUYINGPOWER        D
          l_txmsg.txfields ('13').defname   := 'MORTGAGE';
          l_txmsg.txfields ('13').TYPE      := 'D';
          l_txmsg.txfields ('13').VALUE     := rec.MORTGAGE;

          --10    BALANCE        D
          l_txmsg.txfields ('10').defname   := 'AMT';
          l_txmsg.txfields ('10').TYPE      := 'D';
          l_txmsg.txfields ('10').VALUE     := v_dblAMT;
           --09    BUYINGPOWER        D
          l_txmsg.txfields ('11').defname   := 'INTAMT';
          l_txmsg.txfields ('11').TYPE      := 'D';
          l_txmsg.txfields ('11').VALUE     := v_dblINTAMT;
           --08    BUYINGPOWER        D
          l_txmsg.txfields ('15').defname   := 'DIRECTAMT';
          l_txmsg.txfields ('15').TYPE      := 'D';
          l_txmsg.txfields ('15').VALUE     := rec.DIRECTAMT;
             --05  AFACCTNO      C
        l_txmsg.txfields ('16').defname   := 'ORGAMT';
        l_txmsg.txfields ('16').TYPE      := 'N';
        l_txmsg.txfields ('16').VALUE     := rec.ORGAMT;

          --05  AFACCTNO      C
        l_txmsg.txfields ('17').defname   := 'FRDATE';
        l_txmsg.txfields ('17').TYPE      := 'C';
        l_txmsg.txfields ('17').VALUE     := rec.FRDATE;


          --30    DESC        C
          l_txmsg.txfields ('30').defname   := 'DESC';
          l_txmsg.txfields ('30').TYPE      := 'C';
          l_txmsg.txfields ('30').VALUE     := v_strDesc;


          BEGIN
              IF TXPKS_#1600.fn_batchtxprocess (l_txmsg,
                                               p_err_code,
                                               l_err_param
                 ) <> systemnums.c_success
              THEN
                 plog.error (pkgctx,
                             'got error 1600: ' || p_err_code
                 );
                 ROLLBACK;
                 RETURN;
              END IF;
          END;

        ELSE -- Neu so du da >=0
          v_strTempAFACCTNO:=rec.afacctno;
        END IF;
    end loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_TDAW');
  EXCEPTION
  WHEN OTHERS
   THEN
      plog.debug (pkgctx,'got error on release pr_TDAW');
      ROLLBACK;
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_TDAW');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_TDAW;

---------------------------------pr_MRAssetMarked------------------------------------------------
  PROCEDURE pr_MRAssetMarked(p_err_code  OUT varchar2)
  IS
    l_txnum varchar2(10);
    l_currdate varchar2(10);
    CURSOR markedRecords IS
        select afacctno
        from
        (
            select af.acctno afacctno,
                   least(
                        greatest(    -least(
                                            greatest(nvl(adv.avladvance,0)
                                                + balance,
                                            0)
                                        - nvl(t0.marginamt,0)
                                    ,0)
                                ,0),
                        least(least(nvl(af.mrcrlimitmax,0),to_number(cspks_system.fn_get_sysvar('MARGIN','MAXDEBTCF'))) - mst.dfodamt,/*af.mrcrlimit +*/ nvl(sec.setotalmramt,0) )) outstanding,
                   nvl(se.usedmargin,0) /*+ least(nvl(af.mrcrlimitmax,0),to_number(cspks_system.fn_get_sysvar('MARGIN','MAXDEBTCF')), af.mrcrlimit)*/ outstanding_prinused,
                   least(
                        greatest(    -least(
                                        greatest(nvl(adv.avladvance,0)
                                        + balance
                                        - mst.dfdebtamt
                                        - mst.dfintdebtamt
                                        - mst.depofeeamt
                                        - nvl(t0.t0prin,0),0)

                                        - mst.trfbuyamt
                                        - nvl(t0.nonmarginamt,0)
                                        - nvl(t0.marginamt,0)
                                    ,0)
                                ,0),
                         least(nvl(af.mrcrlimitmax,0) - mst.dfodamt,/*af.mrcrlimit + */nvl(sec.setotalamt,0) )) sy_outstanding,
                   nvl(se.sy_usedmargin,0) /*+ least(nvl(af.mrcrlimitmax,0),af.mrcrlimit)*/ sy_outstanding_prinused,
                   af.trfbuyrate * af.trfbuyext isLateTransfer


                from cimast mst,
                    afmast af,
                    (select pr.afacctno,
                            sum(nvl(pr.prinused,0) * least(nvl(rsk2.mrpriceloan,0), sb.marginrefprice) * least(nvl(rsk2.mrratioloan,0),100-mrt.mriratio) / 100) usedmargin,
                            sum(nvl(pr.sy_prinused,0) * least(nvl(rsk1.mrpriceloan,0), sb.marginprice) * nvl(rsk1.mrratioloan,0) / 100) sy_usedmargin
                         from aftype aft, mrtype mrt,
                              (select afpr.afacctno, afpr.actype, pr.codeid,
                                    sum(case when restype = 'M' then nvl(afpr.prinused,0) else 0 end) prinused,
                                    sum(case when restype = 'S' then nvl(afpr.prinused,0) else 0 end) sy_prinused
                                    from (select afacctno, af.actype, codeid, restype, sum(prinused) prinused
                                            from afmast af,
                                                 vw_afpralloc_all afp
                                            where af.acctno = afp.afacctno
                                            group by afacctno, af.actype, codeid, restype) afpr, vw_marginroomsystem pr
                                    where afpr.codeid = pr.codeid
                                    group by afpr.afacctno, afpr.actype, pr.codeid
                                 ) pr,
                                securities_info sb,
                                afserisk rsk1,
                                afmrserisk rsk2
                             where pr.codeid = sb.codeid
                             and pr.codeid = rsk1.codeid and pr.actype = rsk1.actype
                             and pr.codeid = rsk2.codeid and pr.actype = rsk2.actype
                             and pr.actype = aft.actype and aft.mrtype = mrt.actype
                             and mrt.mrtype = 'T'
                        group by pr.afacctno) se,
                    v_getbuyorderinfo b,
                    v_getsecmargininfo sec,
                    (select sum(depoamt) avladvance,afacctno from v_getAccountAvlAdvance group by afacctno) adv,
                    (select trfacctno,
                                sum(decode(lnt.chksysctrl,'Y',1,0)*(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd)) marginamt,
                                sum(decode(lnt.chksysctrl,'Y',0,1)*(prinnml+prinovd+intnmlacr+intdue+intovdacr+intnmlovd+feeintnmlacr+feeintdue+feeintovdacr+feeintnmlovd)) nonmarginamt,
                                sum(oprinnml + oprinovd + ointnmlacr + ointdue + ointovdacr + ointnmlovd) t0prin
                            from lnmast ln, lntype lnt
                            where ln.actype = lnt.actype and ln.ftype = 'AF'
                            group by trfacctno) t0
                where mst.acctno = af.acctno
                and mst.afacctno = se.afacctno(+)
                and mst.afacctno = b.afacctno(+)
                and mst.afacctno = sec.afacctno(+)
                and mst.afacctno = adv.afacctno(+)
                and mst.afacctno = t0.trfacctno(+)

        )
        where greatest(outstanding_prinused,0) - greatest(outstanding,0) <> 0 or
                greatest(sy_outstanding_prinused,0) - greatest(sy_outstanding,0)<> 0
        order by (case when isLateTransfer = 0 then 0 else 1 end),
                greatest(sy_outstanding_prinused - greatest(sy_outstanding,0),0) desc ,greatest(greatest(sy_outstanding, 0) - sy_outstanding_prinused,0);


  marked_rec markedRecords%ROWTYPE;
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_MRAssetMarked');
    -- Xoa cac records phan bo tam thoi.
    l_txnum:='REMARK';
    l_currdate:= cspks_system.fn_get_sysvar('SYSTEM','PREVDATE');

    -- Ducnv cap nhap lai gia tran san cho ngay hom sau
      --HOSE
      /*For vc in(
        SELECT h.trading_date, CODE,
               (CEILING_PRICE*10 + FLOOR_PRICE*10) /2 BASICPRICE
        FROM HO_SEC_INFO h WHERE STOCK_TYPE IN('1','3')
         ) loop
            Update securities_info
            SET    marginprice =  fn_get_refprice_nextdate(codeid, nvl(VC.BASICPRICE,0), 1), --nvl(VC.BASICPRICE,0),
                   marginrefprice =  fn_get_refprice_nextdate(codeid, nvl(VC.BASICPRICE,0), 1) --nvl(VC.BASICPRICE,0)
             WHERE SYMBOL=TRIM(VC.CODE);
         End loop;*/

         MERGE INTO securities_info se
         USING (SELECT h.trading_date, CODE,
                       (CEILING_PRICE*10 + FLOOR_PRICE*10) /2 BASICPRICE
                FROM HO_SEC_INFO h WHERE STOCK_TYPE IN('1','3')) h
         ON (se.symbol = h.code)
         WHEN MATCHED THEN
           UPDATE SET marginprice =  fn_get_refprice_nextdate(codeid, nvl(h.BASICPRICE,0), 1), --nvl(VC.BASICPRICE,0),
                   marginrefprice =  fn_get_refprice_nextdate(codeid, nvl(h.BASICPRICE,0), 1); --nvl(VC.BASICPRICE,0)
       -------Tinh san gia tran san cho HNX

        /*For VC in(
                SELECT S.SYMBOL,s.codeid,  S.avgprice avgprice
                 FROM SECURITIES_INFO S, SBSECURITIES SB
                 WHERE S.SYMBOL=SB.SYMBOL AND SB.TRADEPLACE IN('002','005') and S.avgprice>0) loop
             update securities_info
             set  marginprice = fn_get_refprice_nextdate(vc.codeid, vc.avgprice, 1),--nvl(vc.avgprice,0),
                  marginrefprice =  fn_get_refprice_nextdate(vc.codeid, vc.avgprice, 1)--nvl(vc.avgprice,0)
             where symbol=vc.symbol;
        End loop;*/

        MERGE INTO securities_info inf
         USING (SELECT S.SYMBOL,s.codeid,  S.avgprice avgprice
                 FROM SECURITIES_INFO S, SBSECURITIES SB
                 WHERE S.SYMBOL=SB.SYMBOL AND SB.TRADEPLACE IN('002','005') and S.avgprice>0) se
         ON (se.symbol = inf.symbol)
         WHEN MATCHED THEN
           UPDATE SET marginprice = fn_get_refprice_nextdate(se.codeid, se.avgprice, 1),--nvl(vc.avgprice,0),
                  marginrefprice =  fn_get_refprice_nextdate(se.codeid, se.avgprice, 1);--nvl(vc.avgprice,0)

        --Cap nhat lai ma chung khoan WFT giong ma CK goc.
        for rec in (
            select wft.codeid, wft.refcodeid,
                inf.ceilingprice, inf.floorprice ,inf.basicprice,
                inf.dfrlsprice, inf.dfrefprice, inf.marginprice,
                inf.margincallprice, inf.marginrefcallprice, inf.marginrefprice
                from sbsecurities wft, securities_info inf
                where wft.symbol like '%_WFT'
                and wft.refcodeid = inf.codeid
        )
        loop
            update securities_info
            set   marginprice = rec.marginprice,
                  marginrefprice =  rec.marginrefprice
            where codeid = rec.codeid;
        end loop;

        MERGE INTO securities_info inf
         USING (select wft.codeid, wft.refcodeid,
                inf.ceilingprice, inf.floorprice ,inf.basicprice,
                inf.dfrlsprice, inf.dfrefprice, inf.marginprice,
                inf.margincallprice, inf.marginrefcallprice, inf.marginrefprice
                from sbsecurities wft, securities_info inf
                where wft.symbol like '%_WFT'
                and wft.refcodeid = inf.codeid) se
         ON (se.codeid = inf.codeid)
         WHEN MATCHED THEN
           UPDATE SET marginprice = se.marginprice,
                  marginrefprice =  se.marginrefprice;
        --------- END of DUCNV -----

    for rec in
    (
        select afacctno, codeid, restype, sum(prinused) prinused
        from afpralloc
        where alloctyp = 'T'
        group by afacctno, codeid, restype
        having sum(prinused) <> 0
        order by afacctno, codeid, restype
    )
    loop
        INSERT INTO afpralloc (AUTOID,AFACCTNO,PRINUSED,CODEID,ALLOCTYP,ORGORDERID,TXDATE,TXNUM,RESTYPE)
            VALUES(seq_afpralloc.nextval,rec.afacctno, rec.prinused, rec.codeid, 'M', null, to_date(l_currdate,systemnums.c_date_format), null, rec.restype);
        delete afpralloc where afacctno = rec.afacctno  and codeid = rec.codeid and restype = rec.restype and alloctyp = 'T';
    end loop;
    delete afpralloc where alloctyp = 'T';
    -- Thuc hien phan bo lai.
    OPEN markedRecords;
    loop
        FETCH markedRecords INTO marked_rec;
        EXIT WHEN markedRecords%NOTFOUND;
        if fn_markedafpralloc(marked_rec.afacctno,
                        null,
                        'A',
                        'M',
                        null,
                        'N',
                        'N',
                        to_date(l_currdate,systemnums.c_date_format),
                        l_txnum,
                        p_err_code) <> systemnums.C_SUCCESS then
            null;
        end if;
    end loop;
    close markedRecords;
    --PhuongHT edit goi 1.5.9.6 tunning batch
    update afprallocation afm
    set prinused = prinused+(select nvl(sum(prinused),0) from afpralloc where afacctno = afm.afacctno and codeid = afm.codeid and restype = afm.restype);

    insert into afprallocation (autoid, afacctno, prinused, codeid, alloctyp, orgorderid, txdate, txnum,restype)
        select seq_afprallocation.nextval, afacctno, prinused, codeid, 'M' alloctyp,null orgorderid, null txdate, null txnum, restype from
            (select  afacctno, nvl(sum(prinused),0) prinused, codeid, restype
            from afpralloc afh
            where not exists (select 1 from afprallocation where afacctno = afh.afacctno and codeid = afh.codeid and restype = afh.restype)
        group by  afacctno, codeid, restype);

   --end of PhuongHT edit goi 1.5.9.6 tunning batch
  DELETE FROM afprallocation WHERE nvl(prinused,0) =0;
    -- Backup du lieu vao hist
    insert into afprallochist
    select * from afpralloc where alloctyp = 'M';
    -- Xoa du lieu da backup.
    delete afpralloc where alloctyp = 'M';



    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_MRAssetMarked');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_MRAssetMarked');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_MRAssetMarked;



---------------------------------pr_MRAssetMarked------------------------------------------------
  PROCEDURE pr_MRAssetMarked_Step01(p_err_code  OUT varchar2)
  IS

    l_txnum varchar2(10);
    l_currdate varchar2(10);
    v_strSQL   VARCHAR2(1000);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_MRAssetMarked_Step01');
    l_txnum:=null;
    l_currdate:= cspks_system.fn_get_sysvar('SYSTEM','CURRDATE');


    --Log du lieu thong tin gia CK
    v_strSQL := ' truncate table securities_mr_log ' ; --MSBS-2589
    execute immediate v_strSQL;

    insert into securities_mr_log(CODEID,SYMBOL,BASICPRICE,MARGINPRICE,MARGINREFPRICE,
    DFREFPRICE,MARGINCALLPRICE,MARGINREFCALLPRICE,DFRLSPRICE)
    select CODEID,SYMBOL,BASICPRICE,MARGINPRICE,MARGINREFPRICE,
    DFREFPRICE,MARGINCALLPRICE,MARGINREFCALLPRICE,DFRLSPRICE from securities_info;

    -- Release room TT74:
    for rec in
    (
        select se.afacctno, se.codeid, nvl(pr.prinused,0) - greatest(se.trade - nvl(sts.execsellqtty,0) + nvl(sts.execbuyqtty,0),0) rlsqtty
             from semast se, afmast af, aftype aft, mrtype mrt,
                 (select afacctno, codeid,
                        sum(case when duetype = 'SS' then qtty - decode(status,'C',qtty,aqtty) else 0 end) execsellqtty,
                        sum(case when duetype = 'RS' then qtty - decode(status,'C',qtty,aqtty) else 0 end) execbuyqtty
                     from stschd
                     where duetype in ('SS','RS') and deltd <> 'Y'
                     group by afacctno, codeid) sts,
                 (select afacctno, codeid, sum(prinused) prinused
                                from vw_afpralloc_all
                                where restype = 'M'
                                group by afacctno,codeid
                     ) pr
             where af.actype = aft.actype and aft.mrtype = mrt.actype and mrt.mrtype = 'T' and se.afacctno = af.acctno
             and se.afacctno = sts.afacctno(+) and se.codeid = sts.codeid(+)
             and se.afacctno = pr.afacctno(+) and se.codeid = pr.codeid(+)
             and nvl(pr.prinused,0) > greatest(se.trade - nvl(sts.execsellqtty,0) + nvl(sts.execbuyqtty,0),0)
    )
    loop
            INSERT INTO afpralloc (AUTOID,AFACCTNO,PRINUSED,CODEID,ALLOCTYP,ORGORDERID,TXDATE,TXNUM,RESTYPE)
                VALUES(seq_afpralloc.nextval,rec.afacctno, -rec.rlsqtty,rec.codeid,'M',null, to_date(l_currdate,'DD/MM/RRRR'), l_txnum,'M');
    end loop;


    -- Release room system:
    for rec in
    (
        select se.afacctno, se.codeid, nvl(pr.prinused,0) - greatest(se.trade - nvl(sts.execsellqtty,0) + nvl(sts.execbuyqtty,0),0) rlsqtty
             from semast se, afmast af, aftype aft, mrtype mrt,
                 (select afacctno, codeid,
                        sum(case when duetype = 'SS' then qtty - decode(status,'C',qtty,aqtty) else 0 end) execsellqtty,
                        sum(case when duetype = 'RS' then qtty - decode(status,'C',qtty,aqtty) else 0 end) execbuyqtty
                     from stschd
                     where duetype in ('SS','RS') and deltd <> 'Y'
                     group by afacctno, codeid) sts,
                 (select afacctno, codeid, sum(prinused) prinused
                                from vw_afpralloc_all
                                where restype = 'S'
                                group by afacctno,codeid
                     ) pr
             where af.actype = aft.actype and aft.mrtype = mrt.actype and mrt.mrtype = 'T' and se.afacctno = af.acctno
             and se.afacctno = sts.afacctno(+) and se.codeid = sts.codeid(+)
             and se.afacctno = pr.afacctno(+) and se.codeid = pr.codeid(+)
             and nvl(pr.prinused,0) > greatest(se.trade - nvl(sts.execsellqtty,0) + nvl(sts.execbuyqtty,0),0)
    )
    loop
            INSERT INTO afpralloc (AUTOID,AFACCTNO,PRINUSED,CODEID,ALLOCTYP,ORGORDERID,TXDATE,TXNUM,RESTYPE)
                VALUES(seq_afpralloc.nextval,rec.afacctno, -rec.rlsqtty,rec.codeid,'M',null, to_date(l_currdate,'DD/MM/RRRR'), l_txnum,'S');
    end loop;

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_MRAssetMarked_Step01');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_MRAssetMarked_Step01');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_MRAssetMarked_Step01;

--Xu ly truoc khi chay batch
PROCEDURE pr_SABEGINBATCH(p_err_code  OUT varchar2)
  IS

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_SABEGINBATCH');
    PR_NOTIFYBATCH('START');
    --Ap lich tinh lai tien gui moi
    if cspks_saproc.fn_apply_crintacr_schedule(p_err_code) <> 0 then
        p_err_code:= errnums.C_SYSTEM_ERROR; --Loi he thong
        plog.setendsection(pkgctx, 'pr_SABEGINBATCH');
        return;
    end if;


    --Log lai nhung tai khoan bi call truoc khi chay giai ngan
    --Tam troi chuyen trang thai hoi so thanh Active de log du lieu
    update sysvar set varvalue ='1' where grname='SYSTEM' and varname='HOSTATUS';
    cspks_logproc.pr_log_mr0002('BF-EOD');
    cspks_logproc.pr_log_mr3008('BF-EOD');
    cspks_logproc.pr_log_mr3009('BF-EOD');
    cspks_logproc.pr_log_mr5005('BF-EOD');
    --Tra lai trang thai hoi so thanh DeActive sau khi log du lieu
    update sysvar set varvalue ='0' where grname='SYSTEM' and varname='HOSTATUS';

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_SABEGINBATCH');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM || dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_SABEGINBATCH');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_SABEGINBATCH;

---------------------------------pr_LNAdvPayment------------------------------------------------
  PROCEDURE pr_LNAdvPaymentAftSendMoney(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg               tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_T0PRINDUE number(20,0);
    l_T0PRINNML number(20,0);
    l_T0PRINOVD number(20,0);
    l_AvlAmt    number(20,0);
    l_FEEOVD number(20,0);
    l_T0INTNMLOVD number(20,0);
    l_INTNMLOVD number(20,0);
    l_T0INTOVDACR number(20,0);
    l_INTOVDACR number(20,0);
    l_FEEDUE number(20,0);
    l_T0INTDUE number(20,0);
    l_INTDUE number(20,0);
    l_FEENML number(20,0);
    l_T0INTNMLACR number(20,0);
    l_INTNMLACR number(20,0);
    l_PRINOVD number(20,0);
    l_PRINDUE number(20,0);
    l_PRINNML number(20,0);
    l_FEEINTNMLOVD number(20,0);
    l_FEEINTNMLACR number(20,0);
    l_FEEINTOVDACR number(20,0);
    l_FEEINTDUE number(20,0);
    l_ADVPAYFEE number(20,0);
    l_SplitRate number(20,8);
    l_maxdebtcf number(20,0);
    l_intnmlacrbank number(20,0);

    v_gpamt number(20,0);
    v_remaingpamt number(20,0);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_LNAdvPaymentAftSendMoney');
    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD='5567';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='5567';

    select to_number(varvalue) into l_maxdebtcf from sysvar where varname = 'MAXDEBTCF';
    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
            SELECT ci.acctno trfacctno,
                round(BALANCE + nvl(avladvance,0),0) AVLBAL,
                BALANCE, nvl(avladvance,0) TCV--1.5.7.0
            FROM CIMAST ci,
                (select --sum(advamt) avladvance,afacctno
                         sum(depoamt) avladvance, afacctno
                    from v_getAccountAvlAdvance group by afacctno) adv
            WHERE ci.acctno = adv.afacctno(+)
            and round(BALANCE + nvl(avladvance,0),0) > 0
            and exists (select 1 from lnmast where ftype = 'AF' and trfacctno = ci.acctno
                            and prinnml + prinovd + intnmlacr + intdue + intovdacr + intnmlovd
                                     + feeintnmlacr + feeintdue + feeintovdacr + feeintnmlovd
                                                    + oprinnml + oprinovd + ointnmlacr + ointdue + ointovdacr + ointnmlovd > 0)
            order by ci.acctno
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for' || rec.trfacctno);
        --chaunh: chua lai no BL khong dung tra no trong han
        v_gpamt:= 0;
        v_remaingpamt:= 0;
        FOR GP IN
            (
            select nvl(gpamt,0) GPAMT, nvl(remaingpamt,0) REMAINGPAMT
            from ln_gp_log where log_date = to_date(l_CURRDATE,systemnums.c_date_format) and acctno = rec.trfacctno
            )
        LOOP
            v_gpamt:= GP.GPAMT;
            v_remaingpamt:= GP.REMAINGPAMT;
        end LOOP;

        if cspks_lnproc.fn_Gen_Prepaid_Payment(rec.trfacctno, greatest(rec.AVLBAL - v_gpamt - v_remaingpamt,0), 'L', p_err_code,'ALL',greatest(rec.BALANCE - - v_gpamt - v_remaingpamt,0),greatest(rec.TCV -  greatest( v_gpamt + v_remaingpamt-rec.BALANCE,0),0),'LNADVPAYAFTSM') <> systemnums.c_success then--1.5.7.0
            plog.setendsection (pkgctx, 'pr_LNAdvPaymentAftSendMoney');
            return;
        end if;
        l_Desc:= 'CL.' || l_OrgDesc;

        for rec2 in
        (
            select ln.trfacctno, ln.acctno, ls.autoid lnschdid, lp.autoid,
                max(case when ln.ftype = 'AF' then 1 else 0 end) FINANCETYPE,
                max(ln.ADVPAYFEE) ADVPAYFEE,
                sum(lp.amt - lp.paidamt) AvlAmt,
                sum(case when reftype = 'GP' then ls.intovd else 0 end) T0INTNMLOVD,
                sum(case when reftype = 'GP' then ls.intovdprin else 0 end) T0INTOVDACR,
                sum(case when reftype = 'GP' then ls.ovd else 0 end) T0PRINOVD,
                sum(case when reftype = 'GP' then ls.intdue else 0 end) T0INTDUE,
                sum(case when reftype = 'GP' and overduedate = l_CURRDATE then ls.nml else 0 end) T0PRINDUE,
                sum(case when reftype = 'GP' then ls.intnmlacr else 0 end) T0INTNMLACR,
                sum(case when reftype = 'GP' then ls.nml else 0 end) T0PRINNML,
                sum(case when reftype = 'P' then ls.feeovd else 0 end) FEEOVD,
                sum(case when reftype = 'P' then ls.intovd else 0 end) INTNMLOVD,
                sum(case when reftype = 'P' then ls.feeintnmlovd else 0 end) FEEINTNMLOVD,
                sum(case when reftype = 'P' then ls.intovdprin else 0 end) INTOVDACR,
                sum(case when reftype = 'P' then ls.feeintovdacr else 0 end) FEEINTOVDACR,
                sum(case when reftype = 'P' then ls.ovd else 0 end) PRINOVD,
                sum(case when reftype = 'P' then ls.feedue else 0 end) FEEDUE,
                sum(case when reftype = 'P' then ls.intdue else 0 end) INTDUE,
                sum(case when reftype = 'P' then ls.feeintdue else 0 end) FEEINTDUE,
                sum(case when reftype = 'P' and overduedate = l_CURRDATE then ls.nml else 0 end) PRINDUE,
                sum(case when reftype = 'P' then ls.fee else 0 end) FEENML,
                sum(case when reftype = 'P' then ls.intnmlacr else 0 end) INTNMLACR,
                sum(case when reftype = 'P' then ls.feeintnmlacr else 0 end) FEEINTNMLACR,
                sum(case when reftype = 'P' then ls.nml else 0 end) PRINNML,
                sum(case when reftype = 'P' then ls.INTNMLACRBANK else 0 end) INTNMLACRBANK
            from lnmast ln, lnpaidalloc lp, lnschd ls
            where ln.acctno = lp.lnacctno and lp.lnschdid = ls.autoid
            and ln.trfacctno = rec.trfacctno and instr(ls.reftype,'P') > 0
            and lp.amt > lp.paidamt and lp.status = 'P'
            group by ln.trfacctno, ln.acctno, ls.autoid, lp.autoid
            order by lp.autoid
        )
        loop -- rec2
            l_AvlAmt:= rec2.AvlAmt;
            --So tien phai tra cho tung khoan
            -- Bao lanh
            --01.T0INTNMLOVD
            l_T0INTNMLOVD := 0;
            If l_AvlAmt > 0 Then
                l_T0INTNMLOVD := round(least(l_AvlAmt, rec2.T0INTNMLOVD),0);
                l_AvlAmt := l_AvlAmt - l_T0INTNMLOVD;
            End If;
            --02.T0INTOVDACR
            l_T0INTOVDACR := 0;
            If l_AvlAmt > 0 Then
                l_T0INTOVDACR := round(least(l_AvlAmt, rec2.T0INTOVDACR),0);
                l_AvlAmt := l_AvlAmt - l_T0INTOVDACR;
            End If;
            --03.T0PRINOVD
            l_T0PRINOVD := 0;
            If l_AvlAmt > 0 Then
                l_T0PRINOVD := round(least(l_AvlAmt, rec2.T0PRINOVD),0);
                l_AvlAmt := l_AvlAmt - l_T0PRINOVD;
            end if;
            --04.T0INTDUE
            l_T0INTDUE := 0;
            If l_AvlAmt > 0 Then
                 l_T0INTDUE := round(least(l_AvlAmt, rec2.T0INTDUE),0);
                 l_AvlAmt := l_AvlAmt - l_T0INTDUE;
            End If;
            --05.T0PRINDUE
            l_T0PRINDUE := 0;
            If l_AvlAmt > 0 Then
                l_T0PRINDUE := round(least(l_AvlAmt, rec2.T0PRINDUE),0);
                l_AvlAmt := l_AvlAmt - l_T0PRINDUE;
            End If;
            --06.T0INTNMLACR
            l_T0INTNMLACR := 0;
            If l_AvlAmt > 0 Then
                l_T0INTNMLACR := round(least(l_AvlAmt, rec2.T0INTNMLACR),0);
                l_AvlAmt := l_AvlAmt - l_T0INTNMLACR;
            End If;
            --07.T0PRINNML
            l_T0PRINNML := 0;
            If l_AvlAmt > 0 Then
                l_T0PRINNML := round(least(l_AvlAmt, rec2.T0PRINNML),0);
                l_AvlAmt := l_AvlAmt - l_T0PRINNML;
            End If;

            -- CL
            -- Phi
            --08.FEEINTNMLOVD
            l_FEEINTNMLOVD := 0;
            If l_AvlAmt > 0 Then
                l_FEEINTNMLOVD := round(least(l_AvlAmt, rec2.FEEINTNMLOVD),0);
                l_AvlAmt := l_AvlAmt - l_FEEINTNMLOVD;
            End If;
            --09.FEEINTDUE
            l_FEEINTDUE := 0;
            If l_AvlAmt > 0 Then
                 l_FEEINTDUE := round(least(l_AvlAmt, rec2.FEEINTDUE),0);
                 l_AvlAmt := l_AvlAmt - l_FEEINTDUE;
            End If;
            --10.FEEINTNMLACR
            l_FEEINTNMLACR := 0;
            If l_AvlAmt > 0 Then
                l_FEEINTNMLACR := round(least(l_AvlAmt, rec2.FEEINTNMLACR),0);
                l_AvlAmt := l_AvlAmt - l_FEEINTNMLACR;
            End If;

            -- Lai

            --11.INTNMLOVD
            l_INTNMLOVD := 0;
            If l_AvlAmt > 0 Then
                l_INTNMLOVD := round(least(l_AvlAmt, rec2.INTNMLOVD),0);
                l_AvlAmt := l_AvlAmt - l_INTNMLOVD;
            End If;
            --12.INTOVDACR
            l_INTOVDACR := 0;
            If l_AvlAmt > 0 Then
                 l_INTOVDACR := round(least(l_AvlAmt, rec2.INTOVDACR),0);
                 l_AvlAmt := l_AvlAmt - l_INTOVDACR;
            End If;
            --13.INTDUE
            l_INTDUE := 0;
            If l_AvlAmt > 0 Then
                 l_INTDUE := round(least(l_AvlAmt, rec2.INTDUE),0);
                 l_AvlAmt := l_AvlAmt - l_INTDUE;
            End If;
            --14.INTNMLACR
            l_INTNMLACR := 0;
            If l_AvlAmt > 0 Then
                l_INTNMLACR := round(least(l_AvlAmt, rec2.INTNMLACR),0);
                l_AvlAmt := l_AvlAmt - l_INTNMLACR;
            End If;

            --15.FEEOVD
            l_FEEOVD := 0;
            If l_AvlAmt > 0 Then
                l_FEEOVD := round(least(l_AvlAmt, rec2.FEEOVD),0);
                l_AvlAmt := l_AvlAmt - l_FEEOVD;
            End If;
            --16.FEEDUE
            l_FEEDUE := 0;
            If l_AvlAmt > 0 Then
                l_FEEDUE := round(least(l_AvlAmt, rec2.FEEDUE),0);
                l_AvlAmt := l_AvlAmt - l_FEEDUE;
            End If;
            --17.FEENML
            l_FEENML := 0;
            If l_AvlAmt > 0 Then
                l_FEENML := round(least(l_AvlAmt, rec2.FEENML),0);
                l_AvlAmt := l_AvlAmt - l_FEENML;
            End If;

            -- Goc
            --18.PRINOVD
            l_PRINOVD := 0;
            If l_AvlAmt > 0 Then
                l_PRINOVD := round(least(l_AvlAmt, rec2.PRINOVD),0);
                l_AvlAmt := l_AvlAmt - l_PRINOVD;
            End If;
            --19.PRINDUE
            l_PRINDUE := 0;
            If l_AvlAmt > 0 Then
               l_PRINDUE := round(least(l_AvlAmt, rec2.PRINDUE),0);
               l_AvlAmt := l_AvlAmt - l_PRINDUE;
            End If;
            --20.PRINNML
            l_PRINNML := 0;
            if rec2.PRINNML > 0 then
                If l_AvlAmt > 0 Then
                     l_PRINNML := round(least(rec2.PRINNML, l_AvlAmt * 1 / (1+REC2.ADVPAYFEE/100)),0);
                     l_AvlAmt := l_AvlAmt - l_PRINNML;
                End If;
            end if;
            --21.ADVPAYFEE
            l_ADVPAYFEE := 0;
            if l_PRINNML > 0 then
                If l_AvlAmt > 0 Then
                     l_ADVPAYFEE := round(rec2.FINANCETYPE * trunc(least(l_AvlAmt, l_PRINNML * REC2.ADVPAYFEE / 100 ),0),0);
                     l_AvlAmt := l_AvlAmt - l_ADVPAYFEE;
                End If;
            end if;

            -- Lai & Phi
            --22.FEEINTOVDACR
            l_FEEINTOVDACR := 0;
            If l_AvlAmt > 0 Then
                 l_FEEINTOVDACR := round(least(l_AvlAmt, rec2.FEEINTOVDACR),0);
                 l_AvlAmt := l_AvlAmt - l_FEEINTOVDACR;
            End If;

            --set txnum
            SELECT systemnums.C_BATCH_PREFIXED
                                 || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                          INTO l_txmsg.txnum
                          FROM DUAL;
            l_txmsg.brid        := substr(rec.trfacctno,1,4);


            --Set cac field giao dich
            --01   C   AUTOID
            l_txmsg.txfields ('01').defname   := 'AUTOID';
            l_txmsg.txfields ('01').TYPE      := 'C';
            l_txmsg.txfields ('01').VALUE     := rec2.lnschdid;

            --03   C   ACCTNO
            l_txmsg.txfields ('03').defname   := 'ACCTNO';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec2.acctno;

            --05   C   CIACCTNO
            l_txmsg.txfields ('05').defname   := 'CIACCTNO';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.TRFACCTNO;

            --09   N   T0ODAMT
            l_txmsg.txfields ('09').defname   := 'T0ODAMT';
            l_txmsg.txfields ('09').TYPE      := 'N';
            l_txmsg.txfields ('09').VALUE     := 0;

             --45   N   PRINAMT
            l_txmsg.txfields ('45').defname   := 'PRINAMT';
            l_txmsg.txfields ('45').TYPE      := 'N';
            l_txmsg.txfields ('45').VALUE     := l_T0PRINOVD + l_T0PRINNML + l_T0PRINDUE + l_PRINOVD + l_PRINDUE + l_PRINNML;
            --46   N   INTAMT
            l_txmsg.txfields ('46').defname   := 'INTAMT';
            l_txmsg.txfields ('46').TYPE      := 'N';
            l_txmsg.txfields ('46').VALUE     := l_ADVPAYFEE + l_FEEOVD + l_T0INTNMLOVD + l_INTNMLOVD + l_FEEINTNMLOVD+ l_FEEDUE + l_T0INTDUE + l_INTDUE + l_FEEINTDUE+ l_T0INTOVDACR + l_INTOVDACR + l_FEEINTOVDACR+ l_FEENML + l_T0INTNMLACR + l_INTNMLACR+l_FEEINTNMLACR ;

            --47   N   ADVFEE
            l_txmsg.txfields ('47').defname   := 'ADVFEE';
            l_txmsg.txfields ('47').TYPE      := 'N';
            l_txmsg.txfields ('47').VALUE     := REC2.FINANCETYPE * round(rec2.ADVPAYFEE,0);

            --60   N   PT0PRINOVD
            l_txmsg.txfields ('60').defname   := 'PT0PRINOVD';
            l_txmsg.txfields ('60').TYPE      := 'N';
            l_txmsg.txfields ('60').VALUE     := l_T0PRINOVD;
            --61   N   PT0PRINDUE
            l_txmsg.txfields ('61').defname   := 'PT0PRINDUE';
            l_txmsg.txfields ('61').TYPE      := 'N';
            l_txmsg.txfields ('61').VALUE     := l_T0PRINDUE;
            --62   N   PT0PRINNML
            l_txmsg.txfields ('62').defname   := 'PT0PRINNML';
            l_txmsg.txfields ('62').TYPE      := 'N';
            l_txmsg.txfields ('62').VALUE     := l_T0PRINNML;
            --63   N   PPRINOVD
            l_txmsg.txfields ('63').defname   := 'PPRINOVD';
            l_txmsg.txfields ('63').TYPE      := 'N';
            l_txmsg.txfields ('63').VALUE     := l_PRINOVD;
            --64   N   PPRINDUE
            l_txmsg.txfields ('64').defname   := 'PPRINDUE';
            l_txmsg.txfields ('64').TYPE      := 'N';
            l_txmsg.txfields ('64').VALUE     := l_PRINDUE;
            --65   N   PPRINNML
            l_txmsg.txfields ('65').defname   := 'PT0PRINOVD';
            l_txmsg.txfields ('65').TYPE      := 'N';
            l_txmsg.txfields ('65').VALUE     := l_PRINNML;
            --70   N   PFEEOVD
            l_txmsg.txfields ('70').defname   := 'PFEEOVD';
            l_txmsg.txfields ('70').TYPE      := 'N';
            l_txmsg.txfields ('70').VALUE     := l_FEEOVD;
            --71   N   PT0INTNMLOVD
            l_txmsg.txfields ('71').defname   := 'PT0INTNMLOVD';
            l_txmsg.txfields ('71').TYPE      := 'N';
            l_txmsg.txfields ('71').VALUE     := l_T0INTNMLOVD;
            --72   N   PINTNMLOVD
            l_txmsg.txfields ('72').defname   := 'PINTNMLOVD';
            l_txmsg.txfields ('72').TYPE      := 'N';
            l_txmsg.txfields ('72').VALUE     := l_INTNMLOVD;
            --52   N   PFEEINTNMLOVD
            l_txmsg.txfields ('52').defname   := 'PFEEINTNMLOVD';
            l_txmsg.txfields ('52').TYPE      := 'N';
            l_txmsg.txfields ('52').VALUE     := l_FEEINTNMLOVD;
            --73   N   PT0INTOVDACR
            l_txmsg.txfields ('73').defname   := 'PT0INTOVDACR';
            l_txmsg.txfields ('73').TYPE      := 'N';
            l_txmsg.txfields ('73').VALUE     := l_T0INTOVDACR;
            --74   N   PINTOVDACR
            l_txmsg.txfields ('74').defname   := 'PINTOVDACR';
            l_txmsg.txfields ('74').TYPE      := 'N';
            l_txmsg.txfields ('74').VALUE     := l_INTOVDACR;
            --54   N   PFEEINTOVDACR
            l_txmsg.txfields ('54').defname   := 'PFEEINTOVDACR';
            l_txmsg.txfields ('54').TYPE      := 'N';
            l_txmsg.txfields ('54').VALUE     := l_FEEINTOVDACR;
            --75   N   PFEEDUE
            l_txmsg.txfields ('75').defname   := 'PFEEDUE';
            l_txmsg.txfields ('75').TYPE      := 'N';
            l_txmsg.txfields ('75').VALUE     := l_FEEDUE;
            --76   N   PT0INTDUE
            l_txmsg.txfields ('76').defname   := 'PT0INTDUE';
            l_txmsg.txfields ('76').TYPE      := 'N';
            l_txmsg.txfields ('76').VALUE     := l_T0INTDUE;
            --77   N   PINTDUE
            l_txmsg.txfields ('77').defname   := 'PINTDUE';
            l_txmsg.txfields ('77').TYPE      := 'N';
            l_txmsg.txfields ('77').VALUE     := l_INTDUE;
            --57   N   PFEEINTDUE
            l_txmsg.txfields ('57').defname   := 'PFEEINTDUE';
            l_txmsg.txfields ('57').TYPE      := 'N';
            l_txmsg.txfields ('57').VALUE     := l_FEEINTDUE;
            --78   N   PFEE
            l_txmsg.txfields ('78').defname   := 'PFEE';
            l_txmsg.txfields ('78').TYPE      := 'N';
            l_txmsg.txfields ('78').VALUE     := l_FEENML;
            --79   N   PT0INTNMLACR
            l_txmsg.txfields ('79').defname   := 'PT0INTNMLACR';
            l_txmsg.txfields ('79').TYPE      := 'N';
            l_txmsg.txfields ('79').VALUE     := l_T0INTNMLACR;
            --80   N   PINTNMLACR
            l_txmsg.txfields ('80').defname   := 'PINTNMLACR';
            l_txmsg.txfields ('80').TYPE      := 'N';
            l_txmsg.txfields ('80').VALUE     := l_INTNMLACR;
            --50   N   PFEEINTNMLACR
            l_txmsg.txfields ('50').defname   := 'PFEEINTNMLACR';
            l_txmsg.txfields ('50').TYPE      := 'N';
            l_txmsg.txfields ('50').VALUE     := l_FEEINTNMLACR;
            --81   N   ADVPAYAMT
            l_txmsg.txfields ('81').defname   := 'ADVPAYAMT';
            l_txmsg.txfields ('81').TYPE      := 'N';
            l_txmsg.txfields ('81').VALUE     := l_PRINNML;
            --82   N   FEEAMT
            l_txmsg.txfields ('82').defname   := 'FEEAMT';
            l_txmsg.txfields ('82').TYPE      := 'N';
            l_txmsg.txfields ('82').VALUE     := Round(l_ADVPAYFEE, 0); --Round(l_PRINNML * REC2.ADVPAYFEE / 100, 0);
            --83   N   PAYAMT
            l_txmsg.txfields ('83').defname   := 'PAYAMT';
            l_txmsg.txfields ('83').TYPE      := 'N';
            l_txmsg.txfields ('83').VALUE     := l_T0PRINOVD + l_T0PRINNML + l_T0PRINDUE + l_PRINOVD + l_PRINDUE + l_PRINNML + l_ADVPAYFEE + l_FEEOVD + l_T0INTNMLOVD + l_INTNMLOVD + l_FEEINTNMLOVD+ l_FEEDUE + l_T0INTDUE + l_INTDUE + l_FEEINTDUE + l_T0INTOVDACR + l_INTOVDACR + l_FEEINTOVDACR + l_FEENML + l_T0INTNMLACR + l_INTNMLACR + l_FEEINTNMLACR;
            plog.debug(pkgctx, 'Balance check:' || l_txmsg.txfields ('83').VALUE);
            --20    N   FINANCETYPE
            l_txmsg.txfields ('20').defname   := 'FINANCETYPE';
            l_txmsg.txfields ('20').TYPE      := 'N';
            l_txmsg.txfields ('20').VALUE     := REC2.FINANCETYPE;

               --cat tien bank
            --86 .INTNMLACRBANK
            l_txmsg.txfields ('86').defname   := 'INTNMLACRBANK';
            l_txmsg.txfields ('86').TYPE      := 'N';
            l_txmsg.txfields ('86').VALUE     := REC2.INTNMLACRBANK;

            --30   C   DESC
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE :=l_DESC;

            BEGIN
                IF txpks_#5567.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 5567: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;

            update lnpaidalloc
            set status = 'C'
            where status = 'P'
            and autoid = rec2.autoid;
        end loop; -- rec2

    end loop; -- rec


    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_LNAdvPaymentAftSendMoney');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_LNAdvPaymentAftSendMoney');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_LNAdvPaymentAftSendMoney;


-------------------------------------pr_reExecuteRouter--------------------------------------------
  PROCEDURE pr_reExecuteRouter(p_bchmdl varchar,p_err_code  OUT varchar2,p_FromRow number,p_ToRow number, p_lastRun OUT varchar2)
  IS

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_reExecuteRouter');
    p_lastRun:='Y';
   if p_bchmdl ='CALREVENUE' then
        --txpks_batch.pr_reCALREVENUE(p_bchmdl ,p_err_code);
        CSPKS_REPROC.pr_reCALREVENUE(p_bchmdl ,p_err_code);
    ELSIF p_bchmdl ='CALFEECOMM' then
        --txpks_batch.pr_reCALFEECOMM(p_bchmdl ,p_err_code);
        CSPKS_REPROC.pr_reCALFEECOMM(p_bchmdl ,p_err_code);
    ELSIF p_bchmdl ='CHANGECFSTS' then
        --txpks_batch.pr_reCHANGECFSTS(p_bchmdl ,p_err_code);
        CSPKS_REPROC.RE_change_cfstatus_AF;
    end if;
    plog.setendsection(pkgctx, 'pr_reExecuteRouter');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM||dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_reExecuteRouter');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_reExecuteRouter;

PROCEDURE pr_reCALREVENUE(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS
     v_currdate date;
     v_err VARCHAR2(10);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_reCALREVENUE');
     -- Tinh Doanh so hang ngay cho moi gioi
   Select TO_DATE (varvalue, systemnums.c_date_format) into v_currdate
    From sysvar
    Where varname='CURRDATE';

    RE_change_cfstatus_BF;

    --Backup reinttran sang reinttrana
    INSERT INTO REINTTRANA
    SELECT * FROM REINTTRAN
    WHERE TODATE<=TO_DATE(v_currdate,'DD/MM/RRRR');
    DELETE FROM REINTTRAN
    WHERE TODATE<=TO_DATE(v_currdate,'DD/MM/RRRR');

    --Cap nhat lai REMAST
    UPDATE REMAST SET DAMTACR=0,IAMTACR=0,DFEEACR=0,IFEEACR=0 WHERE STATUS='A';
    For vc in (
            Select re.refrecflnkid, re.reacctno,
                   sum(od.execamt) matchamt, sum(od.feeacr) feeacr,
                   max(rem.DAMTLASTDT) DAMTLASTDT
            From reaflnk re, odmast od, recfdef red, retype ret, remast rem
            Where re.status='A' and re.deltd<>'Y'
                and re.frdate<= v_currdate and v_currdate <= re.todate
                and od.deltd<>'Y'
                and od.txdate = (select to_date(varvalue,'dd/mm/yyyy') from sysvar where varname='CURRDATE')
                and re.afacctno=od.afacctno
                and od.execamt >0
                and re.refrecflnkid = red.refrecflnkid
                and substr(re.reacctno,11,4)=red.reactype
                and red.effdate<= v_currdate and  v_currdate < red.expdate
                and red.reactype=ret.actype
                and ret.retype='D'
                and re.reacctno=rem.acctno
            Group by re.refrecflnkid, re.reacctno)
    Loop
        Insert into reinttran(autoid, acctno, inttype, frdate, todate,
                      icrule,irrate, intbal, intamt)
               values(SEQ_REINTTRAN.NEXTVAL,vc.reacctno,'DBR',vc.DAMTLASTDT,v_currdate,
                      'S',1,vc.matchamt,vc.feeacr);
        Update remast
        Set damtacr = vc.matchamt,
            dfeeacr = vc.feeacr,
            directacr = nvl(directacr,0) + vc.matchamt,
            directfeeacr = nvl(directfeeacr,0) + vc.feeacr,
            damtlastdt = v_currdate
        where acctno=vc.reacctno;

    End loop;

    -- Tinh doanh so, doanh thu gian tiep
    For VC in (
            Select rg.custid||rg.actype reacctno, rgl.DAMTACR,rgl.dfeeacr
        , v_currdate IAMTLASTDT
            From REGRP rg,
             (Select rgl.refrecflnkid, sum(rm.DAMTACR) DAMTACR, sum(rm.dfeeacr)dfeeacr
              From REGRPLNK rgl, remast rm, retype ret
              where rgl.reacctno=rm.acctno
                   and rgl.frdate<=v_currdate and v_currdate<=rgl.todate
                    and rgl.deltd<>'Y'
                    and rgl.status='A'
                    and rm.status='A'
                    and rm.actype=ret.actype
                    and ret.retype='D'
               Group by  rgl.refrecflnkid     ) rgl
            Where SP_FORMAT_REGRP_MAPCODE( rgl.refrecflnkid) like SP_FORMAT_REGRP_MAPCODE(rg.autoid)||'%'
     ) Loop
       Insert into reinttran(autoid, acctno, inttype, frdate, todate,
                      icrule,irrate, intbal, intamt)
               values(SEQ_REINTTRAN.NEXTVAL,vc.reacctno,'IBR',vc.IAMTLASTDT,v_currdate,
                      'S',1,vc.DAMTACR,vc.dfeeacr);
        Update remast
        Set iamtacr = nvl(iamtacr,0) + vc.DAMTACR,
            ifeeacr = nvl(ifeeacr,0) + vc.dfeeacr,
            indirectacr = nvl(indirectacr,0) + vc.DAMTACR,
            indirectfeeacr = nvl(indirectfeeacr,0) + vc.dfeeacr,
            IAMTLASTDT = v_currdate
        where acctno=vc.reacctno;
     End loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_reCALREVENUE');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_reCALREVENUE');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_reCALREVENUE;



PROCEDURE pr_reCALFEECOMM(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS
      v_currdate date;
      v_nextdate date;
      v_lastday number(20);-- Ngay lam viec cuoi cung cua thang
      v_BMdays number(20);-- So ngay hoat dong cua moi gioi
      V_commdays number(20);  -- So ngay cua ky tinh hoa hong
      v_lastcustid varchar2(20);
      v_disacr number(20,4);  -- Dinh muc cua moi gio, bi tru dan sau khi phan bo cho tai khoan moi gioi
      v_disdirectacr number(20,4);-- Phan doanh so dc tinh hoa hong cua tk moi gioi (= Doanh so - Dinh muc)
      v_revenue number(20,4); -- Doanh thu cua tai khoan mg
      v_commision number(20,4);-- Hoa Hong cua tk moi gio
      v_mindrevamtreal number(20,4);-- Dinh muc truc tiep thuc te = Dinh muc truc tiep * So ngay MG hoat dong / So ngay cua thang
      v_minirevamtreal number(20,4);-- Dinh muc gian tiep thuc te = Dinh muc gian tiep * So ngay MG hoat dong / So ngay cua thang
      pkgctx plog.log_ctx;
      l_txmsg               tx.msg_rectype;
      v_strCURRDATE varchar2(20);
      v_strDesc varchar2(1000);
      v_strEN_Desc varchar2(1000);
      v_strOrgDesc varchar2(1000);
      v_strEN_OrgDesc varchar2(1000);
      l_err_param varchar2(300);
      v_perioddate date;


  BEGIN
    plog.setbeginsection(pkgctx, 'pr_reCALFEECOMM');
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_currdate
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_nextdate
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'NEXTDATE';
   --Xac dinh ngay cuoi cung cua thang
    select to_number(to_char(max(sbdate),'DD')) into v_lastday from sbcldr where  to_char(sbdate,'MM/YYYY')= to_char(v_CURRDATE,'MM/YYYY') and cldrtype ='000';

    delete recommision WHERE COMMDATE=v_currdate;
    v_lastcustid :='ZZZZZ';
    v_disacr :=0;
    -- Tinh Hoa Hong Truc Tiep
    For vc in (select rcl.autoid,
                       rcl.custid,
                       RCL.effdate ,
                       RCL.mindrevamt,
                       rcl.minirevamt, -- dinh muc doanh so gian tiep
                       rcl.minincome , -- luong toi thieu
                       rcl.minratesal, -- ti le huong luong toi thieu khi ko hoan thanh dinh muc
                       rcl.saltype,    -- Kieu tinh luong toi thieu
                       rcd.reactype,
                       -- Chi RM,BM chiu dinh muc
                       Case when
                           rty.rerole in ('RM','BM') then rcd.isdrev
                           else 'N'
                       end  isdrev, -- Co chiu luat dinh muc hay khong
                       rcd.odrnum ,-- thu tu phan bo dinh muc
                       rm.acctno, -- tk moi gioi
                       rm.directacr, -- Doanh so truc tiep
                       rm.directfeeacr,-- Doanh thu truc tiep
                       rm.indirectacr,-- Doanh so gian tiep
                       rm.indirectfeeacr,-- Doanh thu gian tiep
                       rm.odfeetype, -- Cach tinh dua tren phi thuc thu hay phi co dinh M/F
                       rm.odfeerate, -- ti le phi co dinh
                       icd.period,
                       icd.periodday,
                       icd.perioddate
                from recflnk rcl, recfdef rcd, retype rty, remast rm,
                (SELECT actype, period, periodday,
                        to_date((case when periodday>v_lastday or periodday<1 then v_lastday else periodday end)  || '/' || to_char(v_CURRDATE,'MM/RRRR'), 'DD/MM/RRRR') perioddate
                FROM iccftypedef ic
                WHERE ic.EVENTCODE='CALFEECOMM'
                   and ((ic.period ='M' and to_char(v_CURRDATE,'MM') <> to_char(v_NEXTDATE,'MM')) --Monthly, Ngay cuoi thang
                            or (ic.period ='S'
                                and to_date((case when periodday>v_lastday or periodday<1 then v_lastday else periodday end)  || '/' || to_char(v_CURRDATE,'MM/RRRR'), 'DD/MM/RRRR')>=v_CURRDATE
                                and to_date((case when periodday>v_lastday or periodday<1 then v_lastday else periodday end) || '/' || to_char(v_CURRDATE,'MM/RRRR'), 'DD/MM/RRRR')<v_NEXTDATE
                                ) --Ngay hien tai la ngay lam viec gan ngay thu lai co dinh nhat
                       )) ICD
                where rcd.refrecflnkid=rcl.autoid
                and rcd.reactype=rty.actype
                and rty.retype='D' --and rty.rerole in('RM','BM','RD')
                and rcl.custid=rm.custid
                and rcd.reactype=rm.actype
                and rty.actype= icd.actype
                order by rcl.custid, rcd.odrnum)
    Loop
        If v_lastcustid <> vc.custid then
            v_lastcustid :=vc.custid;
            -- Dinh muc thuc te = Dinh muc khai bao * so ngay hoat dong cua moi gioi / so ngay cua ky tinh hoa hong
            If vc.saltype='1' then -- tron thang
                V_commdays:=LAST_DAY(v_currdate)  - trunc(v_currdate,'MM') + 1;
                v_BMdays:=V_commdays;
            Else -- tinh theo ngay thuc te
               IF vc.period = 'M' then-- tinh hang thang
                    V_commdays:=LAST_DAY(v_currdate) - trunc(v_currdate,'MM') + 1;
                    v_BMdays:=LAST_DAY(v_currdate) - greatest(vc.effdate,trunc(v_currdate,'MM')) + 1;
               else              -- tinh vao ngay co dinh
                    V_commdays:=vc.perioddate - ADD_MONTHS(vc.perioddate,-1);
                    v_BMdays:=vc.perioddate - greatest(vc.effdate,ADD_MONTHS(vc.perioddate,-1)+1 ) +1 ;
              End if;
            End if;
            v_disacr :=vc.mindrevamt * v_BMdays / V_commdays;
            v_mindrevamtreal:=v_disacr;
        End if;

        If  vc.isdrev ='Y' then
            v_disdirectacr:=GREATEST(vc.directacr-v_disacr,0);-- Doanh so duoc tinh hoa hong
        Else
            v_disdirectacr:=vc.directacr;
        End if;
        If vc.odfeetype = 'F' then
            -- Phi co dinh
            v_revenue:= v_disdirectacr * vc.odfeerate/100; -- Doang thu
        ELSE
            If vc.directacr<>0 then
                v_revenue:= v_disdirectacr * (vc.directfeeacr /  vc.directacr);
            Else
                v_revenue:=0;
            End if;
            -- Phi thuc thu
        End if;
        v_commision:=fn_re_getcommision(vc.acctno,v_disdirectacr,v_revenue);
      /*  dbms_output.put_line('----------');
        dbms_output.put_line(' acctno= '||vc.acctno);
        dbms_output.put_line('   v_revenue ='||v_revenue);
        dbms_output.put_line('   v_commision = '||v_commision);  */
        Insert into recommision(autoid,refrecflnkid, custid, mindrevamt,minirevamt, minincome,
                   minratesal, saltype, reactype, isdrev, odrnum,
                   acctno, directacr, directfeeacr, indirectacr,
                   indirectfeeacr, odfeetype, odfeerate, commdate,
                   disdirectacr, disrevacr,revenue,commision,retype,
                   mindrevamtreal,minirevamtreal,bmdays,commdays)
        Values(seq_recommision.nextval,vc.autoid, vc.custid, vc.mindrevamt,vc.minirevamt, vc.minincome,
                 vc.minratesal, vc.saltype, vc.reactype, vc.isdrev, vc.odrnum,
                 vc.acctno, vc.directacr, vc.directfeeacr, vc.indirectacr,
                 vc.indirectfeeacr, vc.odfeetype, vc.odfeerate, v_currdate,
                 v_disdirectacr, DECODE(vc.isdrev,'Y',v_disacr,0),v_revenue,v_commision,'D',
                 v_mindrevamtreal,0,v_BMdays,V_commdays);

        If  vc.isdrev ='Y' then
              v_disacr:=v_disacr - LEAST(v_disacr,vc.directacr);
        End if;
    End loop;
    -- Tinh Hoa Hong Gian Tiep
   For VC in (select                 rcl.autoid,
                       rcl.custid,
                       rcl.mindrevamt, --dInh muc doanh so truc tiep
                       RCL.effdate ,
                       rcl.minirevamt,
                       rcl.minincome , -- luong toi thieu
                       rcl.minratesal, -- ti le huong luong toi thieu khi ko hoan thanh dinh muc
                       rcl.saltype,    -- Kieu tinh luong toi thieu
                       rcl.actype,
                       'Y' isdrev, -- Co chiu luat dinh muc hay khong
                        0 odrnum ,-- thu tu phan bo dinh muc
                       rm.acctno, -- tk moi gioi
                       rm.directacr, -- Doanh so truc tiep
                       rm.directfeeacr,-- Doanh thu truc tiep
                       rm.indirectacr,-- Doanh so gian tiep
                       rm.indirectfeeacr,-- Doanh thu gian tiep
                       rm.odfeetype, -- Cach tinh dua tren phi thuc thu hay phi co dinh M/F
                       rm.odfeerate, -- ti le phi co dinh
                       icd.period,
                       icd.periodday,
                       icd.perioddate
                from regrp rcl,  retype rty, remast rm,
                (SELECT actype,period, periodday,
                        to_date((case when periodday>v_lastday or periodday<1 then v_lastday else periodday end)
                        || '/' || to_char(v_CURRDATE,'MM/RRRR'), 'DD/MM/RRRR') perioddate
                FROM iccftypedef ic
                WHERE ic.EVENTCODE='CALFEECOMM'
                   and ((ic.period ='M' and to_char(v_CURRDATE,'MM') <> to_char(v_NEXTDATE,'MM')) --Monthly, Ngay cuoi thang
                            or (ic.period ='S'
                                and to_date((case when periodday>v_lastday or periodday<1 then v_lastday else periodday end)  || '/' || to_char(v_CURRDATE,'MM/RRRR'), 'DD/MM/RRRR')>=v_CURRDATE
                                and to_date((case when periodday>v_lastday or periodday<1 then v_lastday else periodday end) || '/' || to_char(v_CURRDATE,'MM/RRRR'), 'DD/MM/RRRR')<v_NEXTDATE
                                ) --Ngay hien tai la ngay lam viec gan ngay thu lai co dinh nhat
                       )) ICD
                where rcl.custid=rm.custid
                and rcl.actype=rm.actype
                and rcl.actype=rty.actype
                and rty.retype='I'
                and rty.actype=icd.actype
                order by rcl.autoid, rcl.custid)
     Loop

         -- Dinh muc thuc te = Dinh muc khai bao * so ngay hoat dong cu moi gioi / so ngay cua ky tinh Hoa hong
            If vc.saltype='1' then -- tron thang
                V_commdays:=LAST_DAY(v_currdate)  - trunc(v_currdate,'MM') + 1;
                v_BMdays:=V_commdays;
            Else -- tinh theo ngay thuc te
               IF vc.period = 'M' then-- tinh hang thang
                    V_commdays:=LAST_DAY(v_currdate) - trunc(v_currdate,'MM') + 1;
                    v_BMdays:=LAST_DAY(v_currdate) - greatest(vc.effdate,trunc(v_currdate,'MM')) + 1;
               else              -- tinh vao ngay co dinh
                    V_commdays:=vc.perioddate - ADD_MONTHS(vc.perioddate,-1);
                    v_BMdays:=vc.perioddate - greatest(vc.effdate,ADD_MONTHS(vc.perioddate,-1)+1 ) +1 ;
              End if;
            End if;
            v_disacr :=vc.minirevamt * v_BMdays / V_commdays;
            v_minirevamtreal:=v_disacr;


        v_disdirectacr:=GREATEST(vc.indirectacr-v_disacr,0);
        If vc.odfeetype = 'F' then
            -- Phi co dinh
            v_revenue:= v_disdirectacr * vc.odfeerate/100;
        ELSE
         -- Phi thuc thu
             IF VC.INDIRECTACR<>0 THEN
                v_revenue:=v_disdirectacr*VC.INDIRECTFEEACR/VC.INDIRECTACR;
             eLSE
              v_revenue:=0;
             END IF;
        End if;
        v_commision:=fn_re_getcommision(vc.acctno,v_disdirectacr,v_revenue);
         Insert into recommision(autoid,refrecflnkid, custid,mindrevamt, minirevamt, minincome,
                   minratesal, saltype, reactype, isdrev, odrnum,
                   acctno, directacr, directfeeacr, indirectacr,
                   indirectfeeacr, odfeetype, odfeerate, commdate,
                   disdirectacr, disrevacr,revenue,commision,retype,
                   mindrevamtreal,minirevamtreal,bmdays,commdays)
         Values(seq_recommision.nextval,vc.autoid, vc.custid, vc.mindrevamt,vc.minirevamt, vc.minincome,
                 vc.minratesal, vc.saltype, vc.actype, vc.isdrev, vc.odrnum,
                 vc.acctno, vc.directacr, vc.directfeeacr, vc.indirectacr,
                 vc.indirectfeeacr, vc.odfeetype, vc.odfeerate, v_currdate,
                 v_disdirectacr, v_disacr,v_revenue,v_commision,'I',
                 0,v_minirevamtreal,v_BMdays,V_commdays);
         End Loop;

    -- Sinh giao dich chot hoa hong
     SELECT TXDESC,EN_TXDESC into v_strOrgDesc, v_strEN_OrgDesc FROM  TLTX WHERE TLTXCD='0320';
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO v_strCURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(v_strCURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:='0320';

    For rec in (select * from recommision r
                where r.commdate=v_currdate
                  and(  r.commision<>0 or r.directacr<>0 or r.indirectacr<>0 )
                  AND TXNUM IS NULL)
    Loop
                     v_strDesc:= v_strOrgDesc;
                    --set txnum
                    SELECT systemnums.C_BATCH_PREFIXED
                                         || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                                  INTO l_txmsg.txnum
                                  FROM DUAL;
                    l_txmsg.brid        := substr(rec.ACCTNO,1,4);

                    --Set cac field giao dich
                    --03   C   so tai khoan moi gioi
                    l_txmsg.txfields ('03').defname   := 'REACCTNO';
                    l_txmsg.txfields ('03').TYPE      := 'C';
                    l_txmsg.txfields ('03').VALUE     := rec.ACCTNO;

                    --20   C   custid moi gio
                    l_txmsg.txfields ('20').defname   := 'RECUSTID';
                    l_txmsg.txfields ('20').TYPE      := 'C';
                    l_txmsg.txfields ('20').VALUE     := rec.custid;

                    --21   C   RECUSTNAME moi gio
                    l_txmsg.txfields ('21').defname   := 'RECUSTNAME';
                    l_txmsg.txfields ('21').TYPE      := 'C';
                    l_txmsg.txfields ('21').VALUE     := '';

                    --10   N   AMT hoa hong
                    l_txmsg.txfields ('10').defname   := 'AMT';
                    l_txmsg.txfields ('10').TYPE      := 'N';
                    l_txmsg.txfields ('10').VALUE     := rec.commision;

                    --11   N   DIRECTACR doanh thu truc tiep
                    l_txmsg.txfields ('11').defname   := 'DIRECTACR';
                    l_txmsg.txfields ('11').TYPE      := 'N';
                    l_txmsg.txfields ('11').VALUE     := rec.DIRECTACR;

                    --12   N   INDIRECTACR doanh thu gian tiep
                    l_txmsg.txfields ('12').defname   := 'INDIRECTACR';
                    l_txmsg.txfields ('12').TYPE      := 'N';
                    l_txmsg.txfields ('12').VALUE     := rec.INDIRECTACR;

                    --13   N   DIRECTFEEACR PHI truc tiep
                    l_txmsg.txfields ('13').defname   := 'DIRECTFEEACR';
                    l_txmsg.txfields ('13').TYPE      := 'N';
                    l_txmsg.txfields ('13').VALUE     := rec.DIRECTFEEACR;
                    -- 14
                    l_txmsg.txfields ('14').defname   := 'INDIRECTFEEACR';
                    l_txmsg.txfields ('14').TYPE      := 'N';
                    l_txmsg.txfields ('14').VALUE     := rec.INDIRECTFEEACR;
                    --30   C   DESC
                    l_txmsg.txfields ('30').defname   := 'T_DESC';
                    l_txmsg.txfields ('30').TYPE      := 'C';
                    l_txmsg.txfields ('30').VALUE :=v_strDESC;

                    BEGIN
                        IF txpks_#0320.fn_batchtxprocess (l_txmsg,
                                                         p_err_code,
                                                         l_err_param
                           ) <> systemnums.c_success
                        THEN
                           plog.error (pkgctx,
                                       'got error 0320: ' || p_err_code
                           );
                           ROLLBACK;
                           RETURN;
                        END IF;
                   END;
                   Update recommision
                   set txnum=l_txmsg.txnum,
                       txdate=l_txmsg.txdate
                   where autoid=rec.autoid;
       End loop;
       -- tinh luong co ban cho moi gio
       delete resalary where commdate=v_currdate;
        For vc in(
             Select rc.COmMDATE,RC.CUSTID,rc.retype,rc.mindrevamt,RC.minirevamt,
            RC.minincome,RC.minratesal ,RC.saltype ,rc.mindrevamtreal,rc.minirevamtreal,rc.bmdays,rc.commdays,
             SUM(directacr) directacr,
             SUM(directfeeacr) directfeeacr,
            SUM(indirectacr) indirectacr,
            SUM(indirectfeeacr) indirectfeeacr,
            SUM(revenue) revenue,
            SUM(commision) commision,
            Case
                 WHEN  rc.retype = 'D' AND rc.minratesal>0 then
                  rc.minincome * LEAST(1,GREATEST(rc.minratesal/100,sum(rc.directacr)/(rc.mindrevamtreal+0.00001))) * rc.bmdays /rc.commdays
                 WHEN  rc.retype = 'D' AND rc.minratesal=0 AND sum(rc.directacr)>=rc.mindrevamtreal then rc.minincome* rc.bmdays /rc.commdays
                 WHEN  rc.retype = 'D' AND rc.minratesal=0 AND sum(rc.directacr)<rc.mindrevamtreal then 0

                 When  rc.retype='I' AND rc.minratesal>0 then
                       rc.minincome * LEAST(1,GREATEST(rc.minratesal/100,sum(rc.indirectacr)/(rc.minirevamtreal+0.00001))) * rc.bmdays /rc.commdays
                 When  rc.retype='I' AND rc.minratesal= 0 AND sum(rc.indirectacr)>=rc.minirevamtreal then rc.minincome * rc.bmdays /rc.commdays
                 When  rc.retype='I' AND rc.minratesal= 0 AND sum(rc.indirectacr)< rc.minirevamtreal then 0
            End Salary
            from recommision rc, retype rty
            where rc.commdate=v_currdate
             and rc.reactype=rty.actype
            AND  (rc.retype='I'
                   or
                   rc.retype='D' and rty.rerole in('BM','RM')
                   )
            GROUP BY  RC.COMmDATE,RC.CUSTID,rc.retype,RC.mindrevamt,RC.minirevamt,
            RC.minincome,RC.minratesAL,RC.saltype ,rc.mindrevamtreal,rc.minirevamtreal,rc.bmdays,rc.commdays)
        Loop
            insert into resalary( autoid, commdate, custid, retype, mindrevamt, minirevamt,
                                   minincome, minratesal, saltype, directacr,
                                   directfeeacr, indirectacr, indirectfeeacr, revenue,
                                   commision, salary,mindrevamtreal,minirevamtreal,bmdays,commdays)
                        values(  seq_resalary.nextval,vc.commdate, vc.custid, vc.retype, vc.mindrevamt, vc.minirevamt,
                               vc.minincome, vc.minratesal, vc.saltype, vc.directacr,
                               vc.directfeeacr, vc.indirectacr, vc.indirectfeeacr, vc.revenue,
                               vc.commision, vc.salary,vc.mindrevamtreal,vc.minirevamtreal,vc.bmdays,vc.commdays);
        End loop;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_reCALFEECOMM');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_reCALFEECOMM');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_reCALFEECOMM;


  PROCEDURE pr_reCHANGECFSTS(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS
    v_currdate date;
    v_dmday number(10);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_reCHANGECFSTS');
    RE_change_cfstatus_AF;
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_reCHANGECFSTS');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, SQLERRM);
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.setendsection (pkgctx, 'pr_reCHANGECFSTS');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_reCHANGECFSTS;




PROCEDURE pr_DFAutoMarginLoanDrawnDown(p_bchmdl varchar,p_err_code  OUT varchar2)
IS
l_txmsg               tx.msg_rectype;
l_currdate date;
l_Desc varchar2(1000);
l_EN_Desc varchar2(1000);
l_OrgDesc varchar2(1000);
l_EN_OrgDesc varchar2(1000);
l_err_param varchar2(300);

l_RlsAmount number(20,0);  -- So tien can giai ngan.
l_ExecRlsAmount number(20,0);  -- So tien giai ngan tren moi deal TONG DF
l_ItemExecRlsAmount number(20,0);  -- So tien giai ngan chi tiet Item moi deal Tong DF.
l_DFGroupID varchar2(30);
l_StringData varchar2(4000);
l_DFAvlAmount number(20,0);
l_Symbol varchar2(30);
l_DFPrice number(20,0);
l_OrgDFPrice number(20,0);
l_DFQtty number(20,0);
l_ContractChk varchar2(1);
l_RefDeal varchar2(1000);
l_TradeLot number(20,0);
l_TotalBlockedQtty number(20,0);
l_TotalRecvQtty number(20,0);
l_count number;
l_avlcflimit number(20,0);
l_mrrate number(20,4);
l_mrprice number(20,0);
l_mrcrlimitmax number(20,0);
l_avlRlsCL number(20,0);
l_RoomRemainQtty number(20,0);
l_AvlQtty number(20,0);

BEGIN
    plog.setbeginsection(pkgctx, 'pr_DFAutoMarginLoanDrawnDown');
    -- Lay ra khach hang can giai ngan.

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD='2676';
    SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';

    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=l_CURRDATE;
    l_txmsg.busdate:=l_CURRDATE;
    l_txmsg.tltxcd:='2676';

    plog.debug (pkgctx, 'Into for rec in');
    for rec in
    (
        select ci.*, af.custid afcustid, af.actype aftype
        from cimast ci, afmast af, aftype aft, mrtype mrt
        where ci.acctno = af.acctno and af.actype = aft.actype and aft.mrtype = mrt.actype
        and nvl(aft.autodf,'N') = 'Y' and mrt.mrtype = 'T'
        and ci.balance < 0
        order by ci.acctno
    )
    loop
        plog.debug (pkgctx, 'Inside for rec in:' || rec.acctno);
        -- Voi tung khach hang can giai ngan. Thuc hien deal vay DF Tong den min (tong so tien DF co the phat vay, - so tien balance bi am).
        l_RlsAmount:= greatest(- rec.balance,0);
        l_ExecRlsAmount:=0;
        -- Thuc hien giai ngan:
        plog.debug (pkgctx, 'Into rec_dftype rec in');
        for rec_dftype in -- Lua chon thu tu giai ngan theo DFTYPE.
        (
            select * from (
                select dft.*,
                            lnt.rrtype lnrrtype, lnt.custbank lncustbank, odrnum, 'Y' IsSubResource
                        from afmast af, aftype aft, afidtype afid, dftype dft, lntype lnt
                        where aft.actype = afid.aftype
                            and afid.actype = dft.actype
                            and af.actype = aft.actype
                            and dft.lntype = lnt.actype and lnt.rrtype = 'B'
                        and af.acctno = rec.acctno
                        and objname = 'DF.DFTYPE' and dft.status <> 'N'
                union all
                select dft.*,
                            lnt.rrtype lnrrtype, lnt.custbank lncustbank, 999 odrnum, 'N' IsSubResource
                        from afmast af, aftype aft, dftype dft, lntype lnt
                        where af.actype = aft.actype
                            and dft.lntype = lnt.actype and lnt.rrtype = 'B'
                        and af.acctno = rec.acctno
                        and aft.dftype = dft.actype and dft.status <> 'N'
                        )
            order by case when IsSubResource = 'Y' then 0 else 1 end, odrnum
        )
        loop -- Tren tung DFTYPE duoc chon:
            plog.debug (pkgctx, 'Inside rec_dftype rec in:' || rec_dftype.dftype);
            l_StringData:=''; -- reset string
            l_ExecRlsAmount:=0;
            -- Theo Ngan Hang: Lay han muc con lai co the dung:
            begin
                l_avlcflimit:= greatest(cspks_cfproc.fn_getavlcflimit(rec_dftype.lncustbank, rec.afcustid, 'DFMR'),0);
            exception when others then
                l_avlcflimit:= 0;
            end;
            plog.debug (pkgctx, 'l_avlcflimit:'||l_avlcflimit);
            exit when l_avlcflimit <=0;
            plog.debug (pkgctx, 'Into dfrlsRecords rec in');
            for dfrls_rec in
            (
                select pr.codeid, nvl(se.avlmarginqtty,0) Si, pr.sy_prinused Qi, pr.prlimit Ri, nvl(pravllimit,0) pravllimit,
                    decode(se.codeid,null,'N','Y') ismargin
                    from
                        (select semr.codeid, (semr.sytrade + semr.syreceiving + semr.syodqtty) avlmarginqtty
                            from semargininfo semr) se,
                        (select pr.codeid, (pr.syroomlimit - pr.syroomused - nvl(afpr.sy_prinused,0)) pravllimit, pr.syroomlimit prlimit,nvl(afpr.sy_prinused,0) sy_prinused
                                                    from vw_marginroomsystem pr,
                                                        (select codeid, sum(decode(restype,'S',prinused,0)) sy_prinused
                                                            from vw_afpralloc_all group by codeid) afpr
                                                    where pr.CODEID = afpr.CODEID(+)
                        ) pr
                    where se.codeid(+) = pr.codeid
                        and (exists (select 1 from semast where afacctno = rec.acctno and codeid = pr.codeid)
                            or exists (select 1 from odmast where afacctno = rec.acctno and codeid = pr.codeid))
                    order by case when nvl(se.avlmarginqtty,0)/decode(nvl(pr.prlimit,0),0,1,pr.prlimit) < 1 then
                                    nvl(se.avlmarginqtty,0)/decode(nvl(pr.prlimit,0),0,1,pr.prlimit) else 1 end desc,
                                pr.sy_prinused / decode(nvl(pr.prlimit,0),0,1,pr.prlimit) desc
            )
            loop
                plog.debug (pkgctx, 'Inside dfrlsRecords dfrls_rec in:'||dfrls_rec.codeid);

                -- Voi Ma chung khoan da chon. xac dinh so chung khoan co the giai ngan voi DFTYPE.
                select symbol, tradelot into l_Symbol, l_TradeLot from securities_info where codeid = dfrls_rec.codeid;
                plog.debug (pkgctx, 'Into rec_basket rec in');
                for rec_basket in
                (
                    select nvl(sum(case when dfbk.dealtype = 'N' then (trade - nvl(execsellqtty,0)) else 0 end),0) DFQTTY,
                           nvl(sum(case when dfbk.dealtype = 'R' then nvl(execbuyqtty,0) else 0 end),0) RECEIVING,
                           nvl(sum(case when dfbk.dealtype = 'B' then se.blocked else 0 end),0) BLOCKED,
                           nvl(max(case when dfbk.dealtype = 'N' then dfbk.irate else null end),0) irate_n,
                           nvl(max(case when dfbk.dealtype = 'R' then dfbk.irate else null end),0) irate_r,
                           nvl(max(case when dfbk.dealtype = 'B' then dfbk.irate else null end),0) irate_b,
                           nvl(max(case when dfbk.dealtype = 'N' then dfbk.mrate else null end),0) mrate_n,
                           nvl(max(case when dfbk.dealtype = 'R' then dfbk.mrate else null end),0) mrate_r,
                           nvl(max(case when dfbk.dealtype = 'B' then dfbk.mrate else null end),0) mrate_b,
                           nvl(max(case when dfbk.dealtype = 'N' then dfbk.lrate else null end),0) lrate_n,
                           nvl(max(case when dfbk.dealtype = 'R' then dfbk.lrate else null end),0) lrate_r,
                           nvl(max(case when dfbk.dealtype = 'B' then dfbk.lrate else null end),0) lrate_b,
                           nvl(max(case when dfbk.dealtype = 'N' then dfbk.dfrate else null end),0) dfrate_n,
                           nvl(max(case when dfbk.dealtype = 'R' then dfbk.dfrate else null end),0) dfrate_r,
                           nvl(max(case when dfbk.dealtype = 'B' then dfbk.dfrate else null end),0) dfrate_b,
                           nvl(max(case when dfbk.dealtype = 'N' then dfbk.dfprice else null end),0) dfprice_n,
                           nvl(max(case when dfbk.dealtype = 'R' then dfbk.dfprice else null end),0) dfprice_r,
                           nvl(max(case when dfbk.dealtype = 'B' then dfbk.dfprice else null end),0) dfprice_b,
                           nvl(max(case when dfbk.dealtype = 'N' then dfbk.refprice else null end),0) refprice_n,
                           nvl(max(case when dfbk.dealtype = 'R' then dfbk.refprice else null end),0) refprice_r,
                           nvl(max(case when dfbk.dealtype = 'B' then dfbk.refprice else null end),0) refprice_b,
                           nvl(min(sec.dfrlsprice),0) dfrefprice

                        from afmast af, afidtype afid, dftype dft, dfbasket dfbk, semast se, securities_info sec,
                           (select afacctno, codeid,
                                    sum(case when duetype = 'SS' then qtty - decode(status,'C',qtty,aqtty) else 0 end) execsellqtty
                               from stschd
                               where duetype = 'SS' and deltd <> 'Y'
                                   and status <> 'C'
                                   and afacctno = rec.acctno
                                   and codeid = dfrls_rec.codeid
                               group by afacctno, codeid) sts,
                           (select s1.afacctno, s1.codeid, sum(s1.qtty-s1.aqtty) execbuyqtty
                                from
                                    (select * from stschd where duetype = 'RS' and deltd <> 'Y') s1,
                                    (select * from stschd where duetype = 'SM' and deltd <> 'Y') s2
                                where s1.orgorderid = s2.orgorderid
                                    and s2.trfbuyrate * s2.trfbuyext * (s2.amt-s2.trfexeamt) = 0
                                    and s1.status <> 'C'
                                group by s1.afacctno, s1.codeid) sts2
                    where se.afacctno = sts.afacctno (+) and se.codeid = sts.codeid (+)
                        and se.afacctno = sts2.afacctno (+) and se.codeid = sts2.codeid (+)
                        and af.acctno = se.afacctno
                        and af.actype = afid.aftype and afid.actype = dft.actype and afid.objname = 'DF.DFTYPE'
                        and dft.basketid = dfbk.basketid and dfbk.symbol = sec.symbol and sec.codeid = se.codeid
                        and dft.actype = rec_dftype.actype
                        and af.acctno = rec.acctno
                        and se.codeid = dfrls_rec.codeid
                    group by se.afacctno, dft.actype
                )
                loop
                    plog.debug (pkgctx, 'Inside rec_basket rec in');
                    -- So sanh: Neu Gia vay * Ti le vay trong Ro CL > Gia vay * ti le vay trong ro DF: exit loop;
                    begin
                        select rsk.mrratioloan/100, least(rsk.mrpriceloan, sb.marginprice)
                            into l_mrrate, l_mrprice
                        from afserisk rsk, securities_info sb
                        where actype = rec.aftype and rsk.codeid = dfrls_rec.codeid and sb.codeid = rsk.codeid;
                    exception when others then
                        l_mrrate:=0;
                        l_mrprice:=0;
                    end;

                    -- Xac dinh chuoi STRDATA:
                    -- Template
                    /*
                    --ACTYPE,DFTYPE,ORGAMT,TXTIME,TXDATE,TXNUM,MAKER,IRATE,MRATE,LRATE,AUTODRAWNDOWN,
                    --ISAPPROVE,DESCRIPTION,AFACCTNO,DTYPE,SYMBOL,CODEID,QTTY,DFPRICE,DFRATE,AMT,GROUPID,AUTODRAWNDOWN
                    --ISAPPROVE,CONTRACTCHK,AFACCTNODRD,REF
                    -- Example:
                    --0055|A|305600000|15:27:48|14/05/2012|9900111111|0001|100|90|80|1|
                    --Y|Test DF Tong ALL|0001686868|N|KLS|000419|40000|3760|40|150400000|0001140512000021|1|
                    --N|Y|0001686868|
                    --$
                    --0055|A|305600000|15:27:48|14/05/2012|9900111111|0001|100|90|80|1|
                    --Y|Test DF Tong ALL|0001686868|N|SSI|103|20000|7760|40|155200000|0001140512000021|1|
                    --N|Y|0001686868|
                    --$
                    */
                    -- DEALTYPE = N: Chung khoan Thuong.
                    plog.debug (pkgctx, 'pr_DFAutoMarginLoanDrawnDown:rec_basket.DFQTTY:'||rec_basket.DFQTTY);
                    if rec_basket.DFQTTY > 0 and rec_basket.dfrate_n > 0 then
                        plog.debug (pkgctx, 'pr_DFAutoMarginLoanDrawnDown:l_avlcflimit:'||l_avlcflimit);

                        select nvl(sum(mst.syroomlimit - mst.syroomused - (nvl(sy_prinused,0) + nvl(sy_prinused_af,0))),0)
                                into l_RoomRemainQtty
                        from vw_marginroomsystem mst,
                            (select codeid, sum(decode(restype,'S',prinused,0)) sy_prinused,
                                    sum(case when restype = 'S' and afacctno = rec.acctno then prinused else 0 end)  sy_prinused_af
                                from vw_afpralloc_all where codeid = dfrls_rec.codeid
                                group by codeid) used
                        where mst.codeid = dfrls_rec.codeid
                        and mst.codeid = used.codeid(+);

                        l_AvlQtty:=least(rec_basket.DFQTTY, l_RoomRemainQtty);

                        l_RefDeal:='';

                        l_DFPrice:= (case when rec_basket.DFPRICE_n <=0
                                    then round((case when rec_basket.refprice_n <=0 then rec_basket.DFREFPRICE
                                                    else least(rec_basket.refprice_n,rec_basket.DFREFPRICE) end)* rec_basket.dfrate_n/100,0)
                                    else least(rec_basket.DFPRICE_n,rec_basket.DFREFPRICE*rec_basket.dfrate_n/100) end);
                        l_OrgDFPrice:= l_DFPrice;
                        plog.debug (pkgctx, 'pr_DFAutoMarginLoanDrawnDown:l_DFPrice:'||l_DFPrice);

                        -- Check on MrCrLimitMax -- So tien con giai ngan CL.
                        select greatest(mrcrlimitmax-dfodamt,0),
                                greatest(least(mrcrlimitmax - dfodamt, nvl(sec.seamt,0)) - greatest(nvl(marginprin,0) /*- af.mrcrlimit*/,0),0)
                            into l_mrcrlimitmax, l_avlRlsCL
                        from afmast af, cimast ci,
                            v_getsecmargininfo sec,
                            (select trfacctno,
                                sum(prinnml+prinovd
                                    +intnmlacr+intdue+intnmlovd+intovdacr
                                    +feeintnmlacr+feeintdue+feeintnmlovd+feeintovdacr) marginprin
                            from lnmast where ftype <> 'DF' and trfacctno = rec.acctno group by trfacctno) ln
                        where af.acctno = ci.acctno and af.acctno = ln.trfacctno(+) and af.acctno = rec.acctno
                        and af.acctno = sec.afacctno(+);

                        -- Qui doi sang so tien co the giai ngan DF.
                        if l_OrgDFPrice >= (l_mrprice * l_mrrate) and (l_mrprice * l_mrrate) <> 0 then
                            l_mrcrlimitmax:= least(l_mrcrlimitmax, greatest(l_avlRlsCL * l_OrgDFPrice / (l_mrprice * l_mrrate),0));
                        end if;

                        l_ItemExecRlsAmount:= least(l_AvlQtty * l_OrgDFPrice,
                                                    l_RlsAmount - l_ExecRlsAmount,
                                                    l_avlcflimit,
                                                    l_mrcrlimitmax);
                        plog.debug (pkgctx, 'pr_DFAutoMarginLoanDrawnDown:l_ItemExecRlsAmount:'||l_ItemExecRlsAmount);

                        -- Lam tron khoi luong theo lo TradeLot
                        if l_DFPrice > 0 then
                            l_DFQtty:=  least(floor(l_AvlQtty /l_TradeLot) * l_TradeLot, ceil((l_ItemExecRlsAmount / l_DFPrice) /l_TradeLot) * l_TradeLot);
                        else
                            l_DFQtty:=0;
                        end if;
                        plog.debug (pkgctx, 'pr_DFAutoMarginLoanDrawnDown:l_DFQtty:'||l_DFQtty);
                        -- Tinh lai so tien giai ngan.
                        l_ItemExecRlsAmount:= least(l_DFPrice * l_DFQtty, l_RlsAmount - l_ExecRlsAmount, l_avlcflimit);
                        plog.debug (pkgctx, 'pr_DFAutoMarginLoanDrawnDown:l_ItemExecRlsAmount:'||l_ItemExecRlsAmount);
                        if l_DFQtty > 0 then
                            l_DFPrice:= round(l_ItemExecRlsAmount / l_DFQtty,0);
                        end if;

                        if (l_mrprice * l_mrrate) <= l_OrgDFPrice and l_ItemExecRlsAmount > 0 then
                            plog.debug (pkgctx, 'pr_DFAutoMarginLoanDrawnDown:l_ItemExecRlsAmount>0:'||'DFQTTY');
                            l_ExecRlsAmount:= l_ExecRlsAmount + l_ItemExecRlsAmount;
                            l_avlcflimit:= l_avlcflimit - l_ItemExecRlsAmount;

                            l_StringData:= l_StringData || rec_dftype.actype || '|'; --ACTYPE
                            l_StringData:= l_StringData || rec_dftype.dftype || '|'; --DFTYPE
                            l_StringData:= l_StringData || '<$ORGAMT>' || '|'; --ORGAMT
                            l_StringData:= l_StringData || '<$TXTIME>' || '|'; --TXTIME
                            l_StringData:= l_StringData || '<$TXDATE>' || '|'; --TXDATE
                            l_StringData:= l_StringData || '<$TXNUM>' || '|'; --TXNUM
                            l_StringData:= l_StringData || '<$MAKER>' || '|'; --MAKER
                            l_StringData:= l_StringData || rec_basket.irate_n || '|'; --IRATE
                            l_StringData:= l_StringData || rec_basket.mrate_n || '|'; --MRATE
                            l_StringData:= l_StringData || rec_basket.lrate_n || '|'; --LRATE
                            l_StringData:= l_StringData || '1' || '|'; --AUTODRAWNDOWN
                            l_StringData:= l_StringData || 'Y' || '|'; --ISAPPROVE = Y: luon giai ngan
                            l_StringData:= l_StringData || '<$DESCRIPTION>' || '|'; --DESCRIPTION
                            l_StringData:= l_StringData || rec.acctno || '|'; --AFACCTNO
                            l_StringData:= l_StringData || 'N' || '|'; --DTYPE
                            l_StringData:= l_StringData || l_Symbol || '|'; --SYMBOL
                            l_StringData:= l_StringData || dfrls_rec.codeid || '|'; --CODEID
                            l_StringData:= l_StringData || l_DFQtty || '|'; --QTTY
                            l_StringData:= l_StringData || l_DFPrice || '|'; --DFPRICE
                            l_StringData:= l_StringData || rec_basket.dfrate_n || '|'; --DFRATE
                            l_StringData:= l_StringData || l_ItemExecRlsAmount || '|'; --AMT
                            l_StringData:= l_StringData || '<$GROUPID>' || '|'; --GROUPID
                            l_StringData:= l_StringData || '1' || '|'; --AUTODRAWNDOWN
                            l_StringData:= l_StringData || 'Y' || '|'; --ISAPPROVE = Y: luon giai ngan
                            l_StringData:= l_StringData || '<$CONTRACTCHK>' || '|'; --CONTRACTCHK
                            l_StringData:= l_StringData || rec.acctno || '|'; --AFACCTNODRD
                            l_StringData:= l_StringData || l_RefDeal; --REF
                            l_StringData:= l_StringData || '$'; --$
                        end if;
                    end if;
                    plog.debug (pkgctx, 'After.DFQTTY:'||to_number(l_RlsAmount - l_ExecRlsAmount));
                    exit when l_RlsAmount - l_ExecRlsAmount <= 0 or l_avlcflimit <= 0;


                    plog.debug (pkgctx, 'Before.RECEIVING:'||to_number(rec_basket.RECEIVING));
                    plog.debug (pkgctx, 'Before.rec_basket.dfrate_r:'||to_number(rec_basket.dfrate_r));
                    if rec_basket.RECEIVING > 0 and rec_basket.dfrate_r > 0 then

                        select nvl(sum(mst.syroomlimit - mst.syroomused - (nvl(sy_prinused,0) + nvl(sy_prinused_af,0))),0)
                                into l_RoomRemainQtty
                        from vw_marginroomsystem mst,
                            (select codeid, sum(decode(restype,'S',prinused,0)) sy_prinused,
                                    sum(case when restype = 'S' and afacctno = rec.acctno then prinused else 0 end)  sy_prinused_af
                                from vw_afpralloc_all where codeid = dfrls_rec.codeid
                                group by codeid) used
                        where mst.codeid = dfrls_rec.codeid
                        and mst.codeid = used.codeid(+);

                        l_TotalRecvQtty:= least(rec_basket.RECEIVING, l_RoomRemainQtty);
                        for rec_serecv in
                        (
                            select txdate, cleardate, autoid, afacctno, codeid, (qtty - aqtty) RECEIVING
                            from vw_stschd_dealgroup
                            where duetype ='RS' and qtty - aqtty >0
                            and afacctno = rec.acctno and codeid = dfrls_rec.codeid
                        )
                        loop
                            if l_TotalRecvQtty > 0 then
                                l_RefDeal:=rec_serecv.autoid;


                                l_DFPrice:= (case when rec_basket.DFPRICE_r <=0
                                            then round((case when rec_basket.refprice_r <=0 then rec_basket.DFREFPRICE
                                                            else least(rec_basket.refprice_r,rec_basket.DFREFPRICE) end)* rec_basket.dfrate_r/100,0)
                                            else least(rec_basket.DFPRICE_r,rec_basket.DFREFPRICE*rec_basket.dfrate_r/100) end);
                                l_OrgDFPrice:= l_DFPrice;
                                plog.debug (pkgctx, 'pr_DFAutoMarginLoanDrawnDown:l_DFPrice:'||l_DFPrice);


                                -- Check on MrCrLimitMax
                                select greatest(mrcrlimitmax-dfodamt,0),
                                        greatest(least(mrcrlimitmax - dfodamt, nvl(sec.seamt,0)) - greatest(nvl(marginprin,0) /*- af.mrcrlimit*/,0),0)
                                    into l_mrcrlimitmax, l_avlRlsCL
                                from afmast af, cimast ci,
                                    v_getsecmargininfo sec,
                                    (select trfacctno,
                                        sum(prinnml+prinovd
                                            +intnmlacr+intdue+intnmlovd+intovdacr
                                            +feeintnmlacr+feeintdue+feeintnmlovd+feeintovdacr) marginprin
                                    from lnmast where ftype <> 'DF' and trfacctno = rec.acctno group by trfacctno) ln
                                where af.acctno = ci.acctno and af.acctno = ln.trfacctno(+) and af.acctno = rec.acctno
                                and af.acctno = sec.afacctno(+);

                                -- Qui doi sang so tien co the giai ngan DF.
                                if l_OrgDFPrice >= (l_mrprice * l_mrrate) and (l_mrprice * l_mrrate) <> 0 then
                                    l_mrcrlimitmax:= least(l_mrcrlimitmax, greatest(l_avlRlsCL * l_OrgDFPrice / (l_mrprice * l_mrrate),0));
                                end if;

                                l_ItemExecRlsAmount:= least(least(rec_serecv.RECEIVING,l_TotalRecvQtty) * l_OrgDFPrice,
                                                            l_RlsAmount - l_ExecRlsAmount,
                                                            l_avlcflimit,
                                                            l_mrcrlimitmax);

                                -- Lam tron khoi luong theo lo TradeLot
                                if l_DFPrice > 0 then
                                    l_DFQtty:=  least(floor(least(rec_serecv.RECEIVING,l_TotalRecvQtty) /l_TradeLot) * l_TradeLot, ceil((l_ItemExecRlsAmount / l_DFPrice) /l_TradeLot) * l_TradeLot);
                                else
                                    l_DFQtty:=0;
                                end if;

                                -- Tinh lai so tien giai ngan.
                                l_ItemExecRlsAmount:= least(l_DFPrice * l_DFQtty, l_RlsAmount - l_ExecRlsAmount, l_avlcflimit);
                                if l_DFQtty > 0 then
                                    l_DFPrice:= round(l_ItemExecRlsAmount / l_DFQtty,0);
                                end if;

                                plog.debug (pkgctx, 'Inside.l_DFPrice:'||l_DFPrice);
                                plog.debug (pkgctx, 'Inside.l_DFQtty:'||l_DFQtty);
                                plog.debug (pkgctx, 'Inside.(l_mrprice * l_mrrate):'||(l_mrprice * l_mrrate));
                                plog.debug (pkgctx, 'Inside.l_ItemExecRlsAmount:'||l_ItemExecRlsAmount);
                                if (l_mrprice * l_mrrate) <= l_OrgDFPrice and l_ItemExecRlsAmount > 0 then
                                    l_ExecRlsAmount:= l_ExecRlsAmount + l_ItemExecRlsAmount;
                                    l_avlcflimit:= l_avlcflimit - l_ItemExecRlsAmount;

                                    l_StringData:= l_StringData || rec_dftype.actype || '|'; --ACTYPE
                                    l_StringData:= l_StringData || rec_dftype.dftype || '|'; --DFTYPE
                                    l_StringData:= l_StringData || '<$ORGAMT>' || '|'; --ORGAMT
                                    l_StringData:= l_StringData || '<$TXTIME>' || '|'; --TXTIME
                                    l_StringData:= l_StringData || '<$TXDATE>' || '|'; --TXDATE
                                    l_StringData:= l_StringData || '<$TXNUM>' || '|'; --TXNUM
                                    l_StringData:= l_StringData || '<$MAKER>' || '|'; --MAKER
                                    l_StringData:= l_StringData || rec_basket.irate_r || '|'; --IRATE
                                    l_StringData:= l_StringData || rec_basket.mrate_r || '|'; --MRATE
                                    l_StringData:= l_StringData || rec_basket.lrate_r || '|'; --LRATE
                                    l_StringData:= l_StringData || '1' || '|'; --AUTODRAWNDOWN
                                    l_StringData:= l_StringData || 'Y' || '|'; --ISAPPROVE = Y: luon giai ngan
                                    l_StringData:= l_StringData || '<$DESCRIPTION>' || '|'; --DESCRIPTION
                                    l_StringData:= l_StringData || rec.acctno || '|'; --AFACCTNO
                                    l_StringData:= l_StringData || 'R' || '|'; --DTYPE
                                    l_StringData:= l_StringData || l_Symbol || '|'; --SYMBOL
                                    l_StringData:= l_StringData || dfrls_rec.codeid || '|'; --CODEID
                                    l_StringData:= l_StringData || l_DFQtty || '|'; --QTTY
                                    l_StringData:= l_StringData || l_DFPrice || '|'; --DFPRICE
                                    l_StringData:= l_StringData || rec_basket.dfrate_r || '|'; --DFRATE
                                    l_StringData:= l_StringData || l_ItemExecRlsAmount || '|'; --AMT
                                    l_StringData:= l_StringData || '<$GROUPID>' || '|'; --GROUPID
                                    l_StringData:= l_StringData || '1' || '|'; --AUTODRAWNDOWN
                                    l_StringData:= l_StringData || 'Y' || '|'; --ISAPPROVE = Y: luon giai ngan
                                    l_StringData:= l_StringData || '<$CONTRACTCHK>' || '|'; --CONTRACTCHK
                                    l_StringData:= l_StringData || rec.acctno || '|'; --AFACCTNODRD
                                    l_StringData:= l_StringData || l_RefDeal; --REF
                                    l_StringData:= l_StringData || '$'; --$

                                    l_TotalRecvQtty:= l_TotalRecvQtty - l_DFQtty;
                                end if;

                            end if;

                            exit when l_TotalRecvQtty <= 0 or l_RlsAmount - l_ExecRlsAmount <= 0 or l_avlcflimit <= 0;
                        end loop;
                    end if;
                    exit when l_RlsAmount - l_ExecRlsAmount <= 0 or l_avlcflimit <= 0;


                end loop;
                plog.debug (pkgctx, 'l_RlsAmount - l_ExecRlsAmount:'||to_number(l_RlsAmount - l_ExecRlsAmount));
                plog.debug (pkgctx, 'l_avlcflimit:'||l_avlcflimit);

                exit when l_RlsAmount - l_ExecRlsAmount <= 0 or l_avlcflimit <= 0;
            end loop;


            plog.debug (pkgctx, 'Before Execute l_ExecRlsAmount:'||l_ExecRlsAmount);

            if l_ExecRlsAmount > 0 then

                l_Desc:= l_OrgDesc;
                -- Gen DGGROUPID:
                select systemnums.C_HO_HOID
                            || to_char(l_currdate,'DDMMYY')
                            || LPAD(seq_dfmast.nextval,6,'0') into l_DFGroupID from dual;

                select contractchk into l_ContractChk
                from cfmast cf, afmast af
                where cf.custid = af.custid and af.acctno = rec.acctno;

                l_StringData:= replace(l_StringData,'<$ORGAMT>',to_char(l_ExecRlsAmount));
                l_StringData:= replace(l_StringData,'<$TXTIME>',to_char(sysdate,'HH24:MI:SS'));
                l_StringData:= replace(l_StringData,'<$TXDATE>',to_char(l_currdate,'DD/MM/RRRR'));
                l_StringData:= replace(l_StringData,'<$TXNUM>','9900000000'); -- fixed tam thoi. Trong qua trinh sinh giao dich se gen lai.
                l_StringData:= replace(l_StringData,'<$MAKER>',systemnums.C_SYSTEM_USERID);
                l_StringData:= replace(l_StringData,'<$GROUPID>',l_DFGroupID);
                l_StringData:= replace(l_StringData,'<$DESCRIPTION>',l_Desc);
                l_StringData:= replace(l_StringData,'<$CONTRACTCHK>',l_ContractChk);

                plog.error (pkgctx, 'LINHLNB:l_StringData:'||l_StringData);

                --set txnum
                SELECT systemnums.C_BATCH_PREFIXED
                                  || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                           INTO l_txmsg.txnum
                           FROM DUAL;
                l_txmsg.brid        := substr(rec.ACCTNO,1,4);

                --Set cac field giao dich
                --03   C   So tieu khoan
                l_txmsg.txfields ('03').defname   := 'AFACCTNO';
                l_txmsg.txfields ('03').TYPE      := 'C';
                l_txmsg.txfields ('03').VALUE     := rec.acctno;

                --06   C   Chuoi du lieu
                l_txmsg.txfields ('06').defname   := 'STRDATA';
                l_txmsg.txfields ('06').TYPE      := 'C';
                l_txmsg.txfields ('06').VALUE     := l_StringData;

                --10   N   So tien giai ngan
                l_txmsg.txfields ('10').defname   := 'AMOUNT';
                l_txmsg.txfields ('10').TYPE      := 'N';
                l_txmsg.txfields ('10').VALUE     := l_ExecRlsAmount;

                --20   C   Tieu khoan DFGROUP
                l_txmsg.txfields ('20').defname   := 'GROUPID';
                l_txmsg.txfields ('20').TYPE      := 'C';
                l_txmsg.txfields ('20').VALUE     := l_DFGroupID;

                --21   C   Loai hinh DF
                l_txmsg.txfields ('21').defname   := 'DFTYPE';
                l_txmsg.txfields ('21').TYPE      := 'C';
                l_txmsg.txfields ('21').VALUE     := rec_dftype.ACTYPE;

                --30   C   Dien Giai
                l_txmsg.txfields ('30').defname   := 'DESC';
                l_txmsg.txfields ('30').TYPE      := 'C';
                l_txmsg.txfields ('30').VALUE     := l_Desc;



                BEGIN
                    IF txpks_#2676.fn_batchtxprocess (l_txmsg,
                                                  p_err_code,
                                                  l_err_param
                    ) <> systemnums.c_success
                    THEN
                        plog.error (pkgctx,
                                    'got error 2676: ' || p_err_code
                        );
                        ROLLBACK;
                        RETURN;
                    END IF;
                END;
                l_RlsAmount:=l_RlsAmount - l_ExecRlsAmount;
            end if;

            plog.debug (pkgctx, 'After Execute l_RlsAmount:'||l_RlsAmount);

            exit when l_RlsAmount <= 0;
        end loop;


    end loop;

p_err_code:=0;
plog.setendsection(pkgctx, 'pr_DFAutoMarginLoanDrawnDown');
EXCEPTION
WHEN OTHERS
THEN
  p_err_code := errnums.C_SYSTEM_ERROR;
  plog.error (pkgctx, SQLERRM);
  plog.error (pkgctx, dbms_utility.format_error_backtrace);
  plog.setendsection (pkgctx, 'pr_DFAutoMarginLoanDrawnDown');
  RAISE errnums.E_SYSTEM_ERROR;
END pr_DFAutoMarginLoanDrawnDown;

---------------------------------pr_LNAdvPayment------------------------------------------------
  PROCEDURE pr_rmBAMTTRF(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
    l_orgtxnum  varchar2(100);
    l_orgdate varchar2(10);
    l_orgreqid  number(20,0);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmBAMTTRF');
    l_tltx:='6663';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT * FROM
        (
            SELECT OD.TXNUM,OD.TXDATE,CRA.TRFCODE TRFTYPE,CIT.REF ORDERID,SB.SYMBOL,OD.EXECQTTY,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,
            CIT.ACCTNO AFACCTNO,AF.ACCTNO||OD.CODEID SEACCTNO,AF.BANKACCTNO,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,
            AF.BANKNAME BANKCODE,AF.BANKNAME || ':' || CRB.BANKNAME BANKNAME,CEIL(CIT.NAMT) AMOUNT
            FROM (
                SELECT TXDATE,TXNUM,ACCTNO,TXCD,REF,AUTOID,TLTXCD,NAMT FROM CITRAN
                WHERE DELTD='N' AND TLTXCD='8889' AND TXCD='0011'
                AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
                UNION ALL
                SELECT TXDATE,TXNUM,ACCTNO,TXCD,REF,AUTOID,TLTXCD,NAMT FROM CITRANA
                WHERE DELTD='N' AND TLTXCD='8889' AND TXCD='0011'
                AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
            ) CIT, (
                SELECT ORDERID,CODEID,TXDATE,TXNUM,EXECQTTY FROM ODMAST
                WHERE DELTD='N' AND EXECTYPE IN ('NB','BC') AND EXECQTTY>0
                UNION ALL
                SELECT ORDERID,CODEID,TXDATE,TXNUM,EXECQTTY FROM ODMASTHIST
                WHERE DELTD='N' AND EXECTYPE IN ('NB','BC') AND EXECQTTY>0
                AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
            ) OD,SECURITIES_INFO SB,AFMAST AF,CRBDEFACCT CRA,CRBDEFBANK CRB, CIMAST CI,CFMAST CF
            WHERE CIT.ACCTNO=AF.ACCTNO AND CI.AFACCTNO=AF.ACCTNO AND CI.COREBANK='Y'
            AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODBUY'
            AND AF.BANKNAME=CRB.BANKCODE AND TRUNC(CIT.REF)=OD.ORDERID AND AF.CUSTID=CF.CUSTID
            AND OD.CODEID=SB.CODEID AND CIT.NAMT>0 AND NOT EXISTS (
                SELECT REQ.REFCODE FROM CRBTXREQ REQ
                WHERE REQ.TRFCODE='TRFODBUY' AND REQ.OBJNAME=l_tltx
                AND (
                     REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
                     OR (REQ.STATUS NOT IN ('E') AND REQ.TXDATE < TO_DATE(l_CURRDATE,'DD/MM/RRRR'))
                    )
                AND REQ.REFCODE=OD.ORDERID
            )
            UNION ALL
            SELECT OD.TXNUM,OD.TXDATE,CRA.TRFCODE TRFTYPE,CIT.REF ORDERID,SB.SYMBOL,OD.EXECQTTY,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,
            CIT.ACCTNO AFACCTNO,AF.ACCTNO||OD.CODEID SEACCTNO,AF.BANKACCTNO,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,
            AF.BANKNAME BANKCODE,AF.BANKNAME || ':' || CRB.BANKNAME BANKNAME,CEIL(CIT.NAMT) AMOUNT
            FROM (
                SELECT TXDATE,TXNUM,ACCTNO,TXCD,REF,AUTOID,TLTXCD,NAMT FROM CITRAN
                WHERE DELTD='N' AND TLTXCD='8865' AND TXCD='0011'
                UNION ALL
                SELECT TXDATE,TXNUM,ACCTNO,TXCD,REF,AUTOID,TLTXCD,NAMT FROM CITRANA
                WHERE DELTD='N' AND TLTXCD='8865' AND TXCD='0011'
                AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
            ) CIT, (
                SELECT ORDERID,CODEID,TXDATE,TXNUM,EXECQTTY FROM ODMAST
                WHERE DELTD='N' AND EXECTYPE IN ('NB','BC') AND EXECQTTY>0
                UNION ALL
                SELECT ORDERID,CODEID,TXDATE,TXNUM,EXECQTTY FROM ODMASTHIST
                WHERE DELTD='N' AND EXECTYPE IN ('NB','BC') AND EXECQTTY>0
                AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
            ) OD,SECURITIES_INFO SB,AFMAST AF,CRBDEFACCT CRA,CRBDEFBANK CRB, CIMAST CI,CFMAST CF
            WHERE CIT.ACCTNO=AF.ACCTNO AND CI.AFACCTNO=AF.ACCTNO AND CI.COREBANK='Y'
            AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODBUY'
            AND AF.BANKNAME=CRB.BANKCODE AND TRUNC(CIT.REF)=OD.ORDERID AND AF.CUSTID=CF.CUSTID
            AND OD.CODEID=SB.CODEID AND CIT.NAMT>0 AND NOT EXISTS (
                SELECT REQ.REFCODE FROM CRBTXREQ REQ
                WHERE REQ.TRFCODE='TRFODBUY' AND REQ.OBJNAME=l_tltx
                AND (
                     REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
                     OR (REQ.STATUS NOT IN ('E') AND REQ.TXDATE < TO_DATE(l_CURRDATE,'DD/MM/RRRR'))
                    )
                AND TRUNC(REQ.REFCODE)=TRUNC(OD.ORDERID)
            )
        ) ORDER BY ORDERID DESC
    )
    loop -- rec
        BEGIN
            plog.debug(pkgctx, 'Loop for order ID : ' || rec.ORDERID);

            --Neu la order cua ngay hom truoc,
            --thi phai revert lai giao dich CI truoc do
            IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
                BEGIN
                    SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
                    INTO l_orgreqid,l_orgtxnum,l_orgdate
                    FROM CRBTXREQ
                    WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

                    cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

                    UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
                        --RAISE errnums.E_SYSTEM_ERROR;
                    WHEN OTHERS THEN
                        plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
                END;
            END IF;

            --set txnum
            SELECT systemnums.C_BATCH_PREFIXED
                                 || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                          INTO l_txmsg.txnum
                          FROM DUAL;
            l_txmsg.brid        := substr(rec.AFACCTNO,1,4);


            --Set cac field giao dich
            --06   C   TRFTYPE
            l_txmsg.txfields ('06').defname   := 'TRFTYPE';
            l_txmsg.txfields ('06').TYPE      := 'C';
            l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

            --03  SECACCOUNT
            l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

            --90  CUSTNAME
            l_txmsg.txfields ('90').defname   := 'CUSTNAME';
            l_txmsg.txfields ('90').TYPE      := 'C';
            l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

            --91  ADDRESS
            l_txmsg.txfields ('91').defname   := 'ADDRESS';
            l_txmsg.txfields ('91').TYPE      := 'C';
            l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

            --92  LICENSE
            l_txmsg.txfields ('92').defname   := 'LICENSE';
            l_txmsg.txfields ('92').TYPE      := 'C';
            l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

            --93  BANKACCTNO
            l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
            l_txmsg.txfields ('93').TYPE      := 'C';
            l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

            --05  DESACCTNO
            l_txmsg.txfields ('05').defname   := 'DESACCTNO';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

            --07  DESACCTNAME
            l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
            l_txmsg.txfields ('07').TYPE      := 'C';
            l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

            --94  BANKNAME
            l_txmsg.txfields ('94').defname   := 'BANKNAME';
            l_txmsg.txfields ('94').TYPE      := 'C';
            l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

            --95  BANKQUE
            l_txmsg.txfields ('95').defname   := 'BANKQUE';
            l_txmsg.txfields ('95').TYPE      := 'C';
            l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

            --10  AMOUNT
            l_txmsg.txfields ('10').defname   := 'AMOUNT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;

            --04  ORDERID
            l_txmsg.txfields ('04').defname   := 'ORDERID';
            l_txmsg.txfields ('04').TYPE      := 'C';
            l_txmsg.txfields ('04').VALUE     := rec.ORDERID;

            --30   C   DESC
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            --l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6663_DESC  || rec.CUSTODYCD || ', So lenh :' || rec.ORDERID || ' , CK : ' || rec.SYMBOL || ' , SL : ' || rec.EXECQTTY || ', So tien : ' || rec.AMOUNT || ' ngay GD' || TO_DATE(rec.TXDATE,'DD/MM/RRRR');
            l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6663_DESC  || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_order || rec.ORDERID || ' , CK ' || rec.SYMBOL || ' , SL ' || trim(to_char(rec.EXECQTTY,'999,999,999,999,999,999,999')) || utf8nums.c_const_TLTX_TXDESC_6663_amt || trim(to_char(rec.AMOUNT,'999,999,999,999,999,999,999')) || utf8nums.c_const_TLTX_TXDESC_6663_date || TO_DATE(rec.TXDATE,'DD/MM/RRRR');

            BEGIN
                IF txpks_#6663.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 6663: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmBAMTTRF');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmBAMTTRF');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmBAMTTRF;

  PROCEDURE pr_rmBFEETRF(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
    l_orgtxnum  varchar2(100);
    l_orgdate   varchar2(10);
    l_orgreqid  number(20,0);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmBFEETRF');
    l_tltx:='6664';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;

    SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT CIT.TXDATE,CRA.TRFCODE TRFTYPE,CIT.REF ORDERID,SB.SYMBOL,OD.EXECQTTY,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,
        CIT.ACCTNO AFACCTNO,AF.ACCTNO||OD.CODEID SEACCTNO,AF.BANKACCTNO,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,
        AF.BANKNAME BANKCODE,AF.BANKNAME || ':' || CRB.BANKNAME BANKNAME,CEIL(CIT.NAMT) AMOUNT
        FROM (
            SELECT TXDATE,TXNUM,ACCTNO,TXCD,REF,AUTOID,TLTXCD,NAMT FROM CITRAN
            WHERE DELTD='N' AND TLTXCD='8855' AND TXCD='0011'
            AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
            UNION ALL
            SELECT TXDATE,TXNUM,ACCTNO,TXCD,REF,AUTOID,TLTXCD,NAMT FROM CITRANA
            WHERE DELTD='N' AND TLTXCD='8855' AND TXCD='0011'
            AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
        ) CIT, (
            SELECT ORDERID,CODEID,TXDATE,TXNUM,EXECQTTY FROM ODMAST
            WHERE DELTD='N' AND EXECTYPE IN ('NB','BC')
            UNION ALL
            SELECT ORDERID,CODEID,TXDATE,TXNUM,EXECQTTY FROM ODMASTHIST
            WHERE DELTD='N' AND EXECTYPE IN ('NB','BC')
            AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
        ) OD,SECURITIES_INFO SB,AFMAST AF,CRBDEFACCT CRA,CRBDEFBANK CRB, CIMAST CI,CFMAST CF
        WHERE CIT.ACCTNO=AF.ACCTNO AND CI.AFACCTNO=AF.ACCTNO AND CI.COREBANK='Y'
        AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODBFEE'
        AND AF.BANKNAME=CRB.BANKCODE AND TRUNC(CIT.REF)=OD.ORDERID AND AF.CUSTID=CF.CUSTID
        AND OD.CODEID=SB.CODEID AND CIT.NAMT>0 AND NOT EXISTS (
             SELECT REQ.REFCODE FROM CRBTXREQ REQ
             WHERE REQ.TRFCODE='TRFODBFEE' AND REQ.OBJNAME=l_tltx
             AND (
                 REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
                 OR (REQ.STATUS NOT IN ('E') AND REQ.TXDATE < TO_DATE(l_CURRDATE,'DD/MM/RRRR'))
                 )
             AND TRUNC(REQ.REFCODE)=TRUNC(CIT.REF)
        )
        ORDER BY CIT.TXDATE DESC,CIT.TXNUM DESC
    )
    loop -- rec
        BEGIN
            plog.debug(pkgctx, 'Loop for order ID : ' || rec.ORDERID);

            --Neu la order cua ngay hom truoc,
            --thi phai revert lai giao dich CI truoc do
            IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
                BEGIN
                    SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
                    INTO l_orgreqid,l_orgtxnum,l_orgdate
                    FROM CRBTXREQ
                    WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

                    cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

                    UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
                        --RAISE errnums.E_SYSTEM_ERROR;
                    WHEN OTHERS THEN
                        plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
                END;
            END IF;

            --set txnum
            SELECT systemnums.C_BATCH_PREFIXED
                                 || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                          INTO l_txmsg.txnum
                          FROM DUAL;
            l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

            --Set cac field giao dich
            --06   C   TRFTYPE
            l_txmsg.txfields ('06').defname   := 'TRFTYPE';
            l_txmsg.txfields ('06').TYPE      := 'C';
            l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

            --03  SECACCOUNT
            l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
            l_txmsg.txfields ('03').TYPE      := 'C';
            l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

            --90  CUSTNAME
            l_txmsg.txfields ('90').defname   := 'CUSTNAME';
            l_txmsg.txfields ('90').TYPE      := 'C';
            l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

            --91  ADDRESS
            l_txmsg.txfields ('91').defname   := 'ADDRESS';
            l_txmsg.txfields ('91').TYPE      := 'C';
            l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

            --92  LICENSE
            l_txmsg.txfields ('92').defname   := 'LICENSE';
            l_txmsg.txfields ('92').TYPE      := 'C';
            l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

            --93  BANKACCTNO
            l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
            l_txmsg.txfields ('93').TYPE      := 'C';
            l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

            --05  DESACCTNO
            l_txmsg.txfields ('05').defname   := 'DESACCTNO';
            l_txmsg.txfields ('05').TYPE      := 'C';
            l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

            --07  DESACCTNAME
            l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
            l_txmsg.txfields ('07').TYPE      := 'C';
            l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

            --94  BANKNAME
            l_txmsg.txfields ('94').defname   := 'BANKNAME';
            l_txmsg.txfields ('94').TYPE      := 'C';
            l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

            --95  BANKQUE
            l_txmsg.txfields ('95').defname   := 'BANKQUE';
            l_txmsg.txfields ('95').TYPE      := 'C';
            l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

            --10  AMOUNT
            l_txmsg.txfields ('10').defname   := 'AMOUNT';
            l_txmsg.txfields ('10').TYPE      := 'N';
            l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;

            --04  ORDERID
            l_txmsg.txfields ('04').defname   := 'ORDERID';
            l_txmsg.txfields ('04').TYPE      := 'C';
            l_txmsg.txfields ('04').VALUE     := rec.ORDERID;

            --30   C   DESC
            l_txmsg.txfields ('30').defname   := 'DESC';
            l_txmsg.txfields ('30').TYPE      := 'C';
            l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6664 || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_order || rec.ORDERID || ' , CK ' || rec.SYMBOL || ' , SL ' || trim(to_char(rec.EXECQTTY,'999,999,999,999,999,999,999')) || utf8nums.c_const_TLTX_TXDESC_6663_amt || trim(to_char(rec.AMOUNT,'999,999,999,999,999,999,999')) || utf8nums.c_const_TLTX_TXDESC_6663_date || TO_DATE(rec.TXDATE,'DD/MM/RRRR');

            p_err_code:=0;
            BEGIN
                IF txpks_#6664.fn_batchtxprocess (l_txmsg,
                                                 p_err_code,
                                                 l_err_param
                   ) <> systemnums.c_success
                THEN
                   plog.error (pkgctx,
                               'got error 6664: ' || p_err_code
                   );
                   ROLLBACK;
                   RETURN;
                END IF;
            END;
        END;
    end loop; -- rec
    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmBFEETRF');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmBFEETRF');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmBFEETRF;

 /* PROCEDURE pr_rmSAMTTRF(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
    l_orgtxnum  varchar2(100);
    l_orgdate   varchar2(10);
    l_orgreqid  varchar2(100);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmSAMTTRF');
    l_tltx:='6665';

    --SELECT VARVALUE INTO l_begindate
    --FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT OD.TXNUM,OD.TXDATE,GETDUEDATE(OD.TXDATE,OD.CLEARCD,'000',OD.CLEARDAY) DUEDATE,CRA.TRFCODE TRFTYPE,OD.ORDERID,
        SB.SYMBOL,OD.EXECQTTY,OD.AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,AF.BANKACCTNO,CRB.BANKCODE,
        CRB.BANKCODE||':'||CRB.BANKNAME BANKNAME,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CEIL(OD.EXECAMT) AMOUNT
        FROM (
            SELECT * FROM ODMAST WHERE EXECTYPE IN ('NS','MS') AND DELTD='N' AND EXECAMT>0
            AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
            UNION
            SELECT * FROM ODMASTHIST WHERE EXECTYPE IN ('NS','MS') AND EXECAMT>0
            AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
        ) OD,AFMAST AF,CFMAST CF,CIMAST CI,SECURITIES_INFO SB,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE OD.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND OD.CODEID=SB.CODEID
        AND AF.BANKNAME=CRB.BANKCODE AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODSELL'
        AND AF.ACCTNO=CI.AFACCTNO AND CI.COREBANK='Y'
        AND NOT EXISTS ( --Loai bo nhung ban ke cua ngay hom nay va nhung ban ke thanh cong cua cac ngay hom truoc
            SELECT REQ.REFCODE FROM CRBTXREQ REQ
            WHERE REQ.TRFCODE='TRFODSELL' AND REQ.OBJNAME=l_tltx
            AND (
                REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
                OR (REQ.STATUS NOT IN ('E') AND REQ.TXDATE < TO_DATE(l_CURRDATE,'DD/MM/RRRR'))
                )
            AND TRUNC(REQ.REFCODE)=TRUNC(OD.ORDERID)
        )
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for order ID : ' || rec.ORDERID);

        --Neu la order cua ngay hom truoc,
        --thi phai revert lai giao dich CI truoc do
        IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
         BEGIN
             SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
             INTO l_orgreqid,l_orgtxnum,l_orgdate
             FROM CRBTXREQ
             WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

             cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

             UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
                 --RAISE errnums.E_SYSTEM_ERROR;
             WHEN OTHERS THEN
                 plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
         END;
        END IF;

        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --08   C   DUEDATE
        l_txmsg.txfields ('08').defname   := 'DUEDATE';
        l_txmsg.txfields ('08').TYPE      := 'C';
        l_txmsg.txfields ('08').VALUE     := TO_DATE(rec.DUEDATE,systemnums.C_DATE_FORMAT);

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;

        --04  ORDERID
        l_txmsg.txfields ('04').defname   := 'ORDERID';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.ORDERID;

        --11  TXNUM
        l_txmsg.txfields ('11').defname   := 'TXNUM';
        l_txmsg.txfields ('11').TYPE      := 'C';
        l_txmsg.txfields ('11').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6665 || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_order || rec.ORDERID || ' , CK : ' || rec.SYMBOL || ' , SL : ' || rec.EXECQTTY || utf8nums.c_const_TLTX_TXDESC_6663_amt || rec.AMOUNT;

        BEGIN
            IF txpks_#6665.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6665: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmSAMTTRF');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmSAMTTRF');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmSAMTTRF;*/

PROCEDURE pr_rmSAMTTRF(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
    l_orgtxnum  varchar2(100);
    l_orgdate   varchar2(10);
    l_orgreqid  varchar2(100);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmSAMTTRF');
    l_tltx:='6665';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        /*SELECT OD.TXNUM,OD.TXDATE,od.cleardate DUEDATE,CRA.TRFCODE TRFTYPE,OD.ORDERID,
        SB.SYMBOL,OD.EXECQTTY,OD.AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,AF.BANKACCTNO,CRB.BANKCODE,
        CRB.BANKCODE||':'||CRB.BANKNAME BANKNAME,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CEIL(OD.EXECAMT) AMOUNT,
        nvl(ad.aamt,0) aamt
        FROM (
            select od.*,sts.cleardate from stschd sts, odmast od where od.orderid = sts.orgorderid
            and sts.cleardate = TO_DATE(l_begindate,'DD/MM/RRRR') and sts.duetype ='RM' and sts.deltd <> 'Y'
            AND od.EXECAMT>0
        ) OD,AFMAST AF,CFMAST CF,CIMAST CI,SECURITIES_INFO SB,CRBDEFACCT CRA,CRBDEFBANK CRB,
        (
            select dtl.orderid, sum (aamt) aamt
            from adschd ad, adschddtl dtl
            where ad.txnum = dtl.txnum and ad.txdate = dtl.txdate
            and ad.deltd <> 'Y'and dtl.deltd <> 'Y'
            group by dtl.orderid
        ) ad
        WHERE OD.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND OD.CODEID=SB.CODEID
        AND AF.BANKNAME=CRB.BANKCODE AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODSELL'
        AND AF.ACCTNO=CI.AFACCTNO AND CI.COREBANK='Y'
        and od.orderid = ad.orderid(+)
        AND NOT EXISTS ( --Loai bo nhung ban ke cua ngay hom nay va nhung ban ke thanh cong cua cac ngay hom truoc
            SELECT REQ.REFCODE FROM CRBTXREQ REQ
            WHERE REQ.TRFCODE='TRFODSELL' AND REQ.OBJNAME=l_tltx
            AND (
                REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
                OR (REQ.STATUS NOT IN ('E') AND REQ.TXDATE < TO_DATE(l_CURRDATE,'DD/MM/RRRR'))
                )
            AND TRUNC(REQ.REFCODE)=TRUNC(OD.ORDERID)
        )*/

        SELECT  od.txdate,od.cleardate DUEDATE,CRA.TRFCODE TRFTYPE,
        OD.AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,
        CF.IDCODE LICENSE,AF.BANKACCTNO,CRB.BANKCODE,
        CRB.BANKCODE||':'||CRB.BANKNAME BANKNAME,CRA.REFACCTNO DESACCTNO,
        CRA.REFACCTNAME DESACCTNAME,CEIL(OD.EXECAMT) AMOUNT,
        nvl(od.aamt,0) aamt
        from
        (select od.txdate, od.afacctno, od.cleardate, sum(OD.EXECAMT) EXECAMT ,sum(nvl(ad.aamt,0)) aamt
            FROM
            (
                select od.*,sts.cleardate from stschd sts, odmast od where od.orderid = sts.orgorderid
                and sts.cleardate = TO_DATE(l_begindate,'DD/MM/RRRR') and sts.duetype ='RM' and sts.deltd <> 'Y'
                AND od.EXECAMT>0
                AND NOT EXISTS ( --Loai bo nhung ban ke cua ngay hom nay va nhung ban ke thanh cong cua cac ngay hom truoc
                    SELECT REQ.REFCODE FROM CRBTXREQ REQ
                    WHERE REQ.TRFCODE='TRFODSELL' AND REQ.OBJNAME='6665'
                    AND (
                        REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
                        OR (REQ.STATUS NOT IN ('E') AND REQ.TXDATE < TO_DATE(l_CURRDATE,'DD/MM/RRRR'))
                        )
                    AND TRUNC(REQ.REFCODE)=TRUNC(od.orderid)
                )
            ) OD,
            (
                select dtl.orderid, sum (aamt) aamt
                from adschd ad, adschddtl dtl
                where ad.txnum = dtl.txnum and ad.txdate = dtl.txdate
                and ad.deltd <> 'Y'and dtl.deltd <> 'Y'
                group by dtl.orderid
            ) ad
            where  od.orderid = ad.orderid(+)
            group by od.afacctno, od.cleardate, od.txdate) od,
        AFMAST AF,CFMAST CF,CIMAST CI,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE OD.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID
        AND AF.BANKNAME=CRB.BANKCODE AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODSELL'
        AND AF.ACCTNO=CI.AFACCTNO AND CI.COREBANK='Y'
        AND NOT EXISTS ( --Loai bo nhung ban ke cua ngay hom nay va nhung ban ke thanh cong cua cac ngay hom truoc
            SELECT REQ.REFCODE FROM CRBTXREQ REQ
            WHERE REQ.TRFCODE='TRFODSELL' AND REQ.OBJNAME='6665'
            AND (
                REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
                OR (REQ.STATUS NOT IN ('E') AND REQ.TXDATE < TO_DATE(l_CURRDATE,'DD/MM/RRRR'))
                )
            AND TRUNC(REQ.REFCODE)=TRUNC(to_char(od.txdate,'DDMMRRRR')|| to_char(od.cleardate,'DDMMRRRR') || OD.afacctno)
        )
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for account : ' || rec.afacctno);

        --Neu la order cua ngay hom truoc,
        --thi phai revert lai giao dich CI truoc do
        /*IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
         BEGIN
             SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
             INTO l_orgreqid,l_orgtxnum,l_orgdate
             FROM CRBTXREQ
             WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

             cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

             UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
                 --RAISE errnums.E_SYSTEM_ERROR;
             WHEN OTHERS THEN
                 plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
         END;
        END IF;*/

        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --08   C   DUEDATE
        l_txmsg.txfields ('08').defname   := 'DUEDATE';
        l_txmsg.txfields ('08').TYPE      := 'C';
        l_txmsg.txfields ('08').VALUE     := TO_DATE(rec.DUEDATE,systemnums.C_DATE_FORMAT);

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := round(rec.AMOUNT-rec.aamt);

        --04  ORDERID
        l_txmsg.txfields ('04').defname   := 'ORDERID';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := TRUNC(to_char(rec.txdate,'DDMMRRRR') || to_char(rec.DUEDATE,'DDMMRRRR') || rec.afacctno);--rec.ORDERID;

        --11  TXNUM
        l_txmsg.txfields ('11').defname   := 'TXNUM';
        l_txmsg.txfields ('11').TYPE      := 'C';
        l_txmsg.txfields ('11').VALUE     := '';

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        --l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6665 || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_order || rec.ORDERID || ' , CK ' || rec.SYMBOL || ' , SL ' || trim(to_char(rec.EXECQTTY,'999,999,999,999,999,999,999')) || utf8nums.c_const_TLTX_TXDESC_6663_amt || trim(to_char(rec.AMOUNT,'999,999,999,999,999,999,999')) || ' ' || utf8nums.c_const_TLTX_TXDESC_6665_aamt || trim(to_char(round(rec.aamt),'999,999,999,999,999,999,999'))
        --                                 || utf8nums.c_const_TLTX_TXDESC_6663_date || TO_DATE(rec.TXDATE,'DD/MM/RRRR');
        l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6665 || rec.CUSTODYCD  ||  utf8nums.c_const_TLTX_TXDESC_6663_amt || trim(to_char(rec.AMOUNT,'999,999,999,999,999,999,999')) || ' ' || utf8nums.c_const_TLTX_TXDESC_6665_aamt || trim(to_char(round(rec.aamt),'999,999,999,999,999,999,999'))
                                           || utf8nums.c_const_TLTX_TXDESC_6663_date || TO_DATE(rec.TXDATE,'DD/MM/RRRR');

        BEGIN
            IF txpks_#6665.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6665: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmSAMTTRF');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmSAMTTRF');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmSAMTTRF;

/*PROCEDURE pr_rmSFEETRF(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
    l_orgtxnum  varchar2(100);
    l_orgdate   varchar2(10);
    l_orgreqid  number(20,0);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmSFEETRF');
    l_tltx:='6666';

    --SELECT VARVALUE INTO l_begindate
    --FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT OD.TXNUM,OD.TXDATE,GETDUEDATE(OD.TXDATE,OD.CLEARCD,'000',OD.CLEARDAY) DUEDATE,CRA.TRFCODE TRFTYPE,OD.ORDERID,SB.SYMBOL,
        OD.EXECQTTY,OD.AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,AF.BANKACCTNO,CRB.BANKCODE,
        CRB.BANKCODE||':'||CRB.BANKNAME BANKNAME,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CEIL(OD.FEEACR) AMOUNT
        FROM (
            SELECT * FROM ODMAST WHERE EXECTYPE IN ('NS','MS') AND DELTD='N' AND EXECAMT>0
            AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
            UNION
            SELECT * FROM ODMASTHIST WHERE EXECTYPE IN ('NS','MS') AND EXECAMT>0
            AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
        ) OD,AFMAST AF,CFMAST CF,CIMAST CI,SECURITIES_INFO SB,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE OD.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND OD.CODEID=SB.CODEID
        AND AF.BANKNAME=CRB.BANKCODE AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODSFEE'
        AND AF.ACCTNO=CI.AFACCTNO AND CI.COREBANK='Y' AND OD.FEEACR>0
        AND NOT EXISTS (
            SELECT REQ.REFCODE FROM CRBTXREQ REQ
            WHERE REQ.TRFCODE='TRFODSFEE' AND REQ.OBJNAME=l_tltx
            AND (
                 REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
                 OR (REQ.STATUS NOT IN ('E') AND REQ.TXDATE < TO_DATE(l_CURRDATE,'DD/MM/RRRR'))
                )
            AND TRUNC(REQ.REFCODE)=TRUNC(OD.ORDERID)
        )
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for order ID : ' || rec.ORDERID);

        --Neu la order cua ngay hom truoc,
        --thi phai revert lai giao dich CI truoc do
        IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
         BEGIN
             SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
             INTO l_orgreqid,l_orgtxnum,l_orgdate
             FROM CRBTXREQ
             WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

             cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

             UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
                 --RAISE errnums.E_SYSTEM_ERROR;
             WHEN OTHERS THEN
                 plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
         END;
        END IF;
        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --08   C   DUEDATE
        l_txmsg.txfields ('08').defname   := 'DUEDATE';
        l_txmsg.txfields ('08').TYPE      := 'C';
        l_txmsg.txfields ('08').VALUE     := TO_DATE(rec.DUEDATE,systemnums.C_DATE_FORMAT);

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;

        --04  ORDERID
        l_txmsg.txfields ('04').defname   := 'ORDERID';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.ORDERID;

        --11  TXNUM
        l_txmsg.txfields ('11').defname   := 'TXNUM';
        l_txmsg.txfields ('11').TYPE      := 'C';
        l_txmsg.txfields ('11').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6666 || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_order || rec.ORDERID || ' , CK : ' || rec.SYMBOL || ' , SL : ' || rec.EXECQTTY || utf8nums.c_const_TLTX_TXDESC_6663_amt || rec.AMOUNT;

        BEGIN
            IF txpks_#6666.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6666: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmSFEETRF');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmSFEETRF');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmSFEETRF;*/


PROCEDURE pr_rmSFEETRF(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
    l_orgtxnum  varchar2(100);
    l_orgdate   varchar2(10);
    l_orgreqid  number(20,0);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmSFEETRF');
    l_tltx:='6666';

    --SELECT VARVALUE INTO l_begindate
    --FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT OD.TXNUM,OD.TXDATE,od.cleardate DUEDATE,CRA.TRFCODE TRFTYPE,OD.ORDERID,SB.SYMBOL,
        OD.EXECQTTY,OD.AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,AF.BANKACCTNO,CRB.BANKCODE,
        CRB.BANKCODE||':'||CRB.BANKNAME BANKNAME,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CEIL(OD.FEEACR) AMOUNT
        FROM (
             select od.*, sts.cleardate from stschd sts, odmast od where od.orderid = sts.orgorderid
                and sts.cleardate = TO_DATE(l_begindate,'DD/MM/RRRR') and sts.duetype ='RM' and sts.deltd <> 'Y'
                AND od.EXECAMT>0 and OD.FEEACR>0
        ) OD,AFMAST AF,CFMAST CF,CIMAST CI,SECURITIES_INFO SB,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE OD.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND OD.CODEID=SB.CODEID
        AND AF.BANKNAME=CRB.BANKCODE AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODSFEE'
        AND AF.ACCTNO=CI.AFACCTNO AND CI.COREBANK='Y' AND OD.FEEACR>0
        AND NOT EXISTS (
            SELECT REQ.REFCODE FROM CRBTXREQ REQ
            WHERE REQ.TRFCODE='TRFODSFEE' AND REQ.OBJNAME=l_tltx
            AND (
                 REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
                 OR (REQ.STATUS NOT IN ('E') AND REQ.TXDATE < TO_DATE(l_CURRDATE,'DD/MM/RRRR'))
                )
            AND TRUNC(REQ.REFCODE)=TRUNC(OD.ORDERID)
        )
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for order ID : ' || rec.ORDERID);

        --Neu la order cua ngay hom truoc,
        --thi phai revert lai giao dich CI truoc do
        IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
         BEGIN
             SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
             INTO l_orgreqid,l_orgtxnum,l_orgdate
             FROM CRBTXREQ
             WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

             cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

             UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
                 --RAISE errnums.E_SYSTEM_ERROR;
             WHEN OTHERS THEN
                 plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
         END;
        END IF;
        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --08   C   DUEDATE
        l_txmsg.txfields ('08').defname   := 'DUEDATE';
        l_txmsg.txfields ('08').TYPE      := 'C';
        l_txmsg.txfields ('08').VALUE     := TO_DATE(rec.DUEDATE,systemnums.C_DATE_FORMAT);

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;

        --04  ORDERID
        l_txmsg.txfields ('04').defname   := 'ORDERID';
        l_txmsg.txfields ('04').TYPE      := 'C';
        l_txmsg.txfields ('04').VALUE     := rec.ORDERID;

        --11  TXNUM
        l_txmsg.txfields ('11').defname   := 'TXNUM';
        l_txmsg.txfields ('11').TYPE      := 'C';
        l_txmsg.txfields ('11').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6666 || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_order || rec.ORDERID || ' , CK ' || rec.SYMBOL || ' , SL ' || trim(to_char(rec.EXECQTTY,'999,999,999,999,999,999,999')) || utf8nums.c_const_TLTX_TXDESC_6663_amt || trim(to_char(rec.AMOUNT,'999,999,999,999,999,999,999'))
                                        || utf8nums.c_const_TLTX_TXDESC_6663_date || TO_DATE(rec.TXDATE,'DD/MM/RRRR');

        BEGIN
            IF txpks_#6666.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6666: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmSFEETRF');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmSFEETRF');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmSFEETRF;

/*PROCEDURE pr_rmSFDTRF(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
    l_orgtxnum  varchar2(100);
    l_orgdate   varchar2(10);
    l_orgreqid  number(20,0);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmSFDTRF');
    l_tltx:='6682';

    --SELECT VARVALUE INTO l_begindate
    --FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT '0' DTTYPE,OD.TXNUM,OD.TXDATE,GETDUEDATE(OD.TXDATE,OD.CLEARCD,'000',OD.CLEARDAY) DUEDATE,CRA.TRFCODE TRFTYPE,OD.ORDERID,SB.SYMBOL,
        OD.EXECQTTY,OD.AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,AF.BANKACCTNO,CRB.BANKCODE,
        CRB.BANKCODE||':'||CRB.BANKNAME BANKNAME,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CEIL(OD.TAXSELLAMT) AMOUNT
        FROM (
           SELECT * FROM ODMAST WHERE EXECTYPE IN ('NS','MS') AND DELTD='N' AND EXECAMT>0 AND TAXSELLAMT >0
           AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
           UNION
           SELECT * FROM ODMASTHIST WHERE EXECTYPE IN ('NS','MS') AND EXECAMT>0 AND TAXSELLAMT>0
           AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
        ) OD,AFMAST AF,CFMAST CF,CIMAST CI,SECURITIES_INFO SB,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE OD.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND OD.CODEID=SB.CODEID
        AND AF.BANKNAME=CRB.BANKCODE AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODTAX'
        AND AF.ACCTNO=CI.AFACCTNO AND CI.COREBANK='Y'
        AND NOT EXISTS (
           SELECT REQ.REFCODE FROM CRBTXREQ REQ
           WHERE REQ.TRFCODE='TRFODTAX'
            AND (
                 REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
                 OR (REQ.STATUS IN ('P','A','S','C') AND REQ.TXDATE < TO_DATE(l_CURRDATE,'DD/MM/RRRR'))
                )
           AND TRUNC(REQ.REFCODE)=TRUNC(OD.TXNUM)
        )
        UNION ALL
        SELECT '1' DTTYPE,OD.TXNUM,OD.TXDATE,GETDUEDATE(OD.TXDATE,OD.CLEARCD,'000',OD.CLEARDAY) DUEDATE,CRA.TRFCODE TRFTYPE,OD.ORDERID,SB.SYMBOL,
        OD.EXECQTTY,OD.AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,AF.BANKACCTNO,CRB.BANKCODE,
        CRB.BANKCODE||':'||CRB.BANKNAME BANKNAME,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CEIL(CHD.ARIGHT) AMOUNT
        FROM (
           SELECT * FROM ODMAST WHERE EXECTYPE IN ('NS','MS') AND DELTD='N' AND EXECAMT>0 AND TAXSELLAMT >0
           AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
           UNION
           SELECT * FROM ODMASTHIST WHERE EXECTYPE IN ('NS','MS') AND EXECAMT>0 AND TAXSELLAMT>0
           AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
        ) OD,(
            SELECT * FROM STSCHD WHERE DUETYPE='RM' AND DELTD='N' AND ARIGHT>0
            UNION ALL
            SELECT * FROM STSCHDHIST WHERE DUETYPE='RM' AND DELTD='N' AND ARIGHT>0
            AND TXDATE>TO_DATE(l_begindate,'DD/MM/RRRR')
        ) CHD,AFMAST AF,CFMAST CF,CIMAST CI,SECURITIES_INFO SB,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE OD.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND OD.CODEID=SB.CODEID
        AND OD.AFACCTNO||OD.CODEID=CHD.ACCTNO AND ORGORDERID=OD.ORDERID
        AND AF.BANKNAME=CRB.BANKCODE AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODTAX'
        AND AF.ACCTNO=CI.AFACCTNO AND CI.COREBANK='Y'
        AND NOT EXISTS (
           SELECT REQ.REFCODE FROM CRBTXREQ REQ
           WHERE REQ.TRFCODE='TRFODTAX'
            AND REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
           AND TRUNC(REQ.REFCODE)=TRUNC(OD.TXNUM)
        )
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for order ID : ' || rec.ORDERID);

        --Neu la order cua ngay hom truoc,
        --thi phai revert lai giao dich CI truoc do
        IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
         BEGIN
             SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
             INTO l_orgreqid,l_orgtxnum,l_orgdate
             FROM CRBTXREQ
             WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

             cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

             UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
                 --RAISE errnums.E_SYSTEM_ERROR;
             WHEN OTHERS THEN
                 plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
         END;
        END IF;

        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --08   C   DUEDATE
        l_txmsg.txfields ('08').defname   := 'DUEDATE';
        l_txmsg.txfields ('08').TYPE      := 'C';
        l_txmsg.txfields ('08').VALUE     := TO_DATE(rec.DUEDATE,systemnums.C_DATE_FORMAT);

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;

        --31  TXNUM
        l_txmsg.txfields ('31').defname   := 'ORGTXNUM';
        l_txmsg.txfields ('31').TYPE      := 'C';
        l_txmsg.txfields ('31').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        IF rec.DTTYPE='0' THEN
            l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6682_DIV || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_order || rec.ORDERID || ' , CK : ' || rec.SYMBOL || ' , SL : ' || rec.EXECQTTY || utf8nums.c_const_TLTX_TXDESC_6663_amt || rec.AMOUNT;
        ELSE
            l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6682_RI || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_order || rec.ORDERID || ' , CK : ' || rec.SYMBOL || ' , SL : ' || rec.EXECQTTY || utf8nums.c_const_TLTX_TXDESC_6663_amt || rec.AMOUNT;
        END IF;

        BEGIN
            IF txpks_#6682.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6682: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmSFDTRF');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmSFDTRF');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmSFDTRF;*/

  PROCEDURE pr_rmSFDTRF(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
    l_orgtxnum  varchar2(100);
    l_orgdate   varchar2(10);
    l_orgreqid  number(20,0);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmSFDTRF');
    l_tltx:='6682';

    --SELECT VARVALUE INTO l_begindate
    --FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT '0' DTTYPE,OD.TXNUM,OD.TXDATE,od.cleardate DUEDATE,CRA.TRFCODE TRFTYPE,OD.ORDERID,SB.SYMBOL,
        OD.EXECQTTY,OD.AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,AF.BANKACCTNO,CRB.BANKCODE,
        CRB.BANKCODE||':'||CRB.BANKNAME BANKNAME,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CEIL(OD.TAXSELLAMT) AMOUNT
        FROM (
            /*SELECT * FROM ODMAST WHERE EXECTYPE IN ('NS','MS') AND DELTD='N' AND EXECAMT>0 AND TAXSELLAMT >0
           AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
           UNION
           SELECT * FROM ODMASTHIST WHERE EXECTYPE IN ('NS','MS') AND EXECAMT>0 AND TAXSELLAMT>0
           AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')*/
           select od.*, sts.cleardate from stschd sts, odmast od where od.orderid = sts.orgorderid
                and sts.cleardate = TO_DATE(l_begindate,'DD/MM/RRRR') and sts.duetype ='RM' and sts.deltd <> 'Y'
                AND od.EXECAMT>0 and od.TAXSELLAMT>0
        ) OD,AFMAST AF,CFMAST CF,CIMAST CI,SECURITIES_INFO SB,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE OD.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND OD.CODEID=SB.CODEID
        AND AF.BANKNAME=CRB.BANKCODE AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODTAX'
        AND AF.ACCTNO=CI.AFACCTNO AND CI.COREBANK='Y'
        AND NOT EXISTS (
           SELECT REQ.REFCODE FROM CRBTXREQ REQ
           WHERE REQ.TRFCODE='TRFODTAX'
            AND (
                 REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
                 OR (REQ.STATUS IN ('P','A','S','C') AND REQ.TXDATE < TO_DATE(l_CURRDATE,'DD/MM/RRRR'))
                )
           AND TRUNC(REQ.REFCODE)=TRUNC(OD.TXNUM)
        )
        UNION ALL
        SELECT '1' DTTYPE,OD.TXNUM,OD.TXDATE,GETDUEDATE(OD.TXDATE,OD.CLEARCD,'000',OD.CLEARDAY) DUEDATE,CRA.TRFCODE TRFTYPE,OD.ORDERID,SB.SYMBOL,
        OD.EXECQTTY,OD.AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,AF.BANKACCTNO,CRB.BANKCODE,
        CRB.BANKCODE||':'||CRB.BANKNAME BANKNAME,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CEIL(CHD.ARIGHT) AMOUNT
        FROM (
           SELECT * FROM ODMAST WHERE EXECTYPE IN ('NS','MS') AND DELTD='N' AND EXECAMT>0 AND TAXSELLAMT >0
           AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
           UNION
           SELECT * FROM ODMASTHIST WHERE EXECTYPE IN ('NS','MS') AND EXECAMT>0 AND TAXSELLAMT>0
           AND DELTD='N' AND TXDATE>=TO_DATE(l_begindate,'DD/MM/RRRR')
        ) OD,(
            SELECT * FROM STSCHD WHERE DUETYPE='RM' AND DELTD='N' AND ARIGHT>0
            UNION ALL
            SELECT * FROM STSCHDHIST WHERE DUETYPE='RM' AND DELTD='N' AND ARIGHT>0
            AND TXDATE>TO_DATE(l_begindate,'DD/MM/RRRR')
        ) CHD,AFMAST AF,CFMAST CF,CIMAST CI,SECURITIES_INFO SB,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE OD.AFACCTNO=AF.ACCTNO AND AF.CUSTID=CF.CUSTID AND OD.CODEID=SB.CODEID
        AND OD.AFACCTNO||OD.CODEID=CHD.ACCTNO AND ORGORDERID=OD.ORDERID
        AND AF.BANKNAME=CRB.BANKCODE AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODTAX'
        AND AF.ACCTNO=CI.AFACCTNO AND CI.COREBANK='Y'
        AND NOT EXISTS (
           SELECT REQ.REFCODE FROM CRBTXREQ REQ
           WHERE REQ.TRFCODE='TRFODTAX'
            AND REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
           AND TRUNC(REQ.REFCODE)=TRUNC(OD.TXNUM)
        )
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for order ID : ' || rec.ORDERID);

        --Neu la order cua ngay hom truoc,
        --thi phai revert lai giao dich CI truoc do
        IF rec.TXDATE<TO_DATE(l_CURRDATE,systemnums.C_DATE_FORMAT) THEN
         BEGIN
             SELECT REQID,OBJKEY,TO_CHAR(TXDATE,'DD/MM/RRRR')
             INTO l_orgreqid,l_orgtxnum,l_orgdate
             FROM CRBTXREQ
             WHERE REFCODE=rec.ORDERID AND TRFCODE=rec.TRFTYPE AND STATUS IN ('E');

             cspks_rmproc.pr_RollbackCITRAN(l_orgtxnum,l_orgdate,p_err_code);

             UPDATE CRBTXREQ SET STATUS='D' WHERE REQID=l_orgreqid;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 plog.error(pkgctx, 'Khong tim thay yeu cau tuong ung trong CRBTXREQ');
                 --RAISE errnums.E_SYSTEM_ERROR;
             WHEN OTHERS THEN
                 plog.error(pkgctx, 'Co qua nhieu dong trung nhau trong CRBTXREQ');
         END;
        END IF;

        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --08   C   DUEDATE
        l_txmsg.txfields ('08').defname   := 'DUEDATE';
        l_txmsg.txfields ('08').TYPE      := 'C';
        l_txmsg.txfields ('08').VALUE     := TO_DATE(rec.DUEDATE,systemnums.C_DATE_FORMAT);

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;

        --31  TXNUM
        l_txmsg.txfields ('31').defname   := 'ORGTXNUM';
        l_txmsg.txfields ('31').TYPE      := 'C';
        l_txmsg.txfields ('31').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        IF rec.DTTYPE='0' THEN
            l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6682_DIV || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_order || rec.ORDERID || ' , CK ' || rec.SYMBOL || ' , SL ' || trim(to_char(rec.EXECQTTY,'999,999,999,999,999,999,999')) || utf8nums.c_const_TLTX_TXDESC_6663_amt || trim(to_char(rec.AMOUNT,'999,999,999,999,999,999,999'))
                                            || utf8nums.c_const_TLTX_TXDESC_6663_date || TO_DATE(rec.TXDATE,'DD/MM/RRRR');
        ELSE
            l_txmsg.txfields ('30').VALUE := utf8nums.c_const_TLTX_TXDESC_6682_RI || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_order || rec.ORDERID || ' , CK ' || rec.SYMBOL || ' , SL ' || trim(to_char(rec.EXECQTTY,'999,999,999,999,999,999,999')) || utf8nums.c_const_TLTX_TXDESC_6663_amt || trim(to_char(rec.AMOUNT,'999,999,999,999,999,999,999'))
                                            || utf8nums.c_const_TLTX_TXDESC_6663_date || TO_DATE(rec.TXDATE,'DD/MM/RRRR');
        END IF;

        BEGIN
            IF txpks_#6682.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6682: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmSFDTRF');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmSFDTRF');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmSFDTRF;

PROCEDURE pr_rmRMEXCA3384(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmRMEXCA3384');
    l_tltx:='6641';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT LOG.TXNUM,LOG.TXDATE,TLF.CVALUE CAMASTID,AF.ACCTNO AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,
        CF.ADDRESS,CF.IDCODE LICENSE,CEIL(LOG.MSGAMT) AMOUNT,'TRFCAREG' TRFTYPE,AF.BANKACCTNO,CRA.REFACCTNO DESACCTNO,
        CRA.REFACCTNAME DESACCTNAME,(CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,
        CRB.BANKCODE,LOG.MSGACCT ACCTNO,TLF1.CVALUE DEST,TLF2.CVALUE SYMBOL,TLF3.NVALUE EXPRICE,TLF4.NVALUE EXQTTY
        FROM
        TLLOG LOG,TLLOGFLD TLF,TLLOGFLD TLF1,TLLOGFLD TLF2,TLLOGFLD TLF3,TLLOGFLD TLF4,AFMAST AF,
        CFMAST CF,CIMAST CI,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE AF.ACCTNO = LOG.MSGACCT AND CI.AFACCTNO = AF.ACCTNO AND AF.CUSTID=CF.CUSTID
        AND LOG.TXNUM=TLF.TXNUM AND LOG.TXDATE=TLF.TXDATE AND TLF.FLDCD='02'
        AND LOG.TXNUM=TLF1.TXNUM AND LOG.TXDATE=TLF1.TXDATE AND TLF1.FLDCD='30'
        AND LOG.TXNUM=TLF2.TXNUM AND LOG.TXDATE=TLF2.TXDATE AND TLF2.FLDCD='04'
        AND LOG.TXNUM=TLF3.TXNUM AND LOG.TXDATE=TLF3.TXDATE AND TLF3.FLDCD='05'
        AND LOG.TXNUM=TLF4.TXNUM AND LOG.TXDATE=TLF4.TXDATE AND TLF4.FLDCD='21'
        AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFCAREG'
        AND AF.BANKNAME=CRB.BANKCODE AND CI.COREBANK='Y' AND LOG.DELTD<>'Y'
        AND AF.BANKACCTNO IS NOT NULL AND LOG.TLTXCD in('3384','3394') AND LOG.MSGAMT>0
        AND NOT EXISTS (
             SELECT REQ.REFCODE FROM CRBTXREQ REQ
             WHERE REQ.TRFCODE='TRFCAREG'
             AND REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
             AND TRUNC(REQ.REFCODE)=TRUNC(LOG.TXNUM)
         )
        ORDER BY LOG.AUTOID ASC
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for txnum : ' || rec.TXNUM);
        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := ceil(rec.EXPRICE * rec.exqtty);-- rec.AMOUNT;

        --02  CATXNUM
        l_txmsg.txfields ('02').defname   := 'CATXNUM';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        --l_txmsg.txfields ('30').VALUE := rec.DEST || ' , TK : ' || rec.CUSTODYCD;
        l_txmsg.txfields ('30').VALUE := UTF8NUMS.c_const_TLTX_TXDESC_6641_3384 || REC.SYMBOL || ' ,SL ' || trim(to_char(rec.EXQTTY,'999,999,999,999,999,999,999'))
                                         || ', ' || UTF8NUMS.c_const_TLTX_TXDESC_6641_price || ' ' || trim(to_char(rec.exprice,'999,999,999,999,999,999,999'))
                                         || ', TK ' || rec.CUSTODYCD;

        BEGIN
            IF txpks_#6641.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6641: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmRMEXCA3384');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmRMEXCA3384');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmRMEXCA3384;

PROCEDURE pr_rmRMEXCA3386(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmRMEXCA3386');
    l_tltx:='6643';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT LOG.TXNUM,LOG.TXDATE,CRA.TRFCODE TRFTYPE,TLF.CVALUE CAMASTID,AF.ACCTNO AFACCTNO,CF.CUSTODYCD,
        CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,CEIL(LOG.MSGAMT*TLF1.NVALUE) AMOUNT,AF.BANKACCTNO BANKACCTNO,
        CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CRB.BANKCODE,(CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,
        LOG.MSGACCT ACCTNO,TLF2.CVALUE DEST, TLF1.NVALUE EXPRICE, TLF3.CVALUE SYMBOL, TLF4.NVALUE EXQTTY
        FROM
        TLLOG LOG,TLLOGFLD TLF,TLLOGFLD TLF1,TLLOGFLD TLF2,TLLOGFLD TLF3,TLLOGFLD TLF4,
        AFMAST AF,CFMAST CF,CIMAST CI,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE AF.ACCTNO = LOG.MSGACCT AND CI.AFACCTNO = AF.ACCTNO AND AF.CUSTID=CF.CUSTID
        AND LOG.TXNUM=TLF.TXNUM AND LOG.TXDATE=TLF.TXDATE AND TLF.FLDCD='02'
        AND LOG.TXNUM=TLF1.TXNUM AND LOG.TXDATE=TLF1.TXDATE AND TLF1.FLDCD='05'
        AND LOG.TXNUM=TLF2.TXNUM AND LOG.TXDATE=TLF2.TXDATE AND TLF2.FLDCD='30'
        AND LOG.TXNUM=TLF3.TXNUM AND LOG.TXDATE=TLF3.TXDATE AND TLF3.FLDCD='04'
        AND LOG.TXNUM=TLF4.TXNUM AND LOG.TXDATE=TLF4.TXDATE AND TLF4.FLDCD='21'

        AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFCAUNREG'
        AND AF.BANKNAME=CRB.BANKCODE AND CI.corebank='Y' AND LOG.DELTD<>'Y'
        AND AF.BANKACCTNO IS NOT NULL AND LOG.TLTXCD='3386'
        AND NOT EXISTS (
           SELECT REQ.REFCODE FROM CRBTXREQ REQ
           WHERE REQ.TRFCODE='TRFCAUNREG'
            AND REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
           AND TRUNC(REQ.REFCODE)=TRUNC(LOG.TXNUM)
        )
        ORDER BY LOG.AUTOID ASC
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for txnum : ' || rec.TXNUM);
        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;

        --02  CATXNUM
        l_txmsg.txfields ('02').defname   := 'CATXNUM';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        --l_txmsg.txfields ('30').VALUE := rec.DEST || ' , TK : ' || rec.CUSTODYCD;
        l_txmsg.txfields ('30').VALUE := UTF8NUMS.c_const_TLTX_TXDESC_6643_3386 || REC.SYMBOL || ' ,SL ' || trim(to_char(rec.EXQTTY,'999,999,999,999,999,999,999'))
                                         || ', ' || UTF8NUMS.c_const_TLTX_TXDESC_6641_price || ' ' || trim(to_char(rec.exprice,'999,999,999,999,999,999,999'))
                                         || ', TK ' || rec.CUSTODYCD;

        BEGIN
            IF txpks_#6643.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6643: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmRMEXCA3386');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmRMEXCA3386');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmRMEXCA3386;


PROCEDURE pr_rmRMEXCA3350(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmRMEXCA3350');
    l_tltx:='6643';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT LOG.TXNUM,LOG.TXDATE,LOG.TLTXCD,CRA.TRFCODE TRFTYPE,AF.ACCTNO AFACCTNO,CF.CUSTODYCD,
        CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,
        CEIL(NVL(TLF2.NVALUE,0)) AMOUNT,--CEIL(LOG.MSGAMT) AMOUNT,
        CEIL(NVL(TLF1.NVALUE,0)) DUTYAMT,AF.BANKACCTNO,
        CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,
        CRB.BANKCODE,(CRB.BANKNAME || ':' || CRB.BANKNAME) BANKNAME,
        LOG.MSGACCT ACCTNO,TLF.CVALUE DEST
        FROM
        TLLOG LOG,TLLOGFLD TLF,TLLOGFLD TLF1,TLLOGFLD TLF2,AFMAST AF,CFMAST CF,CIMAST CI,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE AF.ACCTNO = LOG.MSGACCT AND CI.AFACCTNO = AF.ACCTNO AND AF.CUSTID=CF.CUSTID
        AND LOG.TXNUM=TLF.TXNUM AND LOG.TXDATE=TLF.TXDATE AND TLF.FLDCD='30'
        AND LOG.TXNUM=TLF1.TXNUM AND LOG.TXDATE=TLF1.TXDATE AND TLF1.FLDCD='20' --Thue
        AND LOG.TXNUM=TLF2.TXNUM AND LOG.TXDATE=TLF2.TXDATE AND TLF2.FLDCD='10' --Thue
        AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFCACASH' AND AF.BANKNAME=CRB.BANKCODE
        AND CI.corebank='Y' AND LOG.DELTD<>'Y'
        AND AF.BANKACCTNO IS NOT NULL AND LOG.TLTXCD IN ('3350','3354')
        AND NOT EXISTS (
          SELECT REQ.REFCODE FROM CRBTXREQ REQ
          WHERE REQ.TRFCODE='TRFCACASH'
          AND REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
          AND TRUNC(REQ.REFCODE)=TRUNC(LOG.TXNUM)
        )
        ORDER BY LOG.AUTOID ASC
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for txnum : ' || rec.TXNUM);
        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        IF rec.TLTXCD='3350' THEN
            l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;
        ELSE
            l_txmsg.txfields ('10').VALUE     := rec.AMOUNT - rec.DUTYAMT;
        END IF;

        --02  CATXNUM
        l_txmsg.txfields ('02').defname   := 'CATXNUM';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE := rec.DEST || ', TK ' || rec.CUSTODYCD;

        BEGIN
            IF txpks_#6643.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6643: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmRMEXCA3350');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmRMEXCA3350');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmRMEXCA3350;

PROCEDURE pr_rmRMEXCA3350DF(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmRMEXCA3350DF');
    l_tltx:='6643';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT LOG.TXNUM,LOG.TXDATE,AF.ACCTNO AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,
        CEIL(LOG.MSGAMT) AMOUNT,CEIL(TLF1.NVALUE) DUTYAMT,CRA.TRFCODE TRFTYPE,CRB.BANKCODE,AF.BANKACCTNO,
        CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,(CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,
        LOG.MSGACCT ACCTNO,TLF2.CVALUE DEST
        FROM
        TLLOG LOG,TLLOGFLD TLF1,TLLOGFLD TLF2,AFMAST AF,CFMAST CF,CIMAST CI,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE AF.ACCTNO = LOG.MSGACCT AND CI.AFACCTNO = AF.ACCTNO AND AF.CUSTID=CF.CUSTID
        AND LOG.TXNUM=TLF1.TXNUM AND LOG.TXDATE=TLF1.TXDATE AND TLF1.FLDCD='20'
        AND LOG.TXNUM=TLF2.TXNUM AND LOG.TXDATE=TLF2.TXDATE AND TLF2.FLDCD='30'
        AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFCATAX'
        AND AF.BANKNAME=CRB.BANKCODE AND CI.corebank='Y' AND LOG.DELTD<>'Y'
        AND AF.BANKACCTNO IS NOT NULL AND LOG.MSGAMT > 0 AND LOG.TLTXCD IN ('3350') AND TLF1.NVALUE > 0
        AND NOT EXISTS (
            SELECT REQ.REFCODE FROM CRBTXREQ REQ
            WHERE REQ.TRFCODE='TRFCATAX'
            AND REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
            AND TRUNC(REQ.REFCODE)=TRUNC(LOG.TXNUM)
        )
        ORDER BY LOG.AUTOID ASC
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for txnum : ' || rec.TXNUM);
        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.DUTYAMT;

        --02  CATXNUM
        l_txmsg.txfields ('02').defname   := 'CATXNUM';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE :=  utf8nums.c_const_TLTX_TXDESC_6643 || rec.DEST || ', TK ' || rec.CUSTODYCD;

        BEGIN
            IF txpks_#6643.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6643: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmRMEXCA3350DF');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmRMEXCA3350DF');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmRMEXCA3350DF;

PROCEDURE pr_rmRMEX8879(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmRMEX8879');
    l_tltx:='6644';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT LOG.TXNUM,LOG.TXDATE,CRA.TRFCODE TRFTYPE,CF.CUSTODYCD,AF.ACCTNO AFACCTNO,CF.FULLNAME,
        CF.ADDRESS,CF.IDCODE LICENSE,CEIL(TLF.NVALUE*TLF1.NVALUE) AMOUNT,CEIL(TLF2.NVALUE) DUTYAMT,
        TLF3.NVALUE FEEAMT,AF.BANKACCTNO,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CRB.BANKCODE,
        (CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,LOG.MSGACCT ACCTNO, SB.SYMBOL, TLF6.NVALUE QTTY
        FROM
        TLLOG LOG,TLLOGFLD TLF,TLLOGFLD TLF1,TLLOGFLD TLF2,TLLOGFLD TLF3,TLLOGFLD TLF4,TLLOGFLD TLF5,TLLOGFLD TLF6,
        SBSECURITIES SB,
        AFMAST AF,CFMAST CF,CIMAST CI,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE AF.ACCTNO = TLF4.CVALUE AND CI.AFACCTNO = AF.ACCTNO AND AF.CUSTID=CF.CUSTID
        AND LOG.TXNUM=TLF.TXNUM AND LOG.TXDATE=TLF.TXDATE AND TLF.FLDCD='10'
        AND LOG.TXNUM=TLF1.TXNUM AND LOG.TXDATE=TLF1.TXDATE AND TLF1.FLDCD='11'
        AND LOG.TXNUM=TLF2.TXNUM AND LOG.TXDATE=TLF2.TXDATE AND TLF2.FLDCD='14'
        AND LOG.TXNUM=TLF3.TXNUM AND LOG.TXDATE=TLF3.TXDATE AND TLF3.FLDCD='22'
        AND LOG.TXNUM=TLF4.TXNUM AND LOG.TXDATE=TLF4.TXDATE AND TLF4.FLDCD='02'
        AND LOG.TXNUM=TLF5.TXNUM AND LOG.TXDATE=TLF5.TXDATE AND TLF5.FLDCD='01'
        AND TLF5.CVALUE= SB.CODEID
        AND LOG.TXNUM=TLF6.TXNUM AND LOG.TXDATE=TLF6.TXDATE AND TLF6.FLDCD='10'
        AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODSRTL'
        AND AF.BANKNAME=CRB.BANKCODE AND LOG.TLTXCD ='8894'
        AND CI.corebank='Y' AND LOG.DELTD<>'Y'
        AND NOT EXISTS (
           SELECT REQ.REFCODE FROM CRBTXREQ REQ
           WHERE REQ.TRFCODE='TRFODSRTL'
             AND REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
           AND TRUNC(REQ.REFCODE)=TRUNC(LOG.TXNUM)
        )
        ORDER BY LOG.AUTOID ASC
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for txnum : ' || rec.TXNUM);
        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AMOUNT - rec.FEEAMT;

        --02  CATXNUM
        l_txmsg.txfields ('02').defname   := 'CATXNUM';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE :=  utf8nums.c_const_TLTX_TXDESC_6644 || rec.symbol || ', SL ' || rec.qtty || utf8nums.c_const_TLTX_TXDESC_6663_amt ||  (rec.AMOUNT - rec.FEEAMT)
                                          || ', TK '  || rec.CUSTODYCD;

        BEGIN
            IF txpks_#6644.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6644: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmRMEX8879');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmRMEX8879');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmRMEX8879;

  PROCEDURE pr_rmRMEX8879DF(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    l_EN_Desc varchar2(1000);
    l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmRMEX8879DF');
    l_tltx:='6644';

    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');

    for rec in
    (
        SELECT LOG.TXNUM,LOG.TXDATE,CRA.TRFCODE TRFTYPE,CF.CUSTODYCD,AF.ACCTNO AFACCTNO,CF.FULLNAME,
        CF.ADDRESS,CF.IDCODE LICENSE,CEIL(TLF.NVALUE*TLF1.NVALUE) AMOUNT,CEIL(TLF2.NVALUE) DUTYAMT,
        TLF3.NVALUE FEEAMT,AF.BANKACCTNO,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,
        CRB.BANKCODE,(CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,LOG.MSGACCT ACCTNO, SB.SYMBOL, TLF6.NVALUE QTTY
        FROM
        TLLOG LOG,TLLOGFLD TLF,TLLOGFLD TLF1,TLLOGFLD TLF2,TLLOGFLD TLF3,TLLOGFLD TLF4,TLLOGFLD TLF5,TLLOGFLD TLF6,
        SBSECURITIES SB,
        AFMAST AF,CFMAST CF,CIMAST CI,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE AF.ACCTNO = TLF4.CVALUE AND CI.AFACCTNO = AF.ACCTNO AND AF.CUSTID=CF.CUSTID
        AND LOG.TXNUM=TLF.TXNUM AND LOG.TXDATE=TLF.TXDATE AND TLF.FLDCD='10'
        AND LOG.TXNUM=TLF1.TXNUM AND LOG.TXDATE=TLF1.TXDATE AND TLF1.FLDCD='11'
        AND LOG.TXNUM=TLF2.TXNUM AND LOG.TXDATE=TLF2.TXDATE AND TLF2.FLDCD='14'
        AND LOG.TXNUM=TLF3.TXNUM AND LOG.TXDATE=TLF3.TXDATE AND TLF3.FLDCD='22'
        AND LOG.TXNUM=TLF4.TXNUM AND LOG.TXDATE=TLF4.TXDATE AND TLF4.FLDCD='02'
        AND LOG.TXNUM=TLF5.TXNUM AND LOG.TXDATE=TLF5.TXDATE AND TLF5.FLDCD='01'
        AND LOG.TXNUM=TLF6.TXNUM AND LOG.TXDATE=TLF6.TXDATE AND TLF6.FLDCD='10'
        and TLF5.CVALUE=SB.CODEID
        AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFODSRTDF'
        AND AF.BANKNAME=CRB.BANKCODE AND LOG.TLTXCD ='8894'
        AND CI.corebank='Y' AND LOG.DELTD<>'Y'
        AND NOT EXISTS (
          SELECT REQ.REFCODE FROM CRBTXREQ REQ
          WHERE REQ.TRFCODE='TRFODSRTDF'
             AND REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
          AND TRUNC(REQ.REFCODE)=TRUNC(LOG.TXNUM)
        )
        ORDER BY LOG.AUTOID ASC
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for txnum : ' || rec.TXNUM);
        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.DUTYAMT;

        --02  CATXNUM
        l_txmsg.txfields ('02').defname   := 'CATXNUM';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        --l_txmsg.txfields ('30').VALUE :=  utf8nums.c_const_TLTX_TXDESC_6644_VAT || rec.CUSTODYCD || utf8nums.c_const_TLTX_TXDESC_6663_amt || rec.DUTYAMT;
        l_txmsg.txfields ('30').VALUE :=  utf8nums.c_const_TLTX_TXDESC_6644_VAT || rec.symbol || ', SL ' || rec.qtty || utf8nums.c_const_TLTX_TXDESC_6663_amt ||  rec.DUTYAMT
                                          || ', TK '  || rec.CUSTODYCD;
        BEGIN
            IF txpks_#6644.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6644: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmRMEX8879DF');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmRMEX8879DF');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmRMEX8879DF;

PROCEDURE pr_rmRMEXSEDPFEE(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS

    l_txmsg tx.msg_rectype;
    l_CURRDATE varchar2(20);
    l_Desc varchar2(1000);
    --l_EN_Desc varchar2(1000);
    --l_OrgDesc varchar2(1000);
    l_EN_OrgDesc varchar2(1000);
    l_err_param varchar2(300);
    l_tltx  varchar2(4);
    l_begindate varchar2(10);
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmRMEXSEDPFEE');


    /*SELECT VARVALUE INTO l_begindate
    FROM SYSVAR WHERE VARNAME='SYSTEMSTARTDATE';*/

    --SELECT TXDESC,EN_TXDESC into l_OrgDesc, l_EN_OrgDesc FROM  TLTX WHERE TLTXCD=l_tltx;
     SELECT varvalue
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_begindate:=l_CURRDATE;
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.c_system_userid;
    plog.debug(pkgctx, 'l_txmsg.tlid' || l_txmsg.tlid);
    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := txnums.c_deltd_txnormal;
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);

    l_tltx:='6641';
    l_txmsg.tltxcd:=l_tltx;

    plog.debug(pkgctx, 'Begin loop');
    --Bang ke cho phi luu ky
    for rec in
    (
        SELECT log.tltxcd,LOG.TXNUM,LOG.TXDATE,AF.ACCTNO AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,
        CEIL(LOG.MSGAMT) AMOUNT,CRA.TRFCODE TRFTYPE,CRB.BANKCODE,AF.BANKACCTNO,CRA.REFACCTNO DESACCTNO,
        CRA.REFACCTNAME DESACCTNAME,(CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,LOG.MSGACCT ACCTNO, LOG.TXDESC
        FROM
        TLLOG LOG,AFMAST AF,CFMAST CF,CIMAST CI,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE AF.ACCTNO = LOG.MSGACCT AND CI.AFACCTNO = AF.ACCTNO AND AF.CUSTID=CF.CUSTID
        AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFSEFEE'
        AND AF.BANKNAME=CRB.BANKCODE AND CI.corebank='Y' AND LOG.DELTD<>'Y'
        AND AF.BANKACCTNO IS NOT NULL AND LOG.MSGAMT > 0 AND LOG.TLTXCD IN ('1180','1182') AND LOG.MSGAMT > 0
        AND NOT EXISTS (
         SELECT REQ.REFCODE FROM CRBTXREQ REQ
         WHERE REQ.TRFCODE='TRFSEFEE'
         AND REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
         AND TRUNC(REQ.REFCODE)=TRUNC(LOG.TXNUM)
        )
        UNION ALL
        SELECT log.tltxcd,LOG.TXNUM,LOG.TXDATE,AF.ACCTNO AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,
        CEIL(FLD1.NVALUE+FLD2.NVALUE+FLD3.NVALUE) AMOUNT,CRA.TRFCODE TRFTYPE,CRB.BANKCODE,AF.BANKACCTNO,CRA.REFACCTNO DESACCTNO,
        CRA.REFACCTNAME DESACCTNAME,(CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,LOG.MSGACCT ACCTNO, LOG.TXDESC
        FROM
        TLLOG LOG,TLLOGFLD FLD1,TLLOGFLD FLD2,TLLOGFLD FLD3,AFMAST AF,CFMAST CF,CIMAST CI,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE AF.ACCTNO = LOG.MSGACCT AND CI.AFACCTNO = AF.ACCTNO AND AF.CUSTID=CF.CUSTID
        AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFSEFEE'
        AND AF.BANKNAME=CRB.BANKCODE AND CI.corebank='Y' AND LOG.DELTD<>'Y'
        AND FLD1.TXNUM=LOG.TXNUM AND FLD1.TXDATE=LOG.TXDATE AND FLD1.FLDCD='66'
        AND FLD2.TXNUM=LOG.TXNUM AND FLD2.TXDATE=LOG.TXDATE AND FLD2.FLDCD='65'
        AND FLD3.TXNUM=LOG.TXNUM AND FLD3.TXDATE=LOG.TXDATE AND FLD3.FLDCD='17'
        AND AF.BANKACCTNO IS NOT NULL
        AND LOG.TLTXCD IN ('0088') AND (FLD1.NVALUE+FLD2.NVALUE+FLD3.NVALUE) > 0
        AND NOT EXISTS (
        SELECT REQ.REFCODE FROM CRBTXREQ REQ
        WHERE REQ.TRFCODE='TRFSEFEE'
        AND REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
        AND TRUNC(REQ.REFCODE)=TRUNC(LOG.TXNUM)
        )
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for txnum : ' || rec.TXNUM);
        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;

        --02  CATXNUM
        l_txmsg.txfields ('02').defname   := 'CATXNUM';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        if rec.tltxcd='0088' then
            l_txmsg.txfields ('30').VALUE     := utf8nums.c_const_TLTX_TXDESC_6641 || rec.CUSTODYCD;
        ELSE
            l_txmsg.txfields ('30').VALUE     := REC.TXDESC;
        end if;
        BEGIN
            IF txpks_#6641.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6641: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    --Bang ke cho phi chuyen khoan dong tai khoan
    for rec in
    (
        SELECT LOG.TXNUM,LOG.TXDATE,AF.ACCTNO AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,
        CEIL(FLD4.NVALUE) AMOUNT,CRA.TRFCODE TRFTYPE,CRB.BANKCODE,AF.BANKACCTNO,CRA.REFACCTNO DESACCTNO,
        CRA.REFACCTNAME DESACCTNAME,(CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,LOG.MSGACCT ACCTNO
        FROM
        TLLOG LOG,TLLOGFLD FLD4,AFMAST AF,CFMAST CF,CIMAST CI,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE AF.ACCTNO = LOG.MSGACCT AND CI.AFACCTNO = AF.ACCTNO AND AF.CUSTID=CF.CUSTID
        AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFSECLSFEE'
        AND AF.BANKNAME=CRB.BANKCODE AND CI.corebank='Y' AND LOG.DELTD<>'Y'
        AND FLD4.TXNUM=LOG.TXNUM AND FLD4.TXDATE=LOG.TXDATE AND FLD4.FLDCD='68'
        AND AF.BANKACCTNO IS NOT NULL
        AND LOG.TLTXCD IN ('0088') AND (FLD4.NVALUE) > 0
        AND NOT EXISTS (
        SELECT REQ.REFCODE FROM CRBTXREQ REQ
        WHERE REQ.TRFCODE='TRFSECLSFEE'
        AND REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
        AND TRUNC(REQ.REFCODE)=TRUNC(LOG.TXNUM)
        )
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for txnum : ' || rec.TXNUM);
        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;

        --02  CATXNUM
        l_txmsg.txfields ('02').defname   := 'CATXNUM';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE     := utf8nums.c_const_TLTX_TXDESC_6641_2;

        BEGIN
            IF txpks_#6641.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6641: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec


     --Bang ke hoan tra ung truoc tien ban
    for rec in
    (
        SELECT LOG.TXNUM,LOG.TXDATE,AF.ACCTNO AFACCTNO,CF.CUSTODYCD,CF.FULLNAME,CF.ADDRESS,CF.IDCODE LICENSE,
        CEIL(FLD2.NVALUE) AMOUNT,CEIL(FLD4.NVALUE) FEEAMT,CRA.TRFCODE TRFTYPE,CRB.BANKCODE,AF.BANKACCTNO,CRA.REFACCTNO DESACCTNO,
        CRA.REFACCTNAME DESACCTNAME,(CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,LOG.MSGACCT ACCTNO
        FROM
        TLLOG LOG,TLLOGFLD FLD4,TLLOGFLD FLD2,TLLOGFLD FLD1,AFMAST AF,CFMAST CF,CIMAST CI,CRBDEFACCT CRA,CRBDEFBANK CRB
        WHERE AF.ACCTNO = FLD1.CVALUE AND CI.AFACCTNO = AF.ACCTNO AND AF.CUSTID=CF.CUSTID
        AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFRLSADV'
        AND AF.BANKNAME=CRB.BANKCODE AND CI.corebank='Y' AND LOG.DELTD<>'Y'
        AND FLD4.TXNUM=LOG.TXNUM AND FLD4.TXDATE=LOG.TXDATE AND FLD4.FLDCD='17'
        AND FLD2.TXNUM=LOG.TXNUM AND FLD2.TXDATE=LOG.TXDATE AND FLD2.FLDCD='16'
        AND FLD1.TXNUM=LOG.TXNUM AND FLD1.TXDATE=LOG.TXDATE AND FLD1.FLDCD='03' --So tieu khoan
        AND AF.BANKACCTNO IS NOT NULL
        AND LOG.TLTXCD IN ('8842') AND (FLD4.NVALUE) +  (FLD2.NVALUE)> 0
        AND NOT EXISTS (
        SELECT REQ.REFCODE FROM CRBTXREQ REQ
        WHERE REQ.TRFCODE='TRFRLSADV'
        AND REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
        AND TRUNC(REQ.REFCODE)=TRUNC(LOG.TXNUM)
        )
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for txnum : ' || rec.TXNUM);
        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AMOUNT-rec.FEEAMT;

        --02  CATXNUM
        l_txmsg.txfields ('02').defname   := 'CATXNUM';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE     := utf8nums.c_const_TLTX_TXDESC_6641_8842 || rec.CUSTODYCD;

        BEGIN
            IF txpks_#6641.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6641: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec

    --Cho truong hop hoan phi, hoan thue
    l_tltx:='6644';
    l_txmsg.tltxcd:=l_tltx;
    for rec in
    (
        --Hoan thue
        select * from (
            SELECT LOG.TLTXCD,LOG.TXNUM,LOG.TXDATE,CRA.TRFCODE TRFTYPE,CF.CUSTODYCD,AF.ACCTNO AFACCTNO,CF.FULLNAME,
            CF.ADDRESS,CF.IDCODE LICENSE,CEIL(TLF.NVALUE) AMOUNT,
            AF.BANKACCTNO,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CRB.BANKCODE,
            (CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,LOG.MSGACCT ACCTNO
            FROM
            TLLOG LOG,TLLOGFLD TLF,
            AFMAST AF,CFMAST CF,CIMAST CI,CRBDEFACCT CRA,CRBDEFBANK CRB
            WHERE AF.ACCTNO = LOG.MSGACCT AND CI.AFACCTNO = AF.ACCTNO AND AF.CUSTID=CF.CUSTID
            AND LOG.TXNUM=TLF.TXNUM AND LOG.TXDATE=TLF.TXDATE AND TLF.FLDCD='10'
            AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFRLSTAX'
            AND AF.BANKNAME=CRB.BANKCODE AND LOG.TLTXCD in ('1137')
            AND CI.corebank='Y' AND LOG.DELTD<>'Y'
            AND NOT EXISTS (
               SELECT REQ.REFCODE FROM CRBTXREQ REQ
               WHERE REQ.TRFCODE='TRFRLSTAX'
                 AND REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
               AND TRUNC(REQ.REFCODE)=TRUNC(LOG.TXNUM)
            )


            UNION
            --Hoan phi
            SELECT LOG.TLTXCD,LOG.TXNUM,LOG.TXDATE,CRA.TRFCODE TRFTYPE,CF.CUSTODYCD,AF.ACCTNO AFACCTNO,CF.FULLNAME,
            CF.ADDRESS,CF.IDCODE LICENSE,CEIL(TLF.NVALUE) AMOUNT,
            AF.BANKACCTNO,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CRB.BANKCODE,
            (CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,LOG.MSGACCT ACCTNO
            FROM
            TLLOG LOG,TLLOGFLD TLF,
            AFMAST AF,CFMAST CF,CIMAST CI,CRBDEFACCT CRA,CRBDEFBANK CRB
            WHERE AF.ACCTNO = LOG.MSGACCT AND CI.AFACCTNO = AF.ACCTNO AND AF.CUSTID=CF.CUSTID
            AND LOG.TXNUM=TLF.TXNUM AND LOG.TXDATE=TLF.TXDATE AND TLF.FLDCD='10'
            AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFRLSFEE'
            AND AF.BANKNAME=CRB.BANKCODE AND LOG.TLTXCD in ('1138')
            AND CI.corebank='Y' AND LOG.DELTD<>'Y'
            AND NOT EXISTS (
               SELECT REQ.REFCODE FROM CRBTXREQ REQ
               WHERE REQ.TRFCODE='TRFRLSFEE'
                 AND REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
               AND TRUNC(REQ.REFCODE)=TRUNC(LOG.TXNUM)
            )
        ) order by txnum
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for txnum : ' || rec.TXNUM);
        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;

        --02  CATXNUM
        l_txmsg.txfields ('02').defname   := 'CATXNUM';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        if rec.tltxcd ='1137' then
            l_txmsg.txfields ('30').VALUE :=  utf8nums.c_const_TLTX_TXDESC_6644_TAX || rec.CUSTODYCD;
        elsif rec.tltxcd ='1138' then
            l_txmsg.txfields ('30').VALUE :=  utf8nums.c_const_TLTX_TXDESC_6644_FEE || rec.CUSTODYCD;
        else
            l_txmsg.txfields ('30').VALUE :=  utf8nums.c_const_TLTX_TXDESC_6644 || rec.CUSTODYCD;
        end if;


        BEGIN
            IF txpks_#6644.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6644: ' || p_err_code
               );
               ROLLBACK;
               RETURN;
            END IF;
        END;
    end loop; -- rec


     --Cho truong hop hoan tien sua loi giao dich lenh mua
    l_tltx:='6644';
    l_txmsg.tltxcd:=l_tltx;
    for rec in
    (
        select * from (
        SELECT LOG.TLTXCD,LOG.TXNUM,LOG.TXDATE,CRA.TRFCODE TRFTYPE,CF.CUSTODYCD,AF.ACCTNO AFACCTNO,CF.FULLNAME,
            CF.ADDRESS,CF.IDCODE LICENSE,CEIL(log.Namt) AMOUNT,
            AF.BANKACCTNO,CRA.REFACCTNO DESACCTNO,CRA.REFACCTNAME DESACCTNAME,CRB.BANKCODE,
            (CRB.BANKCODE || ':' || CRB.BANKNAME) BANKNAME,LOG.MSGACCT ACCTNO
            FROM
            (select log.txnum, log.txdate, log.msgacct,max(acctno) acctno, log.tltxcd, sum(tr.namt) namt
                from tllog log, citran tr, apptx tx where log.tltxcd in ('8848','8849')
                and log.txnum= tr.txnum and log.txdate = tr.txdate
                and tr.txcd = tx.txcd and tx.field ='BALANCE'
                and tx.apptype ='CI' and TXTYPE='C' AND LOG.DELTD<>'Y'
                group by log.txnum, log.txdate, log.msgacct,log.tltxcd) log,
            AFMAST AF,CFMAST CF,CIMAST CI,CRBDEFACCT CRA,CRBDEFBANK CRB
            WHERE AF.ACCTNO = LOG.acctno AND CI.AFACCTNO = AF.ACCTNO AND AF.CUSTID=CF.CUSTID
            AND AF.BANKNAME=CRA.REFBANK AND CRA.TRFCODE='TRFRLSBUY'
            AND AF.BANKNAME=CRB.BANKCODE AND LOG.TLTXCD in ('8848','8849')
            AND CI.corebank='Y'
            AND NOT EXISTS (
               SELECT REQ.REFCODE FROM CRBTXREQ REQ
               WHERE REQ.TRFCODE='TRFRLSBUY'
                 AND REQ.TXDATE=TO_DATE(l_CURRDATE,'DD/MM/RRRR')
               AND TRUNC(REQ.REFCODE)=TRUNC(LOG.TXNUM)
            )

        ) order by txnum
    )
    loop -- rec
        plog.debug(pkgctx, 'Loop for txnum : ' || rec.TXNUM);
        --set txnum
        SELECT systemnums.C_BATCH_PREFIXED
                             || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
                      INTO l_txmsg.txnum
                      FROM DUAL;
        l_txmsg.brid        := substr(rec.AFACCTNO,1,4);

        --Set cac field giao dich
        --06   C   TRFTYPE
        l_txmsg.txfields ('06').defname   := 'TRFTYPE';
        l_txmsg.txfields ('06').TYPE      := 'C';
        l_txmsg.txfields ('06').VALUE     := rec.TRFTYPE;

        --03  SECACCOUNT
        l_txmsg.txfields ('03').defname   := 'SECACCOUNT';
        l_txmsg.txfields ('03').TYPE      := 'C';
        l_txmsg.txfields ('03').VALUE     := rec.AFACCTNO;

        --90  CUSTNAME
        l_txmsg.txfields ('90').defname   := 'CUSTNAME';
        l_txmsg.txfields ('90').TYPE      := 'C';
        l_txmsg.txfields ('90').VALUE     := rec.FULLNAME;

        --91  ADDRESS
        l_txmsg.txfields ('91').defname   := 'ADDRESS';
        l_txmsg.txfields ('91').TYPE      := 'C';
        l_txmsg.txfields ('91').VALUE     := rec.ADDRESS;

        --92  LICENSE
        l_txmsg.txfields ('92').defname   := 'LICENSE';
        l_txmsg.txfields ('92').TYPE      := 'C';
        l_txmsg.txfields ('92').VALUE     := rec.LICENSE;

        --93  BANKACCTNO
        l_txmsg.txfields ('93').defname   := 'BANKACCTNO';
        l_txmsg.txfields ('93').TYPE      := 'C';
        l_txmsg.txfields ('93').VALUE     := rec.BANKACCTNO;

        --05  DESACCTNO
        l_txmsg.txfields ('05').defname   := 'DESACCTNO';
        l_txmsg.txfields ('05').TYPE      := 'C';
        l_txmsg.txfields ('05').VALUE     := rec.DESACCTNO;

        --07  DESACCTNAME
        l_txmsg.txfields ('07').defname   := 'DESACCTNAME';
        l_txmsg.txfields ('07').TYPE      := 'C';
        l_txmsg.txfields ('07').VALUE     := rec.DESACCTNAME;

        --94  BANKNAME
        l_txmsg.txfields ('94').defname   := 'BANKNAME';
        l_txmsg.txfields ('94').TYPE      := 'C';
        l_txmsg.txfields ('94').VALUE     := rec.BANKNAME;

        --95  BANKQUE
        l_txmsg.txfields ('95').defname   := 'BANKQUE';
        l_txmsg.txfields ('95').TYPE      := 'C';
        l_txmsg.txfields ('95').VALUE     := rec.BANKCODE;

        --10  AMOUNT
        l_txmsg.txfields ('10').defname   := 'AMOUNT';
        l_txmsg.txfields ('10').TYPE      := 'N';
        l_txmsg.txfields ('10').VALUE     := rec.AMOUNT;

        --02  CATXNUM
        l_txmsg.txfields ('02').defname   := 'CATXNUM';
        l_txmsg.txfields ('02').TYPE      := 'C';
        l_txmsg.txfields ('02').VALUE     := rec.TXNUM;

        --30   C   DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').VALUE :=  utf8nums.c_const_TLTX_TXDESC_6644_BUY || rec.CUSTODYCD;



        BEGIN
            IF txpks_#6644.fn_batchtxprocess (l_txmsg,
                                             p_err_code,
                                             l_err_param
               ) <> systemnums.c_success
            THEN
               plog.error (pkgctx,
                           'got error 6644: ' || p_err_code
               );
               ROLLBACK;

               RETURN;
            END IF;
        END;
    end loop; -- rec

    p_err_code:=0;
    plog.setendsection(pkgctx, 'pr_rmRMEXSEDPFEE');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmRMEXSEDPFEE');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmRMEXSEDPFEE;


  PROCEDURE pr_rmRMEODRPT(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS
    l_txmsg tx.msg_rectype;
  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmRMEODRPT');

    cspks_rmproc.pr_createcrbtxreq(p_err_code);

    plog.setendsection(pkgctx, 'pr_rmRMEODRPT');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmRMEODRPT');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmRMEODRPT;
--End


--begin chaunh
PROCEDURE pr_rmMSBAUTOTRANS(p_bchmdl varchar,p_err_code  OUT varchar2)
  IS
      l_txmsg tx.msg_rectype;
      l_CURRDATE date;
      v_strCURRDATE varchar2(20);
      l_err_param varchar2(300);
      v_strbankacctno varchar2(300);
      v_fullnameBank varchar2(300);
      v_GLmap varchar2(300);
      v_BANKACCNAME varchar2(300);
      v_POTXNUM varchar2(100);
      v_strREFID varchar2(100);
      v_strAutoID varchar2(100);
      v_strBANKID varchar2(100);

  BEGIN
    plog.setbeginsection(pkgctx, 'pr_rmMSBAUTOTRANS');


    SELECT TO_DATE (varvalue, systemnums.c_date_format)
               INTO l_CURRDATE
               FROM sysvar
               WHERE grname = 'SYSTEM' AND varname = 'CURRDATE';
    l_txmsg.msgtype:='T';
    l_txmsg.local:='N';
    l_txmsg.tlid        := systemnums.C_BATCH_BRID;

    SELECT SYS_CONTEXT ('USERENV', 'HOST'),
             SYS_CONTEXT ('USERENV', 'IP_ADDRESS', 15)
      INTO l_txmsg.wsname, l_txmsg.ipaddress
    FROM DUAL;
    l_txmsg.off_line    := 'N';
    l_txmsg.deltd       := 'N';
    l_txmsg.txstatus    := txstatusnums.c_txcompleted;
    l_txmsg.msgsts      := '0';
    l_txmsg.ovrsts      := '0';
    l_txmsg.batchname   := p_bchmdl;
    l_txmsg.txdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.busdate:=to_date(l_CURRDATE,systemnums.c_date_format);
    l_txmsg.tltxcd:= '1101';

    plog.debug(pkgctx, 'Begin loop');

    for rec in
        (
            select m.cusname benefcusname, cf.custodycd, cf.idcode LICENSE, cf.idplace, cf.iddate
            ,ci.acctno, cf.custid, cf.address, m.bankid , ci.balance , bi.full_name benefbank, m.bankacctno benefacct
           -- ,'chuyen tien tu dong sang MSB ' description,
             ,'QSDCN_'||ci.acctno||'/'||m.cusname||'/'||m.bankacctno description, --format: QSDCN_  la co dinh
             br.full_name br_fullname, br.address br_address, least(getbaldefovd(CI.ACCTNO),ci.balance) BALDEFOVD
            , m.bankorgno bank_org_no
            from cimast ci, msbbankrequest_log m, cfmast cf, afmast af,
                bank_info bi, bank_branch_info br
            where ci.acctno = m.cusacctno and cf.custodycd = m.custodycd
            and bi.bank_no = '302' --chi chuyen sang MSB
            and bi.bank_no = br.bank_no and af.status = 'A'  --trang thai tieu khoan phai hoat dong
            and bi.bank_no ||'.'||br.sb_branch_code = m.bankid and  bi.bank_no||'.'||br.org_no = m.bankorgno
            and ci.acctno = af.acctno and af.corebank <> 'Y' --khong chuyen tien neu la tai khoan corebank
            and m.bank_status = 'C' --trang thai ngan hang: hoan tat
            and m.status = 'A' -- trang thai tai khoan hoat dong
            and least(getbaldefovd(CI.ACCTNO),ci.balance) >= 1 --so du toi thieu de chuyen sang NH la 1
        )

    loop


             SELECT systemnums.C_BATCH_PREFIXED
                     || LPAD (seq_BATCHTXNUM.NEXTVAL, 8, '0')
              INTO l_txmsg.txnum
              FROM DUAL;
              l_txmsg.brid        := substr(rec.acctno,1,4);

              --Set cac field giao dich
              l_txmsg.txfields ('00').defname   := 'AUTOID';
              l_txmsg.txfields ('00').TYPE      := 'C';
              l_txmsg.txfields ('00').VALUE     := '';
              --03   ACCTNO          C
              l_txmsg.txfields ('03').defname   := 'ACCTNO';
              l_txmsg.txfields ('03').TYPE      := 'C';
              l_txmsg.txfields ('03').VALUE     := rec.acctno;
              --05   BANKID          C
              l_txmsg.txfields ('05').defname   := 'BANKID';
              l_txmsg.txfields ('05').TYPE      := 'C';
              l_txmsg.txfields ('05').VALUE     := rec.bankid;
              --09   IORO            C
              l_txmsg.txfields ('09').defname   := 'IORO';
              l_txmsg.txfields ('09').TYPE      := 'C';
              l_txmsg.txfields ('09').VALUE     := '0';
              --10   AMT          N
              l_txmsg.txfields ('10').defname   := 'AMT';
              l_txmsg.txfields ('10').TYPE      := 'N';
              l_txmsg.txfields ('10').VALUE     := rec.BALDEFOVD;
              --11   FEEAMT          N
              l_txmsg.txfields ('15').defname   := 'FEEAMT';
              l_txmsg.txfields ('15').TYPE      := 'N';
              l_txmsg.txfields ('15').VALUE     := 0;
              --12   VATAMT          N
              l_txmsg.txfields ('16').defname   := 'TOTALAMT';
              l_txmsg.txfields ('16').TYPE      := 'N';
              l_txmsg.txfields ('16').VALUE     := rec.BALDEFOVD;

              --30   DESC            C
              l_txmsg.txfields ('30').defname   := 'DESC';
              l_txmsg.txfields ('30').TYPE      := 'C';
              l_txmsg.txfields ('30').VALUE     := rec.description;

             l_txmsg.txfields ('35').defname   := 'FEETYPE';
             l_txmsg.txfields ('35').TYPE      := 'C';
             l_txmsg.txfields ('35').VALUE     := '00016';

             l_txmsg.txfields ('64').defname   := 'FULLNAME';
              l_txmsg.txfields ('64').TYPE      := 'C';
              l_txmsg.txfields ('64').VALUE :=rec.benefcusname;

              l_txmsg.txfields ('65').defname   := 'ADDRESS';
              l_txmsg.txfields ('65').TYPE      := 'C';
              l_txmsg.txfields ('65').VALUE :=rec.address;

              l_txmsg.txfields ('67').defname   := 'IDDATE';
              l_txmsg.txfields ('67').TYPE      := 'D';
              l_txmsg.txfields ('67').VALUE :=rec.IDDATE;

              l_txmsg.txfields ('68').defname   := 'IDPLACE';
              l_txmsg.txfields ('68').TYPE      := 'C';
              l_txmsg.txfields ('68').VALUE :=rec.IDPLACE;

              l_txmsg.txfields ('69').defname   := 'LICENSE';
              l_txmsg.txfields ('69').TYPE      := 'C';
              l_txmsg.txfields ('69').VALUE     :=rec.license;

              l_txmsg.txfields ('79').defname   := 'REFID';
              l_txmsg.txfields ('79').TYPE      := 'C';
              l_txmsg.txfields ('79').VALUE     :='';

              --80   BENEFBANK       C --Ten ngan hang thu huong
              l_txmsg.txfields ('80').defname   := 'BENEFBANK';
              l_txmsg.txfields ('80').TYPE      := 'C';
              l_txmsg.txfields ('80').VALUE := rec.benefbank;
              --81   BENEFACCT       C --So tai khoan thu huong
              l_txmsg.txfields ('81').defname   := 'BENEFACCT';
              l_txmsg.txfields ('81').TYPE      := 'C';
              l_txmsg.txfields ('81').VALUE :=rec.benefacct;
              --82   BENEFCUSTNAME   C
              l_txmsg.txfields ('82').defname   := 'BENEFCUSTNAME';
              l_txmsg.txfields ('82').TYPE      := 'C';
              l_txmsg.txfields ('82').VALUE :=rec.benefcusname;
              --83   RECEIVLICENSE    C
              l_txmsg.txfields ('83').defname   := 'RECEIVLICENSE';
              l_txmsg.txfields ('83').TYPE      := 'C';
              l_txmsg.txfields ('83').VALUE :=rec.license;
              --84   CITYBANK   C
              l_txmsg.txfields ('84').defname   := 'CITYBANK';
              l_txmsg.txfields ('84').TYPE      := 'C';
              l_txmsg.txfields ('84').VALUE :=rec.br_fullname;
              --85   CITYEF    C
              l_txmsg.txfields ('85').defname   := 'CITYEF';
              l_txmsg.txfields ('85').TYPE      := 'C';
              l_txmsg.txfields ('85').VALUE :=rec.br_address;


              --88   CUSTODYCD   C
              l_txmsg.txfields ('88').defname   := 'CUSTODYCD';
              l_txmsg.txfields ('88').TYPE      := 'C';
              l_txmsg.txfields ('88').VALUE :=rec.custodycd;
              --89   CASTBAL         N
              l_txmsg.txfields ('89').defname   := 'CASTBAL';
              l_txmsg.txfields ('89').TYPE      := 'N';
              l_txmsg.txfields ('89').VALUE :=rec.BALDEFOVD;

              --90   CUSTNAME        C
              l_txmsg.txfields ('90').defname   := 'CUSTNAME';
              l_txmsg.txfields ('90').TYPE      := 'C';
              l_txmsg.txfields ('90').VALUE     := rec.benefcusname;

              --95   RECEIVIDDATE     C
              l_txmsg.txfields ('95').defname   := 'RECEIVIDDATE';
              l_txmsg.txfields ('95').TYPE      := 'D';
              l_txmsg.txfields ('95').VALUE     := rec.iddate;
              --96   RECEIVIDPLACE    C
              l_txmsg.txfields ('96').defname   := 'RECEIVIDPLACE';
              l_txmsg.txfields ('96').TYPE      := 'C';
              l_txmsg.txfields ('96').VALUE     := rec.idplace;
              --97   BANK_ORG_NO    C
              l_txmsg.txfields ('97').defname   := 'BANK_ORG_NO';
              l_txmsg.txfields ('97').TYPE      := 'C';
              l_txmsg.txfields ('97').VALUE     := rec.bank_org_no;



              BEGIN
                  IF txpks_#1101.fn_autotxprocess (l_txmsg,
                                         p_err_code,
                                         l_err_param
                        ) <> systemnums.c_success
                  THEN
                     plog.error (pkgctx,'got error 1101: ' || p_err_code );
                     ROLLBACK;
                     RETURN;
                  END IF;
              END;
              p_err_code:=0;

    end loop;

    plog.setendsection(pkgctx, 'pr_rmMSBAUTOTRANS');
  EXCEPTION
  WHEN OTHERS
   THEN
      p_err_code := errnums.C_SYSTEM_ERROR;
      plog.error (pkgctx, dbms_utility.format_error_backtrace);
      plog.error (pkgctx, SQLERRM);
      plog.setendsection (pkgctx, 'pr_rmMSBAUTOTRANS');
      RAISE errnums.E_SYSTEM_ERROR;
  END pr_rmMSBAUTOTRANS;
--end chaunh


BEGIN
  FOR i IN (SELECT * FROM tlogdebug) LOOP
    logrow.loglevel  := i.loglevel;
    logrow.log4table := i.log4table;
    logrow.log4alert := i.log4alert;
    logrow.log4trace := i.log4trace;
  END LOOP;

  pkgctx := plog.init('TXPKS_BATCH',
                      plevel => logrow.loglevel,
                      plogtable => (logrow.log4table = 'Y'),
                      palert => (logrow.log4alert = 'Y'),
                      ptrace => (logrow.log4trace = 'Y'));
END TXPKS_BATCH;


-- End of DDL Script for Package Body HOST.TXPKS_BATCH
/
