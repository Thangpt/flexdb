CREATE OR REPLACE Procedure SP_GEN_LNSCHD_EXT  Is
  L_HM   Number ;
  L_NO  Number;
  L_LEVEL Number;
  L_LOG_NML NUMBER;
  L_LOG_OVD NUMBER;
  L_OVD NUMBER;
  V_CURRDATE date;
  V_RATE1 NUMBER;
  V_RATE2 NUMBER;
  V_RATE3 NUMBER;
  L_LNID  VARCHAR2(100);
  v_acctno VARCHAR2(100);
  pkgctx   plog.log_ctx;
Begin
  V_CURRDATE:= getcurrdate;
  FOR REC IN (
      SELECT LNM.ACCTNO,CFP.*
      FROM LNMAST LNM, CFPREFERENTIAL CFP
      WHERE LNM.ACTYPE= CFP.LNTYPE
      AND LNM.TRFACCTNO= CFP.AFACCTNO
      AND V_CURRDATE BETWEEN CFP.FDATE AND CFP.TDATE
      AND CFP.STATUS ='A')
  LOOP
    v_acctno:=rec.acctno;    
    SELECT (S.TVAL-S.FVAL),s.rate1,S.RATE2,S.RATE3 , S.LNID INTO L_HM,V_RATE1,V_RATE2,V_RATE3, L_LNID FROM LNINTSTEP S WHERE S.LNID=REC.LNID AND S.LNLEVEL='1';
    L_LEVEL := 1;
    L_NO := 0;
    FOR REC_LN IN
      (SELECT lns.nml+ lns.ovd amt, lns.nml, lns.ovd, lns.autoid FROM LNSCHD LNS
      WHERE LNS.ACCTNO=REC.ACCTNO
      and lns.rlsdate BETWEEN REC.FDATE AND REC.TDATE
      and lns.nml+ lns.ovd >0
      and lns.reftype ='P'
      ORDER BY lns.rlsdate)
    LOOP
    IF REC_LN.amt > 0 THEN
      L_NO := REC_LN.amt;
      IF L_HM <= 0 THEN
        L_LEVEL := L_LEVEL + 1;
        SELECT (S.TVAL-S.FVAL), s.rate1,S.RATE2,S.RATE3 INTO L_HM,V_RATE1,V_RATE2,V_RATE3 FROM LNINTSTEP S WHERE S.LNID=REC.LNID AND S.LNLEVEL=L_LEVEL;
      ELSE
        L_LOG_NML := LEAST(L_HM , L_NO);
        L_HM  := L_HM - L_LOG_NML;
        WHIlE  L_NO > 0 AND L_LOG_NML >0
          LOOP
          INSERT INTO LNSCHDEXT
            (ID,AUTOID, ACCTNO, DUENO, RLSDATE, DUEDATE, OVERDUEDATE, ACRDATE, OVDACRDATE, PAIDDATE, REFTYPE, NML, OVD, PAID, DUESTS, PDUESTS, INTNMLACR, FEE, DUE, INTOVDDUEDATE, INTDUE, INTOVD, INTOVDPRIN, INTPAID, FEEDUE, FEEOVD, FEEPAID, FEEPAID2, RATE1, RATE2, RATE3, CFRATE1, CFRATE2, CFRATE3, FEEINTNMLACR, FEEINTOVDACR, FEEINTNMLOVD, FEEINTDUE, FEEINTPREPAID, FEEINTPAID, NMLFEEINT, OVDFEEINT, PAIDFEEINT, FEEINTNML, FEEINTOVD, REFAUTOID, INTNMLACRBANK, ISPAYBANK, REFOPNAUTOID, MINTERMDATE, TDATE,LNID,LNLEVEL)

           select LNSCHDEXT_SEQ.NEXTVAL, AUTOID, ACCTNO, DUENO, RLSDATE, DUEDATE, OVERDUEDATE, ACRDATE, OVDACRDATE, PAIDDATE, REFTYPE,
            case when REC_LN.NML > 0 then L_LOG_NML else 0 end NML,
            case when REC_LN.OVD > 0 then L_LOG_NML else 0 end OVD,
           PAID, DUESTS, PDUESTS, INTNMLACR, FEE, DUE, INTOVDDUEDATE, INTDUE, INTOVD, INTOVDPRIN, INTPAID, FEEDUE, FEEOVD, FEEPAID, FEEPAID2,V_RATE1,V_RATE2,V_RATE3, CFRATE1, CFRATE2, CFRATE3, FEEINTNMLACR, FEEINTOVDACR, FEEINTNMLOVD, FEEINTDUE, FEEINTPREPAID, FEEINTPAID, NMLFEEINT, OVDFEEINT, PAIDFEEINT, FEEINTNML, FEEINTOVD, REFAUTOID, INTNMLACRBANK, ISPAYBANK, REFOPNAUTOID, MINTERMDATE, v_currdate,L_LNID, L_LEVEL
           from lnschd where autoid = rec_ln.autoid;
          --
          L_NO := L_NO - L_LOG_NML;
          IF L_HM =0 THEN
            L_LEVEL := L_LEVEL + 1;
            begin
            SELECT (S.TVAL-S.FVAL), s.rate1,S.RATE2,S.RATE3 INTO L_HM,V_RATE1,V_RATE2,V_RATE3 FROM LNINTSTEP S WHERE S.LNID=REC.LNID AND S.LNLEVEL=L_LEVEL;
            EXCEPTION WHEN OTHERS THEN
            SELECT 9999999999999, s.rate1,S.RATE2,S.RATE3 INTO L_HM,V_RATE1,V_RATE2,V_RATE3 FROM LNINTSTEP S WHERE S.LNID=REC.LNID AND S.LNLEVEL=L_LEVEL - 1;
            end;
            L_LOG_NML := LEAST(L_HM , L_NO);
            L_HM := L_HM - L_LOG_NML;

          END IF;
          END LOOP;
         END IF;
     END IF;
     ----

    END LOOP;
  END LOOP;
  COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
     plog.error (pkgctx, 'SP_GEN_LNSCHD_EXT' || v_acctno);
     plog.error (pkgctx, SQLERRM || dbms_utility.format_error_backtrace);
     RETURN;
End SP_GEN_LNSCHD_EXT;
/
